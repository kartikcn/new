{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { Craftsperson } from '../../../craftsperson/model/craftsperson.model';\nimport { Team } from '../../../team/model/team.model';\nimport { WrStatusCardsComponent } from '../wr-status-cards/wr-status-cards.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"../../services/sla-request-parameters.service\";\nimport * as i4 from \"../../../craftsperson/services/craftsperson.service\";\nimport * as i5 from \"../../../team/services/team.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"primeng/api\";\nimport * as i9 from \"primeng/calendar\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/dialog\";\nimport * as i12 from \"primeng/confirmdialog\";\nimport * as i13 from \"primeng/checkbox\";\nimport * as i14 from \"primeng/inputswitch\";\nimport * as i15 from \"../../../../../directive/directive/two-digit-decimal-number\";\nimport * as i16 from \"../../../../../directive/directive/positive-integer.directive\";\nfunction AddSlaResponseComponent_tr_18_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 60);\n    i0.ɵɵtext(1, \" Day start can not be greater than day end. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSlaResponseComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtemplate(2, AddSlaResponseComponent_tr_18_label_2_Template, 2, 0, \"label\", 59);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.slaResponseFormPanel.controls[\"dayStartTime\"] == null ? null : ctx_r0.slaResponseFormPanel.controls[\"dayStartTime\"].errors) && !(ctx_r0.slaResponseFormPanel.controls[\"dayStartTime\"] == null ? null : ctx_r0.slaResponseFormPanel.controls[\"dayStartTime\"].errors.required));\n  }\n}\nfunction AddSlaResponseComponent_ng_template_118_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 67);\n    i0.ɵɵlistener(\"click\", function AddSlaResponseComponent_ng_template_118_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.handleCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSlaResponseComponent_ng_template_118_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 68);\n    i0.ɵɵlistener(\"click\", function AddSlaResponseComponent_ng_template_118_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.clickDisplayWarningYes());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSlaResponseComponent_ng_template_118_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 69);\n    i0.ɵɵlistener(\"click\", function AddSlaResponseComponent_ng_template_118_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.clickDisplayWarningNo());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSlaResponseComponent_ng_template_118_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"div\", 62)(4, \"div\", 63);\n    i0.ɵɵtemplate(5, AddSlaResponseComponent_ng_template_118_button_5_Template, 1, 0, \"button\", 64);\n    i0.ɵɵtemplate(6, AddSlaResponseComponent_ng_template_118_button_6_Template, 1, 0, \"button\", 65);\n    i0.ɵɵtemplate(7, AddSlaResponseComponent_ng_template_118_button_7_Template, 1, 0, \"button\", 66);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.displayWarningMsg);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayWarningNo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayWarningYes);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.displayWarningYes);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"25vw\"\n  };\n};\nexport let AddSlaResponseComponent = /*#__PURE__*/(() => {\n  class AddSlaResponseComponent {\n    constructor(formBuilder, enumsrv, slaReqSrv, technicianService, teamService) {\n      this.formBuilder = formBuilder;\n      this.enumsrv = enumsrv;\n      this.slaReqSrv = slaReqSrv;\n      this.technicianService = technicianService;\n      this.teamService = teamService;\n      this.subscriptions = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumPriority = [];\n      this.selectedDays = [];\n      this.previousPriorities = [];\n      this.wrStatus = [];\n      this.stepsData = [];\n      this.slaStepsData = [];\n      this.enumIsDefault = [];\n      this.enumAutoIssue = [];\n      this.enumAutoApproval = [];\n      this.idForAutoIssueYes = 0;\n      this.idForAutoApprovalYes = 0;\n      this.allowOnWorkOnHolidays = [{\n        label: 'Yes',\n        value: 1\n      }, {\n        label: 'No',\n        value: 0\n      }];\n      this.displayStepsScreen = false;\n      this.displayWarningYes = false;\n      this.displayWarningNo = false;\n      this.dataBySlaRequestId = [];\n      this.displayWarningMsg = '';\n      this.enumNotifyRequestor = [];\n      this.makeReadOnly = true;\n      this.autoAproveReadOnly = false;\n      this.technicianData = [];\n      this.teamsHavingtechnician = [];\n      this.notifyAutoApprove = new EventEmitter();\n      this.notifyAutoIssue = new EventEmitter();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.slaResponseFormPanel = this.formBuilder.group({\n        slaRequestParametersId: [''],\n        slaResponseParametersId: [''],\n        timeToResponseDays: [null],\n        timeToResponseHours: [null],\n        timeToCompleteDays: [null],\n        timeToCompleteHours: [null],\n        priority: [''],\n        canWorkOnHoliday: [''],\n        workingDays: [''],\n        dayStartTime: ['', [Validators.required, this.checkTimeValidator()]],\n        dayEndTime: ['', [Validators.required, this.checkTimeValidator()]],\n        sun: [''],\n        mon: [''],\n        tue: [''],\n        wed: [''],\n        thus: [''],\n        fri: [''],\n        sat: [''],\n        isDefault: [],\n        autoIssue: [],\n        autoApproval: [],\n        notifyRequestor: [],\n        technicianId: [null],\n        teamId: [null]\n      });\n      this.stepsForm = this.formBuilder.group({\n        stepId: [null, [Validators.required]]\n      });\n      this.subscriptions.push(this.slaResponseFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n      // this.loadWrStatus();\n      // this.loadWrSteps();\n    }\n\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumClonedList = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase());\n        this.enumIsDefault = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'is_default'.toLocaleUpperCase());\n        this.enumIsDefault = this.enumIsDefault.map(t => {\n          return {\n            ...t,\n            disabled: false\n          };\n        });\n        this.enumIsDefault.forEach(t => {\n          if (t.enumValue === \"Yes\") {\n            this.enumIsDefaultYes = t.enumKey;\n          } else {\n            this.enumIsDefaultNo = t.enumKey;\n          }\n        });\n        this.enumAutoIssue = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'auto_issue'.toLocaleUpperCase());\n        this.enumAutoIssue = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'auto_issue'.toLocaleUpperCase());\n        this.enumAutoIssue.forEach(t => {\n          if (t.enumValue === \"Yes\") {\n            this.idForAutoIssueYes = t.enumKey;\n          }\n        });\n        this.enumAutoApproval = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'auto_approval'.toLocaleUpperCase());\n        this.enumAutoApproval.forEach(t => {\n          if (t.enumValue === \"Yes\") {\n            this.idForAutoApprovalYes = t.enumKey;\n          }\n        });\n        this.enumNotifyRequestor = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'notify_requestor'.toLocaleUpperCase());\n      }, error => {});\n    }\n    loadWrStatus() {\n      this.slaReqSrv.getAllWrStatus().subscribe(res => {\n        this.wrStatus = res;\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const slaDetails = {\n        slaRequestParametersId: this.slaResponseFormPanel.controls.slaRequestParametersId.value,\n        slaResponseParametersId: this.slaResponseFormPanel.controls.slaResponseParametersId.value,\n        timeToComplete: this.slaResponseFormPanel.controls.timeToComplete.value,\n        timeToResponseDays: this.slaResponseFormPanel.controls.timeToResponseDays.value,\n        timeToResponseHours: this.slaResponseFormPanel.controls.timeToResponseHours.value,\n        timeToCompleteDays: this.slaResponseFormPanel.controls.timeToCompleteDays.value,\n        timeToCompleteHours: this.slaResponseFormPanel.controls.timeToCompleteHours.value,\n        priority: this.slaResponseFormPanel.controls.priority.value,\n        canWorkOnHoliday: this.slaResponseFormPanel.controls.canWorkOnHoliday.value,\n        workingDays: this.slaResponseFormPanel.controls.workingDays.value,\n        dayStartTime: this.slaResponseFormPanel.controls.dayStartTime.value,\n        dayEndTime: this.slaResponseFormPanel.controls.dayEndTime.value,\n        isDefault: this.slaResponseFormPanel.controls.isDefault.value,\n        autoIssue: this.slaResponseFormPanel.controls.autoIssue.value,\n        autoApproval: this.slaResponseFormPanel.controls.autoApproval.value,\n        notifyRequestor: this.slaResponseFormPanel.controls.notifyRequestor.value,\n        technicianId: this.slaResponseFormPanel.controls.technicianId.value,\n        teamId: this.slaResponseFormPanel.controls.teamId.value\n      };\n      return slaDetails;\n    }\n    set value(value) {\n      if (value.autoIssue && value.autoIssue === this.idForAutoIssueYes && this.idForAutoIssueYes) {\n        this.autoAproveReadOnly = true;\n        this.makeReadOnly = false;\n        this.loadAllTechnicians();\n        this.loadTeamsHavingTechnicians();\n      } else {\n        this.autoAproveReadOnly = false;\n        this.makeReadOnly = true;\n      }\n      setTimeout(() => {\n        this.slaResponseFormPanel.patchValue({\n          slaRequestParametersId: value.slaRequestParametersId,\n          slaResponseParametersId: value.slaResponseParametersId,\n          timeToResponseDays: value.timeToResponseDays,\n          timeToResponseHours: value.timeToResponseHours,\n          timeToCompleteDays: value.timeToCompleteDays,\n          timeToCompleteHours: value.timeToCompleteHours,\n          priority: value.priority,\n          canWorkOnHoliday: value.canWorkOnHoliday === 1 ? true : false,\n          workingDays: value.workingDays,\n          dayStartTime: this.convertToTime(value.dayStartTime),\n          dayEndTime: this.convertToTime(value.dayEndTime),\n          isDefault: value.isDefault.toLocaleUpperCase() === 'Yes'.toLocaleUpperCase() ? true : false,\n          autoIssue: value.autoIssue.toLocaleUpperCase() === 'Yes'.toLocaleUpperCase() ? true : false,\n          autoApproval: value.autoApproval.toLocaleUpperCase() === 'Yes'.toLocaleUpperCase() ? true : false,\n          notifyRequestor: value.notifyRequestor.toLocaleUpperCase() === 'Yes'.toLocaleUpperCase() ? true : false,\n          technicianId: value.technicianId,\n          teamId: value.teamId\n        });\n        if (value.workingDays != null) {\n          this.setCheckBoxValues(value.workingDays, value.canWorkOnHoliday);\n        } else {\n          this.setCheckBoxValues(\"0,0,0,0,0,0,0\", '0');\n        }\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    convertToTime(value) {\n      if (value != null) {\n        var currDate = new Date();\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        currDate.setHours(data[0]);\n        currDate.setMinutes(data[1]);\n        return currDate;\n      } else {\n        return null;\n      }\n    }\n    setCheckBoxValues(data, allowOnWork) {\n      var checkBoxValue = data.split(',');\n      setTimeout(() => {\n        this.slaResponseFormPanel.patchValue({\n          sun: checkBoxValue[0] == '1' ? true : false,\n          mon: checkBoxValue[1] == '1' ? true : false,\n          tue: checkBoxValue[2] == '1' ? true : false,\n          wed: checkBoxValue[3] == '1' ? true : false,\n          thus: checkBoxValue[4] == '1' ? true : false,\n          fri: checkBoxValue[5] == '1' ? true : false,\n          sat: checkBoxValue[6] == '1' ? true : false\n        });\n      });\n    }\n    checkTimeValidator() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value !== \"\") {\n          this.slaResponseFormPanel.controls['dayStartTime'].setErrors(null);\n          this.slaResponseFormPanel.clearAsyncValidators();\n          this.slaResponseFormPanel.updateValueAndValidity();\n          var startTime = this.slaResponseFormPanel.controls['dayStartTime'].value;\n          var endTime = this.slaResponseFormPanel.controls['dayEndTime'].value;\n          if (startTime != null && endTime != null) {\n            if (startTime > endTime) {\n              this.slaResponseFormPanel.controls['dayStartTime'].setErrors({\n                'incorrect': true\n              });\n              this.slaResponseFormPanel.updateValueAndValidity();\n              return {\n                'incorrect': true\n              };\n            } else {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.slaResponseFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.slaResponseFormPanel.valid ? null : {\n        slaResponseFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    changeAutoIssue(event) {\n      if (event.checked === true) {\n        this.makeReadOnly = false;\n        this.autoAproveReadOnly = true;\n        this.loadAllTechnicians();\n        this.loadTeamsHavingTechnicians();\n        setTimeout(() => {\n          this.slaResponseFormPanel.patchValue({\n            autoApproval: true\n          });\n        });\n      } else {\n        this.makeReadOnly = true;\n        this.autoAproveReadOnly = false;\n        setTimeout(() => {\n          this.slaResponseFormPanel.patchValue({\n            teamId: null,\n            technicianId: null\n          });\n        });\n      }\n      this.callAutoIssueParent(event);\n    }\n    checkAutoApprove(event) {\n      this.callAutoApproveParent(event);\n    }\n    getEnumValueById(id) {\n      return this.enumIsDefault.find(t => t.id === id)?.enumValue;\n    }\n    getIsDefaultEnumIdByValue(value) {\n      return this.enumIsDefault.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    getNotifyRequestorById(id) {\n      return this.enumNotifyRequestor.find(t => t.id === id)?.enumValue;\n    }\n    getAutoIssueById(id) {\n      return this.enumAutoIssue.find(t => t.id === id)?.enumValue;\n    }\n    getAutoApprovalById(id) {\n      return this.enumAutoApproval.find(t => t.id === id)?.enumValue;\n    }\n    onClickIsDefault(event) {\n      this.slaReqSrv.getAllSLAResponseBySlaRequestId(this.slaResponseFormPanel.value.slaRequestParametersId).subscribe(res => {\n        if (res) {\n          this.dataBySlaRequestId = res;\n        }\n        setTimeout(() => {\n          if (event.checked === true) {\n            const isDefaultYes = this.dataBySlaRequestId.some(eachRecord => eachRecord.slaResponseParametersId === this.slaResponseFormPanel.value.slaResponseParametersId && eachRecord.isDefault === this.slaResponseFormPanel.value.isDefault);\n            if (!isDefaultYes) {\n              this.checkAnyDefaultPriorityByYes(res, this.slaResponseFormPanel.value.isDefault);\n            }\n          } else {\n            let isDefaultNoData = false;\n            const data = this.dataBySlaRequestId.filter(each => each.slaResponseParametersId !== this.slaResponseFormPanel.controls.slaResponseParametersId.value);\n            if (data) {\n              isDefaultNoData = data.some(eachRecord => this.getEnumValueById(eachRecord.isDefault)?.toLocaleUpperCase() === 'Yes'.toLocaleUpperCase());\n              if (!isDefaultNoData) {\n                this.displayWarningNo = true;\n                this.displayWarningMsg = \"At least one priority should be set as the default.\";\n                setTimeout(() => {\n                  this.slaResponseFormPanel.patchValue({\n                    isDefault: false\n                  });\n                });\n              }\n            }\n          }\n        });\n      });\n    }\n    checkAnyDefaultPriorityByYes(res, isDefaultYes) {\n      let isDefaultCheck;\n      if (isDefaultYes) {\n        isDefaultCheck = this.getIsDefaultEnumIdByValue('Yes');\n      } else {\n        isDefaultCheck = this.getIsDefaultEnumIdByValue('No');\n      }\n      const data = res.filter(eachResponse => eachResponse.isDefault === isDefaultCheck);\n      if (data.length > 0) {\n        this.displayWarningYes = true;\n        this.displayWarningMsg = \"Would you like to proceed? Note that one priority has already been set as the default\";\n      }\n    }\n    clickDisplayWarningYes() {\n      if (this.displayWarningYes) {\n        setTimeout(() => {\n          this.slaResponseFormPanel.patchValue({\n            isDefault: true\n          });\n        });\n        this.displayWarningYes = false;\n      } else if (this.displayWarningNo) {\n        setTimeout(() => {\n          this.slaResponseFormPanel.patchValue({\n            isDefault: false\n          });\n        });\n        this.displayWarningNo = false;\n        this.displayWarningYes = false;\n      }\n    }\n    clickDisplayWarningNo() {\n      if (this.displayWarningYes) {\n        this.displayWarningYes = false;\n        this.displayWarningNo = false;\n        setTimeout(() => {\n          this.slaResponseFormPanel.patchValue({\n            isDefault: false\n          });\n        });\n      } else if (this.displayWarningNo) {\n        this.displayWarningYes = false;\n        this.displayWarningNo = false;\n      }\n    }\n    handleCancel() {\n      setTimeout(() => {\n        this.slaResponseFormPanel.patchValue({\n          isDefault: true\n        });\n      });\n      this.displayWarningNo = false;\n      this.displayWarningYes = false;\n    }\n    loadAllTechnicians() {\n      this.technicianService.getAllCraftsperson().subscribe(res => {\n        if (res) {\n          this.technicianData = res;\n          this.technicianData.unshift(new Craftsperson(null, \"Make a selection\", \"\", \"\", 0, 0, 0, \"\", 0, 0, 0, 0, 0, \"\"));\n        } else {\n          this.technicianData = [];\n        }\n      });\n    }\n    loadTeamsHavingTechnicians() {\n      this.teamService.getTeamsHavingTechnician().subscribe(res => {\n        if (res.length > 0) {\n          this.teamsHavingtechnician = res;\n          this.teamsHavingtechnician.unshift(new Team(null, '', '', 'Make a selection'));\n        } else {\n          this.teamsHavingtechnician = [];\n        }\n      });\n    }\n    onSelectTechnician(event) {\n      if (event.cfId !== null && event.cfId !== '') {\n        this.slaResponseFormPanel.patchValue({\n          teamId: null\n        });\n      }\n    }\n    onSelectTeam(event) {\n      if (event.teamId !== null && event.teamId.toLocaleUpperCase() !== 'Make a selection'.toLocaleUpperCase() && event.teamId !== '') {\n        this.slaResponseFormPanel.patchValue({\n          technicianId: null\n        });\n      }\n    }\n    callAutoApproveParent(event) {\n      this.notifyAutoApprove.emit(event); // Emit the event with the data\n    }\n\n    callAutoIssueParent(event) {\n      this.notifyAutoIssue.emit(event);\n    }\n    static #_ = this.ɵfac = function AddSlaResponseComponent_Factory(t) {\n      return new (t || AddSlaResponseComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.SLARequestServices), i0.ɵɵdirectiveInject(i4.CraftspersonService), i0.ɵɵdirectiveInject(i5.TeamService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddSlaResponseComponent,\n      selectors: [[\"app-add-sla-response\"]],\n      viewQuery: function AddSlaResponseComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(WrStatusCardsComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrStatusCardspanel = _t.first);\n        }\n      },\n      inputs: {\n        isNew: \"isNew\",\n        enableAutoApprove: \"enableAutoApprove\"\n      },\n      outputs: {\n        notifyAutoApprove: \"notifyAutoApprove\",\n        notifyAutoIssue: \"notifyAutoIssue\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddSlaResponseComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddSlaResponseComponent),\n        multi: true\n      }])],\n      decls: 119,\n      vars: 25,\n      consts: [[\"nz-form\", \"\", 3, \"formGroup\"], [1, \"first-table\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"p-fluid\"], [1, \"p-field\", 2, \"width\", \"154px\"], [1, \"form-field-lable\", \"control-label\"], [\"name\", \"dayStartTime\", \"formControlName\", \"dayStartTime\", 3, \"timeOnly\"], [\"name\", \"dayEndTime\", \"formControlName\", \"dayEndTime\", 3, \"timeOnly\"], [4, \"ngIf\"], [\"colspan\", \"2\"], [\"width\", \"100%\", 2, \"margin-top\", \"5px\"], [\"width\", \"50%\"], [1, \"form-field-lable\", 2, \"width\", \"90px\", \"margin-left\", \"3px\"], [2, \"display\", \"flex\", \"align-items\", \"center\"], [\"name\", \"timeToResponseDays\", \"formControlName\", \"timeToResponseDays\", \"maxlength\", \"9\", \"appPositiveInteger\", \"\", 1, \"form-control\", 2, \"height\", \"24px\", \"width\", \"60px\", \"margin-left\", \"5px\"], [1, \"form-field-lable\", 2, \"margin-left\", \"5px\"], [\"name\", \"timeToResponseHours\", \"formControlName\", \"timeToResponseHours\", \"maxlength\", \"9\", \"appPositiveInteger\", \"\", \"TwoDigitDecimalNumber\", \"\", 1, \"form-control\", 2, \"height\", \"24px\", \"width\", \"60px\", \"margin-left\", \"5px\"], [1, \"form-field-lable\", 2, \"width\", \"95px\", \"margin-left\", \"3px\"], [\"name\", \"timeToCompleteDays\", \"formControlName\", \"timeToCompleteDays\", \"maxlength\", \"9\", \"appPositiveInteger\", \"\", 1, \"form-control\", 2, \"height\", \"24px\", \"width\", \"60px\", \"margin-left\", \"5px\"], [\"name\", \"timeToCompleteHours\", \"formControlName\", \"timeToCompleteHours\", \"maxlength\", \"9\", \"appPositiveInteger\", \"\", \"TwoDigitDecimalNumber\", \"\", 1, \"form-control\", 2, \"height\", \"24px\", \"width\", \"60px\", \"margin-left\", \"5px\"], [2, \"display\", \"flex\", \"margin-top\", \"5px\"], [1, \"switch-table\", 2, \"width\", \"100%\"], [1, \"input-label-custom\", \"switch-container\"], [1, \"form-field-lable\", 2, \"width\", \"100px\"], [\"formControlName\", \"isDefault\", 3, \"onChange\"], [\"formControlName\", \"notifyRequestor\"], [\"formControlName\", \"autoApproval\", 3, \"disabled\", \"onChange\"], [\"formControlName\", \"autoIssue\", 3, \"onChange\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"name\", \"technicianId\", \"formControlName\", \"technicianId\", \"bindLabel\", \"name\", \"bindValue\", \"cfId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [\"appendTo\", \"body\", \"name\", \"teamId\", \"formControlName\", \"teamId\", \"bindLabel\", \"teamCode\", \"bindValue\", \"teamId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [1, \"holidays-table\", 2, \"width\", \"100%\", \"margin-left\", \"10px\"], [1, \"holidays-container\"], [1, \"switch-container\"], [1, \"form-field-lable\", 2, \"width\", \"150px\"], [\"formControlName\", \"canWorkOnHoliday\"], [1, \"form-field-lable\", 2, \"padding\", \"6px 0 6px 0\"], [2, \"display\", \"flex\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [\"width\", \"14%\", 2, \"display\", \"flex\", \"align-items\", \"center\", \"padding-bottom\", \"12px\"], [\"name\", \"mon\", \"formControlName\", \"mon\", \"inputId\", \"Mon\", 3, \"binary\"], [\"for\", \"Mon\", 1, \"form-field-lable\"], [\"name\", \"tue\", \"formControlName\", \"tue\", \"inputId\", \"Tue\", 3, \"binary\"], [\"for\", \"Tue\", 1, \"form-field-lable\"], [\"name\", \"wed\", \"formControlName\", \"wed\", \"inputId\", \"Wed\", 3, \"binary\"], [\"for\", \"Wed\", 1, \"form-field-lable\"], [\"name\", \"thus\", \"formControlName\", \"thus\", \"inputId\", \"Thus\", 3, \"binary\"], [\"for\", \"Thus\", 1, \"form-field-lable\"], [\"name\", \"fri\", \"formControlName\", \"fri\", \"inputId\", \"Fri\", 3, \"binary\"], [\"for\", \"Fri\", 1, \"form-field-lable\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", \"margin-left\", \"40px\"], [\"name\", \"sat\", \"formControlName\", \"sat\", \"inputId\", \"Sat\", 3, \"binary\"], [\"for\", \"sat\", 1, \"form-field-lable\"], [\"name\", \"sun\", \"formControlName\", \"sun\", \"inputId\", \"sun\", 3, \"binary\"], [\"for\", \"sun\", 1, \"form-field-lable\"], [\"key\", \"warning\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"header\", \"Confirmation\", 3, \"visible\", \"closable\", \"visibleChange\"], [\"pTemplate\", \"caption\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [1, \"m-2\"], [1, \"d-flex\", \"flex-row\", \"justify-content-end\"], [2, \"display\", \"flex\", \"padding-left\", \"6px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", \"class\", \"p-button-primary p-button-sm\", \"style\", \"margin-left:8px\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Yes\", \"icon\", \"pi pi-check\", \"class\", \"p-button-primary p-button-sm\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"No\", \"class\", \"p-button-primary p-button-sm\", \"style\", \"margin-left:8px\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Yes\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", \"p-button-sm\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"No\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"]],\n      template: function AddSlaResponseComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\")(5, \"div\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"Day Start\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"p-calendar\", 7);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(11, \"td\")(12, \"div\", 3)(13, \"div\", 4)(14, \"div\", 5)(15, \"label\", 6);\n          i0.ɵɵtext(16, \"Day End\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"p-calendar\", 8);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(18, AddSlaResponseComponent_tr_18_Template, 3, 1, \"tr\", 9);\n          i0.ɵɵelementStart(19, \"tr\")(20, \"td\", 10)(21, \"table\", 11)(22, \"tr\", 2)(23, \"td\", 12)(24, \"label\", 13);\n          i0.ɵɵtext(25, \"Time To Respond\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"div\", 14);\n          i0.ɵɵelement(27, \"input\", 15);\n          i0.ɵɵelementStart(28, \"label\", 16);\n          i0.ɵɵtext(29, \"Days\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(30, \"input\", 17);\n          i0.ɵɵelementStart(31, \"label\", 16);\n          i0.ɵɵtext(32, \"Hours\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(33, \"td\", 12)(34, \"label\", 18);\n          i0.ɵɵtext(35, \"Time To Complete\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"div\", 14);\n          i0.ɵɵelement(37, \"input\", 19);\n          i0.ɵɵelementStart(38, \"label\", 16);\n          i0.ɵɵtext(39, \"Days\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(40, \"input\", 20);\n          i0.ɵɵelementStart(41, \"label\", 16);\n          i0.ɵɵtext(42, \"Hours\");\n          i0.ɵɵelementEnd()()()()()()()();\n          i0.ɵɵelementStart(43, \"div\", 21)(44, \"div\", 22)(45, \"table\", 2)(46, \"tr\")(47, \"td\")(48, \"div\")(49, \"div\", 23)(50, \"label\", 24);\n          i0.ɵɵtext(51, \"Is Default\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(52, \"p-inputSwitch\", 25);\n          i0.ɵɵlistener(\"onChange\", function AddSlaResponseComponent_Template_p_inputSwitch_onChange_52_listener($event) {\n            return ctx.onClickIsDefault($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(53, \"div\", 23)(54, \"label\", 24);\n          i0.ɵɵtext(55, \"Notify Requestor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(56, \"p-inputSwitch\", 26);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(57, \"div\", 23)(58, \"label\", 24);\n          i0.ɵɵtext(59, \"Auto Approve\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(60, \"p-inputSwitch\", 27);\n          i0.ɵɵlistener(\"onChange\", function AddSlaResponseComponent_Template_p_inputSwitch_onChange_60_listener($event) {\n            return ctx.checkAutoApprove($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(61, \"div\", 23)(62, \"label\", 24);\n          i0.ɵɵtext(63, \"Auto Issue\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(64, \"p-inputSwitch\", 28);\n          i0.ɵɵlistener(\"onChange\", function AddSlaResponseComponent_Template_p_inputSwitch_onChange_64_listener($event) {\n            return ctx.changeAutoIssue($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(65, \"div\", 3)(66, \"label\", 29);\n          i0.ɵɵtext(67, \"Technician\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(68, \"ng-select\", 30);\n          i0.ɵɵlistener(\"change\", function AddSlaResponseComponent_Template_ng_select_change_68_listener($event) {\n            return ctx.onSelectTechnician($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(69, \"div\", 3)(70, \"label\", 29);\n          i0.ɵɵtext(71, \"Team\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(72, \"ng-select\", 31);\n          i0.ɵɵlistener(\"change\", function AddSlaResponseComponent_Template_ng_select_change_72_listener($event) {\n            return ctx.onSelectTeam($event);\n          });\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(73, \"div\", 32)(74, \"table\", 2)(75, \"tr\")(76, \"td\")(77, \"div\", 33)(78, \"div\", 34)(79, \"label\", 35);\n          i0.ɵɵtext(80, \"Allow Work On Holiday\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(81, \"p-inputSwitch\", 36);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(82, \"label\", 37);\n          i0.ɵɵtext(83, \"Working Days\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(84, \"table\", 2)(85, \"tr\", 38)(86, \"div\", 39)(87, \"td\", 40);\n          i0.ɵɵelement(88, \"p-checkbox\", 41);\n          i0.ɵɵelementStart(89, \"label\", 42);\n          i0.ɵɵtext(90, \"\\u00A0Monday\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(91, \"td\", 40);\n          i0.ɵɵelement(92, \"p-checkbox\", 43);\n          i0.ɵɵelementStart(93, \"label\", 44);\n          i0.ɵɵtext(94, \"\\u00A0Tuesday\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(95, \"td\", 40);\n          i0.ɵɵelement(96, \"p-checkbox\", 45);\n          i0.ɵɵelementStart(97, \"label\", 46);\n          i0.ɵɵtext(98, \"\\u00A0Wednesday\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(99, \"td\", 40);\n          i0.ɵɵelement(100, \"p-checkbox\", 47);\n          i0.ɵɵelementStart(101, \"label\", 48);\n          i0.ɵɵtext(102, \"\\u00A0Thursday\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(103, \"td\", 40);\n          i0.ɵɵelement(104, \"p-checkbox\", 49);\n          i0.ɵɵelementStart(105, \"label\", 50);\n          i0.ɵɵtext(106, \"\\u00A0Friday\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(107, \"div\", 51)(108, \"td\", 40);\n          i0.ɵɵelement(109, \"p-checkbox\", 52);\n          i0.ɵɵelementStart(110, \"label\", 53);\n          i0.ɵɵtext(111, \"\\u00A0Saturday\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(112, \"td\", 40);\n          i0.ɵɵelement(113, \"p-checkbox\", 54);\n          i0.ɵɵelementStart(114, \"label\", 55);\n          i0.ɵɵtext(115, \"\\u00A0Sunday\");\n          i0.ɵɵelementEnd()()()()()()()()()()()()();\n          i0.ɵɵelement(116, \"p-confirmDialog\", 56);\n          i0.ɵɵelementStart(117, \"p-dialog\", 57);\n          i0.ɵɵlistener(\"visibleChange\", function AddSlaResponseComponent_Template_p_dialog_visibleChange_117_listener($event) {\n            return ctx.displayWarningYes || (ctx.displayWarningNo = $event);\n          });\n          i0.ɵɵtemplate(118, AddSlaResponseComponent_ng_template_118_Template, 8, 4, \"ng-template\", 58);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.slaResponseFormPanel);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"timeOnly\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"timeOnly\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.slaResponseFormPanel.controls[\"dayStartTime\"] == null ? null : ctx.slaResponseFormPanel.controls[\"dayStartTime\"].errors) && ((ctx.slaResponseFormPanel.controls[\"dayStartTime\"] == null ? null : ctx.slaResponseFormPanel.controls[\"dayStartTime\"].dirty) || (ctx.slaResponseFormPanel.controls[\"dayStartTime\"] == null ? null : ctx.slaResponseFormPanel.controls[\"dayStartTime\"].touched)));\n          i0.ɵɵadvance(42);\n          i0.ɵɵproperty(\"disabled\", ctx.autoAproveReadOnly || !ctx.enableAutoApprove);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.technicianData)(\"searchable\", true)(\"readonly\", ctx.makeReadOnly);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.teamsHavingtechnician)(\"searchable\", true)(\"readonly\", ctx.makeReadOnly);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"binary\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(24, _c0));\n          i0.ɵɵproperty(\"visible\", ctx.displayWarningYes || ctx.displayWarningNo)(\"closable\", false);\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i7.NgSelectComponent, i8.PrimeTemplate, i9.Calendar, i10.ButtonDirective, i11.Dialog, i12.ConfirmDialog, i13.Checkbox, i14.InputSwitch, i15.TwoDigitDecimalNumberDirective, i16.PositiveIntegerDirective],\n      styles: [\".switch-container[_ngcontent-%COMP%]{display:flex;align-items:center}.holidays-container[_ngcontent-%COMP%]{margin-top:4px;border:1px solid #cccdef;padding:10px}\"]\n    });\n  }\n  return AddSlaResponseComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}