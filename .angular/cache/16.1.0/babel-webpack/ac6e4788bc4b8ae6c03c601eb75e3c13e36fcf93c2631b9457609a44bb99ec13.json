{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"../../services/plan-schedule-services\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/accordion\";\nimport * as i7 from \"primeng/calendar\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/dialog\";\nimport * as i10 from \"primeng/multiselect\";\nimport * as i11 from \"primeng/toast\";\nimport * as i12 from \"primeng/confirmdialog\";\nimport * as i13 from \"primeng/checkbox\";\nimport * as i14 from \"@ng-select/ng-select\";\nimport * as i15 from \"@angular/material/dialog\";\nimport * as i16 from \"ng-zorro-antd/table\";\nimport * as i17 from \"../../../../directive/numbers-only.directive\";\nfunction PpmScheduleTypeComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 56);\n    i0.ɵɵtext(2, \"Start date should be less than end date\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PpmScheduleTypeComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 56);\n    i0.ɵɵtext(2, \"Value Can not be less than one\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0) {\n  return [a0];\n};\nfunction PpmScheduleTypeComponent_ul_57_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 57)(1, \"div\", 58)(2, \"p-checkbox\", 59);\n    i0.ɵɵlistener(\"onChange\", function PpmScheduleTypeComponent_ul_57_Template_p_checkbox_onChange_2_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.checked());\n    })(\"ngModelChange\", function PpmScheduleTypeComponent_ul_57_Template_p_checkbox_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const week_r13 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(week_r13.isSelected = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 60);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const week_r13 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formControlName\", i0.ɵɵpureFunction1(6, _c0, week_r13.dayName))(\"value\", week_r13.dayName)(\"inputId\", week_r13.dayName)(\"ngModel\", week_r13.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", week_r13.dayName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(week_r13.dayName);\n  }\n}\nfunction PpmScheduleTypeComponent_div_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 56);\n    i0.ɵɵtext(2, \"Value Can not be less than one\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PpmScheduleTypeComponent_div_103_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 56);\n    i0.ɵɵtext(2, \"Value Can not be less than one\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PpmScheduleTypeComponent_div_104_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 56);\n    i0.ɵɵtext(2, \"Provide the required information\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_113_div_32_p_accordionTab_5_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 71);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const date_r22 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind2(2, 2, date_r22, \"dd MMM yyyy\"), \" - \", i0.ɵɵpipeBind2(3, 5, date_r22, \"EEEE\"), \" \");\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_113_div_32_p_accordionTab_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-accordionTab\", 68);\n    i0.ɵɵpipe(1, \"date\");\n    i0.ɵɵelementStart(2, \"ul\", 69);\n    i0.ɵɵtemplate(3, PpmScheduleTypeComponent_ng_template_113_div_32_p_accordionTab_5_li_3_Template, 4, 8, \"li\", 70);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const obj_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(3);\n    i0.ɵɵpropertyInterpolate2(\"header\", \"\", i0.ɵɵpipeBind2(1, 3, obj_r20.month, \"MMMM yyyy\"), \" (\", obj_r20.count, \")\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r19.monthDates);\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_113_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\")(2, \"span\", 62);\n    i0.ɵɵtext(3, \"Schedule Dates for Each Month:\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p-accordion\", 66);\n    i0.ɵɵlistener(\"onOpen\", function PpmScheduleTypeComponent_ng_template_113_div_32_Template_p_accordion_onOpen_4_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onTabOpen($event));\n    })(\"onClose\", function PpmScheduleTypeComponent_ng_template_113_div_32_Template_p_accordion_onClose_4_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r25.onTabClose($event));\n    });\n    i0.ɵɵtemplate(5, PpmScheduleTypeComponent_ng_template_113_div_32_p_accordionTab_5_Template, 4, 6, \"p-accordionTab\", 67);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r17.uniqueMonthsData);\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_113_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 72);\n    i0.ɵɵtext(1, \" No schedule dates found within the selected range. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_113_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 61)(2, \"table\")(3, \"tr\")(4, \"td\")(5, \"p\")(6, \"span\", 62);\n    i0.ɵɵtext(7, \"Type:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"td\")(10, \"p\", 63)(11, \"span\", 62);\n    i0.ɵɵtext(12, \"Start Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"date\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(15, \"tr\")(16, \"td\")(17, \"p\")(18, \"span\", 62);\n    i0.ɵɵtext(19, \"Total Requests: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"td\")(22, \"p\", 63)(23, \"span\", 62);\n    i0.ɵɵtext(24, \"End Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25);\n    i0.ɵɵpipe(26, \"date\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(27, \"div\", 64)(28, \"p\")(29, \"span\", 62);\n    i0.ɵɵtext(30, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(31);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(32, PpmScheduleTypeComponent_ng_template_113_div_32_Template, 6, 1, \"div\", 18);\n    i0.ɵɵtemplate(33, PpmScheduleTypeComponent_ng_template_113_div_33_Template, 2, 0, \"div\", 65);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.selectedCard, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(14, 7, ctx_r7.scheduleDetailsForm.controls.dateStart.value, \"dd MMM yyyy\"), \"\");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r7.totalOccurence, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(26, 10, ctx_r7.scheduleDetailsForm.controls.dateEnd.value, \"dd MMM yyyy\"), \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.scheduleDetailsMsg, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.scheduleDates.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.scheduleDates.length === 0);\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_114_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 73);\n    i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_ng_template_114_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.displaySchedulePreview = false);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_116_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 74)(1, \"h3\");\n    i0.ɵɵtext(2, \"Priority Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"hr\");\n    i0.ɵɵelementStart(4, \"p\")(5, \"strong\");\n    i0.ɵɵtext(6, \"Priorities are defined on a scale from 0 to 5, with 0 being the highest priority.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8, \" The priority field is utilized to manage plan suppression. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\");\n    i0.ɵɵtext(10, \"Consider a cleaning process plan linked to the floor, and we have created two schedules for the month of January 2023:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"ul\")(12, \"li\");\n    i0.ɵɵtext(13, \"First Schedule: Daily cleaning schedule\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15, \"Second Schedule: Weekly deep cleaning schedule (every Sunday)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"h4\");\n    i0.ɵɵtext(17, \"Case 1:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"p\");\n    i0.ɵɵtext(19, \"Assigning both schedules a priority of 0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"p\");\n    i0.ɵɵtext(21, \"The system will generate requests for both schedules as follows:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"ul\")(23, \"li\");\n    i0.ɵɵtext(24, \"First Schedule - Daily cleaning schedule: Every day for the month of January 2023.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"li\");\n    i0.ɵɵtext(26, \"Second Schedule - Weekly deep cleaning schedule: Every Sunday for the month of January 2023.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"h4\");\n    i0.ɵɵtext(28, \"Case 2:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"p\");\n    i0.ɵɵtext(30, \"Setting priority 1 for the first schedule and 0 for the second schedule\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"p\");\n    i0.ɵɵtext(32, \"The system will create requests as follows:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"ul\")(34, \"li\");\n    i0.ɵɵtext(35, \"First Schedule - Daily cleaning schedule: Every day for the month of January 2023, except Sundays. Since the second schedule has a higher priority (0), it will suppress the first schedule on Sundays, preventing requests for that day.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"li\");\n    i0.ɵɵtext(37, \"Second Schedule - Weekly deep cleaning schedule: Every Sunday for the month of January 2023.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_117_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 73);\n    i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_ng_template_117_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r28.displayPriorityDetails = false);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_119_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"span\", 75);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r11.scheduleExistsMsg);\n  }\n}\nfunction PpmScheduleTypeComponent_ng_template_120_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 73);\n    i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_ng_template_120_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.displayScheduleExist = false);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 76);\n    i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_ng_template_120_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.updateScheduleDates());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function () {\n  return {\n    \"width\": \"150px\"\n  };\n};\nconst _c2 = function () {\n  return {\n    \"width\": \"200px\"\n  };\n};\nconst _c3 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nconst _c4 = function () {\n  return {\n    width: \"30vw\"\n  };\n};\nconst _c5 = function () {\n  return {\n    width: \"40vw\"\n  };\n};\nconst _c6 = function () {\n  return {\n    width: \"20vw\"\n  };\n};\nexport let PpmScheduleTypeComponent = /*#__PURE__*/(() => {\n  class PpmScheduleTypeComponent {\n    constructor(formBuilder, confirmationService, enumsrv, planScheduleService, datePipe, messageService) {\n      this.formBuilder = formBuilder;\n      this.confirmationService = confirmationService;\n      this.enumsrv = enumsrv;\n      this.planScheduleService = planScheduleService;\n      this.datePipe = datePipe;\n      this.messageService = messageService;\n      this.today = new Date();\n      this.radioValue = '';\n      this.typeOfMonthSelection = 'dayOfMonth';\n      this.weekNames = [{\n        dayName: \"Monday\",\n        isSelected: false\n      }, {\n        dayName: \"Tuesday\",\n        isSelected: false\n      }, {\n        dayName: \"Wednesday\",\n        isSelected: false\n      }, {\n        dayName: \"Thursday\",\n        isSelected: false\n      }, {\n        dayName: \"Friday\",\n        isSelected: false\n      }, {\n        dayName: \"Saturday\",\n        isSelected: false\n      }, {\n        dayName: \"Sunday\",\n        isSelected: false\n      }];\n      this.weekNums = [{\n        id: '1'\n      }, {\n        id: '2'\n      }, {\n        id: '3'\n      }, {\n        id: '4'\n      }];\n      this.weekDays = [{\n        dayName: \"Monday\"\n      }, {\n        dayName: \"Tuesday\"\n      }, {\n        dayName: \"Wednesday\"\n      }, {\n        dayName: \"Thursday\"\n      }, {\n        dayName: \"Friday\"\n      }, {\n        dayName: \"Saturday\"\n      }, {\n        dayName: \"Sunday\"\n      }];\n      this.dayOfMonth = [{\n        day: '1'\n      }, {\n        day: '2'\n      }, {\n        day: '3'\n      }, {\n        day: '4'\n      }, {\n        day: '5'\n      }, {\n        day: '6'\n      }, {\n        day: '7'\n      }, {\n        day: '8'\n      }, {\n        day: '9'\n      }, {\n        day: '10'\n      }, {\n        day: '11'\n      }, {\n        day: '12'\n      }, {\n        day: '13'\n      }, {\n        day: '14'\n      }, {\n        day: '15'\n      }, {\n        day: '16'\n      }, {\n        day: '17'\n      }, {\n        day: '18'\n      }, {\n        day: '19'\n      }, {\n        day: '20'\n      }, {\n        day: '21'\n      }, {\n        day: '22'\n      }, {\n        day: '23'\n      }, {\n        day: '24'\n      }, {\n        day: '25'\n      }, {\n        day: '26'\n      }, {\n        day: '27'\n      }, {\n        day: '28'\n      }, {\n        day: '29'\n      }, {\n        day: '30'\n      }, {\n        day: '31'\n      }];\n      this.isDayOfMonthVisible = false;\n      this.isWeekOfMonthVisible = false;\n      this.weeksArray = ['0', '0', '0', '0', '0', '0', '0'];\n      this.scheduleDetailsMsg = '';\n      this.isError = false;\n      this.weeksIncluded = [];\n      this.totalOccurence = 0;\n      this.displaySchedulePattern = false;\n      this.weekNamesString = '';\n      this.allDates = [];\n      this.errorMsg = '';\n      this.selectedCard = '';\n      this.enumList = [];\n      this.enumPlanShedData = [];\n      this.planScheduleId = 0;\n      this.scheduleDates = [];\n      this.displaySchedulePreview = false;\n      this.uniqueMonths = [];\n      this.scheduleDataList = [];\n      this.scheduleDescription = '';\n      this.priorityList = [{\n        id: '0'\n      }, {\n        id: '1'\n      }, {\n        id: '2'\n      }, {\n        id: '3'\n      }, {\n        id: '4'\n      }, {\n        id: '5'\n      }];\n      this.priorityErr = '';\n      this.displayPriorityDetails = false;\n      this.isEdit = false;\n      this.monthDates = [];\n      this.expandedIndex = null;\n      this.uniqueMonthsData = [];\n      this.displayScheduleExist = false;\n      this.scheduleExistsMsg = '';\n      this.isMsgAcptd = false;\n      this.enumIsActiveData = [];\n      this.planLocEqId = 0;\n      this.parentFun = new EventEmitter();\n      this.scheduleDetailsForm = this.formBuilder.group({\n        dateStart: [null, [Validators.required, this.checkDateValidation()]],\n        dateEnd: [null, [Validators.required, this.checkDateValidation()]],\n        noOfOccurence: [''],\n        daysFrequency: [1],\n        weeksFrequency: [1],\n        Sunday: [''],\n        Monday: [''],\n        Tuesday: [''],\n        Wednesday: [''],\n        Thursday: [''],\n        Friday: [''],\n        Saturday: [''],\n        selectedWeekNumbers: [\"\"],\n        selectedDayNumbers: [\"\"],\n        monthsFrequency: [1],\n        selectedWeekNames: [''],\n        monthsFrequency2: [1],\n        yearFrequency: [1],\n        priority: [null, [Validators.required]],\n        isActive: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    setDefaultDates(dateStart, dateEnd, priority, isActive) {\n      setTimeout(() => {\n        this.scheduleDetailsForm.patchValue({\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          priority: priority,\n          isActive: isActive\n        });\n      }, 0);\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumPlanShedData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plan_sched'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'type'.toLowerCase());\n        this.enumIsActiveData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plan_sched'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'is_active'.toLowerCase());\n        this.enumIsActiveData.unshift(new EnumList(0, '', '', 'Make a selection', null));\n      }, error => {});\n    }\n    getScheduleTypesByPlanLocEqId() {\n      this.scheduleDetailsForm.reset();\n      this.setEmptyForm();\n      this.selectedScheduleData = this.data.scheduleData;\n      if (this.selectedScheduleData) {\n        const type = this.getEnumById(this.selectedScheduleData.type);\n        this.selectedCard = type;\n        const planSchedule = this.selectedScheduleData;\n        this.planScheduleId = planSchedule.planScheduleId;\n        let dateStart = this.formatDate(planSchedule.dateStart);\n        let dateEnd = this.formatDate(planSchedule.dateEnd);\n        this.setDefaultDates(dateStart, dateEnd, planSchedule.priority, planSchedule.isActive);\n        switch (type) {\n          case \"daily\":\n            {\n              setTimeout(() => {\n                this.scheduleDetailsForm.patchValue({\n                  daysFrequency: planSchedule.freq\n                });\n              }, 0);\n              break;\n            }\n          case \"weekly\":\n            {\n              const weekDaysArr = planSchedule.weekDays.split(\",\");\n              weekDaysArr.map((value, index) => {\n                if (value === \"1\") {\n                  this.weekNames[index].isSelected = true;\n                }\n              });\n              setTimeout(() => {\n                this.scheduleDetailsForm.patchValue({\n                  weeksFrequency: planSchedule.freq\n                });\n              }, 0);\n              break;\n            }\n          case \"monthly\":\n            {\n              if (planSchedule.monthDays.length > 0) {\n                //check for month days \n                this.typeOfMonthSelection = 'dayOfMonth';\n                this.isDayOfMonthVisible = true;\n                this.isWeekOfMonthVisible = false;\n                const daysArr = planSchedule.monthDays.split(\",\").sort();\n                let selectedDays = [];\n                daysArr.map(d => {\n                  selectedDays.push({\n                    day: d\n                  });\n                });\n                setTimeout(() => {\n                  this.scheduleDetailsForm.patchValue({\n                    selectedDayNumbers: selectedDays,\n                    monthsFrequency: planSchedule.freq\n                  });\n                }, 0);\n              } else {\n                this.typeOfMonthSelection = 'weekOfMonth';\n                this.isWeekOfMonthVisible = true;\n                this.isDayOfMonthVisible = false;\n                const weekDaysArr = planSchedule.weekDays.split(\",\");\n                const selectedWeekNamesArr = weekDaysArr.reduce((acc, value, index) => {\n                  if (value === \"1\") {\n                    acc.push({\n                      dayName: this.weekDays[index].dayName\n                    });\n                  }\n                  return acc;\n                }, []);\n                const weeksArr = planSchedule.weeks.split(\",\").sort();\n                let selectedWeeks = [];\n                weeksArr.map(w => {\n                  selectedWeeks.push({\n                    id: w\n                  });\n                });\n                setTimeout(() => {\n                  this.scheduleDetailsForm.patchValue({\n                    selectedWeekNumbers: selectedWeeks,\n                    monthsFrequency2: planSchedule.freq,\n                    selectedWeekNames: selectedWeekNamesArr\n                  });\n                }, 0);\n              }\n              break;\n            }\n          case \"annually\":\n            {\n              setTimeout(() => {\n                this.scheduleDetailsForm.patchValue({\n                  yearFrequency: planSchedule.freq\n                });\n              }, 0);\n              break;\n            }\n        }\n      } else {\n        var month = new Date().getMonth() + 6;\n        this.maxDate = new Date(new Date().setMonth(month));\n        var date = new Date();\n        var nextDate = new Date(new Date().setDate(date.getDate() + 1));\n        this.setDefaultDates(date, nextDate, 0, null); //need to be dynamic in edit case\n        this.planLocEqId = this.data.planLocEqId;\n        this.selectedCard = \"daily\";\n      }\n    }\n    getEnumById(enumKey) {\n      return enumKey ? this.enumPlanShedData.find(t => t.enumKey == enumKey) != null ? this.enumPlanShedData.find(t => t.enumKey == enumKey)?.enumValue : '' : '';\n    }\n    getIdByEnum(enumValue) {\n      return enumValue ? this.enumPlanShedData.find(t => t.enumValue == enumValue) != null ? this.enumPlanShedData.find(t => t.enumValue == enumValue)?.enumKey : '' : '';\n    }\n    saveRecurrence() {\n      const bool = this.getScheduleDetails();\n      if (bool) {\n        if (this.isEdit && this.selectedScheduleData.description.slice(0, -1) != this.scheduleDescription.slice(0, -1) && !this.isMsgAcptd) {\n          this.planScheduleService.checkIsScheduleGenerated(this.selectedScheduleData.planScheduleId).subscribe(res => {\n            if (res.text) {\n              this.confirmUpdate();\n            } else {\n              this.maxScheduledDate = res;\n              this.scheduleExistsMsg = `The Requests have already been generated for this schedule until ${this.datePipe.transform(new Date(res), \"dd MMM yyyy\")}.\n            Any modifications to the schedule will take effect starting from the ${this.datePipe.transform(new Date(res).setDate(new Date(res).getDate() + 1), \"dd MMM yyyy\")}\n            Would you like to proceed with these changes?`;\n              this.displayScheduleExist = true;\n            }\n          });\n        } else if (this.isEdit && this.selectedScheduleData.description == this.scheduleDescription) {\n          this.scheduleDetailsForm.reset();\n          this.setEmptyForm();\n          this.updateParent('save');\n        } else {\n          this.confirmUpdate();\n        }\n      }\n    }\n    onSelectMonthlyType(event) {\n      if (event.currentTarget.id == 'dayOfMonth') {\n        this.isError = false;\n        this.isDayOfMonthVisible = true;\n        this.isWeekOfMonthVisible = false;\n        this.typeOfMonthSelection = 'dayOfMonth';\n        setTimeout(() => {\n          this.scheduleDetailsForm.patchValue({\n            monthsFrequency2: 1,\n            selectedWeekNames: '',\n            selectedWeekNumbers: ''\n          });\n        }, 10);\n      } else if (event.currentTarget.id == 'weekOfMonth_months') {\n        this.isError = false;\n        this.isWeekOfMonthVisible = true;\n        this.isDayOfMonthVisible = false;\n        this.typeOfMonthSelection = 'weekOfMonth';\n        setTimeout(() => {\n          this.scheduleDetailsForm.patchValue({\n            monthsFrequency: 1,\n            selectedDayNumbers: ''\n          });\n        }, 10);\n      }\n    }\n    confirmDialog() {\n      this.confirmationService.confirm({\n        message: UtilConstant.CANCEL_Msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        key: 'wrGrid',\n        accept: () => {\n          this.scheduleDetailsForm.reset();\n          this.setEmptyForm();\n          this.updateParent('cancel');\n        }\n      });\n    }\n    onContinue() {\n      this.displaySchedulePattern = false;\n      var startDate = this.datePipe.transform(this.scheduleDetailsForm.controls.dateStart.value, \"yyyy-MM-dd\");\n      var endDate = this.datePipe.transform(this.scheduleDetailsForm.controls.dateEnd.value, \"yyyy-MM-dd\");\n      let planScheduleData = {\n        planScheduleId: this.planScheduleId,\n        planLocEqId: this.planLocEqId,\n        type: this.getIdByEnum(this.scheduleDetails.type),\n        freq: this.scheduleDetails.frequency,\n        iterations: this.totalOccurence,\n        weekDays: this.scheduleDetails.weekDays,\n        weeks: this.scheduleDetails.weeks,\n        monthDays: this.scheduleDetails.monthDays,\n        dateStart: startDate,\n        dateEnd: endDate,\n        description: this.scheduleDescription,\n        priority: this.scheduleDetails.priority,\n        scheduleDates: this.scheduleDates,\n        isEdit: this.isEdit,\n        isActive: this.scheduleDetails.isActive\n      };\n      this.planScheduleService.savePlanSchedule(planScheduleData).subscribe(res => {\n        if (res.planScheduleId) {\n          this.scheduleDetailsForm.reset();\n          this.setEmptyForm();\n          this.updateParent('save');\n        }\n      });\n    }\n    formatDate(date) {\n      if (date != null) {\n        var date = new Date(date);\n        var userTimezoneOffset = date.getTimezoneOffset() * 60000;\n        var a = new Date(date.getTime() - userTimezoneOffset);\n        return a;\n      } else {\n        return null;\n      }\n    }\n    checkDateValidation() {\n      return control => {\n        if (control.value !== undefined && control.value != null) {\n          this.scheduleDetailsForm.controls['dateStart'].setErrors(null);\n          this.scheduleDetailsForm.controls['dateEnd'].setErrors(null);\n          this.scheduleDetailsForm.clearAsyncValidators();\n          this.scheduleDetailsForm.updateValueAndValidity();\n          var dateFrom = new Date(this.scheduleDetailsForm.controls['dateStart'].value);\n          var dateTo = new Date(this.scheduleDetailsForm.controls['dateEnd'].value);\n          if (dateFrom.getTime() >= dateTo.getTime() && this.scheduleDetailsForm.controls['dateEnd'].value != null) {\n            this.scheduleDetailsForm.controls['dateStart'].setErrors({\n              'incorrect': true\n            });\n            this.scheduleDetailsForm.updateValueAndValidity();\n            this.errorMsg = ' date end should be greater than date start.';\n            return {\n              'incorrect': true\n            };\n          } else {\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    checked() {\n      this.isError = false;\n    }\n    selectCard(cardType) {\n      this.selectedCard = cardType;\n      this.displaySchedulePreview = false;\n      if (cardType == 'monthly') {\n        this.isDayOfMonthVisible = true;\n      } else {\n        this.isDayOfMonthVisible = false;\n        this.isWeekOfMonthVisible = false;\n      }\n    }\n    setEmptyForm() {\n      this.typeOfMonthSelection == '';\n      this.isDayOfMonthVisible = false;\n      this.isWeekOfMonthVisible = false;\n      this.planScheduleId = 0;\n      setTimeout(() => {\n        this.scheduleDetailsForm.patchValue({\n          daysFrequency: 1,\n          weeksFrequency: 1,\n          monthsFrequency: 1,\n          monthsFrequency2: 1,\n          yearFrequency: 1,\n          selectedWeekNames: []\n        });\n      }, 0);\n    }\n    getScheduleDetails() {\n      var startDate = this.formatDate(this.scheduleDetailsForm.controls.dateStart.value);\n      var endDate = this.formatDate(this.scheduleDetailsForm.controls.dateEnd.value);\n      let startDateStr = this.datePipe.transform(startDate, \"dd MMM yyyy\");\n      let endDateStr = this.datePipe.transform(endDate, \"dd MMM yyyy\");\n      switch (this.selectedCard) {\n        case \"daily\":\n          {\n            const frequency = this.scheduleDetailsForm.controls.daysFrequency.value;\n            if (!frequency) {\n              return;\n            }\n            this.scheduleDetails = {\n              dateStart: startDate,\n              dateEnd: endDate,\n              type: \"daily\",\n              frequency: frequency,\n              monthDays: '',\n              weekDays: '',\n              weeks: ''\n            };\n            this.scheduleDetailsMsg = `Recurring every ${frequency > 1 ? this.convertToOrdinal(frequency) : \"\"} day between ${startDateStr} and ${endDateStr}`;\n            break;\n          }\n        case \"weekly\":\n          {\n            const weekDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n            this.weeksIncluded = [];\n            this.scheduleDetailsMsg = '';\n            const weekDaysValues = weekDays.map(day => {\n              const control = this.scheduleDetailsForm.controls[day];\n              return control.value ? \"1\" : \"0\";\n            });\n            this.weeksIncluded = weekDays.filter((day, index) => weekDaysValues[index] === \"1\");\n            const frequency = this.scheduleDetailsForm.controls.weeksFrequency.value;\n            const weekLabel = frequency > 1 ? `${this.convertToOrdinal(frequency)} week` : 'week';\n            if (this.weeksIncluded.length === 0 || !frequency) {\n              this.isError = true;\n              return;\n            }\n            this.scheduleDetails = {\n              dateStart: startDate,\n              dateEnd: endDate,\n              type: \"weekly\",\n              frequency: frequency,\n              monthDays: '',\n              weekDays: weekDaysValues.join(\",\"),\n              weeks: ''\n            };\n            this.scheduleDetailsMsg = `Recurring every ${weekLabel} on ${this.weeksIncluded.join(\", \")} between ${startDateStr} and ${endDateStr}`;\n            break;\n          }\n        case \"monthly\":\n          {\n            this.scheduleDetailsMsg = '';\n            this.isError = false;\n            if (this.typeOfMonthSelection === 'dayOfMonth') {\n              const selectedDayNumbers = this.scheduleDetailsForm.controls.selectedDayNumbers.value || [];\n              if (selectedDayNumbers.length === 0 || this.scheduleDetailsForm.controls.monthsFrequency.value <= 0) {\n                this.isError = true;\n                return;\n              }\n              const sortedDays = selectedDayNumbers.map(element => element.day).sort();\n              const frequency = this.scheduleDetailsForm.controls.monthsFrequency.value;\n              const monthLabel = frequency > 1 ? \"months \" : \"month \";\n              this.scheduleDetails = {\n                dateStart: startDate,\n                dateEnd: endDate,\n                type: \"monthly\",\n                frequency: frequency,\n                monthDays: sortedDays.toString(),\n                weekDays: '',\n                weeks: ''\n              };\n              const ordinalDayList = sortedDays.map(day => this.convertToOrdinal(day)).join(\", \");\n              this.scheduleDetailsMsg = `Recurring every ${frequency > 1 ? frequency : \"\"} ${monthLabel} on  ${ordinalDayList}  of month between ${startDateStr} and ${endDateStr}`;\n            } else if (this.typeOfMonthSelection === 'weekOfMonth') {\n              this.weeksArray = [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"];\n              this.weekNamesString = '';\n              this.scheduleDetailsForm.controls.selectedWeekNames.value?.forEach(element => {\n                const foundDay = this.weekDays.find(day => day.dayName === element.dayName);\n                if (foundDay) {\n                  const dayIndex = this.weekDays.indexOf(foundDay);\n                  this.weeksArray[dayIndex] = '1';\n                  this.weekNamesString += foundDay.dayName + \", \";\n                }\n              });\n              this.weekNamesString = this.weekNamesString.slice(0, -2);\n              const selectedWeekNumbers = this.scheduleDetailsForm.controls.selectedWeekNumbers.value || [];\n              if (selectedWeekNumbers.length === 0 || !this.weekNamesString || this.scheduleDetailsForm.controls.monthsFrequency2.value <= 0) {\n                this.isError = true;\n                return;\n              }\n              const frequency = this.scheduleDetailsForm.controls.monthsFrequency2.value;\n              const weekLabel = frequency === 1 ? 'month' : frequency + ' months';\n              const weeks = selectedWeekNumbers.map(element => element.id).join(\",\");\n              const weekNumbers = selectedWeekNumbers.map(element => {\n                return this.convertToOrdinal(element.id);\n              });\n              const daysOfWeek = this.weeksArray.join(\",\");\n              this.scheduleDetails = {\n                dateStart: startDate,\n                dateEnd: endDate,\n                type: \"monthly\",\n                frequency: frequency,\n                monthDays: '',\n                weekDays: daysOfWeek.toString(),\n                weeks: weeks.toString()\n              };\n              this.scheduleDetailsMsg = `Recurring every ${weekLabel} on ${weekNumbers.join(\", \")} ${this.weekNamesString} of a month between ${startDateStr} and ${endDateStr}`;\n            }\n            break;\n          }\n        case \"annually\":\n          {\n            const frequency = this.scheduleDetailsForm.controls.yearFrequency.value;\n            if (!frequency) {\n              return;\n            }\n            this.scheduleDetails = {\n              dateStart: startDate,\n              dateEnd: endDate,\n              type: \"annually\",\n              frequency: frequency,\n              monthDays: \"\",\n              weekDays: \"\",\n              weeks: ''\n            };\n            this.scheduleDetailsMsg = `Recurring every ${frequency > 1 ? this.convertToOrdinal(frequency) : \"\"} year between ${startDateStr} and ${endDateStr}`;\n            break;\n          }\n        default:\n          {\n            break;\n          }\n      }\n      this.scheduleDetails.priority = this.scheduleDetailsForm.controls.priority.value;\n      this.scheduleDetails.isActive = this.scheduleDetailsForm.controls.isActive.value;\n      // this.scheduleDescription = `Once ${this.scheduleDetailsMsg} from ${this.datePipe.transform(startDate, \"dd MMM yyyy\")} to ${this.datePipe.transform(endDate, \"dd MMM yyyy\")}`\n      this.scheduleDescription = this.scheduleDetailsMsg + \" \" + this.scheduleDetailsForm.controls.priority.value;\n      return true;\n    }\n    previewDates() {\n      this.displaySchedulePreview = false;\n      const bool = this.getScheduleDetails();\n      if (bool) {\n        this.planScheduleService.getCountOfOccurence(this.scheduleDetails).subscribe(res => {\n          this.scheduleDates = res;\n          this.totalOccurence = res.length;\n          this.uniqueMonths = this.getUniqueMonths();\n          this.uniqueMonthsData = this.uniqueMonths.map(month => {\n            let datesLen = this.getDatesForMonth(month).length;\n            return {\n              month: month,\n              count: datesLen\n            };\n          });\n          this.displaySchedulePreview = true;\n        });\n      }\n    }\n    // Helper function to get all unique months\n    getUniqueMonths() {\n      const months = [];\n      this.scheduleDates.forEach(date => {\n        date = new Date(date);\n        const month = new Date(date.getFullYear(), date.getMonth(), 1);\n        if (!months.some(m => m.getTime() === month.getTime())) {\n          months.push(month);\n        }\n      });\n      return months;\n    }\n    // Helper function to get all dates for a specific month\n    getDatesForMonth(month) {\n      return this.scheduleDates.filter(date => new Date(date).getMonth() === month.getMonth() && new Date(date).getFullYear() === month.getFullYear());\n    }\n    checkScheduleExists() {\n      const planSchedule = this.scheduleDataList.length ? this.scheduleDataList.find(schedule => schedule.description === this.scheduleDescription) : null;\n      return planSchedule;\n    }\n    updateParent(event) {\n      this.parentFun.emit(event);\n    }\n    onTabOpen(event) {\n      this.expandedIndex = event.index;\n      let month = this.uniqueMonths[event.index];\n      this.monthDates = this.getDatesForMonth(month);\n    }\n    onTabClose(event) {\n      this.expandedIndex === null;\n    }\n    convertToOrdinal(number) {\n      switch (number % 10) {\n        case 1:\n          return number + \"st\";\n        case 2:\n          return number + \"nd\";\n        case 3:\n          return number + \"rd\";\n        default:\n          return number + \"th\";\n      }\n    }\n    confirmUpdate() {\n      const planSchedule = this.checkScheduleExists();\n      if (planSchedule) {\n        this.messageService.clear();\n        this.messageService.add({\n          key: 'exists',\n          severity: 'warn',\n          summary: 'Schedule Exists',\n          detail: 'Same schedule for this plan already exists'\n        });\n        return;\n      }\n      this.planScheduleService.getCountOfOccurence(this.scheduleDetails).subscribe(res => {\n        this.scheduleDates = res;\n        this.totalOccurence = res.length;\n        this.onContinue();\n      });\n    }\n    updateScheduleDates() {\n      var date = new Date(this.maxScheduledDate);\n      var nextDate = new Date(date.setDate(date.getDate() + 1));\n      this.selectedScheduleData.dateStart = nextDate;\n      this.today = nextDate;\n      if (new Date(nextDate) >= new Date(this.selectedScheduleData.dateEnd)) {\n        this.selectedScheduleData.dateEnd = new Date(new Date(nextDate).setDate(new Date(nextDate).getDate() + 1));\n      }\n      this.getScheduleTypesByPlanLocEqId();\n      this.isMsgAcptd = true;\n      this.displayScheduleExist = false;\n    }\n    static #_ = this.ɵfac = function PpmScheduleTypeComponent_Factory(t) {\n      return new (t || PpmScheduleTypeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.EnumService), i0.ɵɵdirectiveInject(i4.PlanScheduleService), i0.ɵɵdirectiveInject(i5.DatePipe), i0.ɵɵdirectiveInject(i2.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PpmScheduleTypeComponent,\n      selectors: [[\"app-ppm-schedule-type\"]],\n      inputs: {\n        planLocEqId: \"planLocEqId\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 121,\n      vars: 76,\n      consts: [[1, \"card\"], [3, \"formGroup\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateStart\", \"formControlName\", \"dateStart\", \"inputId\", \"icon\", 3, \"minDate\", \"showIcon\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateEnd\", \"formControlName\", \"dateEnd\", \"inputId\", \"icon\", 3, \"minDate\", \"showIcon\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [\"appendTo\", \"body\", \"formControlName\", \"isActive\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"width\", \"35%\"], [2, \"display\", \"flex\"], [\"appendTo\", \"body\", \"formControlName\", \"priority\", \"bindLabel\", \"id\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"display\", \"flex\", \"margin-top\", \"25px\"], [\"id\", \"detailsBtn\", \"icon\", \"pi pi-info-circle\", \"matTooltip\", \"View Details\", \"styleClass\", \"p-button-rounded\", 3, \"click\"], [2, \"width\", \"30%\"], [4, \"ngIf\"], [1, \"card\", 2, \"margin\", \"0px 3px 0px 3px\"], [1, \"heading-container\"], [\"type\", \"radio\", \"name\", \"selectedCard\", 1, \"header-radio\", 3, \"checked\", \"click\"], [1, \"heading\"], [2, \"padding-left\", \"10px\"], [1, \"input-label-custom\", 2, \"display\", \"flex\", \"justify-content\", \"baseline\", \"margin-top\", \"5px\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"formControlName\", \"daysFrequency\", \"maxlength\", \"9\", 1, \"form-control\"], [1, \"input-label-custom\", 2, \"margin-top\", \"5px\", \"display\", \"flex\", \"overflow\", \"auto\"], [\"class\", \"field-checkbox\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-label-custom\", 2, \"display\", \"flex\", \"justify-content\", \"baseline\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"formControlName\", \"weeksFrequency\", \"maxlength\", \"9\", 1, \"form-control\"], [2, \"padding-left\", \"10px\", \"overflow\", \"auto\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\", \"margin-top\", \"15px\"], [\"type\", \"radio\", \"name\", \"monthly_type\", \"id\", \"dayOfMonth\", 3, \"checked\", \"click\"], [\"appendTo\", \"body\", \"formControlName\", \"selectedDayNumbers\", \"optionLabel\", \"day\", 3, \"options\", \"placeholder\", \"readonly\", \"panelStyle\", \"onChange\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"formControlName\", \"monthsFrequency\", \"maxlength\", \"9\", 1, \"form-control\", 3, \"readonly\"], [1, \"form-field-lable\", 2, \"margin-left\", \"4px\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\"], [\"mydiv\", \"\"], [\"type\", \"radio\", \"name\", \"monthly_type\", \"id\", \"weekOfMonth_months\", \"placeholder\", \"1\", 3, \"checked\", \"click\"], [\"formControlName\", \"selectedWeekNumbers\", \"appendTo\", \"body\", \"optionLabel\", \"id\", 3, \"options\", \"placeholder\", \"readonly\", \"panelStyle\", \"onChange\"], [\"formControlName\", \"selectedWeekNames\", \"appendTo\", \"body\", \"optionLabel\", \"dayName\", 3, \"options\", \"readonly\", \"placeholder\", \"panelStyle\", \"onChange\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"formControlName\", \"monthsFrequency2\", \"id\", \"dayOfMonth_months\", \"maxlength\", \"9\", 1, \"form-control\", 3, \"readonly\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"formControlName\", \"yearFrequency\", \"maxlength\", \"9\", 1, \"form-control\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Preview\", \"icon\", \"pi pi-eye\", 3, \"disabled\", \"click\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"key\", \"wrSave\", \"position\", \"top-right\"], [\"key\", \"exists\", \"position\", \"top-center\"], [\"key\", \"wrGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"header\", \"Schedule Preview\", \"id\", \"preview\", 3, \"visible\", \"closable\", \"modal\", \"visibleChange\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"footer\"], [\"id\", \"preview\", 3, \"visible\", \"closable\", \"modal\", \"visibleChange\"], [\"header\", \"Message\", 3, \"visible\", \"closable\", \"draggable\", \"resizable\", \"modal\", \"visibleChange\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [1, \"field-checkbox\"], [1, \"card-container\"], [\"name\", \"group2\", \"binary\", \"true\", 3, \"formControlName\", \"value\", \"inputId\", \"ngModel\", \"onChange\", \"ngModelChange\"], [1, \"form-field-lable\", 2, \"margin-left\", \"3px !important\", 3, \"for\"], [1, \"card-body\"], [1, \"month-name\"], [2, \"margin-left\", \"25px\"], [2, \"margin\", \"10px 0px 10px 0px\"], [\"class\", \"alert alert-warning mt-3\", 4, \"ngIf\"], [3, \"onOpen\", \"onClose\"], [3, \"header\", 4, \"ngFor\", \"ngForOf\"], [3, \"header\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\"], [1, \"alert\", \"alert-warning\", \"mt-3\"], [\"icon\", \"pi pi-times\", \"label\", \"Close\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [1, \"priority-details\"], [1, \"message\"], [\"type\", \"button\", \"pButton\", \"\", \"icon\", \"pi pi-check\", \"label\", \"Continue\", 3, \"click\"]],\n      template: function PpmScheduleTypeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\")(3, \"tr\")(4, \"td\", 2)(5, \"div\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"Start Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"p-calendar\", 7);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(11, \"td\", 2)(12, \"div\", 3)(13, \"div\", 4)(14, \"div\", 5)(15, \"label\", 6);\n          i0.ɵɵtext(16, \"End Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"p-calendar\", 8);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(18, \"td\", 9)(19, \"div\", 10)(20, \"label\", 6);\n          i0.ɵɵtext(21, \"Is Active\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"ng-select\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"td\", 12)(24, \"div\", 13)(25, \"div\", 10)(26, \"label\", 6);\n          i0.ɵɵtext(27, \"Priority\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"ng-select\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"div\", 15)(30, \"p-button\", 16);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_p_button_click_30_listener() {\n            return ctx.displayPriorityDetails = true;\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(31, \"tr\")(32, \"td\", 17);\n          i0.ɵɵtemplate(33, PpmScheduleTypeComponent_div_33_Template, 3, 0, \"div\", 18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(34, \"td\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(35, \"div\", 19)(36, \"div\", 20)(37, \"input\", 21);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_37_listener() {\n            return ctx.selectCard(\"daily\");\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"h2\", 22);\n          i0.ɵɵtext(39, \"Daily\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(40, \"div\", 23)(41, \"div\", 24)(42, \"label\", 25);\n          i0.ɵɵtext(43, \"Every:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(44, \"input\", 26);\n          i0.ɵɵelementStart(45, \"label\", 25);\n          i0.ɵɵtext(46, \"day(s)\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(47, PpmScheduleTypeComponent_div_47_Template, 3, 0, \"div\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(48, \"div\", 19)(49, \"div\", 20)(50, \"input\", 21);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_50_listener() {\n            return ctx.selectCard(\"weekly\");\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"h2\", 22);\n          i0.ɵɵtext(52, \"Weekly\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(53, \"div\", 23)(54, \"div\", 27)(55, \"label\", 25);\n          i0.ɵɵtext(56, \"Every:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(57, PpmScheduleTypeComponent_ul_57_Template, 5, 8, \"ul\", 28);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"div\", 29)(59, \"label\", 25);\n          i0.ɵɵtext(60, \"for every\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(61, \"input\", 30);\n          i0.ɵɵelementStart(62, \"label\", 25);\n          i0.ɵɵtext(63, \"week(s)\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(64, PpmScheduleTypeComponent_div_64_Template, 3, 0, \"div\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(65, \"div\", 19)(66, \"div\", 20)(67, \"input\", 21);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_67_listener() {\n            return ctx.selectCard(\"monthly\");\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(68, \"h2\", 22);\n          i0.ɵɵtext(69, \"Monthly\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(70, \"div\", 31)(71, \"div\", 32)(72, \"input\", 33);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_72_listener($event) {\n            return ctx.onSelectMonthlyType($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(73, \"p-multiSelect\", 34);\n          i0.ɵɵlistener(\"onChange\", function PpmScheduleTypeComponent_Template_p_multiSelect_onChange_73_listener() {\n            return ctx.checked();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(74, \"label\", 25);\n          i0.ɵɵtext(75, \"day(s)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(76, \"label\", 25);\n          i0.ɵɵtext(77, \" every\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(78, \"input\", 35);\n          i0.ɵɵelementStart(79, \"label\", 36);\n          i0.ɵɵtext(80, \"month(s)\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(81, \"div\", 37, 38)(83, \"input\", 39);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_83_listener($event) {\n            return ctx.onSelectMonthlyType($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(84, \"p-multiSelect\", 40);\n          i0.ɵɵlistener(\"onChange\", function PpmScheduleTypeComponent_Template_p_multiSelect_onChange_84_listener() {\n            return ctx.checked();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(85, \"p-multiSelect\", 41);\n          i0.ɵɵlistener(\"onChange\", function PpmScheduleTypeComponent_Template_p_multiSelect_onChange_85_listener() {\n            return ctx.checked();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(86, \"label\", 25);\n          i0.ɵɵtext(87, \"every\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(88, \"input\", 42);\n          i0.ɵɵelementStart(89, \"label\", 36);\n          i0.ɵɵtext(90, \"month(s)\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(91, \"div\", 19)(92, \"div\", 20)(93, \"input\", 21);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_input_click_93_listener() {\n            return ctx.selectCard(\"annually\");\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(94, \"h2\", 22);\n          i0.ɵɵtext(95, \"Annually\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(96, \"div\", 23)(97, \"div\", 24)(98, \"label\", 25);\n          i0.ɵɵtext(99, \"Every:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(100, \"input\", 43);\n          i0.ɵɵelementStart(101, \"label\", 25);\n          i0.ɵɵtext(102, \"year(s)\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(103, PpmScheduleTypeComponent_div_103_Template, 3, 0, \"div\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(104, PpmScheduleTypeComponent_div_104_Template, 3, 0, \"div\", 18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(105, \"mat-dialog-actions\", 44)(106, \"p-button\", 45);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_p_button_click_106_listener() {\n            return ctx.previewDates();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(107, \"p-button\", 46);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_p_button_click_107_listener() {\n            return ctx.saveRecurrence();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(108, \"p-button\", 47);\n          i0.ɵɵlistener(\"click\", function PpmScheduleTypeComponent_Template_p_button_click_108_listener() {\n            return ctx.confirmDialog();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(109, \"p-toast\", 48)(110, \"p-toast\", 49)(111, \"p-confirmDialog\", 50);\n          i0.ɵɵelementStart(112, \"p-dialog\", 51);\n          i0.ɵɵlistener(\"visibleChange\", function PpmScheduleTypeComponent_Template_p_dialog_visibleChange_112_listener($event) {\n            return ctx.displaySchedulePreview = $event;\n          });\n          i0.ɵɵtemplate(113, PpmScheduleTypeComponent_ng_template_113_Template, 34, 13, \"ng-template\", 52);\n          i0.ɵɵtemplate(114, PpmScheduleTypeComponent_ng_template_114_Template, 1, 0, \"ng-template\", 53);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(115, \"p-dialog\", 54);\n          i0.ɵɵlistener(\"visibleChange\", function PpmScheduleTypeComponent_Template_p_dialog_visibleChange_115_listener($event) {\n            return ctx.displayPriorityDetails = $event;\n          });\n          i0.ɵɵtemplate(116, PpmScheduleTypeComponent_ng_template_116_Template, 38, 0, \"ng-template\", 52);\n          i0.ɵɵtemplate(117, PpmScheduleTypeComponent_ng_template_117_Template, 1, 0, \"ng-template\", 53);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(118, \"p-dialog\", 55);\n          i0.ɵɵlistener(\"visibleChange\", function PpmScheduleTypeComponent_Template_p_dialog_visibleChange_118_listener($event) {\n            return ctx.displayScheduleExist = $event;\n          });\n          i0.ɵɵtemplate(119, PpmScheduleTypeComponent_ng_template_119_Template, 3, 1, \"ng-template\", 52);\n          i0.ɵɵtemplate(120, PpmScheduleTypeComponent_ng_template_120_Template, 2, 0, \"ng-template\", 53);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.scheduleDetailsForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"minDate\", ctx.today)(\"showIcon\", false);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"minDate\", ctx.today)(\"showIcon\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumIsActiveData)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.priorityList)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", (ctx.scheduleDetailsForm.controls[\"dateStart\"] == null ? null : ctx.scheduleDetailsForm.controls[\"dateStart\"].errors) && ctx.scheduleDetailsForm.controls[\"dateStart\"].dirty || (ctx.scheduleDetailsForm.controls[\"dateEnd\"] == null ? null : ctx.scheduleDetailsForm.controls[\"dateEnd\"].errors) && ctx.scheduleDetailsForm.controls[\"dateEnd\"].dirty);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"checked\", ctx.selectedCard === \"daily\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"card-readonly\", ctx.selectedCard !== \"daily\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.scheduleDetailsForm.controls.daysFrequency.value < 1);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"checked\", ctx.selectedCard === \"weekly\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"card-readonly\", ctx.selectedCard !== \"weekly\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.weekNames);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.scheduleDetailsForm.controls.weeksFrequency.value < 1);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"checked\", ctx.selectedCard === \"monthly\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"card-readonly\", ctx.selectedCard !== \"monthly\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"checked\", ctx.isDayOfMonthVisible);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"options\", ctx.dayOfMonth)(\"placeholder\", \"Select day(s)\")(\"readonly\", !ctx.isDayOfMonthVisible)(\"panelStyle\", i0.ɵɵpureFunction0(68, _c1));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"readonly\", !ctx.isDayOfMonthVisible);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"checked\", ctx.isWeekOfMonthVisible);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"options\", ctx.weekNums)(\"placeholder\", \"Select week(s)\")(\"readonly\", !ctx.isWeekOfMonthVisible)(\"panelStyle\", i0.ɵɵpureFunction0(69, _c1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"options\", ctx.weekDays)(\"readonly\", !ctx.isWeekOfMonthVisible)(\"placeholder\", \"Select day(s) of week\")(\"panelStyle\", i0.ɵɵpureFunction0(70, _c2));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"readonly\", !ctx.isWeekOfMonthVisible);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"checked\", ctx.selectedCard === \"annually\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"card-readonly\", ctx.selectedCard !== \"annually\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.scheduleDetailsForm.controls.yearFrequency.value < 1);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isError);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.scheduleDetailsForm.valid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(71, _c3));\n          i0.ɵɵproperty(\"disabled\", !ctx.scheduleDetailsForm.valid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(72, _c3));\n          i0.ɵɵadvance(4);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(73, _c4));\n          i0.ɵɵproperty(\"visible\", ctx.displaySchedulePreview)(\"closable\", false)(\"modal\", true);\n          i0.ɵɵadvance(3);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(74, _c5));\n          i0.ɵɵproperty(\"visible\", ctx.displayPriorityDetails)(\"closable\", false)(\"modal\", true);\n          i0.ɵɵadvance(3);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(75, _c6));\n          i0.ɵɵproperty(\"visible\", ctx.displayScheduleExist)(\"closable\", false)(\"draggable\", false)(\"resizable\", false)(\"modal\", true);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i6.Accordion, i6.AccordionTab, i2.PrimeTemplate, i7.Calendar, i8.ButtonDirective, i8.Button, i9.Dialog, i10.MultiSelect, i11.Toast, i12.ConfirmDialog, i13.Checkbox, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i14.NgSelectComponent, i15.MatDialogActions, i16.NzTableCellDirective, i16.NzTrDirective, i17.NumbersOnlyDirective, i5.DatePipe],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px;background-color:#fff!important}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;background-color:#fff!important}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}input[type=text][_ngcontent-%COMP%], input[type=time][_ngcontent-%COMP%]{background-color:#fff!important;border-color:#879cc9!important;height:20px!important;width:10%;margin:0 5px}#noOfOccurence[_ngcontent-%COMP%]{background-color:#fff!important;border-color:#879cc9!important;height:24px!important;width:100%!important;margin:0 5px}input[type=radio][_ngcontent-%COMP%], input[type=checkbox][_ngcontent-%COMP%]{box-sizing:border-box;padding:0;margin:5px 5px 15px}[_nghost-%COMP%]     .p-multiselect{margin:0 7px 10px 5px;max-width:15px;max-height:1.6rem}[_nghost-%COMP%]     .multiselect-custom-virtual-scroll .p-multiselect{min-width:10rem}.grid-container[_ngcontent-%COMP%]{padding-top:10px}.card-container[_ngcontent-%COMP%]{display:flex;flex-direction:row}.form-control[_ngcontent-%COMP%]:disabled, input[type=text][_ngcontent-%COMP%]:disabled, .p-multiselect[_ngcontent-%COMP%]:disabled, .form-control[_ngcontent-%COMP%]:read-only, .ng-select-disabled[_ngcontent-%COMP%]{background-color:#e9ecef!important;opacity:1;cursor:no-drop!important}[_nghost-%COMP%]     .p-multiselect .p-multiselect-label.p-placeholder{color:#6c757d;padding-top:7px;font-family:Roboto}ul[_ngcontent-%COMP%]{padding-left:.5rem!important}.recurrence-details-container[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto auto;grid-gap:1rem}.recurrence-details-item[_ngcontent-%COMP%]{display:flex;justify-content:space-between;text-align:start;height:24px}.total-occurence[_ngcontent-%COMP%]{font-size:13px;font-weight:700}span[_ngcontent-%COMP%]{font-size:12px;font-weight:500}.heading[_ngcontent-%COMP%]{font-family:inherit;font-weight:500;color:#495057;margin-bottom:0;font-size:16px}.heading-container[_ngcontent-%COMP%]{padding:5px;display:flex}.header-radio[_ngcontent-%COMP%]{margin:5px 5px 2px!important;height:24px;width:12px}.card-readonly[_ngcontent-%COMP%]{pointer-events:none;opacity:.6}.btn-container[_ngcontent-%COMP%]{display:flex;justify-content:end;padding:5px}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-header{padding:1rem!important}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-content{padding:0 .5rem 1rem!important}.month-name[_ngcontent-%COMP%]{font-weight:600;font-size:1rem}.details-container[_ngcontent-%COMP%]{display:flex;margin-bottom:10px}[_nghost-%COMP%]     #detailsBtn button{width:20px!important;height:20px!important}.priority-details[_ngcontent-%COMP%]{max-width:600px;padding:0 20px}.priority-details[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%], .priority-details[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .priority-details[_ngcontent-%COMP%]   hr[_ngcontent-%COMP%]{margin-top:15px}.priority-details[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{list-style-type:disc;padding-left:30px;margin-top:10px}.priority-details[_ngcontent-%COMP%]   .close-button[_ngcontent-%COMP%]{margin-top:20px;float:right}p[_ngcontent-%COMP%]{margin-bottom:2px!important}.message[_ngcontent-%COMP%]{font-size:12px;font-weight:400;font-family:Roboto}.radio-buttons-container[_ngcontent-%COMP%]{display:flex;margin-bottom:20px}.radio-buttons-container[_ngcontent-%COMP%]   input[type=radio][_ngcontent-%COMP%]{margin-right:10px;padding:0 5px}\"]\n    });\n  }\n  return PpmScheduleTypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}