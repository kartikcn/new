{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { BuildingFilterInput } from '../../model/DTO/blFilterInput.model';\nimport { BuildingFilterInputDTO } from '../../model/DTO/BuildingFilterInputDTO.model';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/bl.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nimport * as i7 from \"../../../../directive/numbers-only.directive\";\nimport * as i8 from \"../../../../directive/directive/upper-case.directive\";\nimport * as i9 from \"../../../../directive/directive/trim-input.directive\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/toast\";\nimport * as i12 from \"primeng/confirmdialog\";\nimport * as i13 from \"@angular/material/tooltip\";\nconst _c0 = function () {\n  return {\n    \"background-color\": \"red\"\n  };\n};\nconst _c1 = function () {\n  return {\n    width: \"25vw\"\n  };\n};\nexport let AddFlFormComponent = /*#__PURE__*/(() => {\n  class AddFlFormComponent {\n    constructor(formBuilder, blSrv, confirmationService, messageService) {\n      this.formBuilder = formBuilder;\n      this.blSrv = blSrv;\n      this.confirmationService = confirmationService;\n      this.messageService = messageService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumBL = [];\n      this.enumComp = [];\n      this.offsetBl = 0;\n      this.limitBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.flFormPanel = this.formBuilder.group({\n        blId: ['', [Validators.required]],\n        flId: [null],\n        flCode: ['', [Validators.required]],\n        flName: [''],\n        flInfo: [''],\n        svgName: [''],\n        units: [''],\n        externalArea: [''],\n        internalArea: ['']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.flFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      //this.loadBuilding();\n      // this.loadCompany();\n      //this.scrollToEndBl();\n    }\n    loadBuilding() {\n      this.blSrv.getALLBuilding().subscribe(res => {\n        this.enumBL = res;\n        // this.enumBL = res.map((i: any) => { i.name = i.blNameString; return i; });\n        this.enumBL.unshift(new BuildingFilterInput('', 'Make a selection', '', 0));\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const flDetails = {\n        blId: this.flFormPanel.controls.blId.value,\n        flId: this.flFormPanel.controls.flId.value,\n        flCode: this.flFormPanel.controls.flCode.value,\n        flName: this.flFormPanel.controls.flName.value,\n        flInfo: this.flFormPanel.controls.flInfo.value,\n        svgName: this.flFormPanel.controls.svgName.value,\n        units: this.flFormPanel.controls.units.value,\n        externalArea: this.flFormPanel.controls.externalArea.value,\n        internalArea: this.flFormPanel.controls.internalArea.value\n      };\n      return flDetails;\n    }\n    set value(value) {\n      if (value.blId) {\n        this.prevBl = value.bl;\n        this.setPrevBl(this.prevBl);\n      }\n      setTimeout(() => {\n        this.flFormPanel.patchValue({\n          blId: value.blId,\n          flId: value.flId,\n          flCode: value.flCode,\n          flName: value.flName,\n          flInfo: value.flInfo,\n          svgName: value.svgName,\n          units: value.units,\n          externalArea: value.externalArea,\n          internalArea: value.internalArea\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.flFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.flFormPanel.valid ? null : {\n        flFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    unLinkFloorPlan() {\n      if (this.flFormPanel.controls.svgName.value) {\n        this.confirmationService.confirm({\n          message: 'This will unlink the floor,rooms and assets links with this drawing. Please note that this action cannot be reversed. Are you sure you want to continue?',\n          header: 'Confirmation',\n          icon: 'pi pi-exclamation-triangle',\n          accept: () => {\n            this.unLink();\n          },\n          key: \"addFlForm\"\n        });\n      }\n    }\n    unLink() {\n      const flId = this.flFormPanel.controls.flId.value;\n      this.blSrv.unLinkFloorPlan(flId).subscribe(res => {\n        this.messageService.clear();\n        if (res.text = \"Floor unlinked successfully\") {\n          setTimeout(() => {\n            this.flFormPanel.patchValue({\n              svgName: null\n            });\n          }, 0);\n          this.messageService.add({\n            key: 'rmSuccessMessage',\n            severity: 'success',\n            summary: 'Floor Plan unlinked successfully',\n            detail: res.text\n          });\n        }\n      });\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blSrv.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.setPrevBl(this.prevBl);\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    setPrevBl(prevBl) {\n      if (prevBl) {\n        const blData = {\n          blId: prevBl.blId,\n          blNameString: prevBl.blCode + \" - \" + prevBl.blName,\n          site: null\n        };\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndBl();\n    }\n    static #_ = this.ɵfac = function AddFlFormComponent_Factory(t) {\n      return new (t || AddFlFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.BuildingService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddFlFormComponent,\n      selectors: [[\"app-add-fl-form\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddFlFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddFlFormComponent),\n        multi: true\n      }])],\n      decls: 46,\n      vars: 20,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"readonly\", \"searchable\", \"open\", \"scrollToEnd\", \"search\"], [\"type\", \"text\", \"name\", \"flCode\", \"uppercase\", \"\", \"formControlName\", \"flCode\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"flName\", \"formControlName\", \"flName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [1, \"location-container\"], [1, \"input-label-custom\", \"input-container\"], [\"type\", \"text\", \"name\", \"svgName\", \"formControlName\", \"svgName\", \"maxlength\", \"64\", 1, \"form-control\", 3, \"readonly\"], [1, \"icon-container\", 3, \"hidden\"], [\"label\", \"Unlink\", \"matTooltip\", \"Unlink The Floor Plan\", \"icon\", \"pi pi-times\", 3, \"disabled\", \"hidden\", \"click\"], [\"colspan\", \"2\", 2, \"width\", \"50%\"], [\"name\", \"flInfo\", \"formControlName\", \"flInfo\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\", 3, \"readonly\"], [\"type\", \"text\", \"name\", \"externalArea\", \"NumbersOnly\", \"\", \"formControlName\", \"externalArea\", \"maxlength\", \"6\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"type\", \"text\", \"name\", \"internalArea\", \"NumbersOnly\", \"\", \"formControlName\", \"internalArea\", \"maxlength\", \"6\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"key\", \"rmSuccessMessage\", \"position\", \"top-right\"], [\"key\", \"addFlForm\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"]],\n      template: function AddFlFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Building\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"ng-select\", 5);\n          i0.ɵɵlistener(\"open\", function AddFlFormComponent_Template_ng_select_open_7_listener() {\n            return ctx.onOpenBl();\n          })(\"scrollToEnd\", function AddFlFormComponent_Template_ng_select_scrollToEnd_7_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function AddFlFormComponent_Template_ng_select_search_7_listener($event) {\n            return ctx.searchBl($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 4);\n          i0.ɵɵtext(11, \"Floor Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 2)(15, \"div\", 3)(16, \"label\", 7);\n          i0.ɵɵtext(17, \"Floor Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"td\", 2)(20, \"div\", 9)(21, \"div\", 10)(22, \"label\", 7);\n          i0.ɵɵtext(23, \"Floor Plan Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"input\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"div\", 12)(26, \"p-button\", 13);\n          i0.ɵɵlistener(\"click\", function AddFlFormComponent_Template_p_button_click_26_listener() {\n            return ctx.unLinkFloorPlan();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(27, \"tr\")(28, \"td\", 14)(29, \"div\", 3)(30, \"label\", 7);\n          i0.ɵɵtext(31, \"Floor Info\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(32, \"textarea\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(33, \"tr\")(34, \"td\", 2)(35, \"div\", 3)(36, \"label\", 7);\n          i0.ɵɵtext(37, \"External Area ft\\u00B2\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"input\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(39, \"td\", 2)(40, \"div\", 3)(41, \"label\", 7);\n          i0.ɵɵtext(42, \"Internal Area ft\\u00B2\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(43, \"input\", 17);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelement(44, \"p-toast\", 18)(45, \"p-confirmDialog\", 19);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.flFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"readonly\", ctx.isView)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"readonly\", ctx.isView);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", ctx.isView);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"hidden\", ctx.isNew || ctx.isView);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(18, _c0));\n          i0.ɵɵproperty(\"disabled\", ctx.flFormPanel.controls.svgName.value == null)(\"hidden\", ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", ctx.isView);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", ctx.isView);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"readonly\", ctx.isView);\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(19, _c1));\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzInputDirective, i7.NumbersOnlyDirective, i8.UppercaseDirective, i9.TrimInputDirective, i10.Button, i11.Toast, i12.ConfirmDialog, i13.MatTooltip],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.location-container[_ngcontent-%COMP%]{display:flex}.input-container[_ngcontent-%COMP%]{width:92%}.icon-container[_ngcontent-%COMP%]{display:flex;align-self:center;margin-top:21px}[_nghost-%COMP%]     .p-button{height:24px!important;border:1px red}\"]\n    });\n  }\n  return AddFlFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}