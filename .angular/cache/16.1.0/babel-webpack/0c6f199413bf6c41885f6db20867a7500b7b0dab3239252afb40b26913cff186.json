{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { forwardRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nexport let AddRmcatItemComponent = /*#__PURE__*/(() => {\n  class AddRmcatItemComponent {\n    constructor(enumsrv, formBuilder, datePipe) {\n      this.enumsrv = enumsrv;\n      this.formBuilder = formBuilder;\n      this.datePipe = datePipe;\n      this.subscriptions = [];\n      this.newRecord = true;\n      //drop down code\n      this.enumState = [];\n      this.enumCntry = [];\n      this.enumCity = [];\n      this.enumRegn = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.currentDate = this.datePipe.transform(new Date(), \"yyyy/MM/dd hh:mm:ss\");\n      /// Start Of Building Form \n      this.rmcatFormPanel = this.formBuilder.group({\n        rmCat: ['', [Validators.required]],\n        rmCatDesc: [''],\n        highlightColor: ['#a6a6a6']\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.rmcatFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    /// Start Of Form Validation Related Code\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      // Object.keys(this.userFormPanel.controls).forEach(key => {\n      //   let field = this.userFormPanel.get(key);\n      //   const controlErrors: ValidationErrors = field?.er;\n      //   if (controlErrors != null) {\n      //         Object.keys(controlErrors).forEach(keyError => {\n      //         validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n      //       });\n      //     }\n      //   });\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    /// Start Of Reference Data Initiation\n    loadEnums() {\n      // this.enumList = [];\n      // this.enumsrv.getEnums().subscribe(\n      //   (res: Enums[]) => {\n      //     this.enumList = res;\n      //     this.enumClonedList =  this.enumList.map(x => Object.assign({}, x));\n      //     this.enumCC = this.enumClonedList.filter(t => t.Table.toLocaleUpperCase() === 'Cost_centre'.toLocaleUpperCase());\n      //     this.enumCCStatus = this.enumCC.filter(t => t.Type.toLocaleUpperCase() === 'CC_stat'.toLocaleUpperCase()).map((i) => { i.Name = i.Id + ' - ' + i.Name; return i; });;\n      //     this.enumCCStatus.unshift(new Enums(null, 'Make a selection', null, null, null, null, null));\n      //   },\n      //   error => {\n      //     // this.loginError = error.errorDesc;\n      //   }\n      // );\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const rmcatDetails = {\n        rmCat: this.rmcatFormPanel.controls.rmCat.value,\n        rmCatDesc: this.rmcatFormPanel.controls.rmCatDesc.value,\n        highlightColor: this.rmcatFormPanel.controls.highlightColor.value\n      };\n      return rmcatDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.rmcatFormPanel.patchValue({\n          rmCat: value.rmCat,\n          rmCatDesc: value.rmCatDesc,\n          highlightColor: value.highlightColor ?? '#a6a6a6'\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.rmcatFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.rmcatFormPanel.valid ? null : {\n        rmcatFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddRmcatItemComponent_Factory(t) {\n      return new (t || AddRmcatItemComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRmcatItemComponent,\n      selectors: [[\"app-add-rmcat-item\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRmcatItemComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRmcatItemComponent),\n        multi: true\n      }])],\n      decls: 21,\n      vars: 3,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"rmCat\", \"formControlName\", \"rmCat\", \"maxlength\", \"32\", 1, \"form-control\", 3, \"readonly\"], [1, \"form-field-lable\"], [3, \"nzMaxCharacterCount\"], [\"name\", \"rmCatDesc\", \"formControlName\", \"rmCatDesc\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"64\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"]],\n      template: function AddRmcatItemComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Room Category\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 3)(11, \"label\", 6);\n          i0.ɵɵtext(12, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"nz-textarea-count\", 7);\n          i0.ɵɵelement(14, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\", 2)(17, \"div\", 3)(18, \"label\", 4);\n          i0.ɵɵtext(19, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"input\", 9);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.rmcatFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"nzMaxCharacterCount\", 64);\n        }\n      },\n      dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzTextareaCountComponent, i5.NzInputDirective]\n    });\n  }\n  return AddRmcatItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}