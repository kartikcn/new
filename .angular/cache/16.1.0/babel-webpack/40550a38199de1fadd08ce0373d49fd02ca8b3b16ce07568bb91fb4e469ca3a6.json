{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../service/inventory.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/calendar\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/dialog\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddEditBudgetTermsComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"label\", 18);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMsg);\n  }\n}\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nfunction AddEditBudgetTermsComponent_ng_template_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddEditBudgetTermsComponent_ng_template_27_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"p-button\", 20);\n    i0.ɵɵlistener(\"click\", function AddEditBudgetTermsComponent_ng_template_27_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r1.formBudgetTerms.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c0));\n  }\n}\nconst _c1 = function () {\n  return {\n    minHeight: \"30vh\",\n    width: \"42vw\"\n  };\n};\nconst _c2 = function () {\n  return {\n    \"1199px\": \"30vw\",\n    \"767px\": \"50vw\",\n    \"575px\": \"70vw\"\n  };\n};\nexport let AddEditBudgetTermsComponent = /*#__PURE__*/(() => {\n  class AddEditBudgetTermsComponent {\n    constructor(fb, inventorySrv, messageService, datePipe) {\n      this.fb = fb;\n      this.inventorySrv = inventorySrv;\n      this.messageService = messageService;\n      this.datePipe = datePipe;\n      this.parentFun = new EventEmitter();\n      this.showDialogue = true;\n      this.subscriptions = [];\n      this.title = 'Add';\n      this.isNew = false;\n      this.errorMsg = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.formBudgetTerms = fb.group({\n        budgetTermId: [0],\n        name: [null, Validators.required],\n        dateFrom: [null, [this.checkDateValidation(), Validators.required]],\n        dateTo: [null, [this.checkDateValidation(), Validators.required]]\n      });\n      this.subscriptions.push(this.formBudgetTerms.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.isNew = this.budegetTermData.isNew;\n      this.loadBudegetTermById(this.budegetTermData.budgetTermId);\n      if (!this.isNew) this.title = 'Edit';\n    }\n    loadBudegetTermById(id) {\n      if (id != 0) {\n        this.inventorySrv.getBudegetTermById(id).subscribe(res => {\n          if (res && !res.code) {\n            this.formBudgetTerms.patchValue({\n              budgetTermId: res.budgetTermId,\n              name: res.name,\n              dateFrom: this.datePipe.transform(res.dateFrom, 'dd MMM yyyy'),\n              dateTo: this.datePipe.transform(res.dateTo, 'dd MMM yyyy')\n            });\n          }\n        });\n      }\n    }\n    get value() {\n      const budgetTerm = {\n        budgetTermId: this.formBudgetTerms.controls.budgetTermId.value,\n        name: this.formBudgetTerms.controls.name.value,\n        dateFrom: this.formBudgetTerms.controls.dateFrom.value,\n        dateTo: this.formBudgetTerms.controls.dateTo.value\n      };\n      return budgetTerm;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.formBudgetTerms.patchValue({\n          budgetTermId: value.budgetTermId,\n          name: value.name,\n          dateFrom: value.dateFrom,\n          dateTo: value.dateTo\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    saveRecords() {\n      this.messageService.clear();\n      if (this.formBudgetTerms.valid) {\n        let budgetTerm;\n        const formattedDateFrom = this.datePipe.transform(this.formBudgetTerms.controls.dateFrom.value, 'yyyy-MM-dd');\n        const formattedDateTo = this.datePipe.transform(this.formBudgetTerms.controls.dateTo.value, 'yyyy-MM-dd');\n        budgetTerm = {\n          name: this.formBudgetTerms.controls.name.value,\n          dateFrom: formattedDateFrom,\n          dateTo: formattedDateTo\n        };\n        if (!this.isNew) {\n          budgetTerm.budgetTermId = this.formBudgetTerms.controls.budgetTermId.value;\n        }\n        this.inventorySrv.saveBudgetTerm(budgetTerm).subscribe(res => {\n          if (res.code == 200) {\n            this.parentFun.emit(res);\n            this.formBudgetTerms.reset();\n          } else {\n            this.messageService.add({\n              key: 'save',\n              severity: 'error',\n              summary: 'error',\n              detail: res.text\n            });\n          }\n        });\n      }\n    }\n    onCancel() {\n      this.parentFun.emit('true');\n      this.formBudgetTerms.reset();\n    }\n    checkDateValidation() {\n      return control => {\n        if (control.value !== undefined && control.value != null) {\n          this.formBudgetTerms.controls['dateFrom'].setErrors(null);\n          this.formBudgetTerms.controls['dateTo'].setErrors(null);\n          this.formBudgetTerms.clearAsyncValidators();\n          this.formBudgetTerms.updateValueAndValidity();\n          var fromDate = new Date(this.formBudgetTerms.controls['dateFrom'].value);\n          var toDate = new Date(this.formBudgetTerms.controls['dateTo'].value);\n          if (toDate.getFullYear() != 1970 && fromDate.getTime() > toDate.getTime()) {\n            this.formBudgetTerms.controls['dateTo'].setErrors({\n              incorrect: true\n            });\n            this.formBudgetTerms.updateValueAndValidity();\n            this.errorMsg = 'Date To  should be greater than Date From.';\n            return {\n              incorrect: true\n            };\n          } else {\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.formBudgetTerms.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddEditBudgetTermsComponent_Factory(t) {\n      return new (t || AddEditBudgetTermsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.InventoryService), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditBudgetTermsComponent,\n      selectors: [[\"app-add-edit-budget-terms\"]],\n      inputs: {\n        budegetTermData: \"budegetTermData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      decls: 29,\n      vars: 14,\n      consts: [[1, \"card\", \"flex\", \"justify-content-center\"], [\"header\", \"\", 3, \"visible\", \"modal\", \"maximizable\", \"breakpoints\", \"visibleChange\", \"onHide\"], [1, \"container-fluid\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-12\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"name\", \"formControlName\", \"name\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"col-sm-12\", \"col-md-6\", \"col-xl-6\"], [1, \"p-fluid\"], [1, \"p-field\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateFrom\", \"formControlName\", \"dateFrom\", 3, \"showIcon\", \"showSeconds\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateTo\", \"formControlName\", \"dateTo\", 3, \"showIcon\"], [\"class\", \"col-8\", 4, \"ngIf\"], [\"pTemplate\", \"footer\"], [\"key\", \"save\", \"position\", \"top-right\"], [1, \"col-8\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [\"pButton\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"]],\n      template: function AddEditBudgetTermsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-dialog\", 1);\n          i0.ɵɵlistener(\"visibleChange\", function AddEditBudgetTermsComponent_Template_p_dialog_visibleChange_1_listener($event) {\n            return ctx.showDialogue = $event;\n          })(\"onHide\", function AddEditBudgetTermsComponent_Template_p_dialog_onHide_1_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵelementStart(2, \"p-header\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"form\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"div\", 6)(9, \"label\", 7);\n          i0.ɵɵtext(10, \"Term Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 6)(14, \"div\", 10)(15, \"div\", 11)(16, \"label\", 7);\n          i0.ɵɵtext(17, \"Term Start Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"p-calendar\", 12);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(19, \"div\", 9)(20, \"div\", 6)(21, \"div\", 10)(22, \"div\", 11)(23, \"label\", 7);\n          i0.ɵɵtext(24, \"Term End Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"p-calendar\", 13);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(26, AddEditBudgetTermsComponent_div_26_Template, 3, 1, \"div\", 14);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(27, AddEditBudgetTermsComponent_ng_template_27_Template, 2, 4, \"ng-template\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(28, \"p-toast\", 16);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(12, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.showDialogue)(\"modal\", true)(\"maximizable\", true)(\"breakpoints\", i0.ɵɵpureFunction0(13, _c2));\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.title, \" Budget Term \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.formBudgetTerms);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"showIcon\", false)(\"showSeconds\", false);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.formBudgetTerms.controls[\"dateTo\"] == null ? null : ctx.formBudgetTerms.controls[\"dateTo\"].errors) && ((ctx.formBudgetTerms.controls[\"dateTo\"] == null ? null : ctx.formBudgetTerms.controls[\"dateTo\"].dirty) || (ctx.formBudgetTerms.controls[\"dateTo\"] == null ? null : ctx.formBudgetTerms.controls[\"dateTo\"].touched)) || ctx.formBudgetTerms.controls[\"dateFrom\"].errors && (ctx.formBudgetTerms.controls[\"dateFrom\"].dirty || ctx.formBudgetTerms.controls[\"dateFrom\"].touched));\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.Header, i3.PrimeTemplate, i5.Calendar, i6.ButtonDirective, i6.Button, i7.Dialog, i8.Toast, i9.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.blue-border[_ngcontent-%COMP%]{border-color:#879cc9!important;height:24px!important;margin-top:2px!important}[_nghost-%COMP%]     .p-dialog .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}label[_ngcontent-%COMP%]{font-size:10px;font-weight:500;padding:0 0 0 3px;margin-bottom:-10px!important}[_nghost-%COMP%]     .p-fluid .p-calendar .p-inputtext{height:24px!important}\"]\n    });\n  }\n  return AddEditBudgetTermsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}