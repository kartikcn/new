{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@ng-select/ng-select\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../directive/directive/trim-input.directive\";\nexport let AddPlanFormComponent = /*#__PURE__*/(() => {\n  class AddPlanFormComponent {\n    constructor(enumsrv, formBuilder) {\n      this.enumsrv = enumsrv;\n      this.formBuilder = formBuilder;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.EnumPlanData = [];\n      this.fileName = \"No file chosen\";\n      this.showWarning = false;\n      this.fileSelected = false;\n      this.errorMsg = '';\n      this.prevPlanName = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.planFormPanel = this.formBuilder.group({\n        planId: [null],\n        planName: [null, [Validators.required]],\n        planType: [null, [Validators.required]],\n        description: [null]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.planFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        // this.enumClonedList = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'psr'.toLocaleUpperCase());\n        this.EnumPlanData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plans'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'plan_type'.toLowerCase());\n        this.EnumPlanData.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      }, error => {\n        // this.loginError = error.errorDesc;\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const stateDetails = {\n        planId: this.planFormPanel.controls.planId.value,\n        planName: this.planFormPanel.controls.planName.value,\n        planType: this.planFormPanel.controls.planType.value,\n        description: this.planFormPanel.controls.description.value\n      };\n      return stateDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.planFormPanel.patchValue({\n          planId: value.planId,\n          planName: value.planName,\n          planType: value.planType,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.planFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.planFormPanel.valid ? null : {\n        planFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddPlanFormComponent_Factory(t) {\n      return new (t || AddPlanFormComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPlanFormComponent,\n      selectors: [[\"app-add-plan-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddPlanFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddPlanFormComponent),\n        multi: true\n      }])],\n      decls: 20,\n      vars: 4,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"planName\", \"formControlName\", \"planName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"planType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"rows\", \"6\", \"nz-input\", \"\", \"maxlength\", \"4000\", \"formControlName\", \"description\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"]],\n      template: function AddPlanFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Plan Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\")(10, \"div\", 2)(11, \"label\", 3);\n          i0.ɵɵtext(12, \"Plan Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"ng-select\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\")(16, \"div\", 2)(17, \"label\", 6);\n          i0.ɵɵtext(18, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"textarea\", 7);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.planFormPanel);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.EnumPlanData)(\"searchable\", true);\n        }\n      },\n      dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName, i3.NgSelectComponent, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective]\n    });\n  }\n  return AddPlanFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}