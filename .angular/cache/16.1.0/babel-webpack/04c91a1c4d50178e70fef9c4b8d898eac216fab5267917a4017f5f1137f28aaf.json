{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { ResourceAssignScreenComponent } from '../widgets/resource-assign-screen/resource-assign-screen.component';\nimport { ResourceUnassignScreenComponent } from '../widgets/resourrce-unassign-screen/resource-unassign-screen.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/rm-resources.service\";\nimport * as i2 from \"../provider/rm-resources.provider\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"../widgets/room-list/room-list.component\";\nimport * as i5 from \"../widgets/resourrce-unassign-screen/resource-unassign-screen.component\";\nimport * as i6 from \"../widgets/resource-assign-screen/resource-assign-screen.component\";\nimport * as i7 from \"primeng/toast\";\nimport * as i8 from \"primeng/panel\";\nexport let RmResourcesComponent = /*#__PURE__*/(() => {\n  class RmResourcesComponent {\n    constructor(rmResourcesSrv, rmResourceProvider, messageService) {\n      this.rmResourcesSrv = rmResourcesSrv;\n      this.rmResourceProvider = rmResourceProvider;\n      this.messageService = messageService;\n    }\n    ngOnInit() {}\n    getUnAssignedResources(event) {\n      this.myEvent = event;\n      this.ResourceAssignScreenPanel.blId = event.data.blId;\n      this.ResourceAssignScreenPanel.flId = event.data.flId;\n      this.ResourceAssignScreenPanel.rmId = event.data.rmId;\n      this.ResourceUnAssignScreenPanel.roomDetails = \" \" + '  to ' + event.data.rmName;\n      this.ResourceUnAssignScreenPanel.blId = event.data.blId;\n      this.ResourceUnAssignScreenPanel.flId = event.data.flId;\n      this.ResourceUnAssignScreenPanel.rmId = event.data.rmId;\n      this.ResourceUnAssignScreenPanel.selectedScreens = [];\n      let data = {\n        blId: event.data.blId,\n        flId: event.data.flId,\n        rmId: event.data.rmId\n      };\n      this.rmResourcesSrv.getUnAssignedResources(data).subscribe(res => {\n        this.ResourceAssignScreenPanel.unAssignedResources = res;\n      });\n      this.rmResourcesSrv.getAssignedResources(data).subscribe(res => {\n        this.ResourceUnAssignScreenPanel.AssignedResources = res;\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '400px';\n      dialogConfig.data = {\n        blId: this.blId,\n        flId: this.flId,\n        rmId: this.rmId\n      };\n      this.rmResourceProvider.openDialog(dialogConfig);\n      this.rmResourceProvider.onDialogueClosed.subscribe(result => {\n        if (result) {\n          this.messageService.clear();\n          this.messageService.add({\n            key: 'rmResource',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n        }\n      });\n    }\n    refreshPanels(event) {\n      if (event === \"true\") {\n        this.getUnAssignedResources(this.myEvent);\n      }\n    }\n    static #_ = this.ɵfac = function RmResourcesComponent_Factory(t) {\n      return new (t || RmResourcesComponent)(i0.ɵɵdirectiveInject(i1.RmResourcesService), i0.ɵɵdirectiveInject(i2.RmResourcesDialogueProvider), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RmResourcesComponent,\n      selectors: [[\"app-rm-resources\"]],\n      viewQuery: function RmResourcesComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(ResourceAssignScreenComponent, 5);\n          i0.ɵɵviewQuery(ResourceUnassignScreenComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ResourceAssignScreenPanel = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ResourceUnAssignScreenPanel = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 13,\n      vars: 1,\n      consts: [[\"header\", \"Room List\"], [1, \"row\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-4\", \"col-lg-6\"], [1, \"page-content\", 2, \"height\", \"calc(100vh - 150px)\"], [3, \"isRmConfig\", \"parentFun\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-6\", \"col-lg-6\"], [1, \"col-sm-12\", \"col-md-12\", \"col-lg-12\"], [3, \"allScreenProcsPanels\"], [1, \"row\", 2, \"margin-top\", \"10px !important\"], [\"key\", \"rmResource\", \"position\", \"top-right\"]],\n      template: function RmResourcesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"app-room-list\", 4);\n          i0.ɵɵlistener(\"parentFun\", function RmResourcesComponent_Template_app_room_list_parentFun_4_listener($event) {\n            return ctx.getUnAssignedResources($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(5, \"div\", 5)(6, \"div\", 1)(7, \"div\", 6)(8, \"app-resource-unassign-screen\", 7);\n          i0.ɵɵlistener(\"allScreenProcsPanels\", function RmResourcesComponent_Template_app_resource_unassign_screen_allScreenProcsPanels_8_listener($event) {\n            return ctx.refreshPanels($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 8)(10, \"div\", 6)(11, \"app-resource-assign-screen\", 7);\n          i0.ɵɵlistener(\"allScreenProcsPanels\", function RmResourcesComponent_Template_app_resource_assign_screen_allScreenProcsPanels_11_listener($event) {\n            return ctx.refreshPanels($event);\n          });\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelement(12, \"p-toast\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"isRmConfig\", false);\n        }\n      },\n      dependencies: [i4.RoomListComponent, i5.ResourceUnassignScreenComponent, i6.ResourceAssignScreenComponent, i7.Toast, i8.Panel]\n    });\n  }\n  return RmResourcesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}