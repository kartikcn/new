{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/arrangement.service\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nexport class AddArrangementComponent {\n  constructor(formBuilder, arrangeSrv) {\n    this.formBuilder = formBuilder;\n    this.arrangeSrv = arrangeSrv;\n    this.subscriptions = [];\n    this.newRecord = true;\n    this.isNew = false;\n    this.processList = [];\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.arrangementFormPanel = this.formBuilder.group({\n      arrangementId: [null, [Validators.required]],\n      arrangementType: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      highlightColor: ['#a6a6a6', [Validators.required]]\n    });\n    this.subscriptions.push(this.arrangementFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {}\n  // checkArrangementTypeValidator(control: any) {\n  //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n  //       this.arrangementFormPanel.controls['arrangementType'].setErrors(null);\n  //       this.arrangementFormPanel.clearAsyncValidators();\n  //       this.arrangementFormPanel.updateValueAndValidity();\n  //       this.arrangeSrv.checkArrangementTypeExists(control.value).subscribe((res: any) => {\n  //         if (res && res.text == \"true\") {\n  //           this.arrangementFormPanel.controls['arrangementType'].setErrors({ 'incorrect': true });\n  //           this.arrangementFormPanel.updateValueAndValidity();\n  //           return { 'incorrect': true };\n  //         }\n  //         else {\n  //           return null;\n  //         }\n  //       });\n  //     }\n  // }\n  isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n  getValidationErrors() {\n    const validationErros = [];\n    Object.keys(this.arrangementFormPanel.controls).forEach(key => {\n      let field = this.arrangementFormPanel.get(key);\n      const controlErrors = field != null ? field.errors : null;\n      if (controlErrors != null) {\n        Object.keys(controlErrors).forEach(keyError => {\n          validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n        });\n      }\n    });\n    return validationErros;\n  }\n  get value() {\n    const records = {\n      arrangementId: this.arrangementFormPanel.controls.arrangementId.value,\n      arrangementType: this.arrangementFormPanel.controls.arrangementType.value,\n      description: this.arrangementFormPanel.controls.description.value,\n      highlightColor: this.arrangementFormPanel.controls.highlightColor.value\n    };\n    return records;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.arrangementFormPanel.patchValue({\n        arrangementId: value.arrangementId,\n        arrangementType: value.arrangementType,\n        description: value.description,\n        highlightColor: value.highlightColor ?? '#a6a6a6'\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.arrangementFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  validate(_) {\n    return this.arrangementFormPanel.valid ? null : {\n      arrangementFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function AddArrangementComponent_Factory(t) {\n    return new (t || AddArrangementComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ArrangementService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddArrangementComponent,\n    selectors: [[\"app-add-arrangement\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddArrangementComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddArrangementComponent),\n      multi: true\n    }])],\n    decls: 20,\n    vars: 1,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"arrangementType\", \"formControlName\", \"arrangementType\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"colspan\", \"2\", 2, \"width\", \"100%\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\"]],\n    template: function AddArrangementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Arrangement Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 6)(10, \"div\", 3)(11, \"label\", 4);\n        i0.ɵɵtext(12, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"textarea\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 2)(16, \"div\", 3)(17, \"label\", 4);\n        i0.ɵɵtext(18, \"Highlight Color \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 8);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.arrangementFormPanel);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.TrimInputDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","Validators","NG_VALUE_ACCESSOR","NG_VALIDATORS","VaildationError","AddArrangementComponent","constructor","formBuilder","arrangeSrv","subscriptions","newRecord","isNew","processList","onChange","onTouched","arrangementFormPanel","group","arrangementId","required","arrangementType","description","highlightColor","push","valueChanges","subscribe","value","ngOnInit","isValid","getValidationErrors","length","validationErros","Object","keys","controls","forEach","key","field","get","controlErrors","errors","keyError","records","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","s","unsubscribe","i0","ɵɵdirectiveInject","i1","UntypedFormBuilder","i2","ArrangementService","_2","selectors","inputs","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddArrangementComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/arrangement/widgets/add-arrangement/add-arrangement.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/arrangement/widgets/add-arrangement/add-arrangement.component.html"],"sourcesContent":["import { Component, forwardRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormBuilder, Validators, ValidatorFn, AbstractControl, ValidationErrors, UntypedFormControl, ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { Arrangement } from '../../model/arrangement.model';\nimport { ArrangementService } from '../../services/arrangement.service';\n\n\n@Component({\n  selector: 'app-add-arrangement',\n  templateUrl: './add-arrangement.component.html',\n  styleUrls: ['./add-arrangement.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddArrangementComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddArrangementComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class AddArrangementComponent implements ControlValueAccessor, OnDestroy {\n  arrangementFormPanel:UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  newRecord: boolean = true;\n  @Input() isNew: boolean = false;\n  processList :any[]=[]\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private arrangeSrv:ArrangementService\n  ) { \n    this.arrangementFormPanel = this.formBuilder.group({\n      arrangementId: [null,[Validators.required]],\n      arrangementType: ['', [Validators.required]],\n      description : ['', [Validators.required]],\n      highlightColor : ['#a6a6a6',[Validators.required]]\n    });\n    this.subscriptions.push(\n      this.arrangementFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  // checkArrangementTypeValidator(control: any) {\n  //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n  //       this.arrangementFormPanel.controls['arrangementType'].setErrors(null);\n  //       this.arrangementFormPanel.clearAsyncValidators();\n  //       this.arrangementFormPanel.updateValueAndValidity();\n  //       this.arrangeSrv.checkArrangementTypeExists(control.value).subscribe((res: any) => {\n  //         if (res && res.text == \"true\") {\n  //           this.arrangementFormPanel.controls['arrangementType'].setErrors({ 'incorrect': true });\n  //           this.arrangementFormPanel.updateValueAndValidity();\n  //           return { 'incorrect': true };\n  //         }\n  //         else {\n  //           return null;\n  //         }\n  //       });\n  //     }\n  // }\n\n \n\n  public isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n\n  public getValidationErrors() {\n    const validationErros: VaildationError[] = [];\n    Object.keys(this.arrangementFormPanel.controls).forEach(key => {\n      let field = this.arrangementFormPanel.get(key);\n      const controlErrors: ValidationErrors | null = field != null ? field.errors : null;\n      if (controlErrors != null) {\n        Object.keys(controlErrors).forEach(keyError => {\n          validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n        });\n      }\n    });\n    return validationErros;\n  }\n\n  get value(): Arrangement {\n    const records: Arrangement = {    \n      arrangementId: this.arrangementFormPanel.controls.arrangementId.value,\n      arrangementType: this.arrangementFormPanel.controls.arrangementType.value,\n      description : this.arrangementFormPanel.controls.description.value,\n      highlightColor : this.arrangementFormPanel.controls.highlightColor.value\n    }\n    return records;\n  }\n\n  set value(value: Arrangement) {\n    setTimeout(() => {\n      this.arrangementFormPanel.patchValue({\n        arrangementId: value.arrangementId,\n        arrangementType: value.arrangementType,\n        description: value.description,\n        highlightColor : value.highlightColor??'#a6a6a6'\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n\n  writeValue(value: any) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.arrangementFormPanel.reset();\n    }\n  }\n\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n  validate(_: UntypedFormControl) {\n    return this.arrangementFormPanel.valid ? null : { arrangementFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n}\n","<form [formGroup]=\"arrangementFormPanel\">\n        <table width=\"100%\">\n\n                <tr>\n                        <td style=\"width: 100%\">\n                                <div class=\"input-label-custom\">\n                                        <label class='form-field-lable control-label'>Arrangement Type</label>\n                                        <input type=\"text\" class=\"form-control\" name=\"arrangementType\" formControlName=\"arrangementType\" maxlength=\"64\"\n                                                appTrimInput>\n                                </div>\n                        </td>\n                </tr>\n                <!-- <tr\n                        *ngIf=\"(arrangementFormPanel.controls['arrangementType']?.errors && (arrangementFormPanel.controls['arrangementType']?.dirty || arrangementFormPanel.controls['arrangementType']?.touched))\">\n                        <td style=\"width: 100%\">\n                                <label *ngIf=\"arrangementFormPanel.controls['arrangementType']?.errors && !arrangementFormPanel.controls['arrangementType']?.errors.required\"\n                                        class='form-field-lable' style=\"color:red;\">Arrangement Type already\n                                        exists.</label>\n                        </td>\n                </tr> -->\n                <tr>\n                        <td style=\"width: 100%\" colspan=\"2\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable control-label'>Description</label>\n                                        <textarea class=\"form-control note-border\" name=\"description\" formControlName=\"description\" rows=\"2\" nz-input\n                                                maxlength=\"128\" appTrimInput></textarea>\n                                </div>\n                        </td>\n                </tr>\n                <tr>\n                        <td style=\"width: 100%\">\n                                <div class=\"input-label-custom\">\n                                        <label class='form-field-lable control-label'>Highlight Color </label>\n                                        <input type=\"color\" class=\"form-control\" name=\"highlightColor\" style=\"width: 100px;\"\n                                                formControlName=\"highlightColor\" maxlength=\"32\">\n                                </div>\n                        </td>\n                </tr>\n        </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}