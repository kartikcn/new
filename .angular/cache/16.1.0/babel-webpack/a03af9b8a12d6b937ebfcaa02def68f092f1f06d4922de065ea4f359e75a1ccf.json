{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nexport class PpmPlanService {\n  constructor(ppmPlanService) {\n    this.ppmPlanService = ppmPlanService;\n  }\n  getAllPlans() {\n    return this.ppmPlanService.getAll('plan', 'getAll');\n  }\n  getAllPlansPaginated(data) {\n    return this.ppmPlanService.search('plan', 'getAllPaginated', data);\n  }\n  getPlanById(id) {\n    return this.ppmPlanService.getSingleById('plan', 'getPlanById', id);\n  }\n  savePlan(data) {\n    return this.ppmPlanService.add('plan', 'save', data);\n  }\n  deletePlan(id) {\n    return this.ppmPlanService.getSingleById('plan', 'deletePlanById', id);\n  }\n  checkIsPlanNameExists(planName) {\n    return this.ppmPlanService.getSingleById('plan', 'checkExist', planName);\n  }\n  getAllPlanSteps(planId) {\n    return this.ppmPlanService.getAllById('planStep', 'getAllByPlanId', planId);\n  }\n  getPlanStepById(id) {\n    return this.ppmPlanService.getSingleById('planStep', 'getplanStepById', id);\n  }\n  savePlanStep(data) {\n    return this.ppmPlanService.add('planStep', 'save', data);\n  }\n  deletePlanStep(id) {\n    return this.ppmPlanService.getSingleById('planStep', 'deletePlanStepById', id);\n  }\n  checkIsStepCodeExists(planId, stepCode) {\n    return this.ppmPlanService.getAllByIds('planStep', 'checkExist', planId, stepCode);\n  }\n  static #_ = this.ɵfac = function PpmPlanService_Factory(t) {\n    return new (t || PpmPlanService)(i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PpmPlanService,\n    factory: PpmPlanService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PpmPlanService","constructor","ppmPlanService","getAllPlans","getAll","getAllPlansPaginated","data","search","getPlanById","id","getSingleById","savePlan","add","deletePlan","checkIsPlanNameExists","planName","getAllPlanSteps","planId","getAllById","getPlanStepById","savePlanStep","deletePlanStep","checkIsStepCodeExists","stepCode","getAllByIds","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\ppm-plan\\services\\ppm-plan-services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataService } from '../../../services/data.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PpmPlanService {\n   \n    constructor(\n        private ppmPlanService: DataService<any>,\n    ) { }\n\n    public getAllPlans() {\n        return this.ppmPlanService.getAll('plan', 'getAll');\n    }\n    public getAllPlansPaginated(data:any) {\n        return this.ppmPlanService.search('plan', 'getAllPaginated',data);\n    }\n\n    public getPlanById(id: any) {\n        return this.ppmPlanService.getSingleById('plan', 'getPlanById', id);\n    }\n\n    public savePlan(data: any): Observable<any> {\n        return this.ppmPlanService.add('plan', 'save', data);\n    }\n\n    public deletePlan(id: any) {\n        return this.ppmPlanService.getSingleById('plan', 'deletePlanById', id);\n    }\n\n    public checkIsPlanNameExists(planName:any) {\n        return this.ppmPlanService.getSingleById('plan','checkExist',planName)\n    }\n\n    public getAllPlanSteps(planId:any) {\n        return this.ppmPlanService.getAllById('planStep', 'getAllByPlanId',planId);\n    }\n\n    public getPlanStepById(id: any) {\n        return this.ppmPlanService.getSingleById('planStep', 'getplanStepById', id);\n    }\n\n    public savePlanStep(data: any): Observable<any> {\n        return this.ppmPlanService.add('planStep', 'save', data);\n    }\n\n    public deletePlanStep(id: any) {\n        return this.ppmPlanService.getSingleById('planStep', 'deletePlanStepById', id);\n    }\n\n    checkIsStepCodeExists(planId: any, stepCode: any) {\n       return this.ppmPlanService.getAllByIds('planStep','checkExist',planId,stepCode);\n    }\n    \n}\n"],"mappings":";;AAOA,OAAM,MAAOA,cAAc;EAEvBC,YACYC,cAAgC;IAAhC,KAAAA,cAAc,GAAdA,cAAc;EACtB;EAEGC,WAAWA,CAAA;IACd,OAAO,IAAI,CAACD,cAAc,CAACE,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC;EACvD;EACOC,oBAAoBA,CAACC,IAAQ;IAChC,OAAO,IAAI,CAACJ,cAAc,CAACK,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAACD,IAAI,CAAC;EACrE;EAEOE,WAAWA,CAACC,EAAO;IACtB,OAAO,IAAI,CAACP,cAAc,CAACQ,aAAa,CAAC,MAAM,EAAE,aAAa,EAAED,EAAE,CAAC;EACvE;EAEOE,QAAQA,CAACL,IAAS;IACrB,OAAO,IAAI,CAACJ,cAAc,CAACU,GAAG,CAAC,MAAM,EAAE,MAAM,EAAEN,IAAI,CAAC;EACxD;EAEOO,UAAUA,CAACJ,EAAO;IACrB,OAAO,IAAI,CAACP,cAAc,CAACQ,aAAa,CAAC,MAAM,EAAE,gBAAgB,EAAED,EAAE,CAAC;EAC1E;EAEOK,qBAAqBA,CAACC,QAAY;IACrC,OAAO,IAAI,CAACb,cAAc,CAACQ,aAAa,CAAC,MAAM,EAAC,YAAY,EAACK,QAAQ,CAAC;EAC1E;EAEOC,eAAeA,CAACC,MAAU;IAC7B,OAAO,IAAI,CAACf,cAAc,CAACgB,UAAU,CAAC,UAAU,EAAE,gBAAgB,EAACD,MAAM,CAAC;EAC9E;EAEOE,eAAeA,CAACV,EAAO;IAC1B,OAAO,IAAI,CAACP,cAAc,CAACQ,aAAa,CAAC,UAAU,EAAE,iBAAiB,EAAED,EAAE,CAAC;EAC/E;EAEOW,YAAYA,CAACd,IAAS;IACzB,OAAO,IAAI,CAACJ,cAAc,CAACU,GAAG,CAAC,UAAU,EAAE,MAAM,EAAEN,IAAI,CAAC;EAC5D;EAEOe,cAAcA,CAACZ,EAAO;IACzB,OAAO,IAAI,CAACP,cAAc,CAACQ,aAAa,CAAC,UAAU,EAAE,oBAAoB,EAAED,EAAE,CAAC;EAClF;EAEAa,qBAAqBA,CAACL,MAAW,EAAEM,QAAa;IAC7C,OAAO,IAAI,CAACrB,cAAc,CAACsB,WAAW,CAAC,UAAU,EAAC,YAAY,EAACP,MAAM,EAACM,QAAQ,CAAC;EAClF;EAAC,QAAAE,CAAA,G;qBA/CQzB,cAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd9B,cAAc;IAAA+B,OAAA,EAAd/B,cAAc,CAAAgC,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}