{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/department.services\";\nimport * as i3 from \"src/app/ui/employee/services/employee.service\";\nimport * as i4 from \"../../services/division.services\";\nimport * as i5 from \"src/app/services/auth.service\";\nimport * as i6 from \"primeng/api\";\nimport * as i7 from \"../../services/subDepartment.services\";\nimport * as i8 from \"@ng-select/ng-select\";\nimport * as i9 from \"ng-zorro-antd/table\";\nimport * as i10 from \"ng-zorro-antd/input\";\nimport * as i11 from \"primeng/button\";\nimport * as i12 from \"primeng/toast\";\nimport * as i13 from \"primeng/panel\";\nimport * as i14 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddSubDepartmentComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AddSubDepartmentComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function AddSubDepartmentComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.cancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.subDepartmentFormPanel.valid);\n  }\n}\nexport let AddSubDepartmentComponent = /*#__PURE__*/(() => {\n  class AddSubDepartmentComponent {\n    constructor(formBuilder, departmentService, employeeService, divisionService, authSrv, messageService, subDepartmentService) {\n      this.formBuilder = formBuilder;\n      this.departmentService = departmentService;\n      this.employeeService = employeeService;\n      this.divisionService = divisionService;\n      this.authSrv = authSrv;\n      this.messageService = messageService;\n      this.subDepartmentService = subDepartmentService;\n      this.title = '';\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.isNew = false;\n      this.action = '';\n      this.parentFun = new EventEmitter();\n      this.processList = [];\n      this.allEmployees = [];\n      this.enumEm = [];\n      this.enumDivisions = [];\n      this.enumDepartments = [];\n      this.allDepartmentsData = [];\n      this.limitEm = 0;\n      this.offsetEm = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.selectedEm = {};\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.subDepartmentFormPanel = this.formBuilder.group({\n        subDepId: [null, [Validators.required]],\n        subDepCode: ['', [Validators.required]],\n        divId: [null, [Validators.required]],\n        depId: [null, [Validators.required]],\n        subDepHead: [''],\n        description: [''],\n        highlightColor: ['#a6a6a6']\n      });\n      this.subscriptions.push(this.subDepartmentFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      // this.loadAllEmployees();\n      this.loadDivisionCodes();\n      this.loadDepartmentCodes();\n    }\n    ngOnChanges() {\n      this.title = this.action;\n      if (this.formData) {\n        this.setFormData(this.formData);\n      }\n    }\n    loadAllEmployees() {\n      this.employeeService.getAllEmployeeList().subscribe(res => {\n        this.allEmployees = res;\n        this.enumEm = this.allEmployees;\n        this.enumEm.map(i => {\n          if (i.firstName.length > 0 && i.lastName.length > 0) {\n            return i.fullName = i.firstName + ' ' + i.lastName;\n          } else {\n            return i.lastName;\n          }\n        });\n        this.enumEm.unshift({\n          fullName: 'Make a selection',\n          emId: null\n        });\n      });\n    }\n    loadDivisionCodes() {\n      this.divisionService.getAllDivisions().subscribe(res => {\n        this.enumDivisions = res.map(obj => ({\n          ...obj,\n          displayDivId: obj.divCode + \" - \" + obj.description\n        }));\n        this.enumDivisions.unshift({\n          divId: null,\n          displayDivId: 'Make a selection'\n        });\n      });\n    }\n    loadDepartmentCodes() {\n      this.departmentService.getAllDepartments().subscribe(res => {\n        this.enumDepartments = res.map(obj => ({\n          ...obj,\n          displayDepId: obj.depCode + \" - \" + obj.description\n        }));\n        this.allDepartmentsData = [...this.enumDepartments];\n        this.enumDepartments.unshift({\n          depId: null,\n          divId: null,\n          displayDepId: 'Make a selection'\n        });\n      });\n    }\n    onSelectDivision(event) {\n      if (event.divId != null) {\n        setTimeout(() => {\n          this.subDepartmentFormPanel.patchValue({\n            depId: null\n          });\n          this.enumDepartments = this.allDepartmentsData.filter(each => each.divId == event.divId);\n          this.enumDepartments.unshift({\n            depId: null,\n            divId: null,\n            displayDepId: 'Make a selection'\n          });\n        }, 10);\n      } else {\n        this.enumDepartments = [...this.allDepartmentsData];\n        this.enumDepartments.unshift({\n          depId: null,\n          divId: null,\n          displayDepId: 'Make a selection'\n        });\n      }\n    }\n    setFormData(data) {\n      if (data.subDepHead) {\n        this.employeeService.getEmById(data.subDepHead).subscribe(res => {\n          this.createEm(res.em);\n        });\n      }\n      this.subDepartmentFormPanel.patchValue({\n        subDepId: data.subDepId,\n        subDepCode: data.subDepCode,\n        divId: data.divId,\n        depId: data.depId,\n        subDepHead: data.subDepHead,\n        description: data.description,\n        highlightColor: data.highlightColor ?? '#a6a6a6'\n      });\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.subDepartmentFormPanel.valid ? null : {\n        subDepartmentFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    cancel() {\n      this.parentFun.emit(false);\n    }\n    saveRecords() {\n      this.messageService.clear();\n      let data = {\n        subDepId: this.subDepartmentFormPanel.controls.subDepId.value,\n        divId: this.subDepartmentFormPanel.controls.divId.value,\n        depId: this.subDepartmentFormPanel.controls.depId.value,\n        subDepCode: this.subDepartmentFormPanel.controls.subDepCode.value,\n        description: this.subDepartmentFormPanel.controls.description.value,\n        highlightColor: this.subDepartmentFormPanel.controls.highlightColor.value,\n        subDepHead: this.subDepartmentFormPanel.controls.subDepHead.value\n      };\n      this.subDepartmentService.saveSubDepartment(data).subscribe(res => {\n        if (res.subDepCode) {\n          this.parentFun.emit(res.subDepId);\n        } else if (res.code != 200) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      });\n    }\n    scrollToEndEm() {\n      this.offsetEm = this.limitEm;\n      this.limitEm += this.scrollLimit;\n      this.filterCriteria.limit = this.limitEm;\n      this.filterCriteria.offset = this.offsetEm;\n      this.employeeService.getALLmployeeByScroll(this.filterCriteria).subscribe(res => {\n        this.enumEm = res;\n        this.enumEm.unshift({\n          emId: null,\n          firstName: 'Make a selection',\n          emCode: null\n        });\n        this.updateEmList(this.selectedEm);\n      });\n    }\n    searchEm(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"firstName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndEm();\n    }\n    createEm(em) {\n      const emData = {\n        emId: em.emId,\n        emCode: em.emCode,\n        firstName: em.firstName\n      };\n      this.selectedEm = emData;\n      this.updateEmList(emData);\n    }\n    updateEmList(emData) {\n      if (emData.emId) {\n        this.enumEm = this.enumEm.filter(e => e.emId != emData.emId);\n        this.enumEm = this.enumEm.filter(e => e.emId != null);\n        this.enumEm.unshift(emData);\n        this.enumEm.unshift({\n          emId: null,\n          firstName: 'Make a selection',\n          emCode: null\n        });\n      }\n    }\n    openEm() {\n      this.limitEm = 0;\n      this.offsetEm = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndEm();\n    }\n    static #_ = this.ɵfac = function AddSubDepartmentComponent_Factory(t) {\n      return new (t || AddSubDepartmentComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.DepartmentService), i0.ɵɵdirectiveInject(i3.EmployeeService), i0.ɵɵdirectiveInject(i4.DivisionService), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.MessageService), i0.ɵɵdirectiveInject(i7.SubDepartmentService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddSubDepartmentComponent,\n      selectors: [[\"app-add-sub-department\"]],\n      inputs: {\n        isNew: \"isNew\",\n        action: \"action\",\n        formData: \"formData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddSubDepartmentComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddSubDepartmentComponent),\n        multi: true\n      }, MessageService]), i0.ɵɵNgOnChangesFeature],\n      decls: 41,\n      vars: 11,\n      consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"divId\", \"bindLabel\", \"displayDivId\", \"bindValue\", \"divId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", \"custom-select\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"depId\", \"bindLabel\", \"displayDepId\", \"bindValue\", \"depId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", \"custom-select\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"name\", \"subDepCode\", \"formControlName\", \"subDepCode\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"subDepHead\", \"bindLabel\", \"firstName\", \"bindValue\", \"emId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"scrollToEnd\", \"search\", \"open\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [2, \"width\", \"100%\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Save\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"ml10\", 3, \"click\"]],\n      template: function AddSubDepartmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, AddSubDepartmentComponent_ng_template_1_Template, 2, 1, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\", 3)(5, \"td\")(6, \"div\", 4)(7, \"label\", 5);\n          i0.ɵɵtext(8, \"Division Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function AddSubDepartmentComponent_Template_ng_select_change_9_listener($event) {\n            return ctx.onSelectDivision($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(10, \"tr\", 3)(11, \"td\")(12, \"div\", 4)(13, \"label\", 5);\n          i0.ɵɵtext(14, \"Department Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"ng-select\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"tr\", 3)(17, \"td\")(18, \"div\", 4)(19, \"label\", 5);\n          i0.ɵɵtext(20, \"Sub Department Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 8);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"tr\", 3)(23, \"td\")(24, \"div\", 4)(25, \"label\", 5);\n          i0.ɵɵtext(26, \"Sub Department Head\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(27, \"ng-select\", 9);\n          i0.ɵɵlistener(\"scrollToEnd\", function AddSubDepartmentComponent_Template_ng_select_scrollToEnd_27_listener() {\n            return ctx.scrollToEndEm();\n          })(\"search\", function AddSubDepartmentComponent_Template_ng_select_search_27_listener($event) {\n            return ctx.searchEm($event);\n          })(\"open\", function AddSubDepartmentComponent_Template_ng_select_open_27_listener() {\n            return ctx.openEm();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(28, \"tr\", 3)(29, \"td\")(30, \"div\", 4)(31, \"label\", 10);\n          i0.ɵɵtext(32, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(33, \"textarea\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(34, \"tr\")(35, \"td\", 12)(36, \"div\", 4)(37, \"label\", 5);\n          i0.ɵɵtext(38, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(39, \"input\", 13);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelement(40, \"p-toast\", 14);\n        }\n        if (rf & 2) {\n          i0.ɵɵpropertyInterpolate1(\"header\", \"\", ctx.title, \" Sub Department\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.subDepartmentFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumDivisions)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumDepartments)(\"searchable\", true);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumEm)(\"searchable\", true);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i8.NgSelectComponent, i9.NzTableCellDirective, i9.NzTrDirective, i10.NzInputDirective, i6.PrimeTemplate, i11.ButtonDirective, i12.Toast, i13.Panel, i14.TrimInputDirective]\n    });\n  }\n  return AddSubDepartmentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}