{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"primeng/dialog\";\nimport * as i3 from \"../../../../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nimport * as i4 from \"@swimlane/ngx-charts\";\nfunction DashboardStatusPieChartComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 4);\n    i0.ɵɵtext(1, \"Request List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardStatusPieChartComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r1.detailsPopUpData)(\"isEscalatedData\", ctx_r1.viewForEscalation);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"66vw\",\n    \"overflow-x\": \"scroll\"\n  };\n};\nexport class DashboardStatusPieChartComponent {\n  constructor(cdr) {\n    this.cdr = cdr;\n    this.data = [];\n    this.labels = [];\n    this.detailsPopUpData = [];\n    this.showDetailsPopUp = false;\n    this.viewForEscalation = true;\n    this.basicOptions = {\n      title: {\n        display: false,\n        text: 'Bar Chart',\n        fontSize: 18\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        x: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Status',\n            fontStyle: 'bold'\n          },\n          ticks: {\n            display: true\n          },\n          grid: {\n            display: false\n          }\n        },\n        y: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Request Count',\n            fontStyle: 'bold'\n          },\n          ticks: {\n            beginAtZero: true,\n            stepSize: 5,\n            display: true\n          },\n          grid: {\n            display: false\n          }\n        }\n      },\n      tooltips: {\n        enabled: true,\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (tooltipItem) {\n            return \"Requests: \" + tooltipItem.formattedValue;\n          }\n        }\n      },\n      responsive: true,\n      animation: {\n        duration: 1000,\n        easing: 'easeOutBounce'\n      }\n    };\n    this.pieContent = [];\n    this.customColor = {\n      domain: ['#000000']\n    };\n    this.view = [730, 242];\n  }\n  ngOnInit() {}\n  loadChartData(statusChartData) {\n    this.data = [statusChartData.requested.data.length, statusChartData.approved.data.length, statusChartData.rejected.data.length, statusChartData.inProcess.data.length, statusChartData.onHoldForAccess.data.length, statusChartData.onHoldForParts.data.length, statusChartData.onHoldForLabour.data.length, statusChartData.completed.data.length, statusChartData.close.data.length, statusChartData.cancelled.data.length];\n    this.setChartData(statusChartData);\n  }\n  setChartData(statusChartData) {\n    let initialChartData = {\n      labels: this.labels,\n      datasets: [{\n        label: \"\",\n        data: [],\n        backgroundColor: [],\n        borderColor: [],\n        borderWidth: 1\n      }]\n    };\n    const dynamicColors = [];\n    for (let key in statusChartData) {\n      if (statusChartData.hasOwnProperty(key)) {\n        let color = '';\n        do {\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color));\n        {\n          // Regenerate color if it is white\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        }\n        ;\n        dynamicColors.push(color);\n      }\n    }\n    Object.values(statusChartData).forEach((each, index) => {\n      if (each.data.length > 0) {\n        // initialChartData.labels.push(each.label);\n        this.labels.push(each.label);\n        initialChartData.datasets[0].data.push(each.data.length);\n        //initialChartData.datasets[0].label = each.label;\n        initialChartData.datasets[0].backgroundColor.push(dynamicColors[index % dynamicColors.length]);\n        initialChartData.datasets[0].borderColor.push(dynamicColors[index % dynamicColors.length]);\n      }\n    });\n    //this.basicOptions.scales.xAxes[0].scaleLabel.labelString = 'Status';\n    this.chartData = initialChartData;\n  }\n  isWhiteColorShade(color) {\n    // Extract RGB values from the color string\n    const rgbValues = color.match(/\\d+/g);\n    const r = parseInt(rgbValues[0]);\n    const g = parseInt(rgbValues[1]);\n    const b = parseInt(rgbValues[2]);\n    // Check if all RGB values are close to 255 (white)\n    const threshold = 50; // Adjust this threshold as needed\n    const average = (r + g + b) / 3;\n    return average > threshold;\n  }\n  onClickBarChart(event) {\n    this.viewForEscalation = true;\n    this.detailsPopUpData = [];\n    // const selectedStatus = this.labels[event.element.index];\n    switch (event.label) {\n      case 'Requested':\n        this.detailsPopUpData.push(...this.statusChartData.requested.data);\n        this.viewForEscalation = false;\n        break;\n      case 'Approved':\n        this.detailsPopUpData.push(...this.statusChartData.approved.data);\n        break;\n      case 'Rejected':\n        this.detailsPopUpData.push(...this.statusChartData.rejected.data);\n        break;\n      case 'In Process':\n        this.detailsPopUpData.push(...this.statusChartData.inProcess.data);\n        break;\n      case 'On Hold For Access':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForAccess.data);\n        break;\n      case 'On Hold For Parts':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForParts.data);\n        break;\n      case 'On Hold For Labour':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForLabour.data);\n        break;\n      case 'Completed':\n        this.detailsPopUpData.push(...this.statusChartData.completed.data);\n        break;\n      case 'Close':\n        this.detailsPopUpData.push(...this.statusChartData.close.data);\n        break;\n      case 'Cancelled':\n        this.detailsPopUpData.push(...this.statusChartData.cancelled.data);\n        break;\n      default:\n        break;\n    }\n    this.showDetailsPopUp = true;\n  }\n  loadPieData(statusChartData) {\n    this.generateColors(statusChartData);\n    this.pieContent = [];\n    Object.values(statusChartData).forEach((each, index) => {\n      let name = each.label;\n      let value = each.data.length;\n      if (value > 0) {\n        let dataobj = {\n          name: name,\n          value: value\n        };\n        this.pieContent.push(dataobj);\n      }\n    });\n    this.cdr.detectChanges();\n  }\n  generateColors(statusChartData) {\n    const dynamicColors = [];\n    Object.values(statusChartData).forEach((each, index) => {\n      if (each.data.length > 0) {\n        let color = '';\n        do {\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color));\n        {\n          // Regenerate color if it is white\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        }\n        ;\n        dynamicColors.push(color);\n      }\n    });\n    this.customColor = {\n      domain: [...dynamicColors]\n    };\n  }\n  static #_ = this.ɵfac = function DashboardStatusPieChartComponent_Factory(t) {\n    return new (t || DashboardStatusPieChartComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardStatusPieChartComponent,\n    selectors: [[\"app-dashboard-status-pie-chart\"]],\n    inputs: {\n      statusChartData: \"statusChartData\"\n    },\n    decls: 4,\n    vars: 11,\n    consts: [[3, \"results\", \"scheme\", \"view\", \"select\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [2, \"margin\", \"0px\"], [3, \"data\", \"isEscalatedData\"]],\n    template: function DashboardStatusPieChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ngx-charts-advanced-pie-chart\", 0);\n        i0.ɵɵlistener(\"select\", function DashboardStatusPieChartComponent_Template_ngx_charts_advanced_pie_chart_select_0_listener($event) {\n          return ctx.onClickBarChart($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"p-dialog\", 1);\n        i0.ɵɵlistener(\"visibleChange\", function DashboardStatusPieChartComponent_Template_p_dialog_visibleChange_1_listener($event) {\n          return ctx.showDetailsPopUp = $event;\n        });\n        i0.ɵɵtemplate(2, DashboardStatusPieChartComponent_ng_template_2_Template, 2, 0, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, DashboardStatusPieChartComponent_ng_template_3_Template, 1, 2, \"ng-template\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"results\", ctx.pieContent)(\"scheme\", ctx.customColor)(\"view\", ctx.view);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(10, _c0));\n        i0.ɵɵproperty(\"visible\", ctx.showDetailsPopUp)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n      }\n    },\n    dependencies: [i1.PrimeTemplate, i2.Dialog, i3.AddTableComponent, i4.AdvancedPieChartComponent],\n    styles: [\"[_nghost-%COMP%]     .total-label {\\n  margin-top: 10px;\\n  margin-bottom: 10px !important;\\n  font-size: 18px !important;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value {\\n  margin-top: 0px;\\n  margin-bottom: 3px;\\n  font-size: 18px !important;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items {\\n  white-space: pre-wrap;\\n  overflow: hidden;\\n  display: grid;\\n  grid-template-columns: repeat(3, 1fr);\\n  grid-gap: 10px;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend .total-value {\\n  font-size: 24px !important;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent {\\n  font-size: 18px !important;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend-wrapper {\\n  overflow: scroll !important;\\n}\\n\\n[_nghost-%COMP%]     .advanced-pie-legend {\\n  top: 58% !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvZmFjaWxpdGllcy1oZWxwZGVzay1kYXNoYm9hcmRzL3dpZGdldHMvZGFzaGJvYXJkLXN0YXR1cy1waWUtY2hhcnQvbW9kYWwvZGFzaGJvYXJkLXN0YXR1cy1waWUtY2hhcnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLDhCQUFBO0VBQ0EsMEJBQUE7QUFDSjs7QUFFQTtFQUNJLGVBQUE7RUFDQSxrQkFBQTtFQUNBLDBCQUFBO0FBQ0o7O0FBRUE7RUFDSSxxQkFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHFDQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksMEJBQUE7QUFDSjs7QUFFQTtFQUNJLDBCQUFBO0FBQ0o7O0FBRUE7RUFDSSwyQkFBQTtBQUNKOztBQUVBO0VBQ0ksbUJBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IDo6bmctZGVlcCAudG90YWwtbGFiZWx7XG4gICAgbWFyZ2luLXRvcDoxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206MTBweCAhaW1wb3J0YW50O1xuICAgIGZvbnQtc2l6ZTogMThweCAhaW1wb3J0YW50O1xufVxuXG46aG9zdCA6Om5nLWRlZXAgLmFkdmFuY2VkLXBpZS1sZWdlbmQgLmxlZ2VuZC1pdGVtcy1jb250YWluZXIgLmxlZ2VuZC1pdGVtcyAubGVnZW5kLWl0ZW0gLml0ZW0tdmFsdWUge1xuICAgIG1hcmdpbi10b3A6MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDNweDtcbiAgICBmb250LXNpemU6MThweCAhaW1wb3J0YW50O1xufVxuXG46aG9zdCA6Om5nLWRlZXAgLmFkdmFuY2VkLXBpZS1sZWdlbmQgLmxlZ2VuZC1pdGVtcy1jb250YWluZXIgLmxlZ2VuZC1pdGVtcyB7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xuICAgIGdyaWQtZ2FwOiAxMHB4OyBcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5hZHZhbmNlZC1waWUtbGVnZW5kIC50b3RhbC12YWx1ZXtcbiAgICBmb250LXNpemU6IDI0cHggIWltcG9ydGFudDtcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5hZHZhbmNlZC1waWUtbGVnZW5kIC5sZWdlbmQtaXRlbXMtY29udGFpbmVyIC5sZWdlbmQtaXRlbXMgLmxlZ2VuZC1pdGVtIC5pdGVtLXBlcmNlbnQge1xuICAgIGZvbnQtc2l6ZToxOHB4ICFpbXBvcnRhbnQ7XG59XG5cbjpob3N0IDo6bmctZGVlcCAuYWR2YW5jZWQtcGllLWxlZ2VuZC13cmFwcGVye1xuICAgIG92ZXJmbG93OiBzY3JvbGwgIWltcG9ydGFudDtcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5hZHZhbmNlZC1waWUtbGVnZW5ke1xuICAgIHRvcDogNTglICFpbXBvcnRhbnQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ctx_r1","detailsPopUpData","viewForEscalation","DashboardStatusPieChartComponent","constructor","cdr","data","labels","showDetailsPopUp","basicOptions","title","display","text","fontSize","legend","scales","x","fontStyle","ticks","grid","y","beginAtZero","stepSize","tooltips","enabled","mode","intersect","callbacks","label","tooltipItem","formattedValue","responsive","animation","duration","easing","pieContent","customColor","domain","view","ngOnInit","loadChartData","statusChartData","requested","length","approved","rejected","inProcess","onHoldForAccess","onHoldForParts","onHoldForLabour","completed","close","cancelled","setChartData","initialChartData","datasets","backgroundColor","borderColor","borderWidth","dynamicColors","key","hasOwnProperty","color","Math","floor","random","isWhiteColorShade","push","Object","values","forEach","each","index","chartData","rgbValues","match","r","parseInt","g","b","threshold","average","onClickBarChart","event","loadPieData","generateColors","name","value","dataobj","detectChanges","_","ɵɵdirectiveInject","ChangeDetectorRef","_2","selectors","inputs","decls","vars","consts","template","DashboardStatusPieChartComponent_Template","rf","ctx","ɵɵlistener","DashboardStatusPieChartComponent_Template_ngx_charts_advanced_pie_chart_select_0_listener","$event","DashboardStatusPieChartComponent_Template_p_dialog_visibleChange_1_listener","ɵɵtemplate","DashboardStatusPieChartComponent_ng_template_2_Template","DashboardStatusPieChartComponent_ng_template_3_Template","ɵɵadvance","ɵɵstyleMap","ɵɵpureFunction0","_c0"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/facilities-helpdesk-dashboards/widgets/dashboard-status-pie-chart/modal/dashboard-status-pie-chart.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/facilities-helpdesk-dashboards/widgets/dashboard-status-pie-chart/modal/dashboard-status-pie-chart.component.html"],"sourcesContent":["import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport { DashboardStatusPieModel } from '../model/dashboard-status-pie.model';\n\n@Component({\n  selector: 'app-dashboard-status-pie-chart',\n  templateUrl: './dashboard-status-pie-chart.component.html',\n  styleUrls: ['./dashboard-status-pie-chart.component.scss']\n})\nexport class DashboardStatusPieChartComponent implements OnInit {\n  \n  data: any = [];\n  options: any;\n  chartData : any;\n  labels: any[] = [];\n  detailsPopUpData: any[] = [];\n  showDetailsPopUp: boolean = false;\n  viewForEscalation:boolean = true;\n  @Input() statusChartData!: any;\n  basicOptions = {\n    title: {\n      display: false,\n      text: 'Bar Chart',\n      fontSize: 18\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Status',\n          fontStyle: 'bold',\n        },\n        ticks: {\n          display: true,\n        },\n        grid: {\n          display: false,\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Request Count',\n          fontStyle: 'bold',\n        },\n        ticks: {\n          beginAtZero: true,\n          stepSize: 5,\n          display: true \n        },\n        grid: {\n          display: false,\n        }\n      },\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem:any) {\n          return \"Requests: \" + tooltipItem.formattedValue;\n        }\n      }\n    },\n    responsive: true,\n    animation: {\n      duration: 1000,\n      easing: 'easeOutBounce'\n    },\n  };\n  \n  pieContent :DashboardStatusPieModel[]=  [];\n  customColor = {\n    domain: ['#000000'] \n  };\n  view: any[] = [730, 242];\n  constructor(private cdr: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    \n  }\n\n  loadChartData (statusChartData : any){\n    this.data = [\n      statusChartData.requested.data.length,\n      statusChartData.approved.data.length,\n      statusChartData.rejected.data.length,\n      statusChartData.inProcess.data.length,\n      statusChartData.onHoldForAccess.data.length,\n      statusChartData.onHoldForParts.data.length,\n      statusChartData.onHoldForLabour.data.length,\n      statusChartData.completed.data.length,\n      statusChartData.close.data.length,\n      statusChartData.cancelled.data.length,\n    ];\n    this.setChartData(statusChartData)\n  }\n\n  setChartData(statusChartData: any) {\n    let initialChartData: any = {\n      labels: this.labels,\n      datasets: [\n        {\n          label: \"\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1\n        }\n      ]\n    }\n    const dynamicColors: any[] = [];\n\n    for (let key in statusChartData) {\n      if (statusChartData.hasOwnProperty(key)) {\n        let color = '';\n        do {\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color)) { // Regenerate color if it is white\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        };\n\n        dynamicColors.push(color);\n      }\n    }\n    Object.values(statusChartData).forEach((each: any, index: number) => {\n      if(each.data.length > 0){\n       // initialChartData.labels.push(each.label);\n       this.labels.push(each.label);\n        initialChartData.datasets[0].data.push(each.data.length);\n        //initialChartData.datasets[0].label = each.label;\n        initialChartData.datasets[0].backgroundColor.push(\n          dynamicColors[index % dynamicColors.length]\n        );\n        initialChartData.datasets[0].borderColor.push(\n          dynamicColors[index % dynamicColors.length]\n        );\n      }\n    });\n\n    //this.basicOptions.scales.xAxes[0].scaleLabel.labelString = 'Status';\n    this.chartData = initialChartData;\n  }\n\n  isWhiteColorShade(color: any) {\n    // Extract RGB values from the color string\n    const rgbValues = color.match(/\\d+/g);\n    const r = parseInt(rgbValues[0]);\n    const g = parseInt(rgbValues[1]);\n    const b = parseInt(rgbValues[2]);\n\n    // Check if all RGB values are close to 255 (white)\n    const threshold = 50; // Adjust this threshold as needed\n    const average = (r + g + b) / 3;\n    return average > threshold;\n  }\n\n  onClickBarChart(event: any) {\n    this.viewForEscalation = true;\n    this.detailsPopUpData = [];\n    // const selectedStatus = this.labels[event.element.index];\n    switch (event.label) {\n      case 'Requested':\n        this.detailsPopUpData.push(...this.statusChartData.requested.data);\n        this.viewForEscalation = false;\n        break;\n      case 'Approved':\n        this.detailsPopUpData.push(...this.statusChartData.approved.data);\n        break;\n      case 'Rejected':\n        this.detailsPopUpData.push(...this.statusChartData.rejected.data);\n        break;\n      case 'In Process':\n        this.detailsPopUpData.push(...this.statusChartData.inProcess.data);\n        break;\n      case 'On Hold For Access':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForAccess.data);\n        break;\n      case 'On Hold For Parts':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForParts.data);\n        break;\n      case 'On Hold For Labour':\n        this.detailsPopUpData.push(...this.statusChartData.onHoldForLabour.data);\n        break;\n      case 'Completed':\n        this.detailsPopUpData.push(...this.statusChartData.completed.data);\n        break;\n      case 'Close':\n        this.detailsPopUpData.push(...this.statusChartData.close.data);\n        break;\n      case 'Cancelled':\n        this.detailsPopUpData.push(...this.statusChartData.cancelled.data);\n        break;\n      default:\n        break;\n    }\n    this.showDetailsPopUp = true;\n  }\n\n  loadPieData(statusChartData : any[]){\n    this.generateColors(statusChartData);\n    this.pieContent=[];\n    Object.values(statusChartData).forEach((each: any, index: number) => {\n      let name = each.label;\n      let value = each.data.length;\n      if(value>0){\n        let dataobj = {\n          name:name,\n          value: value\n        }\n        this.pieContent.push(dataobj);\n      }\n    })\n    this.cdr.detectChanges();\n  }\n\n  generateColors(statusChartData:any){\n    const dynamicColors: any[] = [];\n    Object.values(statusChartData).forEach((each: any, index: number) => {\n      if(each.data.length>0){\n        let color = '';\n      do {\n        color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n      } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color)) { // Regenerate color if it is white\n        color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n      };\n      dynamicColors.push(color);\n      }\n    });\n    this.customColor = {\n      domain :[...dynamicColors]\n    }\n  }\n\n}\n","<!-- <p-chart type=\"bar\" [data]=\"chartData\" [options]=\"basicOptions\"\n    (onDataSelect)=\"onClickBarChart($event)\"></p-chart> -->\n\n<ngx-charts-advanced-pie-chart [results]=\"pieContent\"  [scheme]=\"customColor\"  [view]=\"view\"  (select)=\"onClickBarChart($event)\"></ngx-charts-advanced-pie-chart>\n\n<p-dialog [(visible)]=\"showDetailsPopUp\" [modal]=\"true\" [style]=\"{width: '66vw','overflow-x':'scroll'}\" [maximizable]=\"true\" [draggable]=\"false\"\n    [resizable]=\"false\" styleClass=\"dark-panel\">\n    <ng-template pTemplate=\"header\">\n        <h2 style=\"margin: 0px;\">Request List</h2>\n    </ng-template>\n    <ng-template pTemplate=\"body\">\n        <app-add-table [data]=\"detailsPopUpData\" [isEscalatedData]=\"viewForEscalation\"></app-add-table>\n    </ng-template>\n</p-dialog>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}