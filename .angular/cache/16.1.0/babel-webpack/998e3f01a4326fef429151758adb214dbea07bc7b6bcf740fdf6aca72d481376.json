{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/rmcat.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/toast\";\nimport * as i8 from \"primeng/panel\";\nimport * as i9 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddRmcatFortreeComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function AddRmcatFortreeComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function AddRmcatFortreeComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.cancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.rmcatFormPanel.valid);\n  }\n}\nexport let AddRmcatFortreeComponent = /*#__PURE__*/(() => {\n  class AddRmcatFortreeComponent {\n    constructor(formBuilder, rmcatservice, messageService) {\n      this.formBuilder = formBuilder;\n      this.rmcatservice = rmcatservice;\n      this.messageService = messageService;\n      this.title = '';\n      this.subscriptions = [];\n      this.isNew = false;\n      this.action = '';\n      this.parentFun = new EventEmitter();\n      this.processList = [];\n      this.allEmployees = [];\n      this.enumEm = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.rmcatFormPanel = this.formBuilder.group({\n        rmcatId: [null, [Validators.required]],\n        rmCat: ['', [Validators.required]],\n        rmCatDesc: [''],\n        highlightColor: ['#a6a6a6']\n      });\n      this.subscriptions.push(this.rmcatFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    ngOnChanges() {\n      this.title = this.action;\n      if (this.formData) {\n        this.setFormData(this.formData);\n      }\n    }\n    setFormData(data) {\n      this.rmcatFormPanel.patchValue({\n        rmcatId: data.rmcatId,\n        rmCat: data.rmCat,\n        rmCatDesc: data.rmCatDesc,\n        highlightColor: data.highlightColor ?? '#a6a6a6'\n      });\n    }\n    // checkRmCatExist(control: any) {\n    //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n    //       this.rmcatFormPanel.controls['rmCat'].setErrors(null);\n    //       this.rmcatFormPanel.clearAsyncValidators();\n    //       this.rmcatFormPanel.updateValueAndValidity();\n    //       let rmStandard = this.rmcatFormPanel.controls.rmCat.value;\n    //       this.rmcatservice.validateRmCat(rmStandard).subscribe((res:any)=>{\n    //         if (res && res.text == \"true\"){\n    //           this.rmcatFormPanel.controls['rmCat'].setErrors({ 'incorrect': true });\n    //           this.rmcatFormPanel.updateValueAndValidity();\n    //           return { 'incorrect': true };\n    //         }\n    //         else{\n    //           return null;\n    //         }\n    //       });\n    //     }\n    // }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.rmcatFormPanel.controls).forEach(key => {\n        let field = this.rmcatFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        rmcatId: this.rmcatFormPanel.controls.rmcatId.value,\n        rmCat: this.rmcatFormPanel.controls.rmCat.value,\n        rmCatDesc: this.rmcatFormPanel.controls.rmCatDesc.value,\n        highlightColor: this.rmcatFormPanel.controls.highlightColor.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.rmcatFormPanel.patchValue({\n          rmcatId: value.rmcatId,\n          rmCat: value.rmCat,\n          rmCatDesc: value.rmCatDesc,\n          highlightColor: value.highlightColor ?? '#a6a6a6'\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.rmcatFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.rmcatFormPanel.valid ? null : {\n        divisionFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    saveRecords() {\n      this.messageService.clear();\n      let data = {\n        rmcatId: this.rmcatFormPanel.controls.rmcatId.value,\n        rmCat: this.rmcatFormPanel.controls.rmCat.value,\n        rmCatDesc: this.rmcatFormPanel.controls.rmCatDesc.value,\n        highlightColor: this.rmcatFormPanel.controls.highlightColor.value\n      };\n      this.rmcatservice.saveRmcat(data).subscribe(res => {\n        if (res.rmCat) {\n          this.parentFun.emit('save');\n        } else if (res.code != 200) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      });\n    }\n    cancel() {\n      this.parentFun.emit('cancel');\n    }\n    static #_ = this.ɵfac = function AddRmcatFortreeComponent_Factory(t) {\n      return new (t || AddRmcatFortreeComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.RmcatService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRmcatFortreeComponent,\n      selectors: [[\"app-add-rmcat-fortree\"]],\n      inputs: {\n        isNew: \"isNew\",\n        action: \"action\",\n        formData: \"formData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRmcatFortreeComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRmcatFortreeComponent),\n        multi: true\n      }, MessageService]), i0.ɵɵNgOnChangesFeature],\n      decls: 23,\n      vars: 2,\n      consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"rmCat\", \"formControlName\", \"rmCat\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"name\", \"rmCatDesc\", \"formControlName\", \"rmCatDesc\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Save\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"ml10\", 3, \"click\"]],\n      template: function AddRmcatFortreeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, AddRmcatFortreeComponent_ng_template_1_Template, 2, 1, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Room Category\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"tr\")(11, \"td\", 4)(12, \"div\", 5)(13, \"label\", 8);\n          i0.ɵɵtext(14, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"textarea\", 9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"tr\")(17, \"td\", 4)(18, \"div\", 5)(19, \"label\", 6);\n          i0.ɵɵtext(20, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 10);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelement(22, \"p-toast\", 11);\n        }\n        if (rf & 2) {\n          i0.ɵɵpropertyInterpolate1(\"header\", \"\", ctx.title, \" Room Category\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.rmcatFormPanel);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i3.PrimeTemplate, i6.ButtonDirective, i7.Toast, i8.Panel, i9.TrimInputDirective]\n    });\n  }\n  return AddRmcatFortreeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}