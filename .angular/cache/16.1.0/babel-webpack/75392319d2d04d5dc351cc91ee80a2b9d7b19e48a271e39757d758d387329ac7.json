{"ast":null,"code":"import { UtilConstant } from 'src/common/UtilConstant';\nimport * as FileSaver from 'file-saver';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/ui/employee/provider/employee.provider\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"primeng/table\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/dropdown\";\nimport * as i9 from \"../../../../core/level-status/level-status.component\";\nfunction AddEmpReportTableComponent_div_0_ng_template_4_ng_template_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 32);\n    i0.ɵɵlistener(\"onChange\", function AddEmpReportTableComponent_div_0_ng_template_4_ng_template_50_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const filter_r6 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r6($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngModel\", value_r5)(\"options\", ctx_r4.enumEmStatus)(\"showClear\", true);\n  }\n}\nfunction AddEmpReportTableComponent_div_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 8);\n    i0.ɵɵelementStart(2, \"th\", 9)(3, \"div\", 10)(4, \"div\", 11)(5, \"p\", 12);\n    i0.ɵɵtext(6, \"Employee Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 13);\n    i0.ɵɵelement(8, \"p-sortIcon\", 14)(9, \"p-columnFilter\", 15);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 16)(11, \"div\", 10)(12, \"div\", 11)(13, \"p\", 12);\n    i0.ɵɵtext(14, \" First Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 13);\n    i0.ɵɵelement(16, \"p-sortIcon\", 17)(17, \"p-columnFilter\", 18);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 19)(19, \"div\", 10)(20, \"div\", 11)(21, \"p\", 12);\n    i0.ɵɵtext(22, \" Last Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 13);\n    i0.ɵɵelement(24, \"p-sortIcon\", 20)(25, \"p-columnFilter\", 21);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"th\", 22)(27, \"div\", 10)(28, \"div\", 11)(29, \"p\", 12);\n    i0.ɵɵtext(30, \" Email\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 13);\n    i0.ɵɵelement(32, \"p-sortIcon\", 23)(33, \"p-columnFilter\", 24);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(34, \"th\", 25)(35, \"div\", 10)(36, \"div\", 11)(37, \"p\", 12);\n    i0.ɵɵtext(38, \" Employee Standard\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 13);\n    i0.ɵɵelement(40, \"p-sortIcon\", 26)(41, \"p-columnFilter\", 27);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(42, \"th\", 28)(43, \"div\", 10)(44, \"div\", 11)(45, \"p\", 12);\n    i0.ɵɵtext(46, \"Status\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(47, \"div\", 13);\n    i0.ɵɵelement(48, \"p-sortIcon\", 29);\n    i0.ɵɵelementStart(49, \"p-columnFilter\", 30);\n    i0.ɵɵtemplate(50, AddEmpReportTableComponent_div_0_ng_template_4_ng_template_50_Template, 1, 3, \"ng-template\", 31);\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction AddEmpReportTableComponent_div_0_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 33)(1, \"td\", 8)(2, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function AddEmpReportTableComponent_div_0_ng_template_5_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const em_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.viewItem(em_r9.emId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\")(14, \"level-status\", 35);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const em_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"pSelectableRow\", em_r9);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(em_r9.emCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(em_r9.firstName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(em_r9.lastName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(em_r9.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(em_r9.emStdEmStd);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"status\", ctx_r2.getNameById(em_r9.emStatus));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.getNameById(em_r9.emStatus), \" \");\n  }\n}\nfunction AddEmpReportTableComponent_div_0_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 7);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nfunction AddEmpReportTableComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function AddEmpReportTableComponent_div_0_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.exportExcel());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"p-table\", 4);\n    i0.ɵɵtemplate(4, AddEmpReportTableComponent_div_0_ng_template_4_Template, 51, 0, \"ng-template\", 5);\n    i0.ɵɵtemplate(5, AddEmpReportTableComponent_div_0_ng_template_5_Template, 16, 8, \"ng-template\", 6);\n    i0.ɵɵtemplate(6, AddEmpReportTableComponent_div_0_ng_template_6_Template, 3, 1, \"ng-template\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", ctx_r0.em_data)(\"paginator\", true)(\"rows\", ctx_r0.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"rowHover\", false)(\"scrollable\", true)(\"totalRecords\", ctx_r0.em_data.length);\n  }\n}\nexport let AddEmpReportTableComponent = /*#__PURE__*/(() => {\n  class AddEmpReportTableComponent {\n    constructor(empProvider, enumsrv, cdr) {\n      this.empProvider = empProvider;\n      this.enumsrv = enumsrv;\n      this.cdr = cdr;\n      this.em_data = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumEmStatus = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.em_array = [];\n      this.showTable = false;\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.em_data = this.data;\n      this.cdr.detectChanges();\n    }\n    getNameById(id) {\n      return id ? this.enumEmStatus.find(t => t.enumKey === id) != null ? this.enumEmStatus.find(t => t.enumKey === id)?.enumValue : '' : '';\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumClonedList = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'em'.toLocaleUpperCase());\n        this.enumEmStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'em'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'em_status'.toLocaleUpperCase());\n        this.showTable = true;\n      });\n    }\n    viewItem(em_id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        em_id: em_id,\n        isEdit: false,\n        newRecord: false\n      };\n      this.empProvider.openDialog(dialogConfig);\n      this.empProvider.onDialogueClosed.subscribe(result => {});\n    }\n    exportExcel() {\n      this.getDestructuredData(this.em_data);\n      var excelHeaders = [];\n      import(\"xlsx\").then(xlsx => {\n        const worksheet = xlsx.utils.json_to_sheet(this.em_array);\n        worksheet['!cols'] = [{\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }];\n        excelHeaders = [\"Employee Code\", \"First Name\", \"Last Name\", \"Email\", \"Employee Standard\", \"Status\"];\n        const headers = excelHeaders.map((header, index) => ({\n          v: header,\n          position: String.fromCharCode(65 + index) + 1\n        }));\n        headers.forEach(header => {\n          worksheet[header.position] = {\n            v: header.v\n          };\n        });\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = xlsx.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"employee\");\n      });\n    }\n    getDestructuredData(data) {\n      this.em_array = data.map(item => {\n        console.log(item);\n        return {\n          \"Employee Code\": item['emCode'],\n          \"First Name\": item['firstName'],\n          \"Last Name\": item['lastName'],\n          \"Email\": item['email'],\n          \"Employee Standard\": item['emStdEmStd'],\n          \"Status\": this.getNameById(item['emStatus'])\n        };\n      });\n    }\n    saveAsExcelFile(buffer, fileName) {\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      let EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    static #_ = this.ɵfac = function AddEmpReportTableComponent_Factory(t) {\n      return new (t || AddEmpReportTableComponent)(i0.ɵɵdirectiveInject(i1.EmployeeModalDialogueProvider), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEmpReportTableComponent,\n      selectors: [[\"app-add-emp-report-table\"]],\n      inputs: {\n        data: \"data\"\n      },\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"card\", 4, \"ngIf\"], [1, \"card\"], [2, \"margin\", \"10px\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 3, \"click\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"350px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\", \"totalRecords\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"emCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"emCode\"], [\"type\", \"text\", \"field\", \"emCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"firstName\"], [\"field\", \"firstName\"], [\"type\", \"text\", \"field\", \"firstName\", \"display\", \"menu\"], [\"pSortableColumn\", \"lastName\"], [\"field\", \"lastName\"], [\"type\", \"text\", \"field\", \"lastName\", \"display\", \"menu\"], [\"pSortableColumn\", \"email\"], [\"field\", \"email\"], [\"type\", \"text\", \"field\", \"email\", \"display\", \"menu\"], [\"pSortableColumn\", \"emStdEmStd\"], [\"field\", \"emStdEmStd\"], [\"type\", \"text\", \"field\", \"emStdEmStd\", \"display\", \"menu\"], [\"pSortableColumn\", \"emStatus\"], [\"field\", \"emStatus\"], [\"field\", \"emStatus\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Type\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-eye\", 1, \"p-button-text\", \"p-button-rounded\", \"pull-right\", 3, \"click\"], [3, \"status\"]],\n      template: function AddEmpReportTableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AddEmpReportTableComponent_div_0_Template, 7, 9, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.showTable);\n        }\n      },\n      dependencies: [i3.NgIf, i4.NgControlStatus, i4.NgModel, i5.PrimeTemplate, i6.Table, i6.SortableColumn, i6.SelectableRow, i6.SortIcon, i6.ColumnFilter, i7.ButtonDirective, i8.Dropdown, i9.LevelStatusComponent]\n    });\n  }\n  return AddEmpReportTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}