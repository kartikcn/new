{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../parts/services/parts.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../services/parts-usage-analysis.service\";\nimport * as i5 from \"src/app/services/enum.service\";\nimport * as i6 from \"src/app/ui/employee/services/employee.service\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"src/app/services/breakpoint.service\";\nimport * as i9 from \"primeng/api\";\nimport * as i10 from \"primeng/table\";\nimport * as i11 from \"primeng/calendar\";\nimport * as i12 from \"primeng/button\";\nimport * as i13 from \"primeng/dialog\";\nimport * as i14 from \"primeng/panel\";\nimport * as i15 from \"@ng-select/ng-select\";\nimport * as i16 from \"primeng/paginator\";\nfunction PartsUsageAnalysisComponent_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 11)(1, \"tr\")(2, \"td\", 12)(3, \"div\", 13)(4, \"label\", 14);\n    i0.ɵɵtext(5, \"Part Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"ng-select\", 15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\", 12)(8, \"div\", 13)(9, \"div\", 16)(10, \"div\", 17)(11, \"label\", 14);\n    i0.ɵɵtext(12, \"From Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"p-calendar\", 18);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(14, \"td\", 12)(15, \"div\", 13)(16, \"div\", 16)(17, \"div\", 17)(18, \"label\", 14);\n    i0.ɵɵtext(19, \"To Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"p-calendar\", 19);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(21, \"td\", 20)(22, \"div\", 13)(23, \"label\", 14);\n    i0.ɵɵtext(24, \"Requests Type \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(25, \"ng-select\", 21);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"td\", 22)(27, \"div\", 23)(28, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_table_2_Template_button_click_28_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onSearch());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_table_2_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onClear());\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.partsData)(\"searchable\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r0.showRequestsTypeList)(\"searchable\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.filterPanel.valid);\n  }\n}\nfunction PartsUsageAnalysisComponent_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 11)(1, \"tr\")(2, \"td\", 26)(3, \"div\", 13)(4, \"label\", 14);\n    i0.ɵɵtext(5, \"Part Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"ng-select\", 15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\", 26)(8, \"div\", 13)(9, \"div\", 16)(10, \"div\", 17)(11, \"label\", 14);\n    i0.ɵɵtext(12, \"From Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"p-calendar\", 18);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(14, \"td\", 26)(15, \"div\", 13)(16, \"div\", 16)(17, \"div\", 17)(18, \"label\", 14);\n    i0.ɵɵtext(19, \"To Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"p-calendar\", 19);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(21, \"tr\")(22, \"td\", 26)(23, \"div\", 13)(24, \"label\", 14);\n    i0.ɵɵtext(25, \"Requests Type \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"ng-select\", 21);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"td\", 27)(28, \"div\", 23)(29, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_table_3_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onSearch());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_table_3_Template_button_click_30_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClear());\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r1.partsData)(\"searchable\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r1.showRequestsTypeList)(\"searchable\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.filterPanel.valid);\n  }\n}\nfunction PartsUsageAnalysisComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_ng_template_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.exportExcel());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r2.partsUsageanalysisData.length > 0));\n  }\n}\nfunction PartsUsageAnalysisComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 30)(2, \"div\", 31)(3, \"div\", 32)(4, \"p\", 33);\n    i0.ɵɵtext(5, \"Part Code \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 34);\n    i0.ɵɵelement(7, \"p-sortIcon\", 35)(8, \"p-columnFilter\", 36);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"th\", 37)(10, \"div\", 31)(11, \"div\", 32)(12, \"p\", 33);\n    i0.ɵɵtext(13, \" Date Assigned \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 34);\n    i0.ɵɵelement(15, \"p-sortIcon\", 38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(16, \"th\", 39)(17, \"div\", 31)(18, \"div\", 32)(19, \"p\", 33);\n    i0.ɵɵtext(20, \" Estimated Quantity \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"div\", 34);\n    i0.ɵɵelement(22, \"p-sortIcon\", 40);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(23, \"th\", 41)(24, \"div\", 31)(25, \"div\", 32)(26, \"p\", 33);\n    i0.ɵɵtext(27, \" Quantity Used \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(28, \"div\", 34);\n    i0.ɵɵelement(29, \"p-sortIcon\", 42);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(30, \"th\", 43)(31, \"div\", 31)(32, \"div\", 32)(33, \"p\", 33);\n    i0.ɵɵtext(34, \" Request Code \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(35, \"div\", 34);\n    i0.ɵɵelement(36, \"p-sortIcon\", 44);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction PartsUsageAnalysisComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 45);\n    i0.ɵɵlistener(\"click\", function PartsUsageAnalysisComponent_ng_template_9_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const reqPart_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onClickView(reqPart_r15));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const reqPart_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", reqPart_r15);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqPart_r15.partPartCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 6, reqPart_r15.dateAssigned, \"dd MMM yyyy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(reqPart_r15.reqQuantity);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqPart_r15.actualQuantityUsed);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqPart_r15.requestId);\n  }\n}\nfunction PartsUsageAnalysisComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", ctx_r5.requestsData.length);\n  }\n}\nfunction PartsUsageAnalysisComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"h2\");\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nconst _c1 = function () {\n  return {\n    \"max-width\": \"50vw\"\n  };\n};\nexport let PartsUsageAnalysisComponent = /*#__PURE__*/(() => {\n  class PartsUsageAnalysisComponent {\n    constructor(partService, datePipe, formBuilder, partsUsageanalysisService, enumsrv, employeeService, router, bps) {\n      this.partService = partService;\n      this.datePipe = datePipe;\n      this.formBuilder = formBuilder;\n      this.partsUsageanalysisService = partsUsageanalysisService;\n      this.enumsrv = enumsrv;\n      this.employeeService = employeeService;\n      this.router = router;\n      this.bps = bps;\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.partsData = [];\n      this.requestsData = [];\n      this.enumStauts = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.allEmployees = [];\n      this.enumEm = [];\n      this.partsUsageanalysisData = [];\n      this.enumStatusData = [];\n      this.req_array = [];\n      this.enumStatusFilter = [];\n      this.isErr = false;\n      this.errorMsg = '';\n      this.isTableRecordLoading = false;\n      this.isShow = false;\n      this.showRequestsTypeList = [{\n        label: \"Preventive Maintenance\",\n        value: \"ppm\"\n      }, {\n        label: \"Facilities Helpdesk\",\n        value: \"facilities\"\n      }, {\n        label: \"All\",\n        value: \"all\"\n      }];\n      this.showType = \"facilities\";\n      this.useTabletProtrait = false;\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"requestPartId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n      this.filterPanel = this.formBuilder.group({\n        partId: [null],\n        dateFrom: [null],\n        dateTo: [null],\n        showType: [this.showType]\n      });\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          dateFrom: firstDay,\n          dateTo: lastDay,\n          showType: this.showType\n        });\n        this.loadRecords();\n      });\n      this.loadParts();\n      this.loadAllEnums();\n      this.loadAllEmployee();\n      var date = new Date();\n      var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n      var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n      //this.loadRecords();\n    }\n\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n    }\n    loadRecords() {\n      const filterData = this.getFilterData();\n      this.getRequestByPartCode(filterData);\n    }\n    getFilterData() {\n      var fromDate = this.filterPanel.controls.dateFrom.value;\n      var toDate = this.filterPanel.controls.dateTo.value;\n      var partId = this.filterPanel.controls.partId.value;\n      var filterData = {\n        \"fromDate\": this.datePipe.transform(fromDate, \"yyyy-MM-dd\"),\n        \"toDate\": this.datePipe.transform(toDate, \"yyyy-MM-dd\"),\n        \"partId\": partId,\n        \"showRequestType\": this.filterPanel.controls.showType.value\n      };\n      return filterData;\n    }\n    loadParts() {\n      this.partService.getAllParts().subscribe(res => {\n        if (res) {\n          this.partsData = [...res];\n          this.partsData.unshift({\n            partId: null,\n            partCode: \"Make a Selection\"\n          });\n        } else {\n          this.partsData = [];\n        }\n      });\n    }\n    getRequestByPartCode(filter) {\n      this.loading = true;\n      let data = {\n        ...filter,\n        filterDto: {\n          paginationDTO: this.paginationObj,\n          filterCriteria: this.filterCriteria\n        }\n      };\n      this.partsUsageanalysisService.getRequestByPartCode(data).subscribe(res => {\n        this.loading = false;\n        if (res) {\n          this.isFiltered = false;\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n          this.partsUsageanalysisData = res.content.map(each => {\n            return {\n              ...each,\n              formateDatedAssigned: this.datePipe.transform(each.dateAssigned, 'dd MMM yyyy')\n            };\n          });\n        }\n      }, error => {\n        this.loading = false;\n        this.partsUsageanalysisData = [];\n      });\n    }\n    onSearch() {\n      const filterData = this.getFilterData();\n      this.getRequestByPartCode(filterData);\n    }\n    loadAllEnums() {\n      this.enumsrv.getEnums().subscribe(res => {\n        if (res) {\n          this.enumList = res;\n          this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n          // this.enumStauts = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n          this.enumStatusData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n          this.enumStatusFilter = [...this.enumStatusData];\n          this.enumStatusFilter.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        }\n      });\n    }\n    getEnumByEnumId(enumKey) {\n      return this.enumStatusData.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    getEmployeeFullName(id) {\n      if (this.allEmployees) {\n        this.enumEm = this.allEmployees.filter(em => em.emId === id);\n        this.fullName = this.enumEm.map(em => {\n          if (em.firstName.length > 0 && em.lastName.length > 0) {\n            return em.firstName + \" \" + em.lastName + ' - ' + em.emCode;\n          } else {\n            return em.firstName + ' - ' + em.emCode;\n          }\n        });\n      }\n      return this.fullName[0];\n    }\n    loadAllEmployee() {\n      this.employeeService.getAllEmployeeList().subscribe(res => {\n        if (res) {\n          this.allEmployees = res;\n        } else {\n          this.allEmployees = [];\n        }\n      });\n    }\n    checkDateValidation() {\n      return control => {\n        if (control.value !== undefined && control.value != null) {\n          this.filterPanel.controls['dateFrom'].setErrors(null);\n          this.filterPanel.controls['dateTo'].setErrors(null);\n          this.filterPanel.clearAsyncValidators();\n          this.filterPanel.updateValueAndValidity();\n          var dateFrom = new Date(this.filterPanel.controls['dateFrom'].value);\n          var dateTo = new Date(this.filterPanel.controls['dateTo'].value);\n          if (dateFrom.getTime() >= dateTo.getTime() && this.filterPanel.controls['dateTo'].value != null) {\n            this.isErr = true;\n            this.filterPanel.controls['dateFrom'].setErrors({\n              'incorrect': true\n            });\n            this.filterPanel.updateValueAndValidity();\n            this.errorMsg = 'Date created to should be greater than date created from.';\n            return {\n              'incorrect': true\n            };\n          } else {\n            this.isErr = false;\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    onClick(partId) {\n      var fromDate = this.filterPanel.controls.dateFrom.value;\n      var toDate = this.filterPanel.controls.dateTo.value;\n      var partId = this.filterPanel.controls.partId.value;\n      var filterData = {\n        \"compId\": 1,\n        \"fromDate\": this.datePipe.transform(fromDate, \"yyyy-MM-dd\"),\n        \"toDate\": this.datePipe.transform(toDate, \"yyyy-MM-dd\"),\n        \"partId\": partId\n      };\n      this.onRowClick(filterData);\n    }\n    onRowClick(event) {\n      this.isShow = this.isTableRecordLoading = true;\n      let postData = {\n        ...event\n      };\n      this.getRequestByPartCode(postData);\n    }\n    exportExcel() {\n      if (this.partsUsageanalysisData.length === 0) {\n        var excelHeaders = [\"Part Code\", \"Date Assigned\", \"Estimated Quantity\", \"Quantity Used\", \"Request Code\"];\n        let options = {\n          header: excelHeaders\n        };\n        const worksheet = XLSX.utils.json_to_sheet([], options); // Provide empty data array\n        worksheet['!cols'] = [{\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }];\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = XLSX.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"partsUsageanalysisReports\");\n      } else {\n        this.getDestructuredData(() => {\n          let options = {\n            header: excelHeaders\n          };\n          const worksheet = XLSX.utils.json_to_sheet(this.req_array);\n          worksheet['!cols'] = [{\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }];\n          const workbook = {\n            Sheets: {\n              'data': worksheet\n            },\n            SheetNames: ['data']\n          };\n          const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array'\n          });\n          this.saveAsExcelFile(excelBuffer, \"partsUsageanalysisDataReports\");\n        });\n      }\n    }\n    getDestructuredData(callback) {\n      if (!this.partsUsageanalysisData || this.partsUsageanalysisData.length === 0) {\n        this.req_array = [];\n        callback();\n        return;\n      }\n      this.req_array = this.partsUsageanalysisData.map(item => ({\n        \"Part Code\": item['partPartCode'],\n        \"Date Assigned\": this.datePipe.transform(item['dateAssigned'], \"dd MMM yyyy\"),\n        \"Estimated Quantity\": item['reqQuantity'],\n        \"Quantity Used\": item['actualQuantityUsed'],\n        \"Request Code\": item['requestId']\n      }));\n      callback();\n    }\n    saveAsExcelFile(buffer, fileName) {\n      const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    onClickView(data) {\n      const wrId = data.requestId;\n      const url = this.router.serializeUrl(this.router.createUrlTree([\"/work-request-details\"], {\n        queryParams: {\n          requestId: wrId,\n          index: 0,\n          action: \"details\",\n          viewDetails: true,\n          isNavigationFromReport: true\n        }\n      }));\n      window.open(url, '_blank');\n    }\n    onClear() {\n      this.filterPanel.patchValue({\n        wrId: null,\n        dateFrom: null,\n        dateTo: null,\n        showType: this.showType\n      });\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadRecords();\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        this.filterCriteria = {};\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined && filterValue !== null && filterValue !== '') {\n            if (field == \"partPartCode\") {\n              this.filterCriteria = {\n                fieldName: \"part_code\",\n                value: filterValue,\n                matchMode: matchMode\n              };\n            } else if (field == \"formateDatedAssigned\") {\n              this.filterCriteria = {\n                fieldName: \"dateAssigned\",\n                value: filterValue,\n                matchMode: matchMode\n              };\n            } else if (field == \"requestId\") {\n              this.filterCriteria = {\n                fieldName: \"request_id\",\n                value: filterValue,\n                matchMode: matchMode\n              };\n            } else {\n              this.filterCriteria = {\n                fieldName: field,\n                value: filterValue,\n                matchMode: matchMode\n              };\n            }\n          }\n        });\n        this.paginationObj.pageNo = 0;\n        this.loadRecords();\n      }\n      this.isFiltered = true;\n    }\n    static #_ = this.ɵfac = function PartsUsageAnalysisComponent_Factory(t) {\n      return new (t || PartsUsageAnalysisComponent)(i0.ɵɵdirectiveInject(i1.PartsService), i0.ɵɵdirectiveInject(i2.DatePipe), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.PartsUsageanalysisService), i0.ɵɵdirectiveInject(i5.EnumService), i0.ɵɵdirectiveInject(i6.EmployeeService), i0.ɵɵdirectiveInject(i7.Router), i0.ɵɵdirectiveInject(i8.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PartsUsageAnalysisComponent,\n      selectors: [[\"app-parts-usage-analysis\"]],\n      inputs: {\n        showType: \"showType\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 15,\n      vars: 22,\n      consts: [[\"header\", \"Parts Usage Analysis\", 3, \"toggleable\"], [3, \"formGroup\"], [\"width\", \"100%\", 4, \"ngIf\"], [\"pTemplate\", \"header\"], [1, \"card\", 2, \"height\", \"63vh\"], [\"styleClass\", \"p-datatable-customers p-datatable-gridlines\", \"selectionMode\", \"single\", \"scrollDirection\", \"both\", \"scrollHeight\", \"400px\", 3, \"value\", \"paginator\", \"loading\", \"scrollable\", \"onFilter\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"partId\", \"bindLabel\", \"partCode\", \"bindValue\", \"partId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [1, \"p-fluid\"], [1, \"p-field\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateFrom\", \"formControlName\", \"dateFrom\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateTo\", \"formControlName\", \"dateTo\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"width\", \"20%\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"showType\", \"bindLabel\", \"label\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\"], [2, \"width\", \"20%\", \"padding-top\", \"10px\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\", \"justify-content\", \"center\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"filter-search-button\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull-right\", \"filter-clear-button\", 3, \"click\"], [2, \"width\", \"30%\"], [2, \"width\", \"30%\", \"padding-top\", \"10px\"], [1, \"xls-container\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 2, \"margin-left\", \"auto\", 3, \"disabled\", \"click\"], [\"pSortableColumn\", \"partPartCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"partPartCode\"], [\"type\", \"text\", \"field\", \"partPartCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"formateDatedAssigned\"], [\"field\", \"formateDatedAssigned\"], [\"pSortableColumn\", \"reqQuantity\"], [\"field\", \"reqQuantity\"], [\"pSortableColumn\", \"actualQuantityUsed\"], [\"field\", \"actualQuantityUsed\"], [\"pSortableColumn\", \"requestId\"], [\"field\", \"requestId\"], [3, \"pSelectableRow\", \"click\"]],\n      template: function PartsUsageAnalysisComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0)(1, \"form\", 1);\n          i0.ɵɵtemplate(2, PartsUsageAnalysisComponent_table_2_Template, 30, 10, \"table\", 2);\n          i0.ɵɵtemplate(3, PartsUsageAnalysisComponent_table_3_Template, 31, 10, \"table\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"p-panel\");\n          i0.ɵɵtemplate(5, PartsUsageAnalysisComponent_ng_template_5_Template, 2, 1, \"ng-template\", 3);\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"p-table\", 5);\n          i0.ɵɵlistener(\"onFilter\", function PartsUsageAnalysisComponent_Template_p_table_onFilter_7_listener($event) {\n            return ctx.onInnerFilter($event);\n          });\n          i0.ɵɵtemplate(8, PartsUsageAnalysisComponent_ng_template_8_Template, 37, 0, \"ng-template\", 3);\n          i0.ɵɵtemplate(9, PartsUsageAnalysisComponent_ng_template_9_Template, 12, 9, \"ng-template\", 6);\n          i0.ɵɵtemplate(10, PartsUsageAnalysisComponent_ng_template_10_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 8)(12, \"p-paginator\", 9);\n          i0.ɵɵlistener(\"onPageChange\", function PartsUsageAnalysisComponent_Template_p_paginator_onPageChange_12_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"p-dialog\", 10);\n          i0.ɵɵlistener(\"visibleChange\", function PartsUsageAnalysisComponent_Template_p_dialog_visibleChange_13_listener($event) {\n            return ctx.isShow = $event;\n          });\n          i0.ɵɵtemplate(14, PartsUsageAnalysisComponent_ng_template_14_Template, 1, 0, \"ng-template\", 3);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"toggleable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.useTabletProtrait);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"value\", ctx.partsUsageanalysisData)(\"paginator\", false)(\"loading\", ctx.loading)(\"scrollable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(20, _c0));\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(21, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.isShow)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i9.PrimeTemplate, i10.Table, i10.SortableColumn, i10.SelectableRow, i10.SortIcon, i10.ColumnFilter, i11.Calendar, i12.ButtonDirective, i13.Dialog, i14.Panel, i3.FormGroupDirective, i3.FormControlName, i15.NgSelectComponent, i16.Paginator, i2.DatePipe],\n      styles: [\".xls-container[_ngcontent-%COMP%]{width:100%}.filter-search-button[_ngcontent-%COMP%]{width:80px;margin:0 20px 0 0}.filter-clear-button[_ngcontent-%COMP%]{width:80px;margin-left:-5px}\"]\n    });\n  }\n  return PartsUsageAnalysisComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}