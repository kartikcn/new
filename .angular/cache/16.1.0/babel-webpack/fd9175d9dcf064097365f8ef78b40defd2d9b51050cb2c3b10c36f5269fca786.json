{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, DefaultValueAccessor } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nconst UPPERCASE_INPUT_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => UppercaseDirective),\n  multi: true\n};\nexport let UppercaseDirective = /*#__PURE__*/(() => {\n  class UppercaseDirective extends DefaultValueAccessor {\n    constructor(renderer, elementRef) {\n      super(renderer, elementRef, false);\n    }\n    writeValue(value) {\n      const transformed = this.transformValue(value);\n      super.writeValue(transformed);\n    }\n    onInput(value) {\n      const transformed = this.transformValue(value);\n      super.writeValue(transformed);\n      this.onChange(transformed);\n    }\n    transformValue(value) {\n      const result = value && typeof value === 'string' ? value.toUpperCase() : value;\n      return result;\n    }\n    static #_ = this.ɵfac = function UppercaseDirective_Factory(t) {\n      return new (t || UppercaseDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: UppercaseDirective,\n      selectors: [[\"input\", \"uppercase\", \"\"]],\n      hostBindings: function UppercaseDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function UppercaseDirective_input_HostBindingHandler($event) {\n            return ctx.onInput($event.target.value);\n          })(\"blur\", function UppercaseDirective_blur_HostBindingHandler() {\n            return ctx.onTouched();\n          });\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([UPPERCASE_INPUT_CONTROL_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return UppercaseDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}