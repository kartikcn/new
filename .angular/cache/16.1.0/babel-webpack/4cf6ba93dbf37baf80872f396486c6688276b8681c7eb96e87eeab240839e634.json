{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../services/eq-std.services\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nimport * as i7 from \"../../../../../../directive/directive/trim-input.directive\";\nfunction AddEqStdFormComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtext(1, \"Asset Standard already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEqStdFormComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddEqStdFormComponent_tr_8_label_2_Template, 2, 0, \"label\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.eqStdFormPanel.controls[\"eqStd\"] == null ? null : ctx_r0.eqStdFormPanel.controls[\"eqStd\"].errors.required));\n  }\n}\nexport let AddEqStdFormComponent = /*#__PURE__*/(() => {\n  class AddEqStdFormComponent {\n    constructor(authSrv, formBuilder, eqStdService) {\n      this.authSrv = authSrv;\n      this.formBuilder = formBuilder;\n      this.eqStdService = eqStdService;\n      this.subscriptions = [];\n      this.presentEqStandard = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.eqStdFormPanel = this.formBuilder.group({\n        eqStd: ['', [Validators.required]],\n        eqStdId: [null],\n        description: ['']\n      });\n      this.subscriptions.push(this.eqStdFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    get value() {\n      const eqStdDetails = {\n        eqStd: this.eqStdFormPanel.controls.eqStd.value,\n        description: this.eqStdFormPanel.controls.description.value,\n        eqStdId: this.eqStdFormPanel.controls.eqStdId.value\n      };\n      return eqStdDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.eqStdFormPanel.patchValue({\n          eqStd: value.eqStd,\n          description: value.description,\n          eqStdId: value.eqStdId\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.eqStdFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.eqStdFormPanel.valid ? null : {\n        eqStdFormPanel: {\n          valid: false\n        }\n      };\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddEqStdFormComponent_Factory(t) {\n      return new (t || AddEqStdFormComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.EqStdService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEqStdFormComponent,\n      selectors: [[\"app-add-eq-std-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddEqStdFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddEqStdFormComponent),\n        multi: true\n      }])],\n      decls: 16,\n      vars: 2,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"eqStd\", \"formControlName\", \"eqStd\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddEqStdFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Asset Standard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddEqStdFormComponent_tr_8_Template, 3, 1, \"tr\", 6);\n          i0.ɵɵelement(9, \"tr\");\n          i0.ɵɵelementStart(10, \"tr\")(11, \"td\")(12, \"div\", 3)(13, \"label\", 7);\n          i0.ɵɵtext(14, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.eqStdFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.eqStdFormPanel.controls[\"eqStd\"] == null ? null : ctx.eqStdFormPanel.controls[\"eqStd\"].errors) && ctx.eqStdFormPanel.controls[\"eqStd\"].dirty);\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzInputDirective, i7.TrimInputDirective]\n    });\n  }\n  return AddEqStdFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}