{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { RmcatTreeFilterInput } from 'src/app/ui/rmcat/modal/rmcatTreeFilterInput.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/rmcat.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/panel\";\nimport * as i10 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddRmtypeFortreeComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function AddRmtypeFortreeComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AddRmtypeFortreeComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.cancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.rmTypeFormPanel.valid);\n  }\n}\nexport let AddRmtypeFortreeComponent = /*#__PURE__*/(() => {\n  class AddRmtypeFortreeComponent {\n    constructor(formBuilder, rmcatSrv, messageService) {\n      this.formBuilder = formBuilder;\n      this.rmcatSrv = rmcatSrv;\n      this.messageService = messageService;\n      this.title = '';\n      this.subscriptions = [];\n      this.isNew = false;\n      this.action = '';\n      this.parentFun = new EventEmitter();\n      this.enumRmcats = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.rmTypeFormPanel = this.formBuilder.group({\n        rmtypeId: [null, [Validators.required]],\n        rmcatId: [null, [Validators.required]],\n        rmType: ['', [Validators.required]],\n        rmTypeDesc: [''],\n        highlightColor: ['#a6a6a6']\n      });\n      this.subscriptions.push(this.rmTypeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadRmcats();\n    }\n    ngOnChanges() {\n      this.title = this.action;\n      if (this.formData) {\n        this.setFormData(this.formData);\n      }\n    }\n    loadRmcats() {\n      this.rmcatSrv.getALLRmcats().subscribe(res => {\n        this.enumRmcats = res;\n        // this.enumRmcats = res.map((i: any) => { i.rmCatDesc = i.rmCat + ' - ' + i.rmCatDesc; return i; });\n        this.enumRmcats.unshift(new RmcatTreeFilterInput(null, 'Make a selection'));\n      });\n    }\n    setFormData(data) {\n      this.rmTypeFormPanel.patchValue({\n        rmtypeId: data.rmtypeId,\n        rmcatId: data.rmcatId,\n        rmType: data.rmType,\n        rmTypeDesc: data.rmTypeDesc,\n        highlightColor: data.highlightColor ?? '#a6a6a6'\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.rmTypeFormPanel.controls).forEach(key => {\n        let field = this.rmTypeFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        rmtypeId: this.rmTypeFormPanel.controls.rmtypeId.value,\n        rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n        rmType: this.rmTypeFormPanel.controls.rmType.value,\n        rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n        highlightColor: this.rmTypeFormPanel.controls.highlightColor.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.rmTypeFormPanel.patchValue({\n          rmtypeId: value.rmtypeId,\n          rmcatId: value.rmcatId,\n          rmType: value.rmType,\n          rmTypeDesc: value.rmTypeDesc,\n          highlightColor: value.highlightColor ?? '#a6a6a6'\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.rmTypeFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.rmTypeFormPanel.valid ? null : {\n        divisionFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    saveRecords() {\n      this.messageService.clear();\n      let data = {\n        rmtypeId: this.rmTypeFormPanel.controls.rmtypeId.value,\n        rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n        rmType: this.rmTypeFormPanel.controls.rmType.value,\n        rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n        highlightColor: this.rmTypeFormPanel.controls.highlightColor.value\n      };\n      this.rmcatSrv.saveRmType(data).subscribe(res => {\n        if (res.rmType) {\n          this.parentFun.emit('save');\n        } else if (res.code != 200) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      });\n    }\n    cancel() {\n      this.parentFun.emit('cancel');\n    }\n    static #_ = this.ɵfac = function AddRmtypeFortreeComponent_Factory(t) {\n      return new (t || AddRmtypeFortreeComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.RmcatService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRmtypeFortreeComponent,\n      selectors: [[\"app-add-rmtype-fortree\"]],\n      inputs: {\n        isNew: \"isNew\",\n        action: \"action\",\n        formData: \"formData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n        multi: true\n      }, MessageService]), i0.ɵɵNgOnChangesFeature],\n      decls: 29,\n      vars: 5,\n      consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"rmcatId\", \"bindLabel\", \"rmCatDesc\", \"bindValue\", \"rmcatId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"name\", \"rmType\", \"formControlName\", \"rmType\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"name\", \"rmTypeDesc\", \"formControlName\", \"rmTypeDesc\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Save\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"ml10\", 3, \"click\"]],\n      template: function AddRmtypeFortreeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, AddRmtypeFortreeComponent_ng_template_1_Template, 2, 1, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Room Category\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"ng-select\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"tr\")(11, \"td\", 4)(12, \"div\", 5)(13, \"label\", 6);\n          i0.ɵɵtext(14, \"Room Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"input\", 8);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"tr\")(17, \"td\", 4)(18, \"div\", 5)(19, \"label\", 9);\n          i0.ɵɵtext(20, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"textarea\", 10);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 4)(24, \"div\", 5)(25, \"label\", 6);\n          i0.ɵɵtext(26, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 11);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelement(28, \"p-toast\", 12);\n        }\n        if (rf & 2) {\n          i0.ɵɵpropertyInterpolate1(\"header\", \"\", ctx.title, \" Room Type\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.rmTypeFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRmcats)(\"searchable\", true);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzInputDirective, i3.PrimeTemplate, i7.ButtonDirective, i8.Toast, i9.Panel, i10.TrimInputDirective]\n    });\n  }\n  return AddRmtypeFortreeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}