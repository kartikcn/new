{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./tokenStorage.service\";\nimport * as i4 from \"ngx-cookie-service\";\nimport * as i5 from \"../env.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    // Declare private variables\n    constructor(http, router, tokenStorage, cokieSrv, env) {\n      this.http = http;\n      this.router = router;\n      this.tokenStorage = tokenStorage;\n      this.cokieSrv = cokieSrv;\n      this.env = env;\n      // Initialize variables\n      this.USER_KEY = 'auth-user';\n      // serverUrl = environment.baseUrl;\n      this.serverUrl = this.env.baseUrl;\n      this.errorData = {};\n      this.redirectUrl = \"\";\n      this.loginStatus = new EventEmitter(false);\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n        })\n      };\n    }\n    // Login function\n    login(username, password) {\n      // Assigning the login credentials to the body\n      var body = {\n        \"username\": username,\n        \"password\": password\n      };\n      // Return the logged information\n      return this.http.post(`${this.serverUrl}api/v1/auth/signin`, body, this.httpOptions);\n      // .pipe(\n      //   catchError(this.handleError)\n      // );\n      //return true;\n    }\n\n    refreshToken() {\n      let refreshAuth = this.getAuthorizationToken(); //get refresh token from storage\n      let url = `${this.serverUrl}api/token`;\n      let body = new FormData();\n      body.append(\"grant_type\", \"refresh_token\");\n      body.append(\"refresh_token\", refreshAuth);\n      return this.http.post(url, body).subscribe(token => {\n        localStorage.setItem('token', JSON.stringify(token.access_token));\n        localStorage.setItem('refresh_token', JSON.stringify(token.refresh_token));\n        return token.access_token;\n      });\n    }\n    isLoggedIn() {\n      // Return true  if logged in, Otherwise return false\n      if (this.tokenStorage.getToken()) {\n        return true;\n      }\n      return false;\n    }\n    getAuthorizationToken() {\n      // Return access token if logged in\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      return currentUser.access_token;\n    }\n    setPreviousUrl(url) {\n      localStorage.setItem('previousUrl', url);\n    }\n    getPreviousUrl() {\n      return localStorage.getItem('previousUrl');\n    }\n    getLoggedInUser() {\n      // Return true  if logged in, Otherwise return false\n      if (sessionStorage.getItem('currentUser')) {\n        const currentUser = JSON.parse(sessionStorage.getItem('currentUser') || '{}');\n        return currentUser.userName;\n      }\n      return '';\n    }\n    getLoggedInUserId() {\n      // Return true  if logged in, Otherwise return false\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.userId;\n      }\n      return '';\n    }\n    getLoggedInUserCompId() {\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.compId;\n      }\n      return 0;\n    }\n    getLoggedInUserEMId() {\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.emId;\n      }\n      return 0;\n    }\n    getLoggedInUserRole() {\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.userRoleId;\n      }\n    }\n    getLoggedInTechnicianId() {\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.technicianId;\n      }\n    }\n    logout() {\n      // Clear all localStorage information\n      this.tokenStorage.signOut();\n      this.cokieSrv.deleteAll();\n      this.router.navigate(['/login']);\n    }\n    // Handling the errors\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n      // return an observable with a user-facing error message\n      this.errorData = {\n        errorTitle: error.error.error,\n        errorDesc: error.error.message,\n        errorStatus: error.status\n      };\n      return throwError(this.errorData);\n    }\n    getLoggedInUserName() {\n      // Return username  if logged in, Otherwise return empty string\n      const user = window.sessionStorage.getItem(this.USER_KEY);\n      if (user) {\n        let userData = JSON.parse(user);\n        return userData.username;\n      }\n      return '';\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.TokenStorageService), i0.ɵɵinject(i4.CookieService), i0.ɵɵinject(i5.EnvService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}