{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"primeng/dialog\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../../../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nfunction EscalationAlertsGridComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 5);\n    i0.ɵɵtext(1, \"Request List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EscalationAlertsGridComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r1.detailsPopUpData)(\"isEscalatedData\", ctx_r1.viewForEscalation);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nexport class EscalationAlertsGridComponent {\n  constructor() {\n    this.showPopupFlag = false;\n    this.viewForEscalation = true;\n    this.detailsPopUpData = [];\n    this.canvasWidth = 300;\n    this.needleValue = 0;\n    this.bottomLabel = this.needleValue + '%';\n    // guageOptions: any = {\n    //   hasNeedle: true,\n    //   needleColor: 'blue',\n    //   needleUpdateSpeed: 1000,\n    //   arcColors: ['red','green'],\n    //   arcDelimiters: [75],\n    //   rangeLabel: ['0','100'],\n    //   needleStartValue: 0,\n    // }\n    this.gaugemap = {};\n  }\n  ngOnInit() {\n    // this.draw();\n  }\n  setEscalatedPercantage(noEscalatedPercent) {\n    this.canvasWidth = 300;\n    this.needleValue = 0;\n    this.bottomLabel = this.needleValue + '%';\n    // this.guageOptions = {\n    //   hasNeedle: true,\n    //   needleColor: 'blue',\n    //   needleUpdateSpeed: 1000,\n    //   arcColors: ['red','green'],\n    //   arcOverEffect: false,\n    //   arcPadding : '10px',\n    //   arcDelimiters: [75],\n    //   rangeLabel: ['0', '100'],\n    //   needleStartValue: 0,\n    // }\n    const floatValue = parseFloat(noEscalatedPercent);\n    if (typeof floatValue === 'number' && !isNaN(floatValue)) {\n      this.needleValue = floatValue;\n      this.bottomLabel = this.needleValue + '%';\n      // this.guageOptions.needleStartValue = 0;\n    } else {\n      this.needleValue = 0;\n      this.bottomLabel = this.needleValue + '%';\n    }\n    this.draw();\n  }\n  onClickKnob() {\n    this.showPopupFlag = true;\n    this.detailsPopUpData = [];\n    this.detailsPopUpData.push(...this.noEsctdData);\n  }\n  draw() {\n    const self = this;\n    const gauge = function (container, configuration) {\n      const config = {\n        size: 300,\n        clipWidth: 300,\n        clipHeight: 300,\n        ringInset: 20,\n        ringWidth: 30,\n        pointerWidth: 10,\n        pointerTailLength: 5,\n        pointerHeadLengthPercent: 0.65,\n        minValue: 0,\n        maxValue: 100,\n        minAngle: -90,\n        maxAngle: 90,\n        transitionMs: 2000,\n        majorTicks: 5,\n        labelFormat: d3.format('d'),\n        labelInset: 10,\n        // arcColorFn: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n        limitingValue: 0.75,\n        arcColorFn: [\"#ff0000\", \"#00ff00\"]\n      };\n      let range;\n      let r;\n      let pointerHeadLength;\n      let value = 0;\n      let svg;\n      let arc;\n      let scale;\n      let ticks;\n      let tickData;\n      let pointer;\n      const donut = d3.pie();\n      function deg2rad(deg) {\n        return deg * Math.PI / 180;\n      }\n      function newAngle(d) {\n        const ratio = scale(d);\n        const newAngle = config.minAngle + ratio * range;\n        return newAngle;\n      }\n      function configure(configuration) {\n        // for (const prop in configuration) {\n        //   if (configuration.hasOwnProperty(prop)) {\n        //     (config as any)[prop] = configuration[prop];\n        //   }\n        // }\n        range = config.maxAngle - config.minAngle;\n        r = config.size / 2;\n        pointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n        scale = d3.scaleLinear().range([0, 1]).domain([config.minValue, config.maxValue]);\n        ticks = scale.ticks(config.majorTicks);\n        tickData = d3.range(config.majorTicks).map(() => 1 / config.majorTicks);\n        arc = d3.arc().innerRadius(r - config.ringWidth - config.ringInset).outerRadius(r - config.ringInset).startAngle((d, i) => {\n          // const ratio = d * i;\n          const ratio = i * config.limitingValue;\n          return deg2rad(config.minAngle + ratio * range);\n        }).endAngle((d, i) => {\n          // const ratio = d * (i + 1);\n          let ratio = (i + 1) * config.limitingValue;\n          if (ratio > 1) {\n            ratio = 1;\n          }\n          return deg2rad(config.minAngle + ratio * range);\n        });\n      }\n      self.gaugemap.configure = configure;\n      function centerTranslation() {\n        return `translate(${r},${r})`;\n      }\n      function isRendered() {\n        return svg !== undefined;\n      }\n      self.gaugemap.isRendered = isRendered;\n      function render(newValue) {\n        d3.select(container).selectAll(\"*\").remove();\n        svg = d3.select(container).append('svg:svg').attr('class', 'gauge').attr('width', config.clipWidth).attr('height', config.clipHeight);\n        const centerTx = centerTranslation();\n        const arcs = svg.append('g').attr('class', 'arc').attr('transform', centerTx);\n        arcs.selectAll('path')\n        // .data(tickData)\n        .data([0.5, 0.5]).enter().append('path').attr('fill', (d, i) => {\n          // return config.arcColorFn(d * i);\n          return config.arcColorFn[i];\n        }).attr('d', arc);\n        const lg = svg.append('g').attr('class', 'label').attr('transform', centerTx);\n        lg.selectAll('text').data(ticks).enter().append('text').attr('transform', d => {\n          const ratio = scale(d);\n          const newAngle = config.minAngle + ratio * range;\n          return `rotate(${newAngle}) translate(0,${config.labelInset - (r ?? 0)})`;\n        }).text(config.labelFormat);\n        const lineData = [[config.pointerWidth / 2, 0], [0, -pointerHeadLength], [-(config.pointerWidth / 2), 0], [0, config.pointerTailLength], [config.pointerWidth / 2, 0]];\n        const pointerLine = d3.line().curve(d3.curveLinear);\n        const pg = svg.append('g').data([lineData]).attr('class', 'pointer').attr('transform', centerTx);\n        pointer = pg.append('path').attr('d', pointerLine).attr('transform', `rotate(${config.minAngle})`);\n        update(newValue === undefined ? 0 : newValue);\n        const rv = svg.append('g').attr('class', 'pointerval').attr('transform', centerTx);\n        rv.append('text').attr('transform', 'rotate(0) translate(-30,70) scale(3)').text(newValue + '%');\n      }\n      self.gaugemap.render = render;\n      function update(newValue, newConfiguration) {\n        if (newConfiguration !== undefined) {\n          configure(newConfiguration);\n        }\n        const ratio = scale(newValue);\n        const newAngle = config.minAngle + ratio * range;\n        pointer.transition().duration(config.transitionMs).ease(d3.easeElastic).attr('transform', `rotate(${newAngle})`);\n      }\n      self.gaugemap.update = update;\n      configure(configuration);\n      return self.gaugemap;\n    };\n    const powerGauge = gauge('#power-gauge', {});\n    powerGauge.render(this.needleValue);\n  }\n  static #_ = this.ɵfac = function EscalationAlertsGridComponent_Factory(t) {\n    return new (t || EscalationAlertsGridComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EscalationAlertsGridComponent,\n    selectors: [[\"app-escalation-alerts-grid\"]],\n    inputs: {\n      noEsctdData: \"noEsctdData\",\n      escalatedData: \"escalatedData\",\n      allEscalatedData: \"allEscalatedData\"\n    },\n    decls: 5,\n    vars: 8,\n    consts: [[2, \"display\", \"flex\", \"align-items\", \"center\", \"justify-content\", \"space-around\"], [\"id\", \"power-gauge\", 3, \"click\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [2, \"margin\", \"0px\"], [3, \"data\", \"isEscalatedData\"]],\n    template: function EscalationAlertsGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function EscalationAlertsGridComponent_Template_div_click_1_listener() {\n          return ctx.onClickKnob();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(2, \"p-dialog\", 2);\n        i0.ɵɵlistener(\"visibleChange\", function EscalationAlertsGridComponent_Template_p_dialog_visibleChange_2_listener($event) {\n          return ctx.showPopupFlag = $event;\n        });\n        i0.ɵɵtemplate(3, EscalationAlertsGridComponent_ng_template_3_Template, 2, 0, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, EscalationAlertsGridComponent_ng_template_4_Template, 1, 2, \"ng-template\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(7, _c0));\n        i0.ɵɵproperty(\"visible\", ctx.showPopupFlag)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n      }\n    },\n    dependencies: [i1.PrimeTemplate, i2.Dialog, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i4.AddTableComponent],\n    styles: [\".p-knob-value {\\n  cursor: pointer;\\n}\\n\\n .p-disabled, .p-disabled[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\\n  opacity: 1;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvZmFjaWxpdGllcy1oZWxwZGVzay1kYXNoYm9hcmRzL3dpZGdldHMvZXNjYWxhdGlvbi1hbGVydHMtZ3JpZC9tb2RhbC9lc2NhbGF0aW9uLWFsZXJ0cy1ncmlkLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vLi4vLi4vLi4vLi4vTWFuYXYlMjBHdXB0YS9Eb3dubG9hZHMvZm1zL2Ztcy9mcm9udGVuZC9mbXNfZnJvbnRlbmQvc3JjL2FwcC91aS9mYWNpbGl0aWVzLWhlbHBkZXNrLWRhc2hib2FyZHMvd2lkZ2V0cy9lc2NhbGF0aW9uLWFsZXJ0cy1ncmlkL21vZGFsL2VzY2FsYXRpb24tYWxlcnRzLWdyaWQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFBO0FDQ0o7O0FERUE7O0VBRUksVUFBQTtBQ0NKIiwic291cmNlc0NvbnRlbnQiOlsiOjpuZy1kZWVwIC5wLWtub2ItdmFsdWUge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuOjpuZy1kZWVwLnAtZGlzYWJsZWQsXG4ucC1kaXNhYmxlZCAqIHtcbiAgICBvcGFjaXR5OiAxO1xufVxuXG4iLCI6Om5nLWRlZXAgLnAta25vYi12YWx1ZSB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuOjpuZy1kZWVwLnAtZGlzYWJsZWQsXG4ucC1kaXNhYmxlZCAqIHtcbiAgb3BhY2l0eTogMTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["d3","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ctx_r1","detailsPopUpData","viewForEscalation","EscalationAlertsGridComponent","constructor","showPopupFlag","canvasWidth","needleValue","bottomLabel","gaugemap","ngOnInit","setEscalatedPercantage","noEscalatedPercent","floatValue","parseFloat","isNaN","draw","onClickKnob","push","noEsctdData","self","gauge","container","configuration","config","size","clipWidth","clipHeight","ringInset","ringWidth","pointerWidth","pointerTailLength","pointerHeadLengthPercent","minValue","maxValue","minAngle","maxAngle","transitionMs","majorTicks","labelFormat","format","labelInset","limitingValue","arcColorFn","range","r","pointerHeadLength","value","svg","arc","scale","ticks","tickData","pointer","donut","pie","deg2rad","deg","Math","PI","newAngle","d","ratio","configure","round","scaleLinear","domain","map","innerRadius","outerRadius","startAngle","i","endAngle","centerTranslation","isRendered","undefined","render","newValue","select","selectAll","remove","append","attr","centerTx","arcs","data","enter","lg","text","lineData","pointerLine","line","curve","curveLinear","pg","update","rv","newConfiguration","transition","duration","ease","easeElastic","powerGauge","_","_2","selectors","inputs","escalatedData","allEscalatedData","decls","vars","consts","template","EscalationAlertsGridComponent_Template","rf","ctx","ɵɵlistener","EscalationAlertsGridComponent_Template_div_click_1_listener","EscalationAlertsGridComponent_Template_p_dialog_visibleChange_2_listener","$event","ɵɵtemplate","EscalationAlertsGridComponent_ng_template_3_Template","EscalationAlertsGridComponent_ng_template_4_Template","ɵɵadvance","ɵɵstyleMap","ɵɵpureFunction0","_c0"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\facilities-helpdesk-dashboards\\widgets\\escalation-alerts-grid\\modal\\escalation-alerts-grid.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\facilities-helpdesk-dashboards\\widgets\\escalation-alerts-grid\\modal\\escalation-alerts-grid.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport * as d3 from 'd3';\n\n\ninterface GaugeMap {\n  configure(configuration: any): void;\n  isRendered(): boolean;\n  render(newValue: number): void;\n  update(newValue: number, newConfiguration?: any): void;\n}\ninterface GaugeConfig {\n  [key: string]: any;\n  size?: number;\n  clipWidth?: number;\n  clipHeight?: number;\n  ringInset?: number;\n  ringWidth?: number;\n  pointerWidth?: number;\n  pointerTailLength?: number;\n  pointerHeadLengthPercent?: number;\n  minValue?: number;\n  maxValue?: number;\n  minAngle?: number;\n  maxAngle?: number;\n  transitionMs?: number;\n  majorTicks?: number;\n  labelFormat?: (value: number) => string;\n  labelInset?: number;\n  arcColorFn?: (value: number) => string;\n}\n\n@Component({\n  selector: 'app-escalation-alerts-grid',\n  templateUrl: './escalation-alerts-grid.component.html',\n  styleUrls: ['./escalation-alerts-grid.component.scss']\n})\nexport class EscalationAlertsGridComponent implements OnInit {\n  data: any;\n  options: any;\n  showPopupFlag: boolean = false;\n  viewForEscalation: boolean = true;\n  @Input() noEsctdData!: any;\n  @Input() escalatedData!: any;\n  @Input() allEscalatedData!: any;\n  detailsPopUpData: any[] = [];\n  canvasWidth: any = 300;\n  needleValue: any = 0;\n  bottomLabel: string = this.needleValue + '%';\n  // guageOptions: any = {\n  //   hasNeedle: true,\n  //   needleColor: 'blue',\n  //   needleUpdateSpeed: 1000,\n  //   arcColors: ['red','green'],\n  //   arcDelimiters: [75],\n  //   rangeLabel: ['0','100'],\n  //   needleStartValue: 0,\n  // }\n\n  gaugemap: GaugeMap = {} as GaugeMap;\n\n  constructor() { }\n\n  ngOnInit(): void { \n    // this.draw();\n  }\n\n  setEscalatedPercantage(noEscalatedPercent: any) {\n    this.canvasWidth = 300;\n    this.needleValue = 0;\n    this.bottomLabel = this.needleValue + '%';\n    // this.guageOptions = {\n    //   hasNeedle: true,\n    //   needleColor: 'blue',\n    //   needleUpdateSpeed: 1000,\n    //   arcColors: ['red','green'],\n    //   arcOverEffect: false,\n    //   arcPadding : '10px',\n    //   arcDelimiters: [75],\n    //   rangeLabel: ['0', '100'],\n    //   needleStartValue: 0,\n    // }\n    const floatValue: number = parseFloat(noEscalatedPercent);\n    if(typeof floatValue === 'number' && !isNaN(floatValue)){\n      this.needleValue = floatValue;\n      this.bottomLabel = this.needleValue + '%';\n      // this.guageOptions.needleStartValue = 0;\n    } else {\n      this.needleValue = 0;\n      this.bottomLabel = this.needleValue + '%';\n    }\n    this.draw()\n  }\n\n  onClickKnob() {\n    this.showPopupFlag = true;\n    this.detailsPopUpData = [];\n    this.detailsPopUpData.push(...this.noEsctdData);\n  }\n\n  draw() {\n    const self = this;\n    const gauge = function (container: string, configuration: any): GaugeMap {\n      const config = {\n        size: 300,\n        clipWidth: 300,\n        clipHeight: 300,\n        ringInset: 20,\n        ringWidth: 30,\n        pointerWidth: 10,\n        pointerTailLength: 5,\n        pointerHeadLengthPercent: 0.65,\n        minValue: 0,\n        maxValue: 100,\n        minAngle: -90,\n        maxAngle: 90,\n        transitionMs: 2000,\n        majorTicks: 5,\n        labelFormat: d3.format('d'),\n        labelInset: 10,\n        // arcColorFn: d3.interpolateHsl(d3.rgb('#e8e2ca'), d3.rgb('#3e6c0a'))\n        limitingValue:0.75,\n        arcColorFn: [\"#ff0000\",\"#00ff00\"]\n      };\n\n      let range: number | undefined;\n      let r: number | undefined;\n      let pointerHeadLength: number | undefined;\n      let value = 0;\n\n      let svg: any;\n      let arc: any;\n      let scale: any;\n      let ticks: any;\n      let tickData: any;\n      let pointer: any;\n\n      const donut = d3.pie();\n\n      function deg2rad(deg: number) {\n        return deg * Math.PI / 180;\n      }\n\n      function newAngle(d: number) {\n        const ratio = scale(d);\n        const newAngle = config.minAngle + (ratio * range!);\n        return newAngle;\n      }\n\n      function configure(configuration: GaugeConfig) {\n        // for (const prop in configuration) {\n        //   if (configuration.hasOwnProperty(prop)) {\n        //     (config as any)[prop] = configuration[prop];\n        //   }\n        // }\n\n        range = config.maxAngle - config.minAngle;\n        r = config.size / 2;\n        pointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);\n\n        scale = d3.scaleLinear()\n          .range([0, 1])\n          .domain([config.minValue, config.maxValue]);\n\n        ticks = scale.ticks(config.majorTicks);\n        tickData = d3.range(config.majorTicks).map(() => 1 / config.majorTicks);\n\n        arc = d3.arc()\n          .innerRadius(r! - config.ringWidth - config.ringInset)\n          .outerRadius(r! - config.ringInset)\n          .startAngle((d: any, i: number) => {\n            // const ratio = d * i;\n            const ratio = i*config.limitingValue;\n            return deg2rad(config.minAngle + (ratio * range!));\n          })\n          .endAngle((d: any, i: number) => {\n            // const ratio = d * (i + 1);\n            let ratio = (i + 1)*config.limitingValue;\n            if(ratio>1){\n              ratio=1;\n            }\n            return deg2rad(config.minAngle + (ratio * range!));\n          });\n      }\n      self.gaugemap.configure = configure;\n\n      function centerTranslation() {\n        return `translate(${r},${r})`;\n      }\n\n      function isRendered() {\n        return svg !== undefined;\n      }\n      self.gaugemap.isRendered = isRendered;\n\n      function render(newValue: number) {\n        d3.select(container).selectAll(\"*\").remove();\n        svg = d3.select(container)\n          .append('svg:svg')\n          .attr('class', 'gauge')\n          .attr('width', config.clipWidth)\n          .attr('height', config.clipHeight);\n\n        const centerTx = centerTranslation();\n\n        const arcs = svg.append('g')\n          .attr('class', 'arc')\n          .attr('transform', centerTx);\n\n        arcs.selectAll('path')\n        // .data(tickData)\n          .data([0.5,0.5])\n          .enter().append('path')\n          .attr('fill', (d: number, i: number) => {\n            // return config.arcColorFn(d * i);\n            return config.arcColorFn[i];\n          })\n          .attr('d', arc);\n\n        const lg = svg.append('g')\n          .attr('class', 'label')\n          .attr('transform', centerTx);\n\n        lg.selectAll('text')\n          .data(ticks)\n          .enter().append('text')\n          .attr('transform', (d: number) => {\n            const ratio = scale(d);\n            const newAngle = config.minAngle + (ratio * range!);\n            return `rotate(${newAngle}) translate(0,${config.labelInset - (r ?? 0)})`;\n          })\n          .text(config.labelFormat);\n\n        const lineData = [\n          [config.pointerWidth / 2, 0],\n          [0, -pointerHeadLength!],\n          [-(config.pointerWidth / 2), 0],\n          [0, config.pointerTailLength],\n          [config.pointerWidth / 2, 0]\n        ];\n        const pointerLine = d3.line().curve(d3.curveLinear);\n\n        const pg = svg.append('g').data([lineData])\n          .attr('class', 'pointer')\n          .attr('transform', centerTx);\n\n        pointer = pg.append('path')\n          .attr('d', pointerLine)\n          .attr('transform', `rotate(${config.minAngle})`);\n\n        update(newValue === undefined ? 0 : newValue);\n\n        const rv = svg.append('g')\n        .attr('class', 'pointerval')\n        .attr('transform', centerTx);\n         rv.append('text').attr('transform','rotate(0) translate(-30,70) scale(3)').text(newValue+'%');\n      }\n      self.gaugemap.render = render;\n\n      function update(newValue: number, newConfiguration?: any) {\n        if (newConfiguration !== undefined) {\n          configure(newConfiguration);\n        }\n        const ratio = scale(newValue);\n        const newAngle = config.minAngle + (ratio * range!);\n        pointer.transition()\n          .duration(config.transitionMs)\n          .ease(d3.easeElastic)\n          .attr('transform', `rotate(${newAngle})`);\n      }\n      self.gaugemap.update = update;\n\n      configure(configuration);\n\n      return self.gaugemap;\n    };\n\n    const powerGauge = gauge('#power-gauge',{});\n    powerGauge.render(this.needleValue);\n  }\n\n}","<form style=\"display: flex; align-items: center; justify-content: space-around;\">\n\t<!-- <div (click)=\"onClickKnob()\" style=\"cursor: pointer;\">\n\t\t<rg-gauge-chart [canvasWidth]=\"canvasWidth\" [needleValue]=\"needleValue\" [options]=\"guageOptions\"\n\t\t\t[bottomLabel]=\"bottomLabel\">\n\t\t</rg-gauge-chart>\n\t</div> -->\n    <div id=\"power-gauge\" (click)=\"onClickKnob()\"></div>\n</form>\n<p-dialog [(visible)]=\"showPopupFlag\" [modal]=\"true\" [style]=\"{width: '66vw'}\" [maximizable]=\"true\" [draggable]=\"false\"\n    [resizable]=\"false\" styleClass=\"dark-panel\">\n    <ng-template pTemplate=\"header\">\n        <h2 style=\"margin: 0px;\">Request List</h2>\n    </ng-template>\n    <ng-template pTemplate=\"body\">\n        <app-add-table [data]=\"detailsPopUpData\" [isEscalatedData]=\"viewForEscalation\"></app-add-table>\n    </ng-template>\n</p-dialog>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}