{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/users.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"@angular/material/legacy-card\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/password\";\nimport * as i10 from \"ng-zorro-antd/table\";\nfunction UserChangePwdComponent_tr_21_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 19);\n    i0.ɵɵtext(1, \" passwords that you enter is inconsistent! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UserChangePwdComponent_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 16);\n    i0.ɵɵtemplate(2, UserChangePwdComponent_tr_21_label_2_Template, 2, 0, \"label\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.userPasswordPanel.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.userPasswordPanel.controls[\"newPasswordConfirm\"].errors) && !(ctx_r0.userPasswordPanel.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.userPasswordPanel.controls[\"newPasswordConfirm\"].errors.required));\n  }\n}\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nexport let UserChangePwdComponent = /*#__PURE__*/(() => {\n  class UserChangePwdComponent {\n    constructor(data, dialog, dialogRef, formBuilder, userSrv, datePipe, messageService) {\n      this.data = data;\n      this.dialog = dialog;\n      this.dialogRef = dialogRef;\n      this.formBuilder = formBuilder;\n      this.userSrv = userSrv;\n      this.datePipe = datePipe;\n      this.messageService = messageService;\n      this.user_name = \"\";\n      this.subscriptions = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumUsers = [];\n      this.enumStatus = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      /// Start Of Building Form \n      this.userPasswordPanel = this.formBuilder.group({\n        userName: [''],\n        userPwd: [''],\n        userNewPwd: ['', [Validators.required]],\n        newPasswordConfirm: ['', [Validators.required, this.checkPassword()]]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.userPasswordPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      if (this.data != null && this.data.user_name) {\n        this.loadData(this.data.user_name);\n      }\n    }\n    loadData(user_name) {\n      this.userPasswordRec = {\n        \"userName\": user_name,\n        \"userDatePwdChanged\": this.datePipe.transform(new Date(), \"dd/MM/yyyy\"),\n        \"userNewPwd\": \"\",\n        \"userPwd\": \"\"\n      };\n      this.writeValue(this.userPasswordRec);\n    }\n    loadEnums() {}\n    checkPassword() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value.length > 1) {\n          this.userPasswordPanel.controls['newPasswordConfirm'].setErrors(null);\n          this.userPasswordPanel.clearAsyncValidators();\n          this.userPasswordPanel.updateValueAndValidity();\n          let userPwd = this.userPasswordPanel.controls['userNewPwd'].value;\n          if (userPwd != null && userPwd === control.value) {\n            return null;\n          } else {\n            return {\n              'incorrect': true\n            };\n          }\n        }\n        return null;\n      };\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const records = {\n        userName: this.userPasswordPanel.controls.userName.value,\n        userNewPwd: this.userPasswordPanel.controls.userNewPwd.value,\n        userPwd: this.userPasswordPanel.controls.userPwd.value,\n        userDatePwdChanged: this.userPasswordPanel.controls.userDatePwdChanged.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.userPasswordPanel.patchValue({\n          userName: value.userName,\n          userNewPwd: value.userNewPwd,\n          userPwd: value.userPwd,\n          userDatePwdChanged: value.userDatePwdChanged\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.userPasswordPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    confirmDialog() {\n      this.dialogRef.close();\n    }\n    onSave() {\n      if (this.userPasswordPanel.valid) {\n        let userPwdRec = {\n          \"userName\": this.data.user_name,\n          \"userDatePwdChanged\": this.datePipe.transform(new Date(), \"dd/MM/yyyy\"),\n          \"userNewPwd\": this.userPasswordPanel.controls.userNewPwd.value,\n          \"userPwd\": this.userPasswordPanel.controls.userPwd.value\n        };\n        this.userSrv.updateUserCrendentials(userPwdRec).subscribe(res => {\n          if (res.text == 'Record saved successfully.') {\n            this.messageService.clear();\n            this.messageService.add({\n              key: 'message',\n              severity: 'success',\n              summary: 'Password updated successfully',\n              detail: 'Password updated successfully'\n            });\n            setTimeout(() => {\n              this.dialogRef.close(true);\n            }, 1000);\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function UserChangePwdComponent_Factory(t) {\n      return new (t || UserChangePwdComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.UsersService), i0.ɵɵdirectiveInject(i4.DatePipe), i0.ɵɵdirectiveInject(i5.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UserChangePwdComponent,\n      selectors: [[\"app-user-change-pwd\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 26,\n      vars: 9,\n      consts: [[\"mat-dialog-title\", \"\", 1, \"mat-dialog-title-ext\"], [1, \"mat-typography\", \"mat-dialog-content-ext\"], [3, \"formGroup\"], [\"id\", \"userPasswordPanel\"], [\"width\", \"100%\"], [2, \"width\", \"90%\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\"], [\"formControlName\", \"userNewPwd\", 3, \"toggleMask\"], [\"formControlName\", \"newPasswordConfirm\", 3, \"feedback\", \"toggleMask\"], [4, \"ngIf\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", \"styleClass\", \"p-button-primary\", 1, \"mr5\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"key\", \"message\"], [2, \"width\", \"50%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [2, \"width\", \"calc(100% / 2)\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function UserChangePwdComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Change Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"form\", 2)(4, \"mat-card\")(5, \"mat-card-content\", 3)(6, \"table\", 4)(7, \"tr\")(8, \"td\", 5)(9, \"div\", 6)(10, \"div\", 7)(11, \"label\", 8);\n          i0.ɵɵtext(12, \"Enter new password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"p-password\", 9);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 5)(16, \"div\", 6)(17, \"div\", 7)(18, \"label\", 8);\n          i0.ɵɵtext(19, \"Re-enter new password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"p-password\", 10);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(21, UserChangePwdComponent_tr_21_Template, 4, 1, \"tr\", 11);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(22, \"mat-dialog-actions\", 12)(23, \"p-button\", 13);\n          i0.ɵɵlistener(\"click\", function UserChangePwdComponent_Template_p_button_click_23_listener() {\n            return ctx.onSave();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"p-button\", 14);\n          i0.ɵɵlistener(\"click\", function UserChangePwdComponent_Template_p_button_click_24_listener() {\n            return ctx.confirmDialog();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(25, \"p-toast\", 15);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.userPasswordPanel);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"toggleMask\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"feedback\", false)(\"toggleMask\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.userPasswordPanel.controls[\"newPasswordConfirm\"] == null ? null : ctx.userPasswordPanel.controls[\"newPasswordConfirm\"].errors) && ((ctx.userPasswordPanel.controls[\"newPasswordConfirm\"] == null ? null : ctx.userPasswordPanel.controls[\"newPasswordConfirm\"].dirty) || (ctx.userPasswordPanel.controls[\"newPasswordConfirm\"] == null ? null : ctx.userPasswordPanel.controls[\"newPasswordConfirm\"].touched)));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.userPasswordPanel.valid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(8, _c0));\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i6.MatLegacyCard, i6.MatLegacyCardContent, i7.Button, i8.Toast, i9.Password, i10.NzTableCellDirective, i10.NzTrDirective],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;margin-right:15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0;margin-top:2px}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}\"]\n    });\n  }\n  return UserChangePwdComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}