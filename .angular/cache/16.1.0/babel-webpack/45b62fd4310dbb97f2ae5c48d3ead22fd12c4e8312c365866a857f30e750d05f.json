{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MessageService } from 'primeng/api';\nimport { forkJoin } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/room-teams.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/table\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/dialog\";\nimport * as i9 from \"primeng/toast\";\nimport * as i10 from \"primeng/confirmdialog\";\nimport * as i11 from \"ng-zorro-antd/table\";\nimport * as i12 from \"../../../../directive/numbers-only.directive\";\nfunction AssignRoomsComponent_ng_template_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Available Rooms for \", ctx_r7.presentTeamId, \"\");\n  }\n}\nfunction AssignRoomsComponent_ng_template_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Available Rooms\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AssignRoomsComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtemplate(2, AssignRoomsComponent_ng_template_2_div_2_Template, 3, 1, \"div\", 18);\n    i0.ɵɵtemplate(3, AssignRoomsComponent_ng_template_2_ng_template_3_Template, 2, 0, \"ng-template\", null, 19, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_2_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onAssign());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const _r8 = i0.ɵɵreference(4);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.presentTeamId.length > 0)(\"ngIfElse\", _r8);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r0.selectedScreens.length > 0));\n  }\n}\nfunction AssignRoomsComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 21);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 22)(4, \"div\", 23)(5, \"div\", 24)(6, \"p\", 25);\n    i0.ɵɵtext(7, \"Building Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 26);\n    i0.ɵɵelement(9, \"p-sortIcon\", 27)(10, \"p-columnFilter\", 28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 29)(12, \"div\", 23)(13, \"div\", 24)(14, \"p\", 25);\n    i0.ɵɵtext(15, \"Floor Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 26);\n    i0.ɵɵelement(17, \"p-sortIcon\", 30)(18, \"p-columnFilter\", 31);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"th\", 32)(20, \"div\", 23)(21, \"div\", 24)(22, \"p\", 25);\n    i0.ɵɵtext(23, \"Room Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 26);\n    i0.ɵɵelement(25, \"p-sortIcon\", 33)(26, \"p-columnFilter\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(27, \"th\");\n    i0.ɵɵtext(28, \" Occupied Space (%) \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"th\");\n    i0.ɵɵtext(30, \" Available Space (%) \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AssignRoomsComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 35)(1, \"td\", 21);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const room_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", room_r12);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", room_r12);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.blId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.flId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.rmId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(100 - room_r12.availability);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.availability);\n  }\n}\nfunction AssignRoomsComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nfunction AssignRoomsComponent_tr_17_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"The room[\", ctx_r14.minAvailRmid, \"] has only \", ctx_r14.minAvailibility, \"% available space\");\n  }\n}\nfunction AssignRoomsComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 37);\n    i0.ɵɵtemplate(2, AssignRoomsComponent_tr_17_label_2_Template, 2, 2, \"label\", 38);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r5.assignRoom.controls[\"occupancyValue\"] == null ? null : ctx_r5.assignRoom.controls[\"occupancyValue\"].errors.required));\n  }\n}\nfunction AssignRoomsComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 40)(2, \"div\")(3, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_18_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.saveOccupancyValue());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\")(5, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_18_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.cancelOccupancyValue());\n    });\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r6.assignRoom.valid);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nconst _c1 = function () {\n  return {\n    width: \"25vw\"\n  };\n};\nexport let AssignRoomsComponent = /*#__PURE__*/(() => {\n  class AssignRoomsComponent {\n    constructor(rmteamsrv, authSrv, formBuilder, messageService) {\n      this.rmteamsrv = rmteamsrv;\n      this.authSrv = authSrv;\n      this.formBuilder = formBuilder;\n      this.messageService = messageService;\n      this.roomsData = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.allRoomsData = [];\n      this.allRmTeamsData = [];\n      this.selectedScreens = [];\n      this.displayAssignScreen = false;\n      this.assignSgPanels = new EventEmitter();\n      this.presentTeamId = '';\n      this.minAvailibility = 0;\n      this.minAvailRmid = '';\n      this.assignRoom = this.formBuilder.group({\n        occupancyValue: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.compId = this.authSrv.getLoggedInUserCompId();\n    }\n    onAssign() {\n      this.assignRoom.patchValue({\n        occupancyValue: null\n      });\n      this.minAvailibility = this.selectedScreens[0].availability;\n      this.minAvailRmid = this.selectedScreens[0].rmId;\n      this.selectedScreens.forEach(screen => {\n        if (screen.availability < this.minAvailibility) {\n          this.minAvailibility = screen.availability;\n          this.minAvailRmid = screen.rmId;\n        }\n      });\n      this.displayAssignScreen = true;\n    }\n    loadRecords(teamId) {\n      this.allRoomsData = [];\n      this.allRmTeamsData = [];\n      this.roomsData = [];\n      this.selectedScreens = [];\n      const getunassignedrooms = this.rmteamsrv.getUnAssignedRooms(teamId);\n      const getallrmteams = this.rmteamsrv.getAllRmTeams();\n      forkJoin([getunassignedrooms, getallrmteams]).subscribe(([result1, result2]) => {\n        console.log('Backend calls completed:', result1, result2);\n        if (result1) {\n          result1.forEach(rm => {\n            this.allRoomsData.push({\n              blId: rm.blId,\n              flId: rm.flId,\n              rmId: rm.rmId,\n              availability: 100,\n              teamId: teamId\n            });\n          });\n        }\n        if (result2) {\n          this.allRmTeamsData = result2;\n        }\n        this.allRoomsData.forEach(rm => {\n          const matchforavail = this.allRmTeamsData.filter(obj1 => rm.blId == obj1.blId && rm.flId == obj1.flId && rm.rmId == obj1.rmId);\n          if (matchforavail.length > 0) {\n            matchforavail.forEach(room => {\n              const checkroom = this.allRoomsData.find(obj1 => room.blId == obj1.blId && room.flId == obj1.flId && room.rmId == obj1.rmId);\n              const index = this.allRoomsData.indexOf(checkroom);\n              if (index !== -1) {\n                this.allRoomsData[index].availability -= room.allocation;\n              }\n            });\n          }\n        });\n        this.roomsData = this.allRoomsData;\n      });\n    }\n    checkOccupancyValue(control) {\n      if (control.value !== undefined && control.value != null && control.value.length > 0 && this.displayAssignScreen) {\n        this.assignRoom.controls['occupancyValue'].setErrors(null);\n        this.assignRoom.clearAsyncValidators();\n        this.assignRoom.updateValueAndValidity();\n        if (parseInt(control.value) > this.minAvailibility) {\n          this.assignRoom.controls['occupancyValue'].setErrors({\n            'incorrect': true\n          });\n          this.assignRoom.updateValueAndValidity();\n          return {\n            'incorrect': true\n          };\n        } else {\n          return null;\n        }\n      }\n      return null;\n    }\n    saveOccupancyValue() {\n      this.messageService.clear();\n      const saveRequests = [];\n      this.selectedScreens.forEach(screen => {\n        let data = {\n          compId: this.compId,\n          blId: screen.blId,\n          flId: screen.flId,\n          rmId: screen.rmId,\n          teamId: screen.teamId,\n          allocation: this.assignRoom.controls.occupancyValue.value\n        };\n        saveRequests.push(this.rmteamsrv.saveRmTeam(data));\n      });\n      forkJoin(saveRequests).subscribe(res => {\n        this.displayAssignScreen = false;\n        this.messageService.add({\n          key: 'UsgGrid',\n          severity: 'success',\n          summary: 'Team assigned successfully',\n          detail: 'Team assigned successfully'\n        });\n        this.refreshPanel();\n      });\n    }\n    cancelOccupancyValue() {\n      this.displayAssignScreen = false;\n      this.assignRoom.patchValue({\n        occupancyValue: null\n      });\n    }\n    refreshPanel() {\n      this.assignSgPanels.emit(true);\n    }\n    limitToThreeDigits(event) {\n      const input = event.target.value;\n      if (input.length > 3) {\n        this.assignRoom.patchValue({\n          occupancyValue: input.slice(0, 3)\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AssignRoomsComponent_Factory(t) {\n      return new (t || AssignRoomsComponent)(i0.ɵɵdirectiveInject(i1.RmTeamsService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AssignRoomsComponent,\n      selectors: [[\"app-assign-rooms\"]],\n      inputs: {\n        presentTeamId: \"presentTeamId\"\n      },\n      outputs: {\n        assignSgPanels: \"assignSgPanels\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 19,\n      vars: 19,\n      consts: [[1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"400px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"selection\", \"rowHover\", \"scrollable\", \"selectionChange\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"UsgGrid\", \"position\", \"top-right\"], [\"key\", \"positionDialog\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"header\", \"Assign Room\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"occupancyValue\", \"formControlName\", \"occupancyValue\", \"NumbersOnly\", \"\", 1, \"form-control\", 3, \"blur\", \"input\"], [\"occupancyValue\", \"\"], [4, \"ngIf\"], [1, \"d-flex\", \"flex-row\"], [2, \"flex\", \"auto\"], [4, \"ngIf\", \"ngIfElse\"], [\"noTeam\", \"\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Assign\", \"icon\", \"pi pi-plus\", 1, \"p-button-primary\", \"p-button-sm\", \"p-mr-2\", 3, \"disabled\", \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"blId\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"blId\"], [\"type\", \"text\", \"field\", \"blId\", \"display\", \"menu\"], [\"pSortableColumn\", \"flId\"], [\"field\", \"flId\"], [\"type\", \"text\", \"field\", \"flId\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmId\"], [\"field\", \"rmId\"], [\"type\", \"text\", \"field\", \"rmId\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [3, \"value\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [2, \"display\", \"flex\", \"justify-content\", \"center\", \"margin-top\", \"20px\", \"width\", \"100%\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", \"p-button-sm\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"]],\n      template: function AssignRoomsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r18 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-table\", 1);\n          i0.ɵɵlistener(\"selectionChange\", function AssignRoomsComponent_Template_p_table_selectionChange_1_listener($event) {\n            return ctx.selectedScreens = $event;\n          });\n          i0.ɵɵtemplate(2, AssignRoomsComponent_ng_template_2_Template, 7, 3, \"ng-template\", 2);\n          i0.ɵɵtemplate(3, AssignRoomsComponent_ng_template_3_Template, 31, 0, \"ng-template\", 3);\n          i0.ɵɵtemplate(4, AssignRoomsComponent_ng_template_4_Template, 13, 7, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, AssignRoomsComponent_ng_template_5_Template, 3, 1, \"ng-template\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(6, \"p-toast\", 6)(7, \"p-confirmDialog\", 7);\n          i0.ɵɵelementStart(8, \"p-dialog\", 8);\n          i0.ɵɵlistener(\"visibleChange\", function AssignRoomsComponent_Template_p_dialog_visibleChange_8_listener($event) {\n            return ctx.displayAssignScreen = $event;\n          });\n          i0.ɵɵelementStart(9, \"form\", 9)(10, \"table\", 10)(11, \"tr\")(12, \"div\", 11)(13, \"label\", 12);\n          i0.ɵɵtext(14, \"Required Space (%)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"input\", 13, 14);\n          i0.ɵɵlistener(\"blur\", function AssignRoomsComponent_Template_input_blur_15_listener() {\n            i0.ɵɵrestoreView(_r18);\n            const _r4 = i0.ɵɵreference(16);\n            return i0.ɵɵresetView(ctx.checkOccupancyValue(_r4));\n          })(\"input\", function AssignRoomsComponent_Template_input_input_15_listener($event) {\n            return ctx.limitToThreeDigits($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(17, AssignRoomsComponent_tr_17_Template, 3, 1, \"tr\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(18, AssignRoomsComponent_ng_template_18_Template, 6, 1, \"ng-template\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"value\", ctx.roomsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(17, _c0))(\"selection\", ctx.selectedScreens)(\"rowHover\", false)(\"scrollable\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(18, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.displayAssignScreen)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.assignRoom);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.assignRoom.controls[\"occupancyValue\"] == null ? null : ctx.assignRoom.controls[\"occupancyValue\"].errors) && ctx.assignRoom.controls[\"occupancyValue\"].dirty);\n        }\n      },\n      dependencies: [i5.NgIf, i4.PrimeTemplate, i6.Table, i6.SortableColumn, i6.SelectableRow, i6.SortIcon, i6.TableCheckbox, i6.TableHeaderCheckbox, i6.ColumnFilter, i7.ButtonDirective, i8.Dialog, i9.Toast, i10.ConfirmDialog, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i11.NzTableCellDirective, i11.NzThMeasureDirective, i11.NzTrDirective, i12.NumbersOnlyDirective],\n      styles: [\"[_nghost-%COMP%]     .p-dialog .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header .p-dialog-content{align-items:center;background-color:#f9fcfc;display:flex;padding:10px}[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header{align-items:center;background-color:#f9fcfc}\"]\n    });\n  }\n  return AssignRoomsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}