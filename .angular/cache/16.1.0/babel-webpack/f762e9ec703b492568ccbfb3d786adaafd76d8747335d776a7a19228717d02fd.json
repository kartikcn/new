{"ast":null,"code":"import { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/dropdown\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/tooltip\";\nfunction DashboardMyRequestsGridComponent_ng_template_1_ng_template_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 22);\n    i0.ɵɵlistener(\"onChange\", function DashboardMyRequestsGridComponent_ng_template_1_ng_template_34_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const filter_r5 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r5($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r4)(\"options\", ctx_r3.enumStatus)(\"showClear\", true);\n  }\n}\nfunction DashboardMyRequestsGridComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 4);\n    i0.ɵɵelementStart(2, \"th\", 5)(3, \"div\", 6)(4, \"div\", 7)(5, \"p\", 8);\n    i0.ɵɵtext(6, \"Request Id\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 9);\n    i0.ɵɵelement(8, \"p-sortIcon\", 10)(9, \"p-columnFilter\", 11);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 12)(11, \"div\", 6)(12, \"div\", 7)(13, \"p\", 8);\n    i0.ɵɵtext(14, \"Requested Date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 9);\n    i0.ɵɵelement(16, \"p-sortIcon\", 13)(17, \"p-columnFilter\", 14);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 15)(19, \"div\", 6)(20, \"div\", 7)(21, \"p\", 8);\n    i0.ɵɵtext(22, \"Problem Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 9);\n    i0.ɵɵelement(24, \"p-sortIcon\", 16)(25, \"p-columnFilter\", 17);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"th\", 18)(27, \"div\", 6)(28, \"div\", 7)(29, \"p\", 8);\n    i0.ɵɵtext(30, \"Status\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 9);\n    i0.ɵɵelement(32, \"p-sortIcon\", 19);\n    i0.ɵɵelementStart(33, \"p-columnFilter\", 20);\n    i0.ɵɵtemplate(34, DashboardMyRequestsGridComponent_ng_template_1_ng_template_34_Template, 1, 3, \"ng-template\", 21);\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction DashboardMyRequestsGridComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 23)(1, \"td\", 4)(2, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function DashboardMyRequestsGridComponent_ng_template_2_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const wr_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onClickView(wr_r8));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\", 25);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const wr_r8 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", wr_r8);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(wr_r8.wrId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 6, wr_r8.dateRequested, \"dd MMM yyyy\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", wr_r8.probTypeId == null ? \"Default\" : wr_r8.problemTypeString);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", wr_r8.probTypeId == null ? \"Default\" : wr_r8.problemTypeString, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.getValueById(wr_r8.status));\n  }\n}\nfunction DashboardMyRequestsGridComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 26);\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 5);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let DashboardMyRequestsGridComponent = /*#__PURE__*/(() => {\n  class DashboardMyRequestsGridComponent {\n    constructor(enumsrv, router, datePipe) {\n      this.enumsrv = enumsrv;\n      this.router = router;\n      this.datePipe = datePipe;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.requestsData = [];\n      this.enumStatusData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumWr = [];\n      this.enumStatus = [];\n      this.filteredData = [];\n    }\n    ngOnInit() {\n      this.loadEnumsData();\n    }\n    loadEnumsData() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.enumStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n      });\n    }\n    getValueById(enumKey) {\n      return this.enumStatus.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    onClickView(data) {\n      const wrId = data.wrId;\n      const status = data.status;\n      const url = this.router.serializeUrl(this.router.createUrlTree([\"/work-request-details\"], {\n        queryParams: {\n          requestId: wrId,\n          index: 0,\n          action: \"details\",\n          status: status,\n          viewDetails: true,\n          isNavigationFromReport: true\n        }\n      }));\n      window.open(url, '_blank');\n    }\n    static #_ = this.ɵfac = function DashboardMyRequestsGridComponent_Factory(t) {\n      return new (t || DashboardMyRequestsGridComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardMyRequestsGridComponent,\n      selectors: [[\"app-dashboard-my-requests-grid\"]],\n      inputs: {\n        myRequestsData: \"myRequestsData\"\n      },\n      decls: 4,\n      vars: 9,\n      consts: [[\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"scrollDirection\", \"both\", \"scrollHeight\", \"200px\", \"styleClass\", \"p-datatable-customers p-datatable-gridlines\", \"dataKey\", \"wrId\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"scrollable\", \"rowHover\", \"totalRecords\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"wrId\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"wrId\"], [\"type\", \"text\", \"field\", \"wrId\", \"display\", \"menu\"], [\"pSortableColumn\", \"formatedDateRequested\"], [\"field\", \"formatedDateRequested\"], [\"type\", \"text\", \"field\", \"formatedDateRequested\", \"display\", \"menu\"], [\"pSortableColumn\", \"problemTypeString\"], [\"field\", \"problemTypeString\"], [\"type\", \"text\", \"field\", \"problemTypeString\", \"display\", \"menu\"], [\"pSortableColumn\", \"status\"], [\"field\", \"status\"], [\"type\", \"text\", \"field\", \"status\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"id\", \"placeholder\", \"Select a Status\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"icon\", \"pi pi-eye\", \"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"matTooltipPosition\", \"top\", \"matTooltip\", \"View\", 1, \"p-button-text\", \"p-button-rounded\", 3, \"click\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"], [2, \"text-align\", \"center\"]],\n      template: function DashboardMyRequestsGridComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-table\", 0);\n          i0.ɵɵtemplate(1, DashboardMyRequestsGridComponent_ng_template_1_Template, 35, 0, \"ng-template\", 1);\n          i0.ɵɵtemplate(2, DashboardMyRequestsGridComponent_ng_template_2_Template, 12, 9, \"ng-template\", 2);\n          i0.ɵɵtemplate(3, DashboardMyRequestsGridComponent_ng_template_3_Template, 3, 1, \"ng-template\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"value\", ctx.myRequestsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"scrollable\", true)(\"rowHover\", false)(\"totalRecords\", ctx.myRequestsData.length);\n        }\n      },\n      dependencies: [i4.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.ColumnFilter, i6.ButtonDirective, i7.Dropdown, i8.NgControlStatus, i8.NgModel, i9.MatTooltip, i3.DatePipe]\n    });\n  }\n  return DashboardMyRequestsGridComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}