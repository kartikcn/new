{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nexport class PlanTradeService {\n  constructor(planTradeService) {\n    this.planTradeService = planTradeService;\n  }\n  getAllPlanTrades(planStepId) {\n    return this.planTradeService.getAllById('planTrade', 'getByPlanStepId', planStepId);\n  }\n  getPlanTradeById(id) {\n    return this.planTradeService.getSingleById('planTrade', 'getPlanTradeById', id);\n  }\n  savePlanTrade(data) {\n    return this.planTradeService.add('planTrade', 'save', data);\n  }\n  deletePlanTrade(id) {\n    return this.planTradeService.getSingleById('planTrade', 'deletePlanTradeById', id);\n  }\n  checkIsPlanTradeExists(planStepId, tradeId) {\n    return this.planTradeService.getAllByIds('planTrade', 'checkExist', planStepId, tradeId);\n  }\n  static #_ = this.ɵfac = function PlanTradeService_Factory(t) {\n    return new (t || PlanTradeService)(i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlanTradeService,\n    factory: PlanTradeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PlanTradeService","constructor","planTradeService","getAllPlanTrades","planStepId","getAllById","getPlanTradeById","id","getSingleById","savePlanTrade","data","add","deletePlanTrade","checkIsPlanTradeExists","tradeId","getAllByIds","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/plan-trade/services/plan-trade-services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataService } from '../../../services/data.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PlanTradeService {\n   \n    constructor(\n        private planTradeService: DataService<any>,\n    ) { }\n\n    public getAllPlanTrades(planStepId:any) {\n        return this.planTradeService.getAllById('planTrade', 'getByPlanStepId',planStepId);\n    }\n\n    public getPlanTradeById(id: any) {\n        return this.planTradeService.getSingleById('planTrade', 'getPlanTradeById', id);\n    }\n\n    public savePlanTrade(data: any): Observable<any> {\n        return this.planTradeService.add('planTrade', 'save', data);\n    }\n\n    public deletePlanTrade(id: any) {\n        return this.planTradeService.getSingleById('planTrade', 'deletePlanTradeById', id);\n    }\n\n    public checkIsPlanTradeExists(planStepId:any,tradeId:any) {\n        return this.planTradeService.getAllByIds('planTrade','checkExist',planStepId,tradeId)\n    }\n\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,gBAAgB;EAEzBC,YACYC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;EACxB;EAEGC,gBAAgBA,CAACC,UAAc;IAClC,OAAO,IAAI,CAACF,gBAAgB,CAACG,UAAU,CAAC,WAAW,EAAE,iBAAiB,EAACD,UAAU,CAAC;EACtF;EAEOE,gBAAgBA,CAACC,EAAO;IAC3B,OAAO,IAAI,CAACL,gBAAgB,CAACM,aAAa,CAAC,WAAW,EAAE,kBAAkB,EAAED,EAAE,CAAC;EACnF;EAEOE,aAAaA,CAACC,IAAS;IAC1B,OAAO,IAAI,CAACR,gBAAgB,CAACS,GAAG,CAAC,WAAW,EAAE,MAAM,EAAED,IAAI,CAAC;EAC/D;EAEOE,eAAeA,CAACL,EAAO;IAC1B,OAAO,IAAI,CAACL,gBAAgB,CAACM,aAAa,CAAC,WAAW,EAAE,qBAAqB,EAAED,EAAE,CAAC;EACtF;EAEOM,sBAAsBA,CAACT,UAAc,EAACU,OAAW;IACpD,OAAO,IAAI,CAACZ,gBAAgB,CAACa,WAAW,CAAC,WAAW,EAAC,YAAY,EAACX,UAAU,EAACU,OAAO,CAAC;EACzF;EAAC,QAAAE,CAAA,G;qBAxBQhB,gBAAgB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBrB,gBAAgB;IAAAsB,OAAA,EAAhBtB,gBAAgB,CAAAuB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}