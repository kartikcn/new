{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { forkJoin, of } from 'rxjs';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { AddPlanStepsFormComponent } from '../../add-plan-steps/add-plan-steps-form.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"../../../services/ppm-plan-services\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/toast\";\nimport * as i6 from \"primeng/confirmdialog\";\nimport * as i7 from \"@angular/material/legacy-card\";\nimport * as i8 from \"../../add-plan-steps/add-plan-steps-form.component\";\nexport class AddEditPlanStepsComponent {\n  constructor(formBuilder, confirmationService, ppmPlanService, messageService) {\n    this.formBuilder = formBuilder;\n    this.confirmationService = confirmationService;\n    this.ppmPlanService = ppmPlanService;\n    this.messageService = messageService;\n    this.subscriptions = [];\n    this.isNew = true;\n    this.isEdit = true;\n    this.opertation_title = \"\";\n    this.parentFun = new EventEmitter();\n    this.formPPmDetail = this.formBuilder.group({\n      planStepFormPanel: []\n    });\n  }\n  ngOnInit() {}\n  isNewRecord() {\n    if (this.data.newRecord != null) {\n      this.isNew = this.data.newRecord;\n    }\n  }\n  loadData(planId, planStepId) {\n    const calls = [];\n    if (planStepId) {\n      calls.push(this.ppmPlanService.getPlanStepById(planStepId));\n    } else {\n      calls.push(of(null));\n    }\n    forkJoin(...calls).subscribe(results => {\n      if (results[0] == null) {\n        let planStepData = {\n          planStepId: null,\n          planId: planId,\n          stepCode: null,\n          instructions: null\n        };\n        setTimeout(() => {\n          this.addPlanStepsFormComponent.loadPlansData();\n          this.formPPmDetail.patchValue({\n            planStepFormPanel: planStepData\n          });\n        }, 0);\n      } else {\n        setTimeout(() => {\n          this.addPlanStepsFormComponent.prevPlanId = results[0].planId;\n          this.addPlanStepsFormComponent.prevStepCode = results[0].stepCode;\n          this.formPPmDetail.patchValue({\n            planStepFormPanel: results[0]\n          });\n        }, 0);\n      }\n    });\n  }\n  saveRecords() {\n    if (this.formPPmDetail.valid) {\n      const planStepData = this.formPPmDetail.controls.planStepFormPanel.value;\n      this.ppmPlanService.savePlanStep(planStepData).subscribe(res => {\n        if (res.stepCode) {\n          this.setPlanStepId(res);\n        } else {\n          this.messageService.add({\n            key: 'error',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      }, error => {});\n    }\n  }\n  confirmDialog() {\n    this.confirmationService.confirm({\n      message: UtilConstant.CANCEL_Msg,\n      header: 'Confirmation',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {}\n    });\n  }\n  setPlanStepId(planId) {\n    this.parentFun.emit(planId);\n  }\n  static #_ = this.ɵfac = function AddEditPlanStepsComponent_Factory(t) {\n    return new (t || AddEditPlanStepsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.PpmPlanService), i0.ɵɵdirectiveInject(i2.MessageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditPlanStepsComponent,\n    selectors: [[\"app-add-edit-plan-steps\"]],\n    viewQuery: function AddEditPlanStepsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(AddPlanStepsFormComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addPlanStepsFormComponent = _t.first);\n      }\n    },\n    inputs: {\n      data: \"data\"\n    },\n    outputs: {\n      parentFun: \"parentFun\"\n    },\n    features: [i0.ɵɵProvidersFeature([MessageService])],\n    decls: 9,\n    vars: 3,\n    consts: [[1, \"card\"], [3, \"formGroup\"], [\"id\", \"Frm\"], [\"formControlName\", \"planStepFormPanel\", 3, \"isNew\"], [2, \"display\", \"flex\", \"justify-content\", \"end\", \"margin-top\", \"5px\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"key\", \"error\", \"position\", \"top-right\"]],\n    template: function AddEditPlanStepsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-card\")(3, \"mat-card-content\", 2);\n        i0.ɵɵelement(4, \"app-add-plan-steps-form\", 3);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"p-button\", 5);\n        i0.ɵɵlistener(\"click\", function AddEditPlanStepsComponent_Template_p_button_click_6_listener() {\n          return ctx.saveRecords();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"p-confirmDialog\", 6)(8, \"p-toast\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.formPPmDetail);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"isNew\", ctx.isNew);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.formPPmDetail.valid);\n      }\n    },\n    dependencies: [i4.Button, i5.Toast, i6.ConfirmDialog, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i7.MatLegacyCard, i7.MatLegacyCardContent, i8.AddPlanStepsFormComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","MessageService","forkJoin","of","UtilConstant","AddPlanStepsFormComponent","AddEditPlanStepsComponent","constructor","formBuilder","confirmationService","ppmPlanService","messageService","subscriptions","isNew","isEdit","opertation_title","parentFun","formPPmDetail","group","planStepFormPanel","ngOnInit","isNewRecord","data","newRecord","loadData","planId","planStepId","calls","push","getPlanStepById","subscribe","results","planStepData","stepCode","instructions","setTimeout","addPlanStepsFormComponent","loadPlansData","patchValue","prevPlanId","prevStepCode","saveRecords","valid","controls","value","savePlanStep","res","setPlanStepId","add","key","severity","summary","detail","text","error","confirmDialog","confirm","message","CANCEL_Msg","header","icon","accept","emit","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ConfirmationService","i3","PpmPlanService","_2","selectors","viewQuery","AddEditPlanStepsComponent_Query","rf","ctx","decls","vars","consts","template","AddEditPlanStepsComponent_Template","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵlistener","AddEditPlanStepsComponent_Template_p_button_click_6_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\ppm-plan\\widgets\\add-edit-plan-steps\\add-edit-plan-steps\\add-edit-plan-steps.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\ppm-plan\\widgets\\add-edit-plan-steps\\add-edit-plan-steps\\add-edit-plan-steps.component.html"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfirmationService, MessageService } from 'primeng/api';\nimport { Subscription, forkJoin, of } from 'rxjs';\nimport { PpmPlanService } from '../../../services/ppm-plan-services';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { AddPlanStepsFormComponent } from '../../add-plan-steps/add-plan-steps-form.component';\n\n@Component({\n  selector: 'app-add-edit-plan-steps',\n  templateUrl: './add-edit-plan-steps.component.html',\n  styleUrls: ['./add-edit-plan-steps.component.scss'],\n  providers: [MessageService]\n})\nexport class AddEditPlanStepsComponent implements OnInit {\n\n  formPPmDetail: FormGroup;\n  value: any;\n  subscriptions: Subscription[] = [];\n  isNew: boolean = true;\n  isEdit: boolean = true;\n  opertation_title = \"\";\n  @Input() data!:any;\n  @Output() parentFun = new EventEmitter();\n  @ViewChild(AddPlanStepsFormComponent, { static: false }) addPlanStepsFormComponent!: AddPlanStepsFormComponent;\n  constructor(\n    private formBuilder: FormBuilder,\n    private confirmationService: ConfirmationService,\n    private ppmPlanService: PpmPlanService,\n    private messageService: MessageService,\n  ) {\n    this.formPPmDetail = this.formBuilder.group({\n      planStepFormPanel: []\n    });\n  }\n\n  ngOnInit(): void {\n  \n  }\n\n  isNewRecord() {\n    if (this.data.newRecord != null) {\n      this.isNew = this.data.newRecord\n    }\n  }\n\n  loadData(planId:any,planStepId:any) { //changed this.data.planStepId\n    const calls = [];\n    if (planStepId) {\n      calls.push(this.ppmPlanService.getPlanStepById(planStepId));\n    }\n    else {\n      calls.push(of(null));\n    }\n\n    forkJoin(...calls).subscribe(results => {\n      if (results[0] == null) {\n        let planStepData = {\n          planStepId: null,\n          planId: planId ,\n          stepCode: null,\n          instructions: null,\n        }\n        setTimeout(() => {\n          this.addPlanStepsFormComponent.loadPlansData();\n          this.formPPmDetail.patchValue({\n            planStepFormPanel: planStepData\n          });\n        }, 0);\n\n      } else {\n        setTimeout(() => {\n          this.addPlanStepsFormComponent.prevPlanId = results[0].planId;\n          this.addPlanStepsFormComponent.prevStepCode = results[0].stepCode;\n          this.formPPmDetail.patchValue({\n            planStepFormPanel: results[0]\n          });\n        }, 0);\n      }\n    });\n  }\n\n  saveRecords() {\n    if (this.formPPmDetail.valid) {\n      const planStepData: any = this.formPPmDetail.controls.planStepFormPanel.value;\n      this.ppmPlanService.savePlanStep(planStepData).subscribe((res: any) => {\n        if (res.stepCode) {\n          this.setPlanStepId(res);\n        } else {\n          this.messageService.add({ key: 'error', severity: 'error', summary: 'error', detail: res.text });\n        }\n      },\n        error => {\n        }\n      );\n    }\n\n  }\n\n  confirmDialog(): void {\n    this.confirmationService.confirm({\n      message: UtilConstant.CANCEL_Msg,\n      header: 'Confirmation',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n      }\n    });\n  }\n\n  setPlanStepId(planId:any) {\n    this.parentFun.emit(planId);\n  }\n}\n","<div class=\"card\">\n  <form [formGroup]=\"formPPmDetail\">\n    <mat-card>\n      <mat-card-content id=\"Frm\">\n        <app-add-plan-steps-form formControlName=\"planStepFormPanel\" [isNew]=\"isNew\"></app-add-plan-steps-form>\n      </mat-card-content>\n    </mat-card>\n  </form>\n</div>\n<div style=\"display: flex; justify-content: end; margin-top: 5px;\">\n  <p-button label=\"Save\" (click)=\"saveRecords()\" [disabled]=\"!formPPmDetail.valid\" icon=\"pi pi-check\"></p-button>\n</div>\n<p-confirmDialog header=\"Confirmation\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n<p-toast key=\"error\" position=\"top-right\"></p-toast>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}