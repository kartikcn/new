{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../providers/help-desk-pd-provider\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"../services/problem-description.services\";\nimport * as i4 from \"primeng/table\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/panel\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"@angular/material/tooltip\";\nimport * as i10 from \"primeng/paginator\";\nfunction HelpDeskProblemDescriptionComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function HelpDeskProblemDescriptionComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.addPdItem());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HelpDeskProblemDescriptionComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 13);\n    i0.ɵɵelementStart(2, \"th\", 14)(3, \"div\", 15);\n    i0.ɵɵtext(4, \" Problem Description\");\n    i0.ɵɵelement(5, \"p-sortIcon\", 16)(6, \"p-columnFilter\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction HelpDeskProblemDescriptionComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 18)(1, \"td\", 13)(2, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function HelpDeskProblemDescriptionComponent_ng_template_6_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const pd_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.editPdItem(pd_r7.pdId));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function HelpDeskProblemDescriptionComponent_ng_template_6_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const pd_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onDelete(pd_r7.pdId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\", 21);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const pd_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", pd_r7);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", pd_r7.pdDescription);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(pd_r7.pdDescription);\n  }\n}\nfunction HelpDeskProblemDescriptionComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 2);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let HelpDeskProblemDescriptionComponent = /*#__PURE__*/(() => {\n  class HelpDeskProblemDescriptionComponent {\n    constructor(pdProvider, confirmationService, pdService, messageService) {\n      this.pdProvider = pdProvider;\n      this.confirmationService = confirmationService;\n      this.pdService = pdService;\n      this.messageService = messageService;\n      this.PdData = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"pdId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n      this.filterCriteriaList = [];\n    }\n    ngOnInit() {\n      this.loadAllRecords();\n    }\n    loadAllRecords() {\n      let data = {\n        paginationDTO: this.paginationObj,\n        filterCriteria: this.filterCriteriaList\n      };\n      this.pdService.getALLPdsPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          this.PdData = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n        } else {\n          this.PdData = [];\n        }\n      });\n    }\n    editPdItem(pdId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '500px';\n      dialogConfig.data = {\n        pdId: pdId,\n        isEdit: true,\n        newRecord: false\n      };\n      this.pdProvider.openDialog(dialogConfig);\n      this.pdProvider.onDialogueClosed.subscribe(result => {\n        if (result.code === 200) {\n          this.messageService.clear();\n          this.messageService.add({\n            key: 'pdMessage',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadAllRecords();\n        }\n      });\n    }\n    addPdItem() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '500px';\n      dialogConfig.data = {\n        pdId: null,\n        isEdit: true,\n        newRecord: true\n      };\n      this.pdProvider.openDialog(dialogConfig);\n      this.pdProvider.onDialogueClosed.subscribe(result => {\n        if (result.code === 200) {\n          this.messageService.clear();\n          this.messageService.add({\n            key: 'pdMessage',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadAllRecords();\n        }\n      });\n    }\n    onDelete(id) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ' + '?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deletePd(id);\n        },\n        key: \"pdGrid\"\n      });\n    }\n    deletePd(id) {\n      this.pdService.deleteById(id).subscribe(res => {\n        if (res != null && res.code == 200) {\n          this.messageService.add({\n            key: 'pdMessage',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.loadAllRecords();\n        } else {\n          this.messageService.add({\n            key: 'pdMessage',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      }, error => {});\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadAllRecords();\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined) {\n            let filterCriteria = {\n              fieldName: field,\n              value: filterValue,\n              matchMode: matchMode\n            };\n            this.updateFilterCriteriaList(filterCriteria);\n          }\n        });\n        this.paginationObj.pageNo = 0;\n        this.loadAllRecords();\n      }\n      this.isFiltered = true;\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaList[index] = filterCriteria;\n        } else {\n          this.filterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function HelpDeskProblemDescriptionComponent_Factory(t) {\n      return new (t || HelpDeskProblemDescriptionComponent)(i0.ɵɵdirectiveInject(i1.ProblemDescriptionDialogueProvider), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.ProblemDescriptionService), i0.ɵɵdirectiveInject(i2.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HelpDeskProblemDescriptionComponent,\n      selectors: [[\"app-help-desk-problem-description\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 12,\n      vars: 11,\n      consts: [[\"header\", \"Problem Description\"], [\"pTemplate\", \"icons\"], [1, \"card\", 2, \"height\", \"79vh\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", 3, \"value\", \"paginator\", \"rows\", \"rowHover\", \"scrollable\", \"onFilter\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"key\", \"pdMessage\"], [\"key\", \"pdGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"pdDescription\"], [1, \"p-d-flex\", \"p-jc-between\", \"p-ai-center\"], [\"field\", \"pdDescription\"], [\"type\", \"text\", \"field\", \"pdDescription\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", \"p-button-rounded\", 3, \"click\"], [\"pButton\", \"\", \"type\", \"button\", \"icon\", \"pi pi-times\", \"iconPos\", \"left\", 1, \"p-button-text\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function HelpDeskProblemDescriptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, HelpDeskProblemDescriptionComponent_ng_template_1_Template, 1, 0, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"p-table\", 3, 4);\n          i0.ɵɵlistener(\"onFilter\", function HelpDeskProblemDescriptionComponent_Template_p_table_onFilter_3_listener($event) {\n            return ctx.onInnerFilter($event);\n          });\n          i0.ɵɵtemplate(5, HelpDeskProblemDescriptionComponent_ng_template_5_Template, 7, 0, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, HelpDeskProblemDescriptionComponent_ng_template_6_Template, 6, 3, \"ng-template\", 6);\n          i0.ɵɵtemplate(7, HelpDeskProblemDescriptionComponent_ng_template_7_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 8)(9, \"p-paginator\", 9);\n          i0.ɵɵlistener(\"onPageChange\", function HelpDeskProblemDescriptionComponent_Template_p_paginator_onPageChange_9_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelement(10, \"p-toast\", 10)(11, \"p-confirmDialog\", 11);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"value\", ctx.PdData)(\"paginator\", false)(\"rows\", ctx.rowCount)(\"rowHover\", false)(\"scrollable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n        }\n      },\n      dependencies: [i2.PrimeTemplate, i4.Table, i4.SortableColumn, i4.SelectableRow, i4.SortIcon, i4.ColumnFilter, i5.ButtonDirective, i6.Toast, i7.Panel, i8.ConfirmDialog, i9.MatTooltip, i10.Paginator],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return HelpDeskProblemDescriptionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}