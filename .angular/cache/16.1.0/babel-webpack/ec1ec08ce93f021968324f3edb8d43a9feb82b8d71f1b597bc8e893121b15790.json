{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/plan-part-services\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"../providers/plan-part-provider\";\nimport * as i4 from \"primeng/table\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/panel\";\nimport * as i8 from \"primeng/confirmdialog\";\nfunction PlanPartComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 9);\n    i0.ɵɵtext(1, \"Plan Part Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PlanPartComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function PlanPartComponent_ng_template_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PlanPartComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 11);\n    i0.ɵɵelementStart(2, \"th\", 12)(3, \"div\", 13)(4, \"div\", 14)(5, \"p\", 15);\n    i0.ɵɵtext(6, \"Part Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 16);\n    i0.ɵɵelement(8, \"p-sortIcon\", 17)(9, \"p-columnFilter\", 18);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 19)(11, \"div\", 13)(12, \"div\", 14)(13, \"p\", 15);\n    i0.ɵɵtext(14, \"Required Quantity\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 16);\n    i0.ɵɵelement(16, \"p-sortIcon\", 20)(17, \"p-columnFilter\", 21);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction PlanPartComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 22)(1, \"td\", 11)(2, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function PlanPartComponent_ng_template_6_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const planPart_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.openEditItem(planPart_r8.planPartId));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function PlanPartComponent_ng_template_6_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const planPart_r8 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onDelete(planPart_r8.planPartId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const planPart_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", planPart_r8);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(planPart_r8.part.partCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(planPart_r8.qunatityRequired);\n  }\n}\nfunction PlanPartComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 5);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let PlanPartComponent = /*#__PURE__*/(() => {\n  class PlanPartComponent {\n    constructor(planPartService, messageService, confirmationService, planPartModalDialogueProvider) {\n      this.planPartService = planPartService;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.planPartModalDialogueProvider = planPartModalDialogueProvider;\n      this.loading = false;\n      this.planPartsData = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.planStepId = 0;\n    }\n    ngOnInit() {}\n    loadRecords(planStepId) {\n      this.planStepId = planStepId;\n      this.loading = true;\n      this.planPartsData = [];\n      this.planPartService.getAllPlanParts(planStepId).subscribe(res => {\n        if (res.status != 202) {\n          this.planPartsData = res;\n        } else {\n          this.planPartsData = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    openEditItem(planPartId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '350px';\n      dialogConfig.data = {\n        planPartId: planPartId,\n        planStepId: this.planStepId,\n        isEdit: true,\n        newRecord: false\n      };\n      this.planPartModalDialogueProvider.openDialog(dialogConfig);\n      this.planPartModalDialogueProvider.onDialogueClosed.subscribe(result => {\n        if (result) {\n          this.messageService.clear();\n          this.messageService.add({\n            key: 'planPartSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(this.planStepId);\n        }\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '350px';\n      dialogConfig.data = {\n        planPartId: null,\n        planStepId: this.planStepId,\n        isEdit: true,\n        newRecord: true\n      };\n      this.planPartModalDialogueProvider.openDialog(dialogConfig);\n      this.planPartModalDialogueProvider.onDialogueClosed.subscribe(result => {\n        if (result) {\n          this.messageService.clear();\n          this.messageService.add({\n            key: 'planPartSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(this.planStepId);\n        }\n      });\n    }\n    onDelete(id) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deletePlan(id);\n        },\n        key: \"planPartGrid\"\n      });\n    }\n    deletePlan(id) {\n      this.planPartService.deletePlanPart(id).subscribe(res => {\n        if (res.code == 409) {\n          this.messageService.add({\n            key: 'planPartDelete',\n            severity: 'warn',\n            detail: 'The Part is associated with other records. Please change the Part before deleting the record.'\n          });\n        } else {\n          this.messageService.add({\n            key: 'planPartSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.loadRecords(this.planStepId);\n        }\n      }, error => {});\n    }\n    static #_ = this.ɵfac = function PlanPartComponent_Factory(t) {\n      return new (t || PlanPartComponent)(i0.ɵɵdirectiveInject(i1.PlanPartService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.PlanPartModalDialogueProvider));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PlanPartComponent,\n      selectors: [[\"app-plan-part\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 11,\n      vars: 8,\n      consts: [[\"pTemplate\", \"header\"], [\"pTemplate\", \"icons\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"350px\", \"selectionMode\", \"single\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\"], [\"dt1\", \"\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"planPartSave\", \"position\", \"top-right\"], [\"key\", \"planPartDelete\", \"position\", \"top-center\"], [\"key\", \"planPartGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"form-field-lable\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"part.partCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"part.partCode\"], [\"type\", \"text\", \"field\", \"part.partCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"qunatityRequired\"], [\"field\", \"qunatityRequired\"], [\"type\", \"text\", \"field\", \"qunatityRequired\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-times\", \"type\", \"button\", 1, \"p-button-text\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"]],\n      template: function PlanPartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\");\n          i0.ɵɵtemplate(1, PlanPartComponent_ng_template_1_Template, 2, 0, \"ng-template\", 0);\n          i0.ɵɵtemplate(2, PlanPartComponent_ng_template_2_Template, 1, 0, \"ng-template\", 1);\n          i0.ɵɵelementStart(3, \"p-table\", 2, 3);\n          i0.ɵɵtemplate(5, PlanPartComponent_ng_template_5_Template, 18, 0, \"ng-template\", 0);\n          i0.ɵɵtemplate(6, PlanPartComponent_ng_template_6_Template, 8, 3, \"ng-template\", 4);\n          i0.ɵɵtemplate(7, PlanPartComponent_ng_template_7_Template, 3, 1, \"ng-template\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(8, \"p-toast\", 6)(9, \"p-toast\", 7)(10, \"p-confirmDialog\", 8);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"value\", ctx.planPartsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(7, _c0))(\"rowHover\", false)(\"scrollable\", true);\n        }\n      },\n      dependencies: [i2.PrimeTemplate, i4.Table, i4.SortableColumn, i4.SelectableRow, i4.SortIcon, i4.ColumnFilter, i5.ButtonDirective, i6.Toast, i7.Panel, i8.ConfirmDialog]\n    });\n  }\n  return PlanPartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}