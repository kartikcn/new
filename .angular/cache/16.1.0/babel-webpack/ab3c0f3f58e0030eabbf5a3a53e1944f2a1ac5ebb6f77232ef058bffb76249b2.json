{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Injectable, forwardRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Input, Inject, ViewChild, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { ReplaySubject, Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from 'ng-zorro-antd/core/form';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst _c0 = [\"*\"];\nconst _c1 = [\"inputElement\"];\nconst _c2 = [\"nz-radio\", \"\"];\nlet NzRadioButtonDirective = /*#__PURE__*/(() => {\n  class NzRadioButtonDirective {\n    static #_ = this.ɵfac = function NzRadioButtonDirective_Factory(t) {\n      return new (t || NzRadioButtonDirective)();\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzRadioButtonDirective,\n      selectors: [[\"\", \"nz-radio-button\", \"\"]]\n    });\n  }\n  return NzRadioButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzRadioService = /*#__PURE__*/(() => {\n  class NzRadioService {\n    constructor() {\n      this.selected$ = new ReplaySubject(1);\n      this.touched$ = new Subject();\n      this.disabled$ = new ReplaySubject(1);\n      this.name$ = new ReplaySubject(1);\n    }\n    touch() {\n      this.touched$.next();\n    }\n    select(value) {\n      this.selected$.next(value);\n    }\n    setDisabled(value) {\n      this.disabled$.next(value);\n    }\n    setName(value) {\n      this.name$.next(value);\n    }\n    static #_ = this.ɵfac = function NzRadioService_Factory(t) {\n      return new (t || NzRadioService)();\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NzRadioService,\n      factory: NzRadioService.ɵfac\n    });\n  }\n  return NzRadioService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzRadioGroupComponent = /*#__PURE__*/(() => {\n  class NzRadioGroupComponent {\n    constructor(cdr, nzRadioService, directionality) {\n      this.cdr = cdr;\n      this.nzRadioService = nzRadioService;\n      this.directionality = directionality;\n      this.value = null;\n      this.destroy$ = new Subject();\n      this.isNzDisableFirstChange = true;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzDisabled = false;\n      this.nzButtonStyle = 'outline';\n      this.nzSize = 'default';\n      this.nzName = null;\n      this.dir = 'ltr';\n    }\n    ngOnInit() {\n      this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n        if (this.value !== value) {\n          this.value = value;\n          this.onChange(this.value);\n        }\n      });\n      this.nzRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        Promise.resolve().then(() => this.onTouched());\n      });\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngOnChanges(changes) {\n      const {\n        nzDisabled,\n        nzName\n      } = changes;\n      if (nzDisabled) {\n        this.nzRadioService.setDisabled(this.nzDisabled);\n      }\n      if (nzName) {\n        this.nzRadioService.setName(this.nzName);\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n      this.destroy$.complete();\n    }\n    writeValue(value) {\n      this.value = value;\n      this.nzRadioService.select(value);\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;\n      this.isNzDisableFirstChange = false;\n      this.nzRadioService.setDisabled(this.nzDisabled);\n      this.cdr.markForCheck();\n    }\n    static #_ = this.ɵfac = function NzRadioGroupComponent_Factory(t) {\n      return new (t || NzRadioGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(NzRadioService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzRadioGroupComponent,\n      selectors: [[\"nz-radio-group\"]],\n      hostAttrs: [1, \"ant-radio-group\"],\n      hostVars: 8,\n      hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-radio-group-large\", ctx.nzSize === \"large\")(\"ant-radio-group-small\", ctx.nzSize === \"small\")(\"ant-radio-group-solid\", ctx.nzButtonStyle === \"solid\")(\"ant-radio-group-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzDisabled: \"nzDisabled\",\n        nzButtonStyle: \"nzButtonStyle\",\n        nzSize: \"nzSize\",\n        nzName: \"nzName\"\n      },\n      exportAs: [\"nzRadioGroup\"],\n      features: [i0.ɵɵProvidersFeature([NzRadioService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzRadioGroupComponent),\n        multi: true\n      }]), i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NzRadioGroupComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  __decorate([InputBoolean()], NzRadioGroupComponent.prototype, \"nzDisabled\", void 0);\n  return NzRadioGroupComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzRadioComponent = /*#__PURE__*/(() => {\n  class NzRadioComponent {\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    constructor(ngZone, elementRef, cdr, focusMonitor, directionality, nzRadioService, nzRadioButtonDirective, nzFormStatusService) {\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.nzRadioService = nzRadioService;\n      this.nzRadioButtonDirective = nzRadioButtonDirective;\n      this.nzFormStatusService = nzFormStatusService;\n      this.isNgModel = false;\n      this.destroy$ = new Subject();\n      this.isNzDisableFirstChange = true;\n      this.isChecked = false;\n      this.name = null;\n      this.isRadioButton = !!this.nzRadioButtonDirective;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzValue = null;\n      this.nzDisabled = false;\n      this.nzAutoFocus = false;\n      this.dir = 'ltr';\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;\n      this.isNzDisableFirstChange = false;\n      this.cdr.markForCheck();\n    }\n    writeValue(value) {\n      this.isChecked = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.isNgModel = true;\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnInit() {\n      if (this.nzRadioService) {\n        this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(name => {\n          this.name = name;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {\n          this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;\n          this.isNzDisableFirstChange = false;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n          const isChecked = this.isChecked;\n          this.isChecked = this.nzValue === value;\n          // We don't have to run `onChange()` on each `nz-radio` button whenever the `selected$` emits.\n          // If we have 8 `nz-radio` buttons within the `nz-radio-group` and they're all connected with\n          // `ngModel` or `formControl` then `onChange()` will be called 8 times for each `nz-radio` button.\n          // We prevent this by checking if `isChecked` has been changed or not.\n          if (this.isNgModel && isChecked !== this.isChecked &&\n          // We're only intereted if `isChecked` has been changed to `false` value to emit `false` to the ascendant form,\n          // since we already emit `true` within the `setupClickListener`.\n          this.isChecked === false) {\n            this.onChange(false);\n          }\n          this.cdr.markForCheck();\n        });\n      }\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n          if (this.nzRadioService) {\n            this.nzRadioService.touch();\n          }\n        }\n      });\n      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n      this.setupClickListener();\n    }\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    setupClickListener() {\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.elementRef.nativeElement, 'click').pipe(takeUntil(this.destroy$)).subscribe(event => {\n          /** prevent label click triggered twice. **/\n          event.stopPropagation();\n          event.preventDefault();\n          if (this.nzDisabled || this.isChecked) {\n            return;\n          }\n          this.ngZone.run(() => {\n            this.focus();\n            this.nzRadioService?.select(this.nzValue);\n            if (this.isNgModel) {\n              this.isChecked = true;\n              this.onChange(true);\n            }\n            this.cdr.markForCheck();\n          });\n        });\n      });\n    }\n    static #_ = this.ɵfac = function NzRadioComponent_Factory(t) {\n      return new (t || NzRadioComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(NzRadioService, 8), i0.ɵɵdirectiveInject(NzRadioButtonDirective, 8), i0.ɵɵdirectiveInject(i3.NzFormStatusService, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzRadioComponent,\n      selectors: [[\"\", \"nz-radio\", \"\"], [\"\", \"nz-radio-button\", \"\"]],\n      viewQuery: function NzRadioComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c1, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n        }\n      },\n      hostVars: 18,\n      hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-radio-wrapper-in-form-item\", !!ctx.nzFormStatusService)(\"ant-radio-wrapper\", !ctx.isRadioButton)(\"ant-radio-button-wrapper\", ctx.isRadioButton)(\"ant-radio-wrapper-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-button-wrapper-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-wrapper-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button-wrapper-disabled\", ctx.nzDisabled && ctx.isRadioButton)(\"ant-radio-wrapper-rtl\", !ctx.isRadioButton && ctx.dir === \"rtl\")(\"ant-radio-button-wrapper-rtl\", ctx.isRadioButton && ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzValue: \"nzValue\",\n        nzDisabled: \"nzDisabled\",\n        nzAutoFocus: \"nzAutoFocus\"\n      },\n      exportAs: [\"nzRadio\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzRadioComponent),\n        multi: true\n      }])],\n      attrs: _c2,\n      ngContentSelectors: _c0,\n      decls: 6,\n      vars: 24,\n      consts: [[\"type\", \"radio\", 3, \"disabled\", \"checked\"], [\"inputElement\", \"\"]],\n      template: function NzRadioComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"span\");\n          i0.ɵɵelement(1, \"input\", 0, 1)(3, \"span\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"span\");\n          i0.ɵɵprojection(5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-radio\", !ctx.isRadioButton)(\"ant-radio-checked\", ctx.isChecked && !ctx.isRadioButton)(\"ant-radio-disabled\", ctx.nzDisabled && !ctx.isRadioButton)(\"ant-radio-button\", ctx.isRadioButton)(\"ant-radio-button-checked\", ctx.isChecked && ctx.isRadioButton)(\"ant-radio-button-disabled\", ctx.nzDisabled && ctx.isRadioButton);\n          i0.ɵɵadvance(1);\n          i0.ɵɵclassProp(\"ant-radio-input\", !ctx.isRadioButton)(\"ant-radio-button-input\", ctx.isRadioButton);\n          i0.ɵɵproperty(\"disabled\", ctx.nzDisabled)(\"checked\", ctx.isChecked);\n          i0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"name\", ctx.name);\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"ant-radio-inner\", !ctx.isRadioButton)(\"ant-radio-button-inner\", ctx.isRadioButton);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean()], NzRadioComponent.prototype, \"nzAutoFocus\", void 0);\n  return NzRadioComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzRadioModule = /*#__PURE__*/(() => {\n  class NzRadioModule {\n    static #_ = this.ɵfac = function NzRadioModule_Factory(t) {\n      return new (t || NzRadioModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzRadioModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [BidiModule, CommonModule, FormsModule]\n    });\n  }\n  return NzRadioModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzRadioButtonDirective, NzRadioComponent, NzRadioGroupComponent, NzRadioModule, NzRadioService };\n//# sourceMappingURL=ng-zorro-antd-radio.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}