{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../provider/request-technician-log.provider\";\nimport * as i2 from \"../services/request-technician-log.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"src/app/services/auth.service\";\nimport * as i6 from \"src/app/ui/employee/services/employee.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"ng-zorro-antd/table\";\nimport * as i10 from \"primeng/table\";\nimport * as i11 from \"primeng/button\";\nimport * as i12 from \"primeng/dropdown\";\nimport * as i13 from \"primeng/toast\";\nimport * as i14 from \"primeng/panel\";\nimport * as i15 from \"primeng/confirmdialog\";\nfunction RequestTechnicianLogComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function RequestTechnicianLogComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isReadOnly);\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_4_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 32);\n    i0.ɵɵlistener(\"onChange\", function RequestTechnicianLogComponent_ng_template_4_ng_template_10_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const filter_r8 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r8($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r7)(\"options\", ctx_r6.enumResourceType)(\"showClear\", true);\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 11);\n    i0.ɵɵelementStart(2, \"th\", 12)(3, \"div\", 13)(4, \"div\", 14)(5, \"p\", 15);\n    i0.ɵɵtext(6, \"Resource Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 16);\n    i0.ɵɵelement(8, \"p-sortIcon\", 17);\n    i0.ɵɵelementStart(9, \"p-columnFilter\", 18);\n    i0.ɵɵtemplate(10, RequestTechnicianLogComponent_ng_template_4_ng_template_10_Template, 1, 3, \"ng-template\", 19);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(11, \"th\", 20)(12, \"div\", 13)(13, \"div\", 14)(14, \"p\", 15);\n    i0.ɵɵtext(15, \"Resource Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 16);\n    i0.ɵɵelement(17, \"p-sortIcon\", 21)(18, \"p-columnFilter\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"th\", 23)(20, \"div\", 13)(21, \"div\", 14)(22, \"p\", 15);\n    i0.ɵɵtext(23, \"Standard Hours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 16);\n    i0.ɵɵelement(25, \"p-sortIcon\", 24)(26, \"p-columnFilter\", 25);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(27, \"th\", 26)(28, \"div\", 13)(29, \"div\", 14)(30, \"p\", 15);\n    i0.ɵɵtext(31, \"Doubletime Hours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(32, \"div\", 16);\n    i0.ɵɵelement(33, \"p-sortIcon\", 27)(34, \"p-columnFilter\", 28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(35, \"th\", 29)(36, \"div\", 13)(37, \"div\", 14)(38, \"p\", 15);\n    i0.ɵɵtext(39, \"Overtime Hours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"div\", 16);\n    i0.ɵɵelement(41, \"p-sortIcon\", 30)(42, \"p-columnFilter\", 31);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_5_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function RequestTechnicianLogComponent_ng_template_5_button_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const reqTechLog_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onEdit(reqTechLog_r11.requestTechnicianLogId));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const reqTechLog_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r12.isSupervisor && reqTechLog_r11.technicianId != ctx_r12.loggedIdTechnicianId);\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_5_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function RequestTechnicianLogComponent_ng_template_5_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const reqTechLog_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onView(reqTechLog_r11.requestTechnicianLogId));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 33)(1, \"td\", 11);\n    i0.ɵɵtemplate(2, RequestTechnicianLogComponent_ng_template_5_button_2_Template, 1, 1, \"button\", 34);\n    i0.ɵɵtemplate(3, RequestTechnicianLogComponent_ng_template_5_button_3_Template, 1, 0, \"button\", 35);\n    i0.ɵɵelementStart(4, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function RequestTechnicianLogComponent_ng_template_5_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const reqTechLog_r11 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onDelete(reqTechLog_r11.requestTechnicianLogId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const reqTechLog_r11 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", reqTechLog_r11);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.isReadOnly);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isReadOnly);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.isSupervisor && reqTechLog_r11.technicianId != ctx_r2.loggedIdTechnicianId || ctx_r2.isReadOnly);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getResourceTypeName(reqTechLog_r11.resourceType));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqTechLog_r11.resourceName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqTechLog_r11.actualHoursStd);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqTechLog_r11.actualHoursDouble);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(reqTechLog_r11.actualHoursOvertime);\n  }\n}\nfunction RequestTechnicianLogComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 39);\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 6);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nconst _c1 = function () {\n  return [\"\", \"getResourceTypeName(resourceType)\", \"technicianId\", \"getEmployeeFullName(emId)\", \"other\", \"dateStarted\", \"timeStarted\", \"dateFinished\", \"timeFinished\", \"actualHoursStd\", \"actualHoursDouble\", \"actualHoursOvertime\"];\n};\nexport let RequestTechnicianLogComponent = /*#__PURE__*/(() => {\n  class RequestTechnicianLogComponent {\n    constructor(requestTechnicianLogProvider, requestTechnicianLogService, messageService, confirmationService, enumsrv, authServe, employeeService) {\n      this.requestTechnicianLogProvider = requestTechnicianLogProvider;\n      this.requestTechnicianLogService = requestTechnicianLogService;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.enumsrv = enumsrv;\n      this.authServe = authServe;\n      this.employeeService = employeeService;\n      this.requestTechnicianLogData = [];\n      this.requestTechnicianId = 0;\n      this.requestId = 0;\n      this.enumTechReqLogData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumWorkType = [];\n      this.enumResourceType = [];\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.isRequestor = false;\n      this.isApprover = false;\n      this.isTechnician = false;\n      this.isSupervisor = false;\n      this.allEmployees = [];\n      this.enumEm = [];\n      this.fullName = '';\n      this.isReadOnly = false;\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadAllEmployee();\n      this.loggedIdTechnicianId = this.authServe.getLoggedInTechnicianId();\n    }\n    loadRecords(requestId) {\n      this.loading = true;\n      this.requestTechnicianLogService.getAllByRequestId(requestId).subscribe(res => {\n        if (res) {\n          this.requestTechnicianLogData = res;\n        } else {\n          this.requestTechnicianLogData = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        requestTechnicianId: this.requestTechnicianId,\n        isEdit: false,\n        newRecord: true,\n        requestId: this.requestId,\n        technician: true,\n        isView: false,\n        userChecks: {\n          isRequestor: this.isRequestor,\n          isApprover: this.isApprover,\n          isSupervisor: this.isSupervisor,\n          isTechnician: this.isTechnician\n        }\n      };\n      this.requestTechnicianLogProvider.openDialog(dialogConfig);\n      this.requestTechnicianLogProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'reqTechLogSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(this.requestId);\n        }\n      });\n    }\n    onEdit(id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        requestTechnicianId: this.requestTechnicianId,\n        requestTechnicianLogId: id,\n        requestId: this.requestId,\n        isEdit: true,\n        newRecord: false,\n        isView: false,\n        userChecks: {\n          isRequestor: this.isRequestor,\n          isApprover: this.isApprover,\n          isSupervisor: this.isSupervisor,\n          isTechnician: this.isTechnician\n        }\n      };\n      this.requestTechnicianLogProvider.openDialog(dialogConfig);\n      this.requestTechnicianLogProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'reqTechLogSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(this.requestId);\n        }\n      });\n    }\n    onDelete(reqTechLogId) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deleterequestTechnicianLog(reqTechLogId);\n        },\n        key: \"reqTechLoggrid\"\n      });\n    }\n    deleterequestTechnicianLog(requestTechnicianLogType) {\n      this.requestTechnicianLogService.deleteByRequestTechnicanLogId(requestTechnicianLogType).subscribe(res => {\n        if (res.text === \"could not execute statement\" && res.code == 409) {\n          this.messageService.add({\n            key: 'reqTechlogwarning',\n            severity: 'warn',\n            summary: 'Can not delete the record',\n            detail: 'The part is associated with other records. Please change the part before deleting the record.'\n          });\n        } else {\n          this.messageService.add({\n            key: 'reqTechLogSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.loadRecords(this.requestId);\n        }\n      }, error => {});\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumTechReqLogData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'request_technician_log'.toLocaleUpperCase());\n        this.enumWorkType = this.enumTechReqLogData.filter(t => t.fieldName.toLocaleUpperCase() === 'work_type'.toLocaleUpperCase());\n        this.enumResourceType = this.enumTechReqLogData.filter(t => t.fieldName.toLocaleUpperCase() === 'resource_type'.toLocaleUpperCase());\n        this.loadRecords(this.requestId);\n      }, error => {});\n    }\n    getEnumById(id) {\n      return this.enumWorkType.find(t => t.id === id)?.enumValue;\n    }\n    convertToDisplayTime(value) {\n      if (value != null) {\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        return time;\n      } else {\n        return '';\n      }\n    }\n    getResourceTypeName(enumKey) {\n      return enumKey ? this.enumResourceType.find(t => t.enumKey == enumKey) != null ? this.enumResourceType.find(t => t.enumKey == enumKey)?.enumValue : '' : '';\n    }\n    loadAllEmployee() {\n      this.employeeService.getAllEmployeeList().subscribe(res => {\n        if (res) {\n          this.allEmployees = res;\n        } else {\n          this.allEmployees = [];\n        }\n      });\n    }\n    onView(id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '650px';\n      dialogConfig.data = {\n        requestTechnicianId: this.requestTechnicianId,\n        requestTechnicianLogId: id,\n        requestId: this.requestId,\n        isEdit: true,\n        newRecord: false,\n        isView: true,\n        userChecks: {\n          isRequestor: this.isRequestor,\n          isApprover: this.isApprover,\n          isSupervisor: this.isSupervisor,\n          isTechnician: this.isTechnician\n        }\n      };\n      this.requestTechnicianLogProvider.openDialog(dialogConfig);\n      this.requestTechnicianLogProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'reqTechLogSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(this.requestId);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function RequestTechnicianLogComponent_Factory(t) {\n      return new (t || RequestTechnicianLogComponent)(i0.ɵɵdirectiveInject(i1.RequestTechnicianLogDialogueProvider), i0.ɵɵdirectiveInject(i2.RequestTechnicianLogService), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i4.EnumService), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.EmployeeService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RequestTechnicianLogComponent,\n      selectors: [[\"app-request-technician-log\"]],\n      inputs: {\n        isReadOnly: \"isReadOnly\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 10,\n      vars: 10,\n      consts: [[\"header\", \"Request Technician Log\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"dataKey\", \"id\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"scrollable\", \"rowsPerPageOptions\", \"globalFilterFields\", \"rowHover\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"reqTechLogSave\", \"position\", \"top-right\"], [\"key\", \"reqTechlogwarning\", \"position\", \"top-center\"], [\"key\", \"reqTechLoggrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"disabled\", \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"resourceType\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"resourceType\"], [\"field\", \"resourceType\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"resourceName\"], [\"field\", \"resourceName\"], [\"type\", \"text\", \"field\", \"resourceName\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHoursStd\"], [\"field\", \"actualHoursStd\"], [\"type\", \"text\", \"field\", \"actualHoursStd\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHoursDouble\"], [\"field\", \"actualHoursDouble\"], [\"type\", \"text\", \"field\", \"actualHoursDouble\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHoursOvertime\"], [\"field\", \"actualHoursOvertime\"], [\"type\", \"text\", \"field\", \"actualHoursOvertime\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"id\", \"placeholder\", \"Select Resource Type\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", \"class\", \"p-button-text\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-eye\", \"type\", \"button\", \"class\", \"p-button-text\", 3, \"click\", 4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-times\", \"type\", \"button\", 1, \"p-button-text\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-eye\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [2, \"text-align\", \"center\"]],\n      template: function RequestTechnicianLogComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, RequestTechnicianLogComponent_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"p-table\", 3);\n          i0.ɵɵtemplate(4, RequestTechnicianLogComponent_ng_template_4_Template, 43, 0, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, RequestTechnicianLogComponent_ng_template_5_Template, 15, 9, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, RequestTechnicianLogComponent_ng_template_6_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(7, \"p-toast\", 7)(8, \"p-toast\", 8)(9, \"p-confirmDialog\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"value\", ctx.requestTechnicianLogData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"scrollable\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"globalFilterFields\", i0.ɵɵpureFunction0(9, _c1))(\"rowHover\", false);\n        }\n      },\n      dependencies: [i7.NgIf, i8.NgControlStatus, i8.NgModel, i9.NzTableCellDirective, i9.NzThMeasureDirective, i9.NzTrDirective, i3.PrimeTemplate, i10.Table, i10.SortableColumn, i10.SelectableRow, i10.SortIcon, i10.ColumnFilter, i11.ButtonDirective, i12.Dropdown, i13.Toast, i14.Panel, i15.ConfirmDialog]\n    });\n  }\n  return RequestTechnicianLogComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}