{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Enums } from 'src/app/model/enums.model';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"../../../services/link-plan-to-location.services\";\nimport * as i4 from \"src/app/services/auth.service\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/toast\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"@angular/material/tooltip\";\nfunction UnLinkPlanToLocationScreenComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\")(5, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function UnLinkPlanToLocationScreenComponent_ng_template_3_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.confirmDialog());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Linked Plans For \", ctx_r1.selectedRoom, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r1.selectedScreens.length > 0));\n  }\n}\nfunction UnLinkPlanToLocationScreenComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 13);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 14)(4, \"div\", 15)(5, \"div\", 16)(6, \"p\", 17);\n    i0.ɵɵtext(7, \"Plan Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 18);\n    i0.ɵɵelement(9, \"p-sortIcon\", 19)(10, \"p-columnFilter\", 20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 21)(12, \"div\", 15)(13, \"div\", 16)(14, \"p\", 17);\n    i0.ɵɵtext(15, \"Plan Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 18);\n    i0.ɵɵelement(17, \"p-sortIcon\", 22)(18, \"p-columnFilter\", 23);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction UnLinkPlanToLocationScreenComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 24)(1, \"td\", 13);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 26);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 26);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const plan_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", plan_r7);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", plan_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r7.planName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r7.planName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r7.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r7.description);\n  }\n}\nfunction UnLinkPlanToLocationScreenComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 4);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let UnLinkPlanToLocationScreenComponent = /*#__PURE__*/(() => {\n  class UnLinkPlanToLocationScreenComponent {\n    constructor(enumsrv, messageService, confirmationService, linkPlanToLocationOrAssetSrv, authSrv) {\n      this.enumsrv = enumsrv;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.linkPlanToLocationOrAssetSrv = linkPlanToLocationOrAssetSrv;\n      this.authSrv = authSrv;\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumPlanData = [];\n      this.planData = [];\n      this.selectedScreens = [];\n      this.isHide = true;\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.selectedRoom = '';\n      this.compId = 0;\n      this.parentFun = new EventEmitter();\n    }\n    ngOnInit() {\n      // this.loadEnums();\n      this.compId = this.authSrv.getLoggedInUserCompId();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumPlanData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plans'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'plan_type'.toLowerCase());\n        this.enumPlanData.unshift(new Enums(null, \"\", \"\", 'Make a selection'));\n      }, error => {\n        // this.loginError = error.errorDesc;\n      });\n    }\n    getEnumByById(id) {\n      return id ? this.enumPlanData.find(t => t.id == id) != null ? this.enumPlanData.find(t => t.id == id)?.enumValue : '' : '';\n    }\n    loadRecords(data) {\n      this.loading = true;\n      this.planData = [];\n      this.selectedScreens = [];\n      this.selectedEvent = data;\n      this.linkPlanToLocationOrAssetSrv.getLinkedPlansForLocation(data).subscribe(res => {\n        if (res.status != 202) {\n          this.planData = res;\n        } else {\n          this.planData = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    onUnLink() {\n      let selectedPlansList = [];\n      this.selectedScreens.map(plan => {\n        const data = {\n          planLocEqId: 0,\n          planId: plan.planId,\n          blId: this.selectedEvent.blId,\n          flId: this.selectedEvent.flId,\n          rmId: this.selectedEvent.rmId,\n          eqId: this.selectedEvent.eqId ? this.selectedEvent.eqId : null,\n          compId: this.compId\n        };\n        selectedPlansList.push(data);\n      });\n      this.linkPlanToLocationOrAssetSrv.delete(selectedPlansList).subscribe(res => {\n        this.messageService.clear();\n        if (res.length >= 0) {\n          this.messageService.add({\n            key: 'unLinkGrid',\n            severity: 'success',\n            summary: 'Plan(s) Un Linked successfully',\n            detail: 'Plan(s) are successfully unlinked except for those that contain schedules.'\n          });\n          this.refreshPanel();\n        }\n      });\n    }\n    refreshPanel() {\n      this.parentFun.emit(true);\n    }\n    confirmDialog() {\n      this.confirmationService.confirm({\n        message: UtilConstant.UN_LINK_PLANS_CONFIRMATION,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.onUnLink();\n        },\n        key: \"unLinkGrid\"\n      });\n    }\n    static #_ = this.ɵfac = function UnLinkPlanToLocationScreenComponent_Factory(t) {\n      return new (t || UnLinkPlanToLocationScreenComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.LinkPlanToLocationOrAssetService), i0.ɵɵdirectiveInject(i4.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UnLinkPlanToLocationScreenComponent,\n      selectors: [[\"app-un-link-plan-to-location-screen\"]],\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      decls: 10,\n      vars: 9,\n      consts: [[1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"250px\", \"dataKey\", \"planId\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\", \"selection\", \"selectionChange\"], [\"dt1\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"unLinkGrid\", \"position\", \"top-right\"], [\"key\", \"delete\", \"position\", \"top-center\"], [\"key\", \"unLinkGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"d-flex\", \"flex-row\"], [2, \"flex\", \"auto\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Un Link\", 1, \"p-button-primary\", \"p-button-sm\", \"p-mr-2\", 3, \"disabled\", \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"planName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"planName\"], [\"type\", \"text\", \"field\", \"planName\", \"display\", \"menu\"], [\"pSortableColumn\", \"description\"], [\"field\", \"description\"], [\"type\", \"text\", \"field\", \"description\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [3, \"value\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function UnLinkPlanToLocationScreenComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-table\", 1, 2);\n          i0.ɵɵlistener(\"selectionChange\", function UnLinkPlanToLocationScreenComponent_Template_p_table_selectionChange_1_listener($event) {\n            return ctx.selectedScreens = $event;\n          });\n          i0.ɵɵtemplate(3, UnLinkPlanToLocationScreenComponent_ng_template_3_Template, 6, 2, \"ng-template\", 3);\n          i0.ɵɵtemplate(4, UnLinkPlanToLocationScreenComponent_ng_template_4_Template, 19, 0, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, UnLinkPlanToLocationScreenComponent_ng_template_5_Template, 7, 6, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, UnLinkPlanToLocationScreenComponent_ng_template_6_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(7, \"p-toast\", 7)(8, \"p-toast\", 8)(9, \"p-confirmDialog\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"value\", ctx.planData)(\"paginator\", true)(\"rows\", 5)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"rowHover\", false)(\"scrollable\", true)(\"selection\", ctx.selectedScreens);\n        }\n      },\n      dependencies: [i2.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.TableCheckbox, i5.TableHeaderCheckbox, i5.ColumnFilter, i6.ButtonDirective, i7.Toast, i8.ConfirmDialog, i9.MatTooltip],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}@media screen and (min-width: 600px) and (max-width: 959px){.p-button[_ngcontent-%COMP%]{height:40px!important}}\"]\n    });\n  }\n  return UnLinkPlanToLocationScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}