{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/ppm-plan/services/ppm-plan-services\";\nimport * as i3 from \"src/app/ui/Helpdesk/parts/services/parts.service\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"../../services/plan-part-services\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/dialog\";\nimport * as i9 from \"ng-zorro-antd/table\";\nimport * as i10 from \"@ng-select/ng-select\";\nimport * as i11 from \"../../../../directive/numbers-only.directive\";\nimport * as i12 from \"../../../../directive/directive/two-digit-decimal-number\";\nimport * as i13 from \"../../../common-components/part-details/modal/part-details.component\";\nfunction AddPlanPartComponent_label_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 15);\n    i0.ɵɵtext(1, \"Part Code already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddPlanPartComponent_label_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorMsg, \"\");\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"32vw\"\n  };\n};\nfunction AddPlanPartComponent_p_dialog_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 16);\n    i0.ɵɵlistener(\"visibleChange\", function AddPlanPartComponent_p_dialog_35_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showDetails = $event);\n    });\n    i0.ɵɵelement(1, \"app-part-details\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(5, _c0));\n    i0.ɵɵproperty(\"visible\", ctx_r2.showDetails)(\"modal\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedPart\", ctx_r2.selectedPart);\n  }\n}\nexport let AddPlanPartComponent = /*#__PURE__*/(() => {\n  class AddPlanPartComponent {\n    constructor(formBuilder, ppmPlanService, partsService, enumsrv, planPartService) {\n      this.formBuilder = formBuilder;\n      this.ppmPlanService = ppmPlanService;\n      this.partsService = partsService;\n      this.enumsrv = enumsrv;\n      this.planPartService = planPartService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.planStepList = [];\n      this.partsList = [];\n      this.errorMsg = '';\n      this.showDetails = false;\n      this.enableDetailsBtn = false;\n      this.previousPartQnty = 0;\n      this.partExist = false;\n      this.previousPart = '';\n      this.requiredQtyError = false;\n      this.actualQtyError = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.planPartFormPanel = this.formBuilder.group({\n        planPartId: [null],\n        planStepId: [null, [Validators.required]],\n        partId: [null, [Validators.required]],\n        qunatityRequired: [null, [Validators.required]],\n        avalQuantity: [null]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.planPartFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadPlansTepsData();\n      this.loadParts();\n    }\n    loadPlansTepsData() {\n      this.ppmPlanService.getAllPlanSteps(0).subscribe(res => {\n        if (res.status != 202) {\n          this.planStepList = res;\n        } else {\n          this.planStepList = [];\n        }\n      });\n    }\n    loadParts() {\n      this.partsService.getAllParts().subscribe(res => {\n        this.partsList = res;\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const stateDetails = {\n        planPartId: this.planPartFormPanel.controls.planPartId.value,\n        planStepId: this.planPartFormPanel.controls.planStepId.value,\n        partId: this.planPartFormPanel.controls.partId.value,\n        qunatityRequired: this.planPartFormPanel.controls.qunatityRequired.value,\n        avalQuantity: this.planPartFormPanel.controls.avalQuantity.value\n      };\n      return stateDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.planPartFormPanel.patchValue({\n          planPartId: value.planPartId,\n          planStepId: value.planStepId,\n          partId: value.partId,\n          qunatityRequired: value.qunatityRequired,\n          avalQuantity: value.qunatityRequired ? this.getAvalQuantity(value.partId) + parseInt(value.qunatityRequired) : null\n        });\n        if (value.partId) {\n          this.enableDetailsBtn = true;\n          this.previousPart = value.partId;\n          this.selectedPart = this.getSelectedPart(value.partId);\n        }\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.planPartFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.planPartFormPanel.valid ? null : {\n        planPartFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    showPartDetails() {\n      //this.frmPartsDetail.disable();\n      this.selectedPart = this.getSelectedPart(this.planPartFormPanel.controls.partId.value);\n      this.showDetails = true;\n    }\n    getSelectedPart(partCode) {\n      let selectedPart = this.partsList.find(t => t.partId === partCode);\n      if (selectedPart) {\n        return selectedPart;\n      }\n    }\n    selectPartCode(event) {\n      this.enableDetailsBtn = true;\n      if (this.previousPart != event.partId) {\n        let planStepId = this.planPartFormPanel.controls.planStepId.value;\n        this.planPartService.checkIsPlanPartExists(planStepId, event.partId).subscribe(res => {\n          this.partExist = false;\n          if (res) {\n            this.partExist = true;\n            this.planPartFormPanel.controls['partId'].setErrors({\n              'incorrect': true\n            });\n            this.planPartFormPanel.updateValueAndValidity();\n          } else {\n            this.partExist = false;\n            this.planPartFormPanel.controls['partId'].setErrors(null);\n            this.planPartFormPanel.updateValueAndValidity();\n          }\n        });\n      }\n      setTimeout(() => {\n        this.planPartFormPanel.patchValue({\n          avalQuantity: event.qutOnHand,\n          qunatityRequired: null\n        });\n      });\n    }\n    getAvalQuantity(partCode) {\n      let selectedPart = this.partsList.find(t => t.partId === partCode);\n      if (selectedPart) {\n        return selectedPart.qutOnHand;\n      }\n    }\n    changeReqQuantity(event, inputField) {\n      let userInput = event.target.value;\n      this.errorMsg = '';\n      let actlQty = this.planPartFormPanel.controls.avalQuantity.value;\n      if (actlQty - userInput < 0) {\n        this.errorMsg = `${inputField} can not be greater than Available Quantity.`;\n        inputField === 'Required Quantity' ? this.requiredQtyError = true : this.actualQtyError = true;\n      } else if (userInput != '' && userInput <= 0) {\n        this.errorMsg = `${inputField} can not be less than one`;\n        inputField === 'Required Quantity' ? this.requiredQtyError = true : this.actualQtyError = true;\n      } else {\n        this.errorMsg = '';\n        this.requiredQtyError = false;\n        this.actualQtyError = false;\n      }\n    }\n    static #_ = this.ɵfac = function AddPlanPartComponent_Factory(t) {\n      return new (t || AddPlanPartComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PpmPlanService), i0.ɵɵdirectiveInject(i3.PartsService), i0.ɵɵdirectiveInject(i4.EnumService), i0.ɵɵdirectiveInject(i5.PlanPartService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPlanPartComponent,\n      selectors: [[\"app-add-plan-part\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddPlanPartComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddPlanPartComponent),\n        multi: true\n      }])],\n      decls: 36,\n      vars: 12,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [\"colspan\", \"2\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"planStepId\", \"bindLabel\", \"stepCode\", \"bindValue\", \"planStepId\", \"placeholder\", \"Make a selection\", \"readonly\", \"true\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"display\", \"flex\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [\"appendTo\", \"body\", \"formControlName\", \"partId\", \"bindLabel\", \"partCode\", \"bindValue\", \"partId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [2, \"display\", \"flex\", \"margin-top\", \"32px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-info-circle\", \"matTooltip\", \"View Part Details\", \"id\", \"details\", \"id\", \"detailsBtn\", 1, \"p-button-rounded\", \"pull-right\", 3, \"disabled\", \"click\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"avalQuantity\", \"formControlName\", \"avalQuantity\", 1, \"form-control\", 3, \"readOnly\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"name\", \"qunatityRequired\", \"formControlName\", \"qunatityRequired\", 1, \"form-control\", 3, \"change\"], [\"header\", \"Part Details\", 3, \"visible\", \"style\", \"modal\", \"visibleChange\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [\"header\", \"Part Details\", 3, \"visible\", \"modal\", \"visibleChange\"], [3, \"selectedPart\"]],\n      template: function AddPlanPartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Step\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"ng-select\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 6)(11, \"div\", 7)(12, \"label\", 4);\n          i0.ɵɵtext(13, \"Part Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ng-select\", 8);\n          i0.ɵɵlistener(\"change\", function AddPlanPartComponent_Template_ng_select_change_14_listener($event) {\n            return ctx.selectPartCode($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 9)(16, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function AddPlanPartComponent_Template_button_click_16_listener() {\n            return ctx.showPartDetails();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(17, \"tr\")(18, \"td\", 2);\n          i0.ɵɵtemplate(19, AddPlanPartComponent_label_19_Template, 2, 0, \"label\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"tr\")(22, \"td\")(23, \"div\", 3)(24, \"label\", 4);\n          i0.ɵɵtext(25, \"Available Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(26, \"input\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(27, \"td\")(28, \"div\", 3)(29, \"label\", 4);\n          i0.ɵɵtext(30, \"Required Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"input\", 13);\n          i0.ɵɵlistener(\"change\", function AddPlanPartComponent_Template_input_change_31_listener($event) {\n            return ctx.changeReqQuantity($event, \"Required Quantity\");\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(32, \"tr\")(33, \"td\", 2);\n          i0.ɵɵtemplate(34, AddPlanPartComponent_label_34_Template, 2, 1, \"label\", 11);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(35, AddPlanPartComponent_p_dialog_35_Template, 2, 6, \"p-dialog\", 14);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.planPartFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.planStepList)(\"searchable\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.partsList)(\"searchable\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.enableDetailsBtn);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.partExist);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"readOnly\", true);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMsg.length > 0 && ctx.requiredQtyError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showDetails);\n        }\n      },\n      dependencies: [i6.NgIf, i7.ButtonDirective, i8.Dialog, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i9.NzTableCellDirective, i9.NzTrDirective, i10.NgSelectComponent, i11.NumbersOnlyDirective, i12.TwoDigitDecimalNumberDirective, i13.PartDetailsComponent],\n      styles: [\"[_nghost-%COMP%]     .p-button.p-button-icon-only{padding:.5rem 0;width:20px!important;height:20px!important}\"]\n    });\n  }\n  return AddPlanPartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}