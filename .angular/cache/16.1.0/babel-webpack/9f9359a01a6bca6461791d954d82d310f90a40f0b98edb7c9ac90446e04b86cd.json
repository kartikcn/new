{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/country.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddCntryFormComponent_tr_13_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 11);\n    i0.ɵɵtext(1, \"Country Code already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddCntryFormComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 9);\n    i0.ɵɵtemplate(2, AddCntryFormComponent_tr_13_label_2_Template, 2, 0, \"label\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.cntryFormPanel.controls[\"ctryCode\"] == null ? null : ctx_r0.cntryFormPanel.controls[\"ctryCode\"].errors.required));\n  }\n}\nexport let AddCntryFormComponent = /*#__PURE__*/(() => {\n  class AddCntryFormComponent {\n    constructor(formBuilder, ctryService) {\n      this.formBuilder = formBuilder;\n      this.ctryService = ctryService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.presentCtry = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.cntryFormPanel = this.formBuilder.group({\n        ctryId: [null],\n        ctryCode: [null, [Validators.required]],\n        ctryName: [null]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.cntryFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const cntryDetails = {\n        ctryId: this.cntryFormPanel.controls.ctryId.value,\n        ctryCode: this.cntryFormPanel.controls.ctryCode.value,\n        ctryName: this.cntryFormPanel.controls.ctryName.value\n      };\n      return cntryDetails;\n    }\n    set value(value) {\n      this.presentCtry = value.ctryCode;\n      setTimeout(() => {\n        this.cntryFormPanel.patchValue({\n          ctryId: value.ctryId,\n          ctryCode: value.ctryCode,\n          ctryName: value.ctryName\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.cntryFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.cntryFormPanel.valid ? null : {\n        cntryFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddCntryFormComponent_Factory(t) {\n      return new (t || AddCntryFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CountryService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddCntryFormComponent,\n      selectors: [[\"app-add-cntry-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddCntryFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddCntryFormComponent),\n        multi: true\n      }])],\n      decls: 15,\n      vars: 2,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"ctryCode\", \"formControlName\", \"ctryCode\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"ctryName\", \"formControlName\", \"ctryName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddCntryFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Country Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Country Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(13, AddCntryFormComponent_tr_13_Template, 3, 1, \"tr\", 8);\n          i0.ɵɵelement(14, \"tr\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.cntryFormPanel);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngIf\", (ctx.cntryFormPanel.controls[\"ctryCode\"] == null ? null : ctx.cntryFormPanel.controls[\"ctryCode\"].errors) && ctx.cntryFormPanel.controls[\"ctryCode\"].dirty);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddCntryFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}