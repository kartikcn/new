{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { Enums } from 'src/app/model/enums.model';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"../../services/craftsperson.service\";\nimport * as i4 from \"../../../trades/services/trades.services\";\nimport * as i5 from \"../../../trades/provider/trades.provider\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/selectbutton\";\nimport * as i10 from \"../../../../../directive/numbers-only.directive\";\nimport * as i11 from \"../../../../../directive/directive/two-digit-decimal-number\";\nimport * as i12 from \"../../../../../directive/directive/trim-input.directive\";\nimport * as i13 from \"@angular/material/tooltip\";\nfunction AddCraftspersonFormComponent_tr_13_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 26);\n    i0.ɵɵtext(1, \"Name already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddCraftspersonFormComponent_tr_13_label_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 26);\n    i0.ɵɵtext(1, \"Email already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddCraftspersonFormComponent_tr_13_label_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 26);\n    i0.ɵɵtext(1, \"Please enter valid Email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddCraftspersonFormComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 8);\n    i0.ɵɵtemplate(2, AddCraftspersonFormComponent_tr_13_label_2_Template, 2, 0, \"label\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 8);\n    i0.ɵɵtemplate(4, AddCraftspersonFormComponent_tr_13_label_4_Template, 2, 0, \"label\", 24);\n    i0.ɵɵtemplate(5, AddCraftspersonFormComponent_tr_13_label_5_Template, 2, 0, \"label\", 25);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.cfFormPanel.controls[\"name\"] == null ? null : ctx_r0.cfFormPanel.controls[\"name\"].errors) && !(ctx_r0.cfFormPanel.controls[\"name\"] == null ? null : ctx_r0.cfFormPanel.controls[\"name\"].errors.required));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.cfFormPanel.controls[\"email\"] == null ? null : ctx_r0.cfFormPanel.controls[\"email\"].errors) && !(ctx_r0.cfFormPanel.controls[\"email\"] == null ? null : ctx_r0.cfFormPanel.controls[\"email\"].errors.required) && !(ctx_r0.cfFormPanel.controls[\"email\"] == null ? null : ctx_r0.cfFormPanel.controls[\"email\"].errors.email));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.cfFormPanel.controls[\"email\"].errors == null ? null : ctx_r0.cfFormPanel.controls[\"email\"].errors.email) && ctx_r0.cfFormPanel.controls[\"email\"].errors);\n  }\n}\nexport let AddCraftspersonFormComponent = /*#__PURE__*/(() => {\n  class AddCraftspersonFormComponent {\n    constructor(formBuilder, enumsrv, cfSrv, tradesService, tradesProvider) {\n      this.formBuilder = formBuilder;\n      this.enumsrv = enumsrv;\n      this.cfSrv = cfSrv;\n      this.tradesService = tradesService;\n      this.tradesProvider = tradesProvider;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumCfData = [];\n      this.enumStatus = [];\n      this.enumWrType = [];\n      this.enumYes = [];\n      this.enumInHouseOrContractor = [];\n      this.presentName = '';\n      this.presentEmail = '';\n      this.enumSupplierCode = [];\n      this.isContractorChecked = false;\n      this.tradesData = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.cfFormPanel = this.formBuilder.group({\n        cfId: [''],\n        name: ['', [Validators.required]],\n        email: ['', [Validators.required, Validators.email]],\n        phone: [''],\n        status: ['', [Validators.required, Validators.min(1)]],\n        isSupervisor: ['', [Validators.required]],\n        skills: [''],\n        rateHourly: ['', [Validators.required, Validators.min(0)]],\n        rateOver: ['', [Validators.required, Validators.min(0)]],\n        rateDouble: ['', [Validators.required, Validators.min(0)]],\n        stdHoursAvail: ['', [Validators.required, Validators.min(0)]],\n        inHouseOrContractor: ['', [Validators.required, Validators.min(1)]],\n        primaryTrade: ['', [Validators.required]]\n      });\n      this.subscriptions.push(this.cfFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadTrades();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumCfData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'craftsperson'.toLocaleUpperCase());\n        this.enumStatus = this.enumCfData.filter(t => t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        this.enumStatus.unshift(new Enums(0, \"\", \"\", 'Make a selection'));\n        this.enumYes = this.enumCfData.filter(t => t.fieldName.toLocaleUpperCase() === 'is_supervisor'.toLocaleUpperCase());\n        this.enumInHouseOrContractor = this.enumCfData.filter(t => t.fieldName.toLocaleUpperCase() === 'in_house_or_contractor'.toLocaleUpperCase());\n        this.enumInHouseOrContractor.unshift(new Enums(0, \"\", \"\", 'Make a selection'));\n        this.enumInHouseOrContractor.forEach(t => {\n          if (t.enumValue === 'Contractor') {\n            this.isSupplierContractor = t.enumKey;\n          }\n        });\n      }, error => {});\n    }\n    loadTrades() {\n      this.tradesService.getAllTrades().subscribe(res => {\n        if (res) {\n          this.tradesData = res;\n          this.tradesData.unshift({\n            tradeCode: \"Make a Selection\",\n            tradeId: null\n          });\n        }\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const craftsPersonDetails = {\n        cfId: this.cfFormPanel.controls.cfId.value,\n        name: this.cfFormPanel.controls.name.value,\n        email: this.cfFormPanel.controls.email.value,\n        phone: this.cfFormPanel.controls.phone.value,\n        status: this.cfFormPanel.controls.status.value,\n        isSupervisor: this.cfFormPanel.controls.isSupervisor.value,\n        skills: this.cfFormPanel.controls.skills.value,\n        rateHourly: this.cfFormPanel.controls.rateHourly.value,\n        rateDouble: this.cfFormPanel.controls.rateDouble.value,\n        rateOver: this.cfFormPanel.controls.rateOver.value,\n        stdHoursAvail: this.cfFormPanel.controls.stdHoursAvail.value,\n        inHouseOrContractor: this.cfFormPanel.controls.inHouseOrContractor.value,\n        primaryTrade: this.cfFormPanel.controls.primaryTrade.value\n      };\n      return craftsPersonDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.cfFormPanel.patchValue({\n          cfId: value.cfId,\n          name: value.name,\n          email: value.email,\n          phone: value.phone,\n          status: value.status,\n          isSupervisor: value.isSupervisor,\n          skills: value.skills,\n          rateHourly: value.rateHourly,\n          rateDouble: value.rateDouble,\n          rateOver: value.rateOver,\n          stdHoursAvail: value.stdHoursAvail,\n          inHouseOrContractor: value.inHouseOrContractor,\n          primaryTrade: value.primaryTrade\n        });\n        value.inHouseOrContractor === this.isSupplierContractor ? this.isContractorChecked = true : this.isContractorChecked = false;\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.cfFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.cfFormPanel.valid ? null : {\n        cfFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    onAddTrade() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '500px';\n      dialogConfig.data = {\n        isEdit: false,\n        newRecord: true\n      };\n      this.tradesProvider.openDialog(dialogConfig);\n      this.tradesProvider.onDialogueClosed.subscribe(result => {\n        if (result) {\n          this.loadTrades();\n          this.setLatestTrade(result);\n        }\n      });\n    }\n    setLatestTrade(tradeId) {\n      setTimeout(() => {\n        this.cfFormPanel.patchValue({\n          primaryTrade: tradeId\n        });\n      }, 100);\n    }\n    static #_ = this.ɵfac = function AddCraftspersonFormComponent_Factory(t) {\n      return new (t || AddCraftspersonFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.CraftspersonService), i0.ɵɵdirectiveInject(i4.TradesService), i0.ɵɵdirectiveInject(i5.TradesDialogueProvider));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddCraftspersonFormComponent,\n      selectors: [[\"app-add-craftsperson-form\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddCraftspersonFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddCraftspersonFormComponent),\n        multi: true\n      }])],\n      decls: 72,\n      vars: 13,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [\"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"name\", \"formControlName\", \"name\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"email\", \"formControlName\", \"email\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [4, \"ngIf\"], [2, \"width\", \"50%\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"phone\", \"NumbersOnly\", \"\", \"formControlName\", \"phone\", \"maxlength\", \"16\", \"NumberOnly\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"status\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"display\", \"flex\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [\"appendTo\", \"body\", \"formControlName\", \"primaryTrade\", \"bindLabel\", \"tradeCode\", \"bindValue\", \"tradeId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"margin\", \"16px 0px 0px -5px\"], [\"id\", \"add-btn\", \"icon\", \"pi pi-plus\", \"matTooltip\", \"Add Primary Trade\", 1, \"pull-right\", \"m-3\", 3, \"click\"], [\"type\", \"text\", \"name\", \"skills\", \"formControlName\", \"skills\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"rateHourly\", \"formControlName\", \"rateHourly\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"rateOver\", \"formControlName\", \"rateOver\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"rateDouble\", \"formControlName\", \"rateDouble\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"stdHoursAvail\", \"formControlName\", \"stdHoursAvail\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"inHouseOrContractor\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"formControlName\", \"isSupervisor\", \"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", 3, \"options\"], [\"class\", \"form-field-lable\", \"style\", \"color:red; margin-left: 4px;\", 4, \"ngIf\"], [\"style\", \"color:red;\", \"class\", \"form-field-lable\", \"style\", \"color:red; margin-left: 4px;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\", \"margin-left\", \"4px\"]],\n      template: function AddCraftspersonFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 4);\n          i0.ɵɵtext(11, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(13, AddCraftspersonFormComponent_tr_13_Template, 6, 3, \"tr\", 7);\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 8)(16, \"div\", 3)(17, \"label\", 9);\n          i0.ɵɵtext(18, \"Phone Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"td\", 8)(21, \"div\", 3)(22, \"label\", 4);\n          i0.ɵɵtext(23, \"Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"ng-select\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(25, \"tr\")(26, \"td\", 8)(27, \"div\", 12)(28, \"div\", 13)(29, \"label\", 4);\n          i0.ɵɵtext(30, \"Primary Trade\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(31, \"ng-select\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"div\", 15)(33, \"p-button\", 16);\n          i0.ɵɵlistener(\"click\", function AddCraftspersonFormComponent_Template_p_button_click_33_listener() {\n            return ctx.onAddTrade();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(34, \"td\", 8)(35, \"div\", 3)(36, \"label\", 9);\n          i0.ɵɵtext(37, \"Special Skills\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"input\", 17);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(39, \"tr\")(40, \"td\", 2)(41, \"div\", 3)(42, \"label\", 4);\n          i0.ɵɵtext(43, \"Hourly Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(44, \"input\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(45, \"td\", 8)(46, \"div\", 3)(47, \"label\", 4);\n          i0.ɵɵtext(48, \"Overtime Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(49, \"input\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(50, \"tr\")(51, \"td\", 2)(52, \"div\", 3)(53, \"label\", 4);\n          i0.ɵɵtext(54, \"Doubletime Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(55, \"input\", 20);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(56, \"td\", 8)(57, \"div\", 3)(58, \"label\", 4);\n          i0.ɵɵtext(59, \"Standard Available Time (Hours/Day)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(60, \"input\", 21);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(61, \"tr\")(62, \"td\", 8)(63, \"div\", 3)(64, \"label\", 4);\n          i0.ɵɵtext(65, \"In House/Contractor ?\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(66, \"ng-select\", 22);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(67, \"td\", 2)(68, \"div\", 3)(69, \"label\", 4);\n          i0.ɵɵtext(70, \"Is Superviser\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(71, \"p-selectButton\", 23);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.cfFormPanel);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"readonly\", false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.cfFormPanel.controls[\"name\"] == null ? null : ctx.cfFormPanel.controls[\"name\"].errors) && ((ctx.cfFormPanel.controls[\"name\"] == null ? null : ctx.cfFormPanel.controls[\"name\"].dirty) || (ctx.cfFormPanel.controls[\"name\"] == null ? null : ctx.cfFormPanel.controls[\"name\"].touched)) || (ctx.cfFormPanel.controls[\"email\"] == null ? null : ctx.cfFormPanel.controls[\"email\"].errors) && ((ctx.cfFormPanel.controls[\"email\"] == null ? null : ctx.cfFormPanel.controls[\"email\"].dirty) || (ctx.cfFormPanel.controls[\"email\"] == null ? null : ctx.cfFormPanel.controls[\"email\"].touched)));\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumStatus)(\"searchable\", false);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.tradesData)(\"searchable\", true);\n          i0.ɵɵadvance(35);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumInHouseOrContractor)(\"searchable\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"options\", ctx.enumYes);\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i7.NgSelectComponent, i8.Button, i9.SelectButton, i10.NumbersOnlyDirective, i11.TwoDigitDecimalNumberDirective, i12.TrimInputDirective, i13.MatTooltip],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}[_nghost-%COMP%]     #add-btn .p-button{background-color:#fff!important;border-radius:50%;border:2px solid #2196F3;color:#2196f3;height:20px!important;width:20px}\"]\n    });\n  }\n  return AddCraftspersonFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}