{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"../providers/tools.providers\";\nimport * as i3 from \"../services/tools.services\";\nimport * as i4 from \"primeng/table\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/panel\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"ng-zorro-antd/table\";\nimport * as i10 from \"@angular/material/tooltip\";\nimport * as i11 from \"primeng/paginator\";\nfunction ToolsComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function ToolsComponent_ng_template_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ToolsComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 15);\n    i0.ɵɵelementStart(2, \"th\", 16)(3, \"div\", 17)(4, \"div\", 18)(5, \"p\", 19);\n    i0.ɵɵtext(6, \"Tool\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 20);\n    i0.ɵɵelement(8, \"p-sortIcon\", 21)(9, \"p-columnFilter\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 23)(11, \"div\", 17)(12, \"div\", 18)(13, \"p\", 19);\n    i0.ɵɵtext(14, \"Tool Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 20);\n    i0.ɵɵelement(16, \"p-sortIcon\", 24)(17, \"p-columnFilter\", 25);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 26)(19, \"div\", 17)(20, \"div\", 18)(21, \"p\", 19);\n    i0.ɵɵtext(22, \"Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 20);\n    i0.ɵɵelement(24, \"p-sortIcon\", 27)(25, \"p-columnFilter\", 28);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction ToolsComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 29)(1, \"td\", 15)(2, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function ToolsComponent_ng_template_7_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const tool_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onEdit(tool_r7.toolsId));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function ToolsComponent_ng_template_7_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const tool_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onDelete(tool_r7));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\", 32);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tool_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", tool_r7);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(tool_r7.tool);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tool_r7.toolType.toolType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", tool_r7.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(tool_r7.description);\n  }\n}\nfunction ToolsComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let ToolsComponent = /*#__PURE__*/(() => {\n  class ToolsComponent {\n    constructor(confirmationService, messageService, toolsProvider, service) {\n      this.confirmationService = confirmationService;\n      this.messageService = messageService;\n      this.toolsProvider = toolsProvider;\n      this.service = service;\n      this.toolsData = [];\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"toolsId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n      this.filterCriteriaList = [];\n    }\n    ngOnInit() {\n      this.loadRecords();\n    }\n    loadRecords() {\n      this.loading = true;\n      this.isFiltered = false;\n      let data = {\n        paginationDTO: this.paginationObj,\n        filterCriteria: this.filterCriteriaList\n      };\n      this.service.getAllToolsPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          this.toolsData = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n        } else {\n          this.toolsData = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    onEdit(id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        toolsId: id,\n        isEdit: true,\n        newRecord: false\n      };\n      this.toolsProvider.openDialog(dialogConfig);\n      this.toolsProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'message',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords();\n        }\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        toolsId: null,\n        isEdit: true,\n        newRecord: true\n      };\n      this.toolsProvider.openDialog(dialogConfig);\n      this.toolsProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'message',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords();\n        }\n      });\n    }\n    onDelete(tool) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ' + tool.tool + '?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deleteTool(tool.toolsId);\n        },\n        key: \"toolGrid\"\n      });\n    }\n    deleteTool(id) {\n      this.service.deleteById(id).subscribe(res => {\n        this.messageService.clear();\n        if (res != null && res.code == 200) {\n          this.messageService.add({\n            key: 'message',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.loadRecords();\n        } else {\n          this.messageService.add({\n            key: 'message',\n            severity: 'error',\n            summary: 'error',\n            detail: res.text\n          });\n        }\n      }, error => {});\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadRecords();\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        this.filterCriteria = {};\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined) {\n            let filterCriteria = {};\n            if (field == \"toolType\") {\n              filterCriteria = {\n                fieldName: \"toolType.toolType\",\n                value: filterValue,\n                matchMode: matchMode\n              };\n            } else {\n              filterCriteria = {\n                fieldName: field,\n                value: filterValue,\n                matchMode: matchMode\n              };\n            }\n            this.updateFilterCriteriaList(filterCriteria);\n          }\n        });\n        this.paginationObj.pageNo = 0;\n        this.loadRecords();\n      }\n      this.isFiltered = true;\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaList[index] = filterCriteria;\n        } else {\n          this.filterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function ToolsComponent_Factory(t) {\n      return new (t || ToolsComponent)(i0.ɵɵdirectiveInject(i1.ConfirmationService), i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.ToolsDialogueProvider), i0.ɵɵdirectiveInject(i3.ToolsService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ToolsComponent,\n      selectors: [[\"app-tools\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 14,\n      vars: 11,\n      consts: [[1, \"card\", 2, \"height\", \"92vh\"], [\"header\", \"Tools  Details\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [\"scrollDirection\", \"both\", \"scrollHeight\", \"550px\", \"styleClass\", \"p-datatable-customers p-datatable-gridlines\", \"dataKey\", \"id\", 3, \"value\", \"paginator\", \"loading\", \"scrollable\", \"rowHover\", \"onFilter\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"key\", \"message\"], [\"key\", \"toolDelete\", \"position\", \"top-center\"], [\"key\", \"toolGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"tool\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"tool\"], [\"type\", \"text\", \"field\", \"tool\", \"display\", \"menu\"], [\"pSortableColumn\", \"toolType.toolType\"], [\"field\", \"toolType.toolType\"], [\"type\", \"text\", \"field\", \"toolType.toolType\", \"display\", \"menu\"], [\"pSortableColumn\", \"description\"], [\"field\", \"description\"], [\"type\", \"text\", \"field\", \"description\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"icon\", \"pi pi-pencil\", \"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", 1, \"p-button-text\", \"p-button-rounded\", 3, \"click\"], [\"icon\", \"pi pi-times\", \"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", 1, \"p-button-text\", \"p-button-rounded\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function ToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1);\n          i0.ɵɵtemplate(2, ToolsComponent_ng_template_2_Template, 1, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"p-table\", 4, 5);\n          i0.ɵɵlistener(\"onFilter\", function ToolsComponent_Template_p_table_onFilter_4_listener($event) {\n            return ctx.onInnerFilter($event);\n          });\n          i0.ɵɵtemplate(6, ToolsComponent_ng_template_6_Template, 26, 0, \"ng-template\", 6);\n          i0.ɵɵtemplate(7, ToolsComponent_ng_template_7_Template, 10, 5, \"ng-template\", 7);\n          i0.ɵɵtemplate(8, ToolsComponent_ng_template_8_Template, 3, 1, \"ng-template\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 9)(10, \"p-paginator\", 10);\n          i0.ɵɵlistener(\"onPageChange\", function ToolsComponent_Template_p_paginator_onPageChange_10_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelement(11, \"p-toast\", 11)(12, \"p-toast\", 12)(13, \"p-confirmDialog\", 13);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"value\", ctx.toolsData)(\"paginator\", false)(\"loading\", ctx.loading)(\"scrollable\", true)(\"rowHover\", false);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n        }\n      },\n      dependencies: [i1.PrimeTemplate, i4.Table, i4.SortableColumn, i4.SelectableRow, i4.SortIcon, i4.ColumnFilter, i5.ButtonDirective, i6.Toast, i7.Panel, i8.ConfirmDialog, i9.NzTableCellDirective, i9.NzThMeasureDirective, i9.NzTrDirective, i10.MatTooltip, i11.Paginator],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return ToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}