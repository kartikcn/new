{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./tokenStorage.service\";\nimport * as i4 from \"ngx-cookie-service\";\nimport * as i5 from \"../env.service\";\nexport class AuthService {\n  // Declare private variables\n  constructor(http, router, tokenStorage, cokieSrv, env) {\n    this.http = http;\n    this.router = router;\n    this.tokenStorage = tokenStorage;\n    this.cokieSrv = cokieSrv;\n    this.env = env;\n    // Initialize variables\n    this.USER_KEY = 'auth-user';\n    // serverUrl = environment.baseUrl;\n    this.serverUrl = this.env.baseUrl;\n    this.errorData = {};\n    this.redirectUrl = \"\";\n    this.loginStatus = new EventEmitter(false);\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      })\n    };\n  }\n  // Login function\n  login(username, password) {\n    // Assigning the login credentials to the body\n    var body = {\n      \"username\": username,\n      \"password\": password\n    };\n    // Return the logged information\n    return this.http.post(`${this.serverUrl}api/v1/auth/signin`, body, this.httpOptions);\n    // .pipe(\n    //   catchError(this.handleError)\n    // );\n    //return true;\n  }\n\n  refreshToken() {\n    let refreshAuth = this.getAuthorizationToken(); //get refresh token from storage\n    let url = `${this.serverUrl}api/token`;\n    let body = new FormData();\n    body.append(\"grant_type\", \"refresh_token\");\n    body.append(\"refresh_token\", refreshAuth);\n    return this.http.post(url, body).subscribe(token => {\n      localStorage.setItem('token', JSON.stringify(token.access_token));\n      localStorage.setItem('refresh_token', JSON.stringify(token.refresh_token));\n      return token.access_token;\n    });\n  }\n  isLoggedIn() {\n    // Return true  if logged in, Otherwise return false\n    if (this.tokenStorage.getToken()) {\n      return true;\n    }\n    return false;\n  }\n  getAuthorizationToken() {\n    // Return access token if logged in\n    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n    return currentUser.access_token;\n  }\n  setPreviousUrl(url) {\n    localStorage.setItem('previousUrl', url);\n  }\n  getPreviousUrl() {\n    return localStorage.getItem('previousUrl');\n  }\n  getLoggedInUser() {\n    // Return true  if logged in, Otherwise return false\n    if (sessionStorage.getItem('currentUser')) {\n      const currentUser = JSON.parse(sessionStorage.getItem('currentUser') || '{}');\n      return currentUser.userName;\n    }\n    return '';\n  }\n  getLoggedInUserId() {\n    // Return true  if logged in, Otherwise return false\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.userId;\n    }\n    return '';\n  }\n  getLoggedInUserCompId() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.compId;\n    }\n    return 0;\n  }\n  getLoggedInUserEMId() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.emId;\n    }\n    return 0;\n  }\n  getLoggedInUserRole() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.userRoleId;\n    }\n  }\n  getLoggedInTechnicianId() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.technicianId;\n    }\n  }\n  logout() {\n    // Clear all localStorage information\n    this.tokenStorage.signOut();\n    this.cokieSrv.deleteAll();\n    this.router.navigate(['/login']);\n  }\n  // Handling the errors\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    this.errorData = {\n      errorTitle: error.error.error,\n      errorDesc: error.error.message,\n      errorStatus: error.status\n    };\n    return throwError(this.errorData);\n  }\n  getLoggedInUserName() {\n    // Return username  if logged in, Otherwise return empty string\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.username;\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.TokenStorageService), i0.ɵɵinject(i4.CookieService), i0.ɵɵinject(i5.EnvService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","HttpHeaders","throwError","AuthService","constructor","http","router","tokenStorage","cokieSrv","env","USER_KEY","serverUrl","baseUrl","errorData","redirectUrl","loginStatus","httpOptions","headers","login","username","password","body","post","refreshToken","refreshAuth","getAuthorizationToken","url","FormData","append","subscribe","token","localStorage","setItem","JSON","stringify","access_token","refresh_token","isLoggedIn","getToken","currentUser","parse","getItem","setPreviousUrl","getPreviousUrl","getLoggedInUser","sessionStorage","userName","getLoggedInUserId","user","window","userData","userId","getLoggedInUserCompId","compId","getLoggedInUserEMId","emId","getLoggedInUserRole","userRoleId","getLoggedInTechnicianId","technicianId","logout","signOut","deleteAll","navigate","handleError","error","ErrorEvent","console","message","status","errorTitle","errorDesc","errorStatus","getLoggedInUserName","_","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","TokenStorageService","i4","CookieService","i5","EnvService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport {  catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from './tokenStorage.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { EnvService } from '../env.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  // Initialize variables\n   USER_KEY:string = 'auth-user';\n  // serverUrl = environment.baseUrl;\n  serverUrl = this.env.baseUrl;\n  errorData: any={};\n  redirectUrl: string=\"\";\n  loginStatus: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n   httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n    })\n  };\n  // Declare private variables\n  constructor(private http: HttpClient, private router: Router,private tokenStorage:TokenStorageService,\n    private cokieSrv: CookieService,private env: EnvService,) { }\n\n  // Login function\n  login(username: string, password: string) {\n    // Assigning the login credentials to the body\n    var body = {\n      \"username\": username, \n      \"password\" : password };\n    // Return the logged information\n    return this.http.post<any>(`${this.serverUrl}api/v1/auth/signin`, body,this.httpOptions)\n      // .pipe(\n      //   catchError(this.handleError)\n      // );\n    //return true;\n  }\nrefreshToken(){\n    let refreshAuth = this.getAuthorizationToken(); //get refresh token from storage\n    let url: string = `${this.serverUrl}api/token`;\n\n    let body= new FormData();  \t  \n    body.append(\"grant_type\", \"refresh_token\");\n    body.append(\"refresh_token\", refreshAuth)\n    \n    return this.http.post<any>(url, body).subscribe(token => {      \t\t\n\t\t\tlocalStorage.setItem('token', JSON.stringify(token.access_token));\n      localStorage.setItem('refresh_token', JSON.stringify(token.refresh_token));\n      \treturn token.access_token;\n\t\t});\n  }\n  isLoggedIn() {\n    // Return true  if logged in, Otherwise return false\n    if (this.tokenStorage.getToken()) {\n      return true;\n    }\n    return false;\n  }\n\n  getAuthorizationToken() {\n    // Return access token if logged in\n    \n    const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n    return currentUser.access_token;\n  }\n  setPreviousUrl(url:any){\n    localStorage.setItem('previousUrl',url);\n  }\n  getPreviousUrl(){\n    return localStorage.getItem('previousUrl');\n  }\n\n  getLoggedInUser() {\n    // Return true  if logged in, Otherwise return false\n    if (sessionStorage.getItem('currentUser')) {\n      const currentUser = JSON.parse(sessionStorage.getItem('currentUser')|| '{}');\n      return currentUser.userName;\n    }\n    return '';\n  }\n\n  getLoggedInUserId() {\n    // Return true  if logged in, Otherwise return false\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.userId;\n    }\n    return '';\n  }\n  getLoggedInUserCompId(){\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.compId;\n    }\n    return 0;\n  }\n\n  getLoggedInUserEMId() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.emId;\n    }\n    return 0;\n  }\n\n  getLoggedInUserRole() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if(user){\n      let userData = JSON.parse(user);\n      return userData.userRoleId;\n    }\n  }\n\n  getLoggedInTechnicianId() {\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if(user){\n      let userData = JSON.parse(user);\n      return userData.technicianId;\n    }\n  }\n\n  \n  logout() {\n    // Clear all localStorage information\n\n    this.tokenStorage.signOut();\n    this.cokieSrv.deleteAll();\n    this.router.navigate(['/login']);\n  }\n\n  // Handling the errors\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    this.errorData = {\n      errorTitle: error.error.error,\n      errorDesc: error.error.message,\n      errorStatus: error.status\n    };\n    return throwError(this.errorData);\n  }\n  getLoggedInUserName() {\n    // Return username  if logged in, Otherwise return empty string\n    const user = window.sessionStorage.getItem(this.USER_KEY);\n    if (user) {\n      let userData = JSON.parse(user);\n      return userData.username;\n    }\n    return '';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}