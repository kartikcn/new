{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MessageService } from 'primeng/api';\nimport html2canvas from 'html2canvas';\nimport { SiteFilterInputDTO } from 'src/app/ui/site/modal/SiteFilterInputDTO.model';\nimport { BuildingFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/background-loc/services/bl.service\";\nimport * as i3 from \"src/app/services/site.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../services/summery-request-report.service\";\nimport * as i6 from \"../../work-request/service/add-work-request.services\";\nimport * as i7 from \"primeng/api\";\nimport * as i8 from \"src/app/ui/booking/services/booking.services\";\nimport * as i9 from \"src/app/ui/employee/services/employee.service\";\nimport * as i10 from \"@ng-select/ng-select\";\nimport * as i11 from \"primeng/table\";\nimport * as i12 from \"primeng/calendar\";\nimport * as i13 from \"primeng/button\";\nimport * as i14 from \"primeng/dialog\";\nimport * as i15 from \"primeng/panel\";\nimport * as i16 from \"primeng/chart\";\nimport * as i17 from \"../../requests-by-asset-reports/widgets/add-table/add-table.component\";\nconst _c0 = [\"chartContainer\"];\nfunction SummeryRequestReportsComponent_div_49_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 28)(2, \"div\", 29)(3, \"div\", 30)(4, \"p\", 31);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 32);\n    i0.ɵɵelement(7, \"p-sortIcon\", 33)(8, \"p-columnFilter\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"th\", 35)(10, \"div\", 29)(11, \"div\", 30)(12, \"p\", 31);\n    i0.ɵɵtext(13, \"Request Count\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 32);\n    i0.ɵɵelement(15, \"p-sortIcon\", 36)(16, \"p-columnFilter\", 37);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.displayGridLabel, \"\");\n  }\n}\nfunction SummeryRequestReportsComponent_div_49_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 38);\n    i0.ɵɵlistener(\"click\", function SummeryRequestReportsComponent_div_49_ng_template_3_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const report_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.onClickCount(report_r7));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const report_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(report_r7.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(report_r7.count);\n  }\n}\nfunction SummeryRequestReportsComponent_div_49_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nconst _c1 = function () {\n  return [5, 10, 25];\n};\nfunction SummeryRequestReportsComponent_div_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"p-table\", 26);\n    i0.ɵɵtemplate(2, SummeryRequestReportsComponent_div_49_ng_template_2_Template, 17, 1, \"ng-template\", 23);\n    i0.ɵɵtemplate(3, SummeryRequestReportsComponent_div_49_ng_template_3_Template, 5, 2, \"ng-template\", 24);\n    i0.ɵɵtemplate(4, SummeryRequestReportsComponent_div_49_ng_template_4_Template, 3, 1, \"ng-template\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r0.reportData)(\"paginator\", true)(\"rows\", ctx_r0.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(6, _c1))(\"rowHover\", false);\n  }\n}\nfunction SummeryRequestReportsComponent_div_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", null, 39)(2, \"p-chart\", 40);\n    i0.ɵɵlistener(\"onDataSelect\", function SummeryRequestReportsComponent_div_50_Template_p_chart_onDataSelect_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClickBarChart($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"height\", 510)(\"data\", ctx_r1.chartData)(\"options\", ctx_r1.basicOptions);\n  }\n}\nfunction SummeryRequestReportsComponent_ng_template_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 41);\n    i0.ɵɵtext(1, \"Request List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SummeryRequestReportsComponent_ng_template_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 42);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r3.requestData);\n  }\n}\nconst _c2 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nexport let SummeryRequestReportsComponent = /*#__PURE__*/(() => {\n  class SummeryRequestReportsComponent {\n    constructor(formBuilder, blSrv, siteServ, datePipe, reportsServ, summeryReportServ, wrServ, messageService, bookingSrv, employeeService) {\n      this.formBuilder = formBuilder;\n      this.blSrv = blSrv;\n      this.siteServ = siteServ;\n      this.datePipe = datePipe;\n      this.reportsServ = reportsServ;\n      this.summeryReportServ = summeryReportServ;\n      this.wrServ = wrServ;\n      this.messageService = messageService;\n      this.bookingSrv = bookingSrv;\n      this.employeeService = employeeService;\n      this.subscriptions = [];\n      this.enumAllSites = [];\n      this.enumAllBl = [];\n      this.enumBL = [];\n      this.isErr = false;\n      this.errorMsg = '';\n      this.reportData = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.showPopUpGrid = false;\n      this.isGridType = false;\n      this.chartData = [];\n      this.chartImg = [];\n      this.requestData = [];\n      this.chartTitle = 'Status';\n      this.allEmployees = [];\n      this.enumEm = [];\n      this.groupByData = [{\n        \"id\": 0,\n        \"lable\": 'Status',\n        \"value\": \"status\"\n      }, {\n        \"id\": 1,\n        \"lable\": 'Problem Type',\n        \"value\": \"prob_type_id\"\n      }, {\n        \"id\": 2,\n        \"lable\": 'Site',\n        \"value\": \"site_id\"\n      }, {\n        \"id\": 3,\n        \"lable\": 'Building',\n        \"value\": \"bl_id\"\n      }, {\n        \"id\": 4,\n        \"lable\": 'Asset',\n        \"value\": \"eq_id\"\n      }, {\n        \"id\": 5,\n        \"lable\": 'Technician',\n        \"value\": \"technician_id\"\n      }, {\n        \"id\": 6,\n        \"lable\": 'Employee',\n        \"value\": \"requested_for\"\n      }, {\n        \"id\": 6,\n        \"lable\": 'Team',\n        \"value\": \"team_id\"\n      }];\n      this.displayTypeData = [{\n        \"id\": 1,\n        \"lable\": 'Grid',\n        \"value\": \"grid\"\n      }, {\n        \"id\": 2,\n        \"lable\": 'Bar Chart',\n        \"value\": \"bar_char\"\n      }];\n      this.basicOptions = {\n        title: {\n          display: false,\n          text: 'Bar Chart',\n          fontSize: 18\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: this.chartTitle,\n              fontStyle: 'bold'\n            },\n            ticks: {\n              display: true\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Request Count',\n              fontStyle: 'bold'\n            },\n            ticks: {\n              beginAtZero: true,\n              stepSize: 5,\n              display: true\n            },\n            grid: {\n              display: false\n            }\n          }\n        },\n        tooltips: {\n          enabled: true,\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            label: function (tooltipItem) {\n              return \"Requests: \" + tooltipItem.formattedValue;\n            }\n          }\n        },\n        responsive: true,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutBounce'\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      };\n      this.filterData = {\n        siteId: null,\n        blId: null,\n        flId: null,\n        rmId: null,\n        eqId: null,\n        wrId: null,\n        requestedFor: null,\n        status: null,\n        problemType: null,\n        dateRequestedFrom: null,\n        dateRequestedTo: null,\n        technicianId: null,\n        teamId: null,\n        showRequestType: null\n      };\n      this.showRequestsTypeList = [{\n        label: \"Preventive Maintenance\",\n        value: \"ppm\"\n      }, {\n        label: \"Facilities Helpdesk\",\n        value: \"facilities\"\n      }, {\n        label: \"All\",\n        value: \"all\"\n      }];\n      this.showType = \"facilities\";\n      this.limitSite = 0;\n      this.offsetSite = 0;\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.selectedSite = {};\n      this.selectedBl = {};\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.filterPanel = this.formBuilder.group({\n        dateRequestedFrom: [new Date(new Date().getFullYear(), new Date().getMonth(), 1)],\n        dateRequestedTo: [new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)],\n        blId: [null],\n        siteId: [null],\n        groupBy: [null, [Validators.required]],\n        displayType: [null],\n        showType: [this.showType]\n      });\n    }\n    ngOnInit() {\n      this.chartTitle = this.groupByData[0].lable;\n      this.filterPanel.patchValue({\n        groupBy: this.groupByData[0].value,\n        displayType: this.displayTypeData[1].value,\n        showType: this.showType\n      });\n      this.isGridType = false;\n      this.loadRecords();\n      this.loadAllEmployee();\n    }\n    setShowType() {\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          showType: this.showType\n        });\n      });\n    }\n    setChartData() {\n      let initialChartData = {\n        labels: [],\n        datasets: [{\n          label: \"\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1\n        }]\n      };\n      const dynamicColors = [];\n      for (let i = 0; i < this.reportData.length; i++) {\n        let color = '';\n        do {\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color));\n        {\n          // Regenerate color if it is white\n          color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n        }\n        ;\n        dynamicColors.push(color);\n      }\n      this.reportData.length > 0 && this.reportData.forEach((each, index) => {\n        initialChartData.labels.push(each.value);\n        initialChartData.datasets[0].data.push(each.count);\n        initialChartData.datasets[0].backgroundColor.push(dynamicColors[index % dynamicColors.length]);\n        initialChartData.datasets[0].borderColor.push(dynamicColors[index % dynamicColors.length]);\n      });\n      if (initialChartData.datasets[0].data.length < 5) {\n        let empty = '  ';\n        for (let i = 0; i < 5 - initialChartData.datasets[0].data.length; i++) {\n          initialChartData.datasets[0].data.push(0);\n          initialChartData.labels.push(empty.repeat(i + 1));\n          initialChartData.datasets[0].backgroundColor.push('');\n          initialChartData.datasets[0].borderColor.push('');\n        }\n      }\n      const label = this.groupByData.filter(each => each.value === this.filterPanel.controls.groupBy.value);\n      //this.basicOptions.scales.xAxes[0].scaleLabel.labelString = label[0].lable;\n      this.chartData = initialChartData;\n    }\n    isWhiteColorShade(color) {\n      // Extract RGB values from the color string\n      const rgbValues = color.match(/\\d+/g);\n      const r = parseInt(rgbValues[0]);\n      const g = parseInt(rgbValues[1]);\n      const b = parseInt(rgbValues[2]);\n      // Check if all RGB values are close to 255 (white)\n      const threshold = 50; // Adjust this threshold as needed\n      const average = (r + g + b) / 3;\n      return average > threshold;\n    }\n    checkDateValidation() {\n      return control => {\n        if (control.value !== undefined && control.value != null) {\n          this.filterPanel.controls['dateRequestedFrom'].setErrors(null);\n          this.filterPanel.controls['dateRequestedTo'].setErrors(null);\n          this.filterPanel.clearAsyncValidators();\n          this.filterPanel.updateValueAndValidity();\n          var dateFrom = new Date(this.filterPanel.controls['dateRequestedFrom'].value);\n          var dateTo = new Date(this.filterPanel.controls['dateRequestedTo'].value);\n          if (dateFrom.getTime() >= dateTo.getTime() && this.filterPanel.controls['dateRequestedFrom'].value != null) {\n            this.isErr = true;\n            this.filterPanel.controls['dateFrom'].setErrors({\n              'incorrect': true\n            });\n            this.filterPanel.updateValueAndValidity();\n            this.errorMsg = 'Date requested to should be greater than date requested from.';\n            return {\n              'incorrect': true\n            };\n          } else {\n            this.isErr = false;\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    loadAllEmployee() {\n      this.employeeService.getAllEmployeeList().subscribe(res => {\n        if (res) {\n          this.allEmployees = res;\n        } else {\n          this.allEmployees = [];\n        }\n      });\n    }\n    onSelectSite(event) {\n      this.filterPanel.patchValue({\n        blId: null\n      });\n      if (event.siteId !== null && event.siteId !== '') {\n        this.selectedSite = event;\n        this.selectedBl = {};\n      } else {\n        this.selectedSite = {};\n        this.selectedBl = {};\n      }\n    }\n    onSelectBuilding(event) {\n      if (event.blId !== null && event.blId !== '') {\n        this.selectedBl = event;\n        const siteData = {\n          siteId: event.siteId,\n          siteName: event.siteNameString\n        };\n        this.selectedSite = siteData;\n        this.updateSiteList(siteData);\n        this.filterPanel.patchValue({\n          siteId: event.siteId\n        });\n      } else {}\n    }\n    onSelectDisplayType(event) {\n      if (event.value === 'grid') {\n        this.isGridType = true;\n      } else {\n        this.isGridType = false;\n        this.loadRecords();\n      }\n    }\n    onClickFilter() {\n      this.loadRecords();\n    }\n    loadRecords() {\n      var dateRequestedFrom = this.filterPanel.controls.dateRequestedFrom.value;\n      var dateRequestedTo = this.filterPanel.controls.dateRequestedTo.value;\n      var blId = this.filterPanel.controls.blId.value;\n      var siteId = this.filterPanel.controls.siteId.value;\n      var groupBy = this.filterPanel.controls.groupBy.value;\n      this.basicOptions.scales.x.title.text = this.chartTitle;\n      this.showType = this.filterPanel.controls.showType.value;\n      var filterData = {\n        \"dateRequestedFrom\": this.datePipe.transform(dateRequestedFrom, \"yyyy-MM-dd\"),\n        \"dateRequestedTo\": this.datePipe.transform(dateRequestedTo, \"yyyy-MM-dd\"),\n        \"blId\": blId,\n        \"siteId\": siteId,\n        \"groupBy\": groupBy,\n        \"showRequestType\": this.showType\n      };\n      this.reportsServ.getReportsByFilter(filterData).subscribe(res => {\n        if (res.length > 0) {\n          this.reportData = res;\n          this.displayGridLabel = this.reportData && this.reportData[0].lable;\n          this.setChartData();\n        } else {\n          const label = this.groupByData.filter(each => each.value === this.filterPanel.controls.groupBy.value);\n          this.displayGridLabel = label[0].lable;\n          this.reportData = [];\n          this.setChartData();\n        }\n      });\n    }\n    onClickCount(data) {\n      const dateRequestedFrom = this.filterPanel.controls.dateRequestedFrom.value;\n      const dateRequestedTo = this.filterPanel.controls.dateRequestedTo.value;\n      this.requestData = [];\n      this.filterData = {\n        ...this.filterData,\n        siteId: this.filterPanel.controls.siteId.value,\n        blId: this.filterPanel.controls.blId.value,\n        dateRequestedFrom: this.datePipe.transform(dateRequestedFrom, \"yyyy-MM-dd\"),\n        dateRequestedTo: this.datePipe.transform(dateRequestedTo, \"yyyy-MM-dd\"),\n        showRequestType: this.showType\n      };\n      if (data.lable === \"Problem Type\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          technicianId: null,\n          teamId: null,\n          problemTypeId: data.probType,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Status\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: data.status,\n          technicianId: null,\n          teamId: null,\n          problemTypeId: null,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Site\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          problemTypeId: null,\n          blId: null,\n          technicianId: null,\n          teamId: null,\n          siteId: data.site,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Building\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          problemTypeId: null,\n          siteId: null,\n          technicianId: null,\n          teamId: null,\n          blId: data.bl,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Employee\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          status: null,\n          problemTypeId: null,\n          siteId: null,\n          blId: null,\n          technicianId: null,\n          teamId: null,\n          requestedFor: data.emId,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Asset\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          problemTypeId: null,\n          siteId: null,\n          blId: null,\n          technicianId: null,\n          teamId: null,\n          eqId: data.eq,\n          showRequestType: this.showType\n        };\n        this.loadRequestData(this.filterData);\n      } else if (data.lable === \"Technician\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          problemTypeId: null,\n          siteId: null,\n          blId: null,\n          teamId: null,\n          techncianId: data.cfId,\n          showRequestType: this.showType\n        };\n        this.loadRequestTechncianOrTeamReport(this.filterData);\n      } else if (data.lable === \"Team\") {\n        this.filterData = {\n          ...this.filterData,\n          flId: null,\n          rmId: null,\n          eqId: null,\n          wrId: null,\n          requestedFor: null,\n          status: null,\n          problemTypeId: null,\n          siteId: null,\n          blId: null,\n          techncianId: null,\n          teamId: data.team,\n          showRequestType: this.showType\n        };\n        this.loadRequestTechncianOrTeamReport(this.filterData);\n      }\n    }\n    loadRequestData(filterData) {\n      this.wrServ.getAllWrByFilter(filterData).subscribe(res => {\n        if (res.length > 0) {\n          this.requestData = res.map(each => {\n            return {\n              ...each,\n              formatedDateRequested: this.datePipe.transform(each.dateRequested, 'dd MMM yyyy'),\n              formatedRequestedFor: this.getEmployeeFullName(each.requestedFor)\n            };\n          });\n          this.showPopUpGrid = true;\n        } else {\n          this.requestData = [];\n        }\n      });\n    }\n    loadRequestTechncianOrTeamReport(data) {\n      this.summeryReportServ.getRequestTechncianOrTeamReport(data).subscribe(res => {\n        if (res.length > 0) {\n          this.requestData = res;\n          this.showPopUpGrid = true;\n        } else {\n          this.requestData = [];\n        }\n      });\n    }\n    onClickBarChart(event) {\n      const index = event.element.index;\n      const data = this.reportData[index];\n      this.onClickCount(data);\n    }\n    changeGroupBy(event) {\n      this.chartTitle = event.lable;\n    }\n    exportChartToPDF() {\n      const htmlRef = this.chartContainer.nativeElement.querySelector('canvas');\n      html2canvas(htmlRef).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        this.chartImg = [];\n        this.chartImg.push(imgData);\n        this.printPDF();\n      });\n    }\n    printPDF() {\n      var reportDetails = {\n        chartImg: this.chartImg,\n        title: 'Requests By ' + this.chartTitle\n      };\n      this.bookingSrv.printPdf(reportDetails).subscribe(res => {\n        if (res != null) {\n          this.messageService.add({\n            key: 'reportBookingSer',\n            severity: 'success',\n            summary: 'PDF Created',\n            detail: 'PDF created successfully'\n          });\n          var file = new Blob([res], {\n            type: 'application/pdf'\n          });\n          var fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        }\n      });\n    }\n    onClear() {\n      // this.enumBL = [...this.enumAllBl];\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.selectedBl = {};\n      this.selectedSite = {};\n      this.filterPanel.patchValue({\n        groupBy: this.groupByData[0].value,\n        displayType: this.displayTypeData[1].value,\n        dateRequestedFrom: null,\n        dateRequestedTo: null,\n        blId: null,\n        siteId: null,\n        showType: this.showType\n      });\n      this.isGridType = false;\n    }\n    getEmployeeFullName(id) {\n      if (this.allEmployees) {\n        this.enumEm = this.allEmployees.filter(em => em.emId === id);\n        this.fullName = this.enumEm.map(em => {\n          if (em.firstName.length > 0 && em.lastName.length > 0) {\n            return em.firstName + \" \" + em.lastName + ' - ' + em.emCode;\n          } else {\n            return em.firstName + ' - ' + em.emCode;\n          }\n        });\n      }\n      return this.fullName[0];\n    }\n    scrollToEndSite() {\n      this.offsetSite = this.limitSite;\n      this.limitSite += this.scrollLimit;\n      this.filterCriteria.limit = this.limitSite;\n      this.filterCriteria.offset = this.offsetSite;\n      this.siteServ.getAllSiteByScroll(this.filterCriteria).subscribe(res => {\n        this.enumAllSites = res;\n        this.updateSiteList(this.selectedSite);\n      });\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blSrv.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.updateBlList(this.selectedBl);\n      });\n    }\n    searchSite(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"siteName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndSite();\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    updateSiteList(siteData) {\n      if (siteData.siteId) {\n        this.enumAllSites = this.enumAllSites.filter(t => t.siteId !== siteData.siteId);\n        this.enumAllSites = this.enumAllSites.filter(t => t.siteId !== null);\n        this.enumAllSites.unshift(siteData);\n      }\n      this.enumAllSites.unshift(new SiteFilterInputDTO(null, 'Make a selection'));\n    }\n    updateBlList(blData) {\n      if (blData.blId) {\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    onOpenSite() {\n      this.limitSite = 0;\n      this.offsetSite = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndSite();\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      if (this.selectedSite.siteId) {\n        this.filterCriteria = {\n          fieldName: \"site.siteId\",\n          value: this.selectedSite.siteId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndBl();\n    }\n    static #_ = this.ɵfac = function SummeryRequestReportsComponent_Factory(t) {\n      return new (t || SummeryRequestReportsComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.BuildingService), i0.ɵɵdirectiveInject(i3.SiteService), i0.ɵɵdirectiveInject(i4.DatePipe), i0.ɵɵdirectiveInject(i5.SummeryRequestReportsService), i0.ɵɵdirectiveInject(i5.SummeryRequestReportsService), i0.ɵɵdirectiveInject(i6.AddWorkRequestService), i0.ɵɵdirectiveInject(i7.MessageService), i0.ɵɵdirectiveInject(i8.BookingService), i0.ɵɵdirectiveInject(i9.EmployeeService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SummeryRequestReportsComponent,\n      selectors: [[\"app-summery-request-report\"]],\n      viewQuery: function SummeryRequestReportsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);\n        }\n      },\n      inputs: {\n        showType: \"showType\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 54,\n      vars: 32,\n      consts: [[1, \"card\", 2, \"height\", \"95vh\"], [\"header\", \"Request Summary\", 3, \"toggleable\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateRequestedFrom\", \"formControlName\", \"dateRequestedFrom\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateRequestedTo\", \"formControlName\", \"dateRequestedTo\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"siteId\", \"bindLabel\", \"siteName\", \"bindValue\", \"siteId\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\", \"open\", \"scrollToEnd\", \"search\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"showType\", \"bindLabel\", \"label\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"open\", \"change\", \"scrollToEnd\", \"search\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"groupBy\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"displayType\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", \"filter-button\", 2, \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", \"filter-button\", 2, \"margin-left\", \"5px\", \"margin-right\", \"5px\", 3, \"click\"], [\"icon\", \"pi pi-file-pdf\", \"matTooltip\", \"Generate PDF\", \"matTooltipPosition\", \"below\", \"styleClass\", \"p-button-raised p-button-danger\", 3, \"disabled\", \"click\"], [\"class\", \"card\", 4, \"ngIf\"], [4, \"ngIf\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\"], [\"pTemplate\", \"emptymessage\"], [\"pSortableColumn\", \"value\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"value\"], [\"type\", \"text\", \"field\", \"value\", \"display\", \"menu\"], [\"pSortableColumn\", \"count\"], [\"field\", \"count\"], [\"type\", \"text\", \"field\", \"count\", \"display\", \"menu\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [\"chartContainer\", \"\"], [\"type\", \"bar\", 3, \"height\", \"data\", \"options\", \"onDataSelect\"], [2, \"margin\", \"0px\"], [3, \"data\"]],\n      template: function SummeryRequestReportsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"div\", 7)(9, \"label\", 8);\n          i0.ɵɵtext(10, \"Requested From\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"p-calendar\", 9);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(12, \"td\", 4)(13, \"div\", 5)(14, \"div\", 6)(15, \"div\", 7)(16, \"label\", 8);\n          i0.ɵɵtext(17, \"Requested To\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"p-calendar\", 10);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(19, \"td\", 4)(20, \"div\", 5)(21, \"label\", 8);\n          i0.ɵɵtext(22, \"Site\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"ng-select\", 11);\n          i0.ɵɵlistener(\"change\", function SummeryRequestReportsComponent_Template_ng_select_change_23_listener($event) {\n            return ctx.onSelectSite($event);\n          })(\"open\", function SummeryRequestReportsComponent_Template_ng_select_open_23_listener() {\n            return ctx.onOpenSite();\n          })(\"scrollToEnd\", function SummeryRequestReportsComponent_Template_ng_select_scrollToEnd_23_listener() {\n            return ctx.scrollToEndSite();\n          })(\"search\", function SummeryRequestReportsComponent_Template_ng_select_search_23_listener($event) {\n            return ctx.searchSite($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"td\", 4)(25, \"div\", 5)(26, \"label\", 8);\n          i0.ɵɵtext(27, \"Requests Type \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"ng-select\", 12);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(29, \"tr\")(30, \"td\", 4)(31, \"div\", 5)(32, \"label\", 8);\n          i0.ɵɵtext(33, \"Building\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"ng-select\", 13);\n          i0.ɵɵlistener(\"open\", function SummeryRequestReportsComponent_Template_ng_select_open_34_listener() {\n            return ctx.onOpenBl();\n          })(\"change\", function SummeryRequestReportsComponent_Template_ng_select_change_34_listener($event) {\n            return ctx.onSelectBuilding($event);\n          })(\"scrollToEnd\", function SummeryRequestReportsComponent_Template_ng_select_scrollToEnd_34_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function SummeryRequestReportsComponent_Template_ng_select_search_34_listener($event) {\n            return ctx.searchBl($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"td\", 4)(36, \"div\", 5)(37, \"label\", 14);\n          i0.ɵɵtext(38, \"Group By\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"ng-select\", 15);\n          i0.ɵɵlistener(\"change\", function SummeryRequestReportsComponent_Template_ng_select_change_39_listener($event) {\n            return ctx.changeGroupBy($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(40, \"td\", 4)(41, \"div\", 5)(42, \"label\", 14);\n          i0.ɵɵtext(43, \"Display Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"ng-select\", 16);\n          i0.ɵɵlistener(\"change\", function SummeryRequestReportsComponent_Template_ng_select_change_44_listener($event) {\n            return ctx.onSelectDisplayType($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(45, \"td\", 4)(46, \"button\", 17);\n          i0.ɵɵlistener(\"click\", function SummeryRequestReportsComponent_Template_button_click_46_listener() {\n            return ctx.onClickFilter();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(47, \"button\", 18);\n          i0.ɵɵlistener(\"click\", function SummeryRequestReportsComponent_Template_button_click_47_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(48, \"p-button\", 19);\n          i0.ɵɵlistener(\"click\", function SummeryRequestReportsComponent_Template_p_button_click_48_listener() {\n            return ctx.exportChartToPDF();\n          });\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵtemplate(49, SummeryRequestReportsComponent_div_49_Template, 5, 7, \"div\", 20);\n          i0.ɵɵtemplate(50, SummeryRequestReportsComponent_div_50_Template, 3, 3, \"div\", 21);\n          i0.ɵɵelementStart(51, \"p-dialog\", 22);\n          i0.ɵɵlistener(\"visibleChange\", function SummeryRequestReportsComponent_Template_p_dialog_visibleChange_51_listener($event) {\n            return ctx.showPopUpGrid = $event;\n          });\n          i0.ɵɵtemplate(52, SummeryRequestReportsComponent_ng_template_52_Template, 2, 0, \"ng-template\", 23);\n          i0.ɵɵtemplate(53, SummeryRequestReportsComponent_ng_template_53_Template, 1, 1, \"ng-template\", 24);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"toggleable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumAllSites);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.showRequestsTypeList)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumBL);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.groupByData);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", false)(\"items\", ctx.displayTypeData);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.isGridType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isGridType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isGridType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(31, _c2));\n          i0.ɵɵproperty(\"visible\", ctx.showPopUpGrid)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i10.NgSelectComponent, i7.PrimeTemplate, i11.Table, i11.SortableColumn, i11.SortIcon, i11.ColumnFilter, i12.Calendar, i13.ButtonDirective, i13.Button, i14.Dialog, i15.Panel, i16.UIChart, i17.AddTableComponent],\n      styles: [\"[_nghost-%COMP%]     .p-dialog .p-dialog-header{padding-left:1rem!important;padding:0rem;border-radius:0rem!important}  .ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value{overflow:hidden!important;text-overflow:ellipsis!important;white-space:nowrap!important;max-width:180px!important}@media screen and (min-width: 600px) and (max-width: 959px){  .p-button.p-button-sm{font-size:.7rem;padding:.25rem .5rem}  .p-button.p-button-icon-only{width:2rem}}\"]\n    });\n  }\n  return SummeryRequestReportsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}