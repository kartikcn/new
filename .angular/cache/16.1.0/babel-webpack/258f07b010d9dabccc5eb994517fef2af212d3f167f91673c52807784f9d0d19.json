{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../../services/app-params.service\";\nimport * as i4 from \"../../../../directive/directive/upper-case.directive\";\nimport * as i5 from \"../../../../directive/directive/trim-input.directive\";\nexport let AddAppParamsComponent = /*#__PURE__*/(() => {\n  class AddAppParamsComponent {\n    constructor(formBuilder, authSrv, apSrv) {\n      this.formBuilder = formBuilder;\n      this.authSrv = authSrv;\n      this.apSrv = apSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.isNew = false;\n      this.isEditable = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.AppParamFormPanel = this.formBuilder.group({\n        appParamsId: [null, [Validators.required]],\n        paramId: ['', [Validators.required]],\n        paramValue: ['', [Validators.required]],\n        description: ['', [Validators.required]],\n        isEditable: ['']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.AppParamFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    // checkAppParamIdValidator(): ValidatorFn {\n    //   return (control: AbstractControl): { [key: string]: boolean } | null => {\n    //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n    //       this.AppParamFormPanel.controls['paramId'].setErrors(null);\n    //       this.AppParamFormPanel.clearAsyncValidators();\n    //       this.AppParamFormPanel.updateValueAndValidity();\n    //       this.apSrv.checkAppParamExists(control.value).subscribe((res: any) => {\n    //         if (res && res.text == \"true\") {\n    //           this.AppParamFormPanel.controls['paramId'].setErrors({ 'incorrect': true });\n    //           this.AppParamFormPanel.updateValueAndValidity();\n    //           return { 'incorrect': true };\n    //         }\n    //         else {\n    //           return null;\n    //         }\n    //       });\n    //       return null;\n    //     }\n    //     return null;\n    //   };\n    // }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.AppParamFormPanel.controls).forEach(key => {\n        let field = this.AppParamFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        appParamsId: this.AppParamFormPanel.controls.appParamsId.value,\n        paramId: this.AppParamFormPanel.controls.paramId.value,\n        paramValue: this.AppParamFormPanel.controls.paramValue.value,\n        description: this.AppParamFormPanel.controls.description.value,\n        isEditable: this.AppParamFormPanel.controls.isEditable.value\n      };\n      return records;\n    }\n    set value(value) {\n      if (value.isEditable === \"1\") {\n        // Check edit condition.\n        this.isEditable = true;\n      } else {\n        this.isEditable = false;\n      }\n      setTimeout(() => {\n        this.AppParamFormPanel.patchValue({\n          appParamsId: value.appParamsId,\n          paramId: value.paramId,\n          paramValue: value.paramValue,\n          description: value.description,\n          isEditable: value.isEditable\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.AppParamFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.AppParamFormPanel.valid ? null : {\n        AppParamFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddAppParamsComponent_Factory(t) {\n      return new (t || AddAppParamsComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.AppParamsService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddAppParamsComponent,\n      selectors: [[\"app-add-app-params\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddAppParamsComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddAppParamsComponent),\n        multi: true\n      }])],\n      decls: 20,\n      vars: 3,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"uppercase\", \"\", \"name\", \"paramId\", \"formControlName\", \"paramId\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"type\", \"text\", \"name\", \"paramValue\", \"formControlName\", \"paramValue\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"colspan\", \"2\", 2, \"width\", \"100%\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"512\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"]],\n      template: function AddAppParamsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Param Id\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 3)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Param Value\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 7)(16, \"div\", 3)(17, \"label\", 4);\n          i0.ɵɵtext(18, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.AppParamFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", !ctx.isEditable);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.UppercaseDirective, i5.TrimInputDirective]\n    });\n  }\n  return AddAppParamsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}