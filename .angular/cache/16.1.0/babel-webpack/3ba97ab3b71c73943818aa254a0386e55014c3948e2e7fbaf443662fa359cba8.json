{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/ui/Helpdesk/parts/services/parts.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../services/request-parts.service\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@ng-select/ng-select\";\nimport * as i7 from \"ng-zorro-antd/table\";\nimport * as i8 from \"../../../../../../../directive/numbers-only.directive\";\nimport * as i9 from \"primeng/button\";\nimport * as i10 from \"primeng/dialog\";\nimport * as i11 from \"../../../../../../common-components/part-details/modal/part-details.component\";\nfunction AddRequestPartsComponent_label_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 19);\n    i0.ɵɵtext(1, \"Part Code already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRequestPartsComponent_label_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorMsg, \"\");\n  }\n}\nfunction AddRequestPartsComponent_label_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMsg, \"\");\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"32vw\"\n  };\n};\nfunction AddRequestPartsComponent_p_dialog_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 20);\n    i0.ɵɵlistener(\"visibleChange\", function AddRequestPartsComponent_p_dialog_42_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.showDetails = $event);\n    });\n    i0.ɵɵelement(1, \"app-part-details\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(4, _c0));\n    i0.ɵɵproperty(\"visible\", ctx_r3.showDetails);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedPart\", ctx_r3.selectedPart);\n  }\n}\nexport let AddRequestPartsComponent = /*#__PURE__*/(() => {\n  class AddRequestPartsComponent {\n    constructor(partService, formBuilder, requestPartsSrv, enumsrv) {\n      this.partService = partService;\n      this.formBuilder = formBuilder;\n      this.requestPartsSrv = requestPartsSrv;\n      this.enumsrv = enumsrv;\n      this.subscriptions = [];\n      this.partsData = [];\n      this.errorMsg = '';\n      this.previousPartQnty = 0;\n      this.partExist = false;\n      this.previousPart = '';\n      this.showDetails = false;\n      this.enumConsumable = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumPartsData = [];\n      this.enumMeasurment = [];\n      this.enableDetailsBtn = false;\n      this.isRequestor = false;\n      this.isApprover = false;\n      this.isTechnician = false;\n      this.isSupervisor = false;\n      this.requiredQtyError = false;\n      this.actualQtyError = false;\n      this.isNew = false;\n      this.isView = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.requestPartsForm = this.formBuilder.group({\n        partId: [null, [Validators.required]],\n        AvalQuantity: [null],\n        reqQuantity: [null, [Validators.required, Validators.min(1)]],\n        requestPartId: [null],\n        requestId: [null],\n        dateAssigned: [null],\n        timeAssigned: [null],\n        actualQuantityUsed: [null],\n        unitOfMeasurement: [null],\n        addedBy: [null]\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.requestPartsForm.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadParts();\n      this.loadEnums();\n      if (this.isView) {\n        this.requestPartsForm.disable();\n      }\n    }\n    loadParts() {\n      this.partService.getAllParts().subscribe(res => {\n        if (res) {\n          this.partsData = res;\n        } else {\n          this.partsData = [];\n        }\n      });\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumPartsData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'parts'.toLocaleUpperCase());\n        this.enumConsumable = this.enumPartsData.filter(t => t.fieldName.toLocaleUpperCase() === 'consumable'.toLocaleUpperCase());\n        this.enumMeasurment = this.enumPartsData.filter(t => t.fieldName.toLocaleUpperCase() === 'unit_of_measurement'.toLocaleUpperCase());\n      }, error => {});\n    }\n    selectPartCode(event) {\n      this.enableDetailsBtn = true;\n      if (this.previousPart != event.partId) {\n        let requestId = this.requestId;\n        this.requestPartsSrv.checkPartExist(requestId, event.partId).subscribe(res => {\n          this.partExist = false;\n          if (res) {\n            this.partExist = true;\n          } else {\n            this.partExist = false;\n          }\n        });\n      }\n      setTimeout(() => {\n        this.requestPartsForm.patchValue({\n          AvalQuantity: event.qutOnHand,\n          unitOfMeasurement: event.unitOfMeasurement,\n          reqQuantity: null\n        });\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const toolsDetails = {\n        partId: this.requestPartsForm.controls.partId.value,\n        AvalQuantity: this.requestPartsForm.controls.AvalQuantity.value,\n        reqQuantity: this.requestPartsForm.controls.reqQuantity.value,\n        requestPartId: this.requestPartsForm.controls.requestPartId.value,\n        requestId: this.requestPartsForm.controls.requestId.value,\n        dateAssigned: this.requestPartsForm.controls.dateAssigned.value,\n        timeAssigned: this.requestPartsForm.controls.timeAssigned.value,\n        actualQuantityUsed: this.requestPartsForm.controls.actualQuantityUsed.value != null ? this.requestPartsForm.controls.actualQuantityUsed.value : 0,\n        addedBy: this.requestPartsForm.controls.addedBy.value\n      };\n      return toolsDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.requestPartsForm.patchValue({\n          partId: value.partId,\n          AvalQuantity: value.reqQuantity ? this.getAvalQuantity(value.partId) + parseInt(value.reqQuantity) : null,\n          reqQuantity: value.reqQuantity,\n          requestPartId: value.requestPartId,\n          requestId: value.requestId,\n          dateAssigned: value.dateAssigned,\n          timeAssigned: value.timeAssigned,\n          actualQuantityUsed: value.actualQuantityUsed != null ? value.actualQuantityUsed : 0,\n          unitOfMeasurement: value.partUnitOfMeasurement,\n          addedBy: value.addedBy\n        });\n        if (value.partId) {\n          this.enableDetailsBtn = true;\n          this.getSelectedPart(value.partId);\n        }\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    getAvalQuantity(partId) {\n      let selectedPart = this.partsData.find(t => t.partId === partId);\n      if (selectedPart) {\n        return selectedPart.qutOnHand;\n      }\n    }\n    getSelectedPart(partId) {\n      this.selectedPart = this.partsData.find(t => t.partId === partId);\n      if (this.selectedPart) {\n        return this.selectedPart;\n      }\n    }\n    changeReqQuantity(event, inputField) {\n      let userInput = event.target.value;\n      this.errorMsg = '';\n      let actlQty = this.requestPartsForm.controls.AvalQuantity.value;\n      if (actlQty - userInput < 0) {\n        this.errorMsg = `${inputField} can not be greater than Available Quantity.`;\n        inputField === 'Required Quantity' ? this.requiredQtyError = true : this.actualQtyError = true;\n      } else if (userInput != '' && userInput <= 0) {\n        this.errorMsg = `${inputField} can not be less than one`;\n        inputField === 'Required Quantity' ? this.requiredQtyError = true : this.actualQtyError = true;\n      } else {\n        this.errorMsg = '';\n        this.requiredQtyError = false;\n        this.actualQtyError = false;\n      }\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.requestPartsForm.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.requestPartsForm.valid ? null : {\n        requestPartsForm: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    showPartDetails() {\n      let selectedPart = this.getSelectedPart(this.requestPartsForm.controls.partId.value);\n      this.showDetails = true;\n    }\n    static #_ = this.ɵfac = function AddRequestPartsComponent_Factory(t) {\n      return new (t || AddRequestPartsComponent)(i0.ɵɵdirectiveInject(i1.PartsService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.RequestPartsService), i0.ɵɵdirectiveInject(i4.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRequestPartsComponent,\n      selectors: [[\"app-add-request-parts\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRequestPartsComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRequestPartsComponent),\n        multi: true\n      }])],\n      decls: 43,\n      vars: 17,\n      consts: [[\"autocomplete\", \"off\", 3, \"formGroup\"], [\"width\", \"100%\"], [\"colspan\", \"2\"], [2, \"display\", \"flex\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"partId\", \"bindLabel\", \"partCode\", \"bindValue\", \"partId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [2, \"display\", \"flex\", \"margin-top\", \"32px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-info-circle\", \"matTooltip\", \"View Part Details\", 1, \"p-button-rounded\", \"pull-right\", 3, \"disabled\", \"click\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"name\", \"unitOfMeasurement\", \"formControlName\", \"unitOfMeasurement\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"readonly\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"AvalQuantity\", \"formControlName\", \"AvalQuantity\", 1, \"form-control\", 3, \"readOnly\"], [\"width\", \"50%\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"reqQuantity\", \"formControlName\", \"reqQuantity\", 1, \"form-control\", 3, \"readonly\", \"change\"], [1, \"input-label-custom\", 3, \"hidden\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"actualQuantityUsed\", \"formControlName\", \"actualQuantityUsed\", 1, \"form-control\", 3, \"change\"], [\"header\", \"Part Details\", 3, \"visible\", \"style\", \"visibleChange\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [\"header\", \"Part Details\", 3, \"visible\", \"visibleChange\"], [3, \"selectedPart\"]],\n      template: function AddRequestPartsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Part Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function AddRequestPartsComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.selectPartCode($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\", 7)(10, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function AddRequestPartsComponent_Template_button_click_10_listener() {\n            return ctx.showPartDetails();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(11, \"tr\")(12, \"td\", 2);\n          i0.ɵɵtemplate(13, AddRequestPartsComponent_label_13_Template, 2, 0, \"label\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\")(17, \"div\", 10)(18, \"label\", 11);\n          i0.ɵɵtext(19, \"Unit of Measurement\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"ng-select\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"td\")(22, \"div\", 10)(23, \"label\", 5);\n          i0.ɵɵtext(24, \"Available Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"input\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(26, \"tr\")(27, \"td\", 14)(28, \"div\", 10)(29, \"label\", 5);\n          i0.ɵɵtext(30, \"Required Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"input\", 15);\n          i0.ɵɵlistener(\"change\", function AddRequestPartsComponent_Template_input_change_31_listener($event) {\n            return ctx.changeReqQuantity($event, \"Required Quantity\");\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(32, \"td\", 14)(33, \"div\", 16)(34, \"label\", 5);\n          i0.ɵɵtext(35, \"Actual Quantity Used\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"input\", 17);\n          i0.ɵɵlistener(\"change\", function AddRequestPartsComponent_Template_input_change_36_listener($event) {\n            return ctx.changeReqQuantity($event, \"Actual Quantity\");\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(37, \"tr\")(38, \"td\", 14);\n          i0.ɵɵtemplate(39, AddRequestPartsComponent_label_39_Template, 2, 1, \"label\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"td\", 14);\n          i0.ɵɵtemplate(41, AddRequestPartsComponent_label_41_Template, 2, 1, \"label\", 9);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(42, AddRequestPartsComponent_p_dialog_42_Template, 2, 5, \"p-dialog\", 18);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.requestPartsForm);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.partsData)(\"searchable\", true)(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.enableDetailsBtn);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.partExist);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumMeasurment)(\"readonly\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"readOnly\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"hidden\", ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMsg.length > 0 && ctx.requiredQtyError);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMsg.length > 0 && ctx.actualQtyError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showDetails);\n        }\n      },\n      dependencies: [i5.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i6.NgSelectComponent, i7.NzTableCellDirective, i7.NzTrDirective, i8.NumbersOnlyDirective, i9.ButtonDirective, i10.Dialog, i11.PartDetailsComponent],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;margin-right:15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.mat-card[_ngcontent-%COMP%]{border-radius:0;margin-top:2px}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}[_nghost-%COMP%]     .p-button.p-button-icon-only.p-button-rounded{width:16px}[_nghost-%COMP%]     .p-button{height:16px!important}\"]\n    });\n  }\n  return AddRequestPartsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}