{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MessageService } from 'primeng/api';\nimport { forkJoin } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/room-teams.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/table\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/dialog\";\nimport * as i9 from \"primeng/toast\";\nimport * as i10 from \"primeng/confirmdialog\";\nimport * as i11 from \"ng-zorro-antd/table\";\nimport * as i12 from \"../../../../directive/numbers-only.directive\";\nfunction AssignRoomsComponent_ng_template_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Available Rooms for \", ctx_r7.presentTeamId, \"\");\n  }\n}\nfunction AssignRoomsComponent_ng_template_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Available Rooms\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AssignRoomsComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtemplate(2, AssignRoomsComponent_ng_template_2_div_2_Template, 3, 1, \"div\", 18);\n    i0.ɵɵtemplate(3, AssignRoomsComponent_ng_template_2_ng_template_3_Template, 2, 0, \"ng-template\", null, 19, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_2_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onAssign());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const _r8 = i0.ɵɵreference(4);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.presentTeamId.length > 0)(\"ngIfElse\", _r8);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r0.selectedScreens.length > 0));\n  }\n}\nfunction AssignRoomsComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 21);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 22)(4, \"div\", 23)(5, \"div\", 24)(6, \"p\", 25);\n    i0.ɵɵtext(7, \"Building Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 26);\n    i0.ɵɵelement(9, \"p-sortIcon\", 27)(10, \"p-columnFilter\", 28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 29)(12, \"div\", 23)(13, \"div\", 24)(14, \"p\", 25);\n    i0.ɵɵtext(15, \"Floor Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 26);\n    i0.ɵɵelement(17, \"p-sortIcon\", 30)(18, \"p-columnFilter\", 31);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"th\", 32)(20, \"div\", 23)(21, \"div\", 24)(22, \"p\", 25);\n    i0.ɵɵtext(23, \"Room Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 26);\n    i0.ɵɵelement(25, \"p-sortIcon\", 33)(26, \"p-columnFilter\", 34);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(27, \"th\");\n    i0.ɵɵtext(28, \" Occupied Space (%) \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"th\");\n    i0.ɵɵtext(30, \" Available Space (%) \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AssignRoomsComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 35)(1, \"td\", 21);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const room_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", room_r12);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", room_r12);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.blId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.flId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.rmId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(100 - room_r12.availability);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r12.availability);\n  }\n}\nfunction AssignRoomsComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nfunction AssignRoomsComponent_tr_17_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"The room[\", ctx_r14.minAvailRmid, \"] has only \", ctx_r14.minAvailibility, \"% available space\");\n  }\n}\nfunction AssignRoomsComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 37);\n    i0.ɵɵtemplate(2, AssignRoomsComponent_tr_17_label_2_Template, 2, 2, \"label\", 38);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r5.assignRoom.controls[\"occupancyValue\"] == null ? null : ctx_r5.assignRoom.controls[\"occupancyValue\"].errors.required));\n  }\n}\nfunction AssignRoomsComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 40)(2, \"div\")(3, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_18_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.saveOccupancyValue());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\")(5, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function AssignRoomsComponent_ng_template_18_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.cancelOccupancyValue());\n    });\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r6.assignRoom.valid);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nconst _c1 = function () {\n  return {\n    width: \"25vw\"\n  };\n};\nexport class AssignRoomsComponent {\n  constructor(rmteamsrv, authSrv, formBuilder, messageService) {\n    this.rmteamsrv = rmteamsrv;\n    this.authSrv = authSrv;\n    this.formBuilder = formBuilder;\n    this.messageService = messageService;\n    this.roomsData = [];\n    this.rowCount = UtilConstant.ROW_COUNT;\n    this.allRoomsData = [];\n    this.allRmTeamsData = [];\n    this.selectedScreens = [];\n    this.displayAssignScreen = false;\n    this.assignSgPanels = new EventEmitter();\n    this.presentTeamId = '';\n    this.minAvailibility = 0;\n    this.minAvailRmid = '';\n    this.assignRoom = this.formBuilder.group({\n      occupancyValue: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.compId = this.authSrv.getLoggedInUserCompId();\n  }\n  onAssign() {\n    this.assignRoom.patchValue({\n      occupancyValue: null\n    });\n    this.minAvailibility = this.selectedScreens[0].availability;\n    this.minAvailRmid = this.selectedScreens[0].rmId;\n    this.selectedScreens.forEach(screen => {\n      if (screen.availability < this.minAvailibility) {\n        this.minAvailibility = screen.availability;\n        this.minAvailRmid = screen.rmId;\n      }\n    });\n    this.displayAssignScreen = true;\n  }\n  loadRecords(teamId) {\n    this.allRoomsData = [];\n    this.allRmTeamsData = [];\n    this.roomsData = [];\n    this.selectedScreens = [];\n    const getunassignedrooms = this.rmteamsrv.getUnAssignedRooms(teamId);\n    const getallrmteams = this.rmteamsrv.getAllRmTeams();\n    forkJoin([getunassignedrooms, getallrmteams]).subscribe(([result1, result2]) => {\n      console.log('Backend calls completed:', result1, result2);\n      if (result1) {\n        result1.forEach(rm => {\n          this.allRoomsData.push({\n            blId: rm.blId,\n            flId: rm.flId,\n            rmId: rm.rmId,\n            availability: 100,\n            teamId: teamId\n          });\n        });\n      }\n      if (result2) {\n        this.allRmTeamsData = result2;\n      }\n      this.allRoomsData.forEach(rm => {\n        const matchforavail = this.allRmTeamsData.filter(obj1 => rm.blId == obj1.blId && rm.flId == obj1.flId && rm.rmId == obj1.rmId);\n        if (matchforavail.length > 0) {\n          matchforavail.forEach(room => {\n            const checkroom = this.allRoomsData.find(obj1 => room.blId == obj1.blId && room.flId == obj1.flId && room.rmId == obj1.rmId);\n            const index = this.allRoomsData.indexOf(checkroom);\n            if (index !== -1) {\n              this.allRoomsData[index].availability -= room.allocation;\n            }\n          });\n        }\n      });\n      this.roomsData = this.allRoomsData;\n    });\n  }\n  checkOccupancyValue(control) {\n    if (control.value !== undefined && control.value != null && control.value.length > 0 && this.displayAssignScreen) {\n      this.assignRoom.controls['occupancyValue'].setErrors(null);\n      this.assignRoom.clearAsyncValidators();\n      this.assignRoom.updateValueAndValidity();\n      if (parseInt(control.value) > this.minAvailibility) {\n        this.assignRoom.controls['occupancyValue'].setErrors({\n          'incorrect': true\n        });\n        this.assignRoom.updateValueAndValidity();\n        return {\n          'incorrect': true\n        };\n      } else {\n        return null;\n      }\n    }\n    return null;\n  }\n  saveOccupancyValue() {\n    this.messageService.clear();\n    const saveRequests = [];\n    this.selectedScreens.forEach(screen => {\n      let data = {\n        compId: this.compId,\n        blId: screen.blId,\n        flId: screen.flId,\n        rmId: screen.rmId,\n        teamId: screen.teamId,\n        allocation: this.assignRoom.controls.occupancyValue.value\n      };\n      saveRequests.push(this.rmteamsrv.saveRmTeam(data));\n    });\n    forkJoin(saveRequests).subscribe(res => {\n      this.displayAssignScreen = false;\n      this.messageService.add({\n        key: 'UsgGrid',\n        severity: 'success',\n        summary: 'Team assigned successfully',\n        detail: 'Team assigned successfully'\n      });\n      this.refreshPanel();\n    });\n  }\n  cancelOccupancyValue() {\n    this.displayAssignScreen = false;\n    this.assignRoom.patchValue({\n      occupancyValue: null\n    });\n  }\n  refreshPanel() {\n    this.assignSgPanels.emit(true);\n  }\n  limitToThreeDigits(event) {\n    const input = event.target.value;\n    if (input.length > 3) {\n      this.assignRoom.patchValue({\n        occupancyValue: input.slice(0, 3)\n      });\n    }\n  }\n  static #_ = this.ɵfac = function AssignRoomsComponent_Factory(t) {\n    return new (t || AssignRoomsComponent)(i0.ɵɵdirectiveInject(i1.RmTeamsService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.MessageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AssignRoomsComponent,\n    selectors: [[\"app-assign-rooms\"]],\n    inputs: {\n      presentTeamId: \"presentTeamId\"\n    },\n    outputs: {\n      assignSgPanels: \"assignSgPanels\"\n    },\n    features: [i0.ɵɵProvidersFeature([MessageService])],\n    decls: 19,\n    vars: 19,\n    consts: [[1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"400px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"selection\", \"rowHover\", \"scrollable\", \"selectionChange\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"UsgGrid\", \"position\", \"top-right\"], [\"key\", \"positionDialog\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"header\", \"Assign Room\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"occupancyValue\", \"formControlName\", \"occupancyValue\", \"NumbersOnly\", \"\", 1, \"form-control\", 3, \"blur\", \"input\"], [\"occupancyValue\", \"\"], [4, \"ngIf\"], [1, \"d-flex\", \"flex-row\"], [2, \"flex\", \"auto\"], [4, \"ngIf\", \"ngIfElse\"], [\"noTeam\", \"\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Assign\", \"icon\", \"pi pi-plus\", 1, \"p-button-primary\", \"p-button-sm\", \"p-mr-2\", 3, \"disabled\", \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"blId\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"blId\"], [\"type\", \"text\", \"field\", \"blId\", \"display\", \"menu\"], [\"pSortableColumn\", \"flId\"], [\"field\", \"flId\"], [\"type\", \"text\", \"field\", \"flId\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmId\"], [\"field\", \"rmId\"], [\"type\", \"text\", \"field\", \"rmId\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [3, \"value\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [2, \"display\", \"flex\", \"justify-content\", \"center\", \"margin-top\", \"20px\", \"width\", \"100%\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", \"p-button-sm\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"]],\n    template: function AssignRoomsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r18 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-table\", 1);\n        i0.ɵɵlistener(\"selectionChange\", function AssignRoomsComponent_Template_p_table_selectionChange_1_listener($event) {\n          return ctx.selectedScreens = $event;\n        });\n        i0.ɵɵtemplate(2, AssignRoomsComponent_ng_template_2_Template, 7, 3, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, AssignRoomsComponent_ng_template_3_Template, 31, 0, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, AssignRoomsComponent_ng_template_4_Template, 13, 7, \"ng-template\", 4);\n        i0.ɵɵtemplate(5, AssignRoomsComponent_ng_template_5_Template, 3, 1, \"ng-template\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(6, \"p-toast\", 6)(7, \"p-confirmDialog\", 7);\n        i0.ɵɵelementStart(8, \"p-dialog\", 8);\n        i0.ɵɵlistener(\"visibleChange\", function AssignRoomsComponent_Template_p_dialog_visibleChange_8_listener($event) {\n          return ctx.displayAssignScreen = $event;\n        });\n        i0.ɵɵelementStart(9, \"form\", 9)(10, \"table\", 10)(11, \"tr\")(12, \"div\", 11)(13, \"label\", 12);\n        i0.ɵɵtext(14, \"Required Space (%)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 13, 14);\n        i0.ɵɵlistener(\"blur\", function AssignRoomsComponent_Template_input_blur_15_listener() {\n          i0.ɵɵrestoreView(_r18);\n          const _r4 = i0.ɵɵreference(16);\n          return i0.ɵɵresetView(ctx.checkOccupancyValue(_r4));\n        })(\"input\", function AssignRoomsComponent_Template_input_input_15_listener($event) {\n          return ctx.limitToThreeDigits($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(17, AssignRoomsComponent_tr_17_Template, 3, 1, \"tr\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, AssignRoomsComponent_ng_template_18_Template, 6, 1, \"ng-template\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.roomsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(17, _c0))(\"selection\", ctx.selectedScreens)(\"rowHover\", false)(\"scrollable\", true);\n        i0.ɵɵadvance(7);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(18, _c1));\n        i0.ɵɵproperty(\"visible\", ctx.displayAssignScreen)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.assignRoom);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (ctx.assignRoom.controls[\"occupancyValue\"] == null ? null : ctx.assignRoom.controls[\"occupancyValue\"].errors) && ctx.assignRoom.controls[\"occupancyValue\"].dirty);\n      }\n    },\n    dependencies: [i5.NgIf, i4.PrimeTemplate, i6.Table, i6.SortableColumn, i6.SelectableRow, i6.SortIcon, i6.TableCheckbox, i6.TableHeaderCheckbox, i6.ColumnFilter, i7.ButtonDirective, i8.Dialog, i9.Toast, i10.ConfirmDialog, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i11.NzTableCellDirective, i11.NzThMeasureDirective, i11.NzTrDirective, i12.NumbersOnlyDirective],\n    styles: [\"[_nghost-%COMP%]     .p-dialog .p-dialog-header {\\n  background-color: #879cc9;\\n  color: black;\\n  padding-left: 10px;\\n  font-weight: normal;\\n  margin-bottom: 0px;\\n  height: 10px !important;\\n}\\n\\n[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header .p-dialog-content {\\n  align-items: center;\\n  background-color: #f9fcfc;\\n  display: flex;\\n  padding: 10px;\\n}\\n\\n[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header {\\n  align-items: center;\\n  background-color: #f9fcfc;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvcm9vbS10ZWFtcy93aWRnZXRzL2Fzc2lnbi1yb29tcy9hc3NpZ24tcm9vbXMuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvc2Nzcy9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDSSx5QkNPSztFRE5MLFlBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSx1QkFBQTtBQURKOztBQUdBO0VBQ0ksbUJBQUE7RUFDQSx5QkFBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0FBQUo7O0FBRUE7RUFDSSxtQkFBQTtFQUNBLHlCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0ICcvc3JjL3Njc3MvdmFyaWFibGVzJztcblxuOmhvc3QgOjpuZy1kZWVwIC5wLWRpYWxvZyAucC1kaWFsb2ctaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkdG9vbGJhcjtcbiAgICBjb2xvcjogYmxhY2s7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgIGhlaWdodDogMTBweCAhaW1wb3J0YW50O1xufVxuOmhvc3QgOjpuZy1kZWVwIC5wLWNvbmZpcm0tZGlhbG9nIC5wLWRpYWxvZy1oZWFkZXIgLnAtZGlhbG9nLWNvbnRlbnQge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZmNmYztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBhZGRpbmc6IDEwcHg7XG59XG46aG9zdCA6Om5nLWRlZXAgLnAtY29uZmlybS1kaWFsb2cgLnAtZGlhbG9nLWhlYWRlciAge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZmNmYztcbiAgICBcbn0iLCIvLyBUeXBvZ3JhcGh5IHZhcmlhYmxlc1xuJGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcbiR1cmw6ICdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90byZkaXNwbGF5PXN3YXAnO1xuXG5cbi8vIFRoZW1pbmcgdmFyaWFibGVcbiRwcmltYXJ5LWNvbG9yOiAjMGI5ZTZkO1xuJHdoaXRlOiAjZmZmZmZmO1xuJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTtcbiR0ZXh0LXNpemU6MTJweDtcbiR0b29sYmFyOiM4NzljYzk7XG4kc2lkZS1uYXY6IzM0M2E0MDtcbiRtYW5kYXRvcnlGaWVsZDojZTAxNTE1O1xuJHRhYkJnQ29sb3I6ICM4NzljYzk7XG4kdGFiQWN0aXZlQmdDb2xvcjogI2ZmZmZmZjtcbiR0YWJIZWlnaHQ6IDIuMzU7XG4kdGFiV2lkdGg6IDgwcHg7XG4kdGFiQm9yZGVyUmFkaXVzOiA2cHggNnB4IDAgMDtcbiR0YWJCb3JkZXJCb3R0b206IDNweCBzb2xpZCAjODc5Y2M5ICFpbXBvcnRhbnQ7XG4kdGFiRm9udENvbG9yOiAjZmZmZmZmO1xuJHRhYlBhbmVCYWNrZ3JvdW5kQ29sb3I6ICNGMEYyRjU7XG4kQWN0aXZlVGFiRm9udENvbG9yOiAjMDAwMDAwO1xuXG4kdGFibGV0UG90cmFpdE1pbldpZHRoOjYwMHB4IDtcbiR0YWJsZXRQb3RyYWl0TWF4V2lkdGg6IDk1OXB4O1xuJHRhYmxldExhbmRzY2FwZU1pbldpZHRoOiA5NjBweDtcbiR0YWJsZXRMYW5kc3BhY2VNYXhXaWR0aDogMTQzOXB4O1xuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","UtilConstant","MessageService","forkJoin","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r7","presentTeamId","ɵɵtemplate","AssignRoomsComponent_ng_template_2_div_2_Template","AssignRoomsComponent_ng_template_2_ng_template_3_Template","ɵɵtemplateRefExtractor","ɵɵlistener","AssignRoomsComponent_ng_template_2_Template_button_click_6_listener","ɵɵrestoreView","_r11","ctx_r10","ɵɵnextContext","ɵɵresetView","onAssign","ɵɵproperty","ctx_r0","length","_r8","selectedScreens","ɵɵelement","room_r12","ɵɵtextInterpolate","blId","flId","rmId","availability","ɵɵattribute","ɵɵtextInterpolate2","ctx_r14","minAvailRmid","minAvailibility","AssignRoomsComponent_tr_17_label_2_Template","ctx_r5","assignRoom","controls","errors","required","AssignRoomsComponent_ng_template_18_Template_button_click_3_listener","_r16","ctx_r15","saveOccupancyValue","AssignRoomsComponent_ng_template_18_Template_button_click_5_listener","ctx_r17","cancelOccupancyValue","ctx_r6","valid","AssignRoomsComponent","constructor","rmteamsrv","authSrv","formBuilder","messageService","roomsData","rowCount","ROW_COUNT","allRoomsData","allRmTeamsData","displayAssignScreen","assignSgPanels","group","occupancyValue","ngOnInit","compId","getLoggedInUserCompId","patchValue","forEach","screen","loadRecords","teamId","getunassignedrooms","getUnAssignedRooms","getallrmteams","getAllRmTeams","subscribe","result1","result2","console","log","rm","push","matchforavail","filter","obj1","room","checkroom","find","index","indexOf","allocation","checkOccupancyValue","control","value","undefined","setErrors","clearAsyncValidators","updateValueAndValidity","parseInt","clear","saveRequests","data","saveRmTeam","res","add","key","severity","summary","detail","refreshPanel","emit","limitToThreeDigits","event","input","target","slice","_","ɵɵdirectiveInject","i1","RmTeamsService","i2","AuthService","i3","UntypedFormBuilder","i4","_2","selectors","inputs","outputs","features","ɵɵProvidersFeature","decls","vars","consts","template","AssignRoomsComponent_Template","rf","ctx","AssignRoomsComponent_Template_p_table_selectionChange_1_listener","$event","AssignRoomsComponent_ng_template_2_Template","AssignRoomsComponent_ng_template_3_Template","AssignRoomsComponent_ng_template_4_Template","AssignRoomsComponent_ng_template_5_Template","AssignRoomsComponent_Template_p_dialog_visibleChange_8_listener","AssignRoomsComponent_Template_input_blur_15_listener","_r18","_r4","ɵɵreference","AssignRoomsComponent_Template_input_input_15_listener","AssignRoomsComponent_tr_17_Template","AssignRoomsComponent_ng_template_18_Template","ɵɵpureFunction0","_c0","ɵɵstyleMap","_c1","dirty"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/room-teams/widgets/assign-rooms/assign-rooms.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/room-teams/widgets/assign-rooms/assign-rooms.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { RmTeamsService } from '../../service/room-teams.service';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MessageService } from 'primeng/api';\nimport { forkJoin } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-assign-rooms',\n  templateUrl: './assign-rooms.component.html',\n  styleUrls: ['./assign-rooms.component.scss'],\n  providers: [MessageService]\n})\nexport class AssignRoomsComponent implements OnInit {\n  roomsData:any[]=[];\n  rowCount: number = UtilConstant.ROW_COUNT;\n  allRoomsData :any[]=[];\n  allRmTeamsData :any[]=[];\n  compId!: number;\n  selectedScreens:any[]=[];\n  displayAssignScreen:boolean = false;\n  assignRoom!: UntypedFormGroup;\n  @Output() assignSgPanels= new EventEmitter();\n  @Input() presentTeamId :string ='';\n  minAvailibility:number=0;\n  minAvailRmid:string ='';\n  constructor(\n    private rmteamsrv:RmTeamsService,\n    private authSrv: AuthService,\n    private formBuilder: UntypedFormBuilder,\n    private messageService: MessageService,\n  ) { \n    this.assignRoom = this.formBuilder.group({\n      occupancyValue: [null,[Validators.required]],\n    })\n  }\n\n  ngOnInit(): void {\n    this.compId = this.authSrv.getLoggedInUserCompId();\n  }\n\n  onAssign(){\n    this.assignRoom.patchValue({\n      occupancyValue: null,\n    })\n    this.minAvailibility = this.selectedScreens[0].availability;\n    this.minAvailRmid = this.selectedScreens[0].rmId;\n    this.selectedScreens.forEach((screen:any)=>{\n      if(screen.availability<this.minAvailibility){\n        this.minAvailibility = screen.availability;\n        this.minAvailRmid = screen.rmId;\n      }\n    })\n    this.displayAssignScreen = true;\n  }\n\n  loadRecords(teamId:any){\n    this.allRoomsData=[];\n    this.allRmTeamsData=[];\n    this.roomsData=[];\n    this.selectedScreens=[];\n    const getunassignedrooms = this.rmteamsrv.getUnAssignedRooms(teamId);\n    const getallrmteams = this.rmteamsrv.getAllRmTeams();\n    forkJoin([getunassignedrooms, getallrmteams]).subscribe(\n      ([result1, result2]) => {\n        console.log('Backend calls completed:', result1, result2);\n        if(result1){\n          result1.forEach((rm:any)=>{\n            this.allRoomsData.push({blId:rm.blId,flId:rm.flId,rmId:rm.rmId,availability:100,teamId:teamId})\n          })\n        }\n        if(result2){\n          this.allRmTeamsData = result2;\n        }\n        this.allRoomsData.forEach((rm:any)=>{\n          const matchforavail = this.allRmTeamsData.filter((obj1: any) =>\n            rm.blId == obj1.blId && rm.flId == obj1.flId && rm.rmId == obj1.rmId\n          );\n          if(matchforavail.length>0){\n            matchforavail.forEach((room:any)=>{\n              const checkroom = this.allRoomsData.find((obj1:any)=>room.blId==obj1.blId && room.flId==obj1.flId && room.rmId==obj1.rmId)\n              const index = this.allRoomsData.indexOf(checkroom);\n              if (index !== -1) {\n                this.allRoomsData[index].availability -= room.allocation;\n              }\n            })\n          }\n        })\n        this.roomsData = this.allRoomsData;\n      }\n    );\n  }\n\n   checkOccupancyValue(control:any){\n    if (control.value !== undefined && control.value != null && control.value.length > 0 && this.displayAssignScreen ) {\n      this.assignRoom.controls['occupancyValue'].setErrors(null);\n      this.assignRoom.clearAsyncValidators();\n      this.assignRoom.updateValueAndValidity();\n      if(parseInt(control.value)> this.minAvailibility){\n        this.assignRoom.controls['occupancyValue'].setErrors({ 'incorrect': true });\n          this.assignRoom.updateValueAndValidity();\n          return { 'incorrect': true };\n      }\n      else{\n        return null;\n      }\n    }\n    return null;\n  }\n\n  saveOccupancyValue(){\n    this.messageService.clear();\n    const saveRequests:any[] = [];\n    this.selectedScreens.forEach((screen:any)=>{\n      let data ={\n        compId:this.compId,\n        blId:screen.blId,\n        flId:screen.flId,\n        rmId:screen.rmId,\n        teamId:screen.teamId,\n        allocation:this.assignRoom.controls.occupancyValue.value\n      }\n      saveRequests.push(this.rmteamsrv.saveRmTeam(data));\n    })\n    forkJoin(saveRequests)\n      .subscribe((res:any[])=>{\n        this.displayAssignScreen = false;\n        this.messageService.add({ key: 'UsgGrid', severity: 'success', summary: 'Team assigned successfully', detail: 'Team assigned successfully' });\n        this.refreshPanel();\n    });\n  }\n\n  cancelOccupancyValue(){\n    this.displayAssignScreen = false;\n    this.assignRoom.patchValue({\n      occupancyValue: null,\n    })\n  }\n\n  refreshPanel() {\n    this.assignSgPanels.emit(true);\n  }\n\n  limitToThreeDigits(event:any){\n    const input = event.target.value ;\n    if(input.length>3){\n      this.assignRoom.patchValue({\n        occupancyValue: input.slice(0,3),\n      })\n    }\n  }\n\n}\n","<div class=\"card\">\n    <p-table [value]=\"roomsData\" [paginator]=\"true\" [rows]=\"rowCount\" [showCurrentPageReport]=\"true\"\n        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\" [rowsPerPageOptions]=\"[5,10,25]\"\n        [(selection)]=\"selectedScreens\" styleClass=\"p-datatable-responsive-demo p-datatable-gridlines\"\n        [rowHover]=\"false\" [scrollable]=\"true\" scrollDirection=\"both\" scrollHeight=\"400px\">\n        <ng-template pTemplate=\"caption\">\n            <div class=\"d-flex flex-row\">\n                <div style=\"flex: auto;\">\n                    <div *ngIf=\"presentTeamId.length>0; else noTeam\">\n                        <h4>Available Rooms for {{presentTeamId}}</h4>\n                    </div>\n                    <ng-template #noTeam>\n                        <h4>Available Rooms</h4>\n                    </ng-template>\n                </div>\n                <div>\n                    <button pButton pRipple label=\"Assign\" icon=\"pi pi-plus\" class=\"p-button-primary p-button-sm p-mr-2\"\n                        (click)=\"onAssign()\" [disabled]=\"!(selectedScreens.length>0)\"></button>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template pTemplate=\"header\">\n            <tr>\n                <th style=\"width: 4rem\">\n                    <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\n                </th>\n                <th pSortableColumn=\"blId\">\n                    <div class=\"grid-header-column\">\n                        <div class=\"grid-header-label\">\n                            <p class=\"grid-label-paragraph\">Building Code</p>\n                        </div>\n                        <div class=\"grid-sort-icon\">\n                            <p-sortIcon field=\"blId\"></p-sortIcon>\n                            <p-columnFilter type=\"text\" field=\"blId\" display=\"menu\"></p-columnFilter>\n                        </div>\n                    </div>\n                </th>\n                <th pSortableColumn=\"flId\">\n                    <div class=\"grid-header-column\">\n                        <div class=\"grid-header-label\">\n                            <p class=\"grid-label-paragraph\">Floor Code</p>\n                        </div>\n                        <div class=\"grid-sort-icon\">\n                            <p-sortIcon field=\"flId\"></p-sortIcon>\n                            <p-columnFilter type=\"text\" field=\"flId\" display=\"menu\"></p-columnFilter>\n                        </div>\n                    </div>\n                </th>\n                <th pSortableColumn=\"rmId\">\n                    <div class=\"grid-header-column\">\n                        <div class=\"grid-header-label\">\n                            <p class=\"grid-label-paragraph\">Room Code</p>\n                        </div>\n                        <div class=\"grid-sort-icon\">\n                            <p-sortIcon field=\"rmId\"></p-sortIcon>\n                            <p-columnFilter type=\"text\" field=\"rmId\" display=\"menu\"></p-columnFilter>\n                        </div>\n                    </div>\n                </th>\n                <th>\n                    Occupied Space (%)\n                </th>\n                <th>\n                    Available Space (%)\n                </th>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-room>\n            <tr [pSelectableRow]=\"room\">\n                <td style=\"width: 4rem\">\n                    <p-tableCheckbox [value]=\"room\"></p-tableCheckbox>\n                </td>\n                <td>{{room.blId}}</td>\n                <td>{{room.flId}}</td>\n                <td>{{room.rmId}}</td>\n                <td>{{100-room.availability}}</td>\n                <td>{{room.availability}}</td>\n            </tr>\n        </ng-template>\n        <ng-template pTemplate=\"emptymessage\" let-columns>\n            <tr>\n                <td [attr.colspan]=\"3\">\n                    No records found\n                </td>\n            </tr>\n        </ng-template>\n    </p-table>\n</div>\n<p-toast key=\"UsgGrid\" position=\"top-right\"></p-toast>\n<p-confirmDialog key='positionDialog' header=\"Confirmation\" icon=\"pi pi-exclamation-triangle\"></p-confirmDialog>\n<p-dialog header=\"Assign Room\" [(visible)]=\"displayAssignScreen\" [modal]=\"true\" [style]=\"{width: '25vw'}\"\n    [maximizable]=\"true\" [draggable]=\"false\" [resizable]=\"false\">\n    <form [formGroup]=\"assignRoom\">\n        <table width=\"100%\">\n            <!-- <tr *ngIf=\"selectedRoom\" style=\"font-size: 1.2rem;margin-top:5px;margin-bottom:5px;\">\n                Building Code : {{selectedRoom.blId}}\n            </tr>\n            <tr *ngIf=\"selectedRoom\" style=\"font-size: 1.2rem;margin-top:5px;margin-bottom:5px;\">\n                Floor Code : {{selectedRoom.flId}}\n            </tr>\n            <tr *ngIf=\"selectedRoom\" style=\"font-size: 1.2rem;margin-top:5px;margin-bottom:5px;\">\n                Room Code : {{selectedRoom.rmId}}\n            <tr *ngIf=\"selectedRoom\" style=\"font-size: 1.2rem;margin-top:5px;margin-bottom:5px;\">\n                Available Space (%):{{selectedRoom.availability}}\n            </tr>\n            <tr *ngIf=\"selectedRoom\" style=\"font-size: 1.2rem;margin-top:5px;margin-bottom:5px;\">\n                Occupied Space (%):{{100-selectedRoom.availability}}\n            </tr> -->\n            <tr>\n                <!-- <div class=\"input-label-custom \" style=\"padding:0px !important;margin-top:20px; display:flex;align-items: center;\">\n                    <div>\n                        <label class='form-field-lable control-label' style=\"font-size: 1.2rem;\">Required Space (%)\n                        </label>\n                    </div>\n                    <div>\n                        <input type=\"text\" class=\"form-control\" name=\"occupancyValue\" formControlName=\"occupancyValue\"\n                            (blur)=\"checkOccupancyValue(occupancyValue)\" (input)=\"limitToThreeDigits($event)\"\n                            #occupancyValue NumbersOnly>\n                    </div>\n                </div> -->\n\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable control-label'>Required Space (%)</label>\n                    <input type=\"text\" class=\"form-control\"  name=\"occupancyValue\"  formControlName=\"occupancyValue\"\n                    (blur)=\"checkOccupancyValue(occupancyValue)\" (input)=\"limitToThreeDigits($event)\" #occupancyValue NumbersOnly>\n                </div>\n            </tr>\n            <tr *ngIf=\"(assignRoom.controls['occupancyValue']?.errors && assignRoom.controls['occupancyValue'].dirty)\">\n                <td style=\"width:25%\">\n                    <label *ngIf=\"!assignRoom.controls['occupancyValue']?.errors.required\" class='form-field-lable'\n                        style=\"color:red;\">The room[{{minAvailRmid}}] has only {{minAvailibility}}% available\n                        space</label>\n\n                </td>\n            </tr>\n        </table>\n    </form>\n    <ng-template pTemplate=\"caption\">\n        <div class=\"d-flex flex-row\">\n            <div style=\"display: flex; justify-content: center; margin-top: 20px;width:100%\">\n                <div>\n                    <button pButton pRipple label=\"Save\" icon=\"pi pi-check\" class=\"p-button-primary p-button-sm\"\n                        [disabled]=\"!assignRoom.valid\" (click)=\"saveOccupancyValue()\"></button>\n                </div>\n                <div>\n                    <button pButton pRipple label=\"Cancel\" class=\"p-button-primary p-button-sm\" style=\"margin-left:8px\"\n                        (click)=\"cancelOccupancyValue()\"></button>\n                </div>\n            </div>\n        </div>\n    </ng-template>\n</p-dialog>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}