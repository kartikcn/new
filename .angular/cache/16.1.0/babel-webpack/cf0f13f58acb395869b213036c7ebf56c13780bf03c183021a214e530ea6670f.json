{"ast":null,"code":"import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Directive, Optional, Input, Host, ContentChild, SkipSelf, NgModule } from '@angular/core';\nimport * as i6 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i4$1 from 'ng-zorro-antd/tooltip';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { AbstractControl, NgModel, FormControlName, FormControlDirective, NgControl } from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter, map, takeUntil, startWith, tap } from 'rxjs/operators';\nimport { helpMotion } from 'ng-zorro-antd/core/animation';\nimport * as i4 from 'ng-zorro-antd/core/form';\nimport { NzFormStatusService } from 'ng-zorro-antd/core/form';\nimport { InputBoolean, toBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2$1 from 'ng-zorro-antd/i18n';\nimport { __decorate } from 'tslib';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/** should add nz-row directive to host, track https://github.com/angular/angular/issues/8785 **/\nconst _c0 = [\"*\"];\nfunction NzFormControlComponent_div_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.innerTip);\n  }\n}\nconst _c1 = function (a0) {\n  return [a0];\n};\nconst _c2 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction NzFormControlComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5);\n    i0.ɵɵtemplate(2, NzFormControlComponent_div_3_ng_container_2_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@helpMotion\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c1, \"ant-form-item-explain-\" + ctx_r0.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r0.innerTip)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c2, ctx_r0.validateControl));\n  }\n}\nfunction NzFormControlComponent_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.nzExtra);\n  }\n}\nfunction NzFormControlComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, NzFormControlComponent_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r1.nzExtra);\n  }\n}\nfunction NzFormLabelComponent_span_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tooltipIconType_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzType\", tooltipIconType_r2)(\"nzTheme\", ctx_r1.tooltipIcon.theme);\n  }\n}\nfunction NzFormLabelComponent_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 1);\n    i0.ɵɵtemplate(1, NzFormLabelComponent_span_2_ng_container_1_Template, 2, 2, \"ng-container\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzTooltipTitle\", ctx_r0.nzTooltipTitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r0.tooltipIcon.type);\n  }\n}\nlet NzFormItemComponent = /*#__PURE__*/(() => {\n  class NzFormItemComponent {\n    setWithHelpViaTips(value) {\n      this.withHelpClass = value;\n      this.cdr.markForCheck();\n    }\n    setStatus(status) {\n      this.status = status;\n      this.cdr.markForCheck();\n    }\n    setHasFeedback(hasFeedback) {\n      this.hasFeedback = hasFeedback;\n      this.cdr.markForCheck();\n    }\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.status = '';\n      this.hasFeedback = false;\n      this.withHelpClass = false;\n      this.destroy$ = new Subject();\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function NzFormItemComponent_Factory(t) {\n      return new (t || NzFormItemComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzFormItemComponent,\n      selectors: [[\"nz-form-item\"]],\n      hostAttrs: [1, \"ant-form-item\"],\n      hostVars: 12,\n      hostBindings: function NzFormItemComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-form-item-has-success\", ctx.status === \"success\")(\"ant-form-item-has-warning\", ctx.status === \"warning\")(\"ant-form-item-has-error\", ctx.status === \"error\")(\"ant-form-item-is-validating\", ctx.status === \"validating\")(\"ant-form-item-has-feedback\", ctx.hasFeedback && ctx.status)(\"ant-form-item-with-help\", ctx.withHelpClass);\n        }\n      },\n      exportAs: [\"nzFormItem\"],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NzFormItemComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return NzFormItemComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst NZ_CONFIG_MODULE_NAME = 'form';\nconst DefaultTooltipIcon = {\n  type: 'question-circle',\n  theme: 'outline'\n};\nlet NzFormDirective = /*#__PURE__*/(() => {\n  class NzFormDirective {\n    getInputObservable(changeType) {\n      return this.inputChanges$.pipe(filter(changes => changeType in changes), map(value => value[changeType]));\n    }\n    constructor(nzConfigService, directionality) {\n      this.nzConfigService = nzConfigService;\n      this.directionality = directionality;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzLayout = 'horizontal';\n      this.nzNoColon = false;\n      this.nzAutoTips = {};\n      this.nzDisableAutoTips = false;\n      this.nzTooltipIcon = DefaultTooltipIcon;\n      this.nzLabelAlign = 'right';\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.inputChanges$ = new Subject();\n      this.dir = this.directionality.value;\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n      });\n    }\n    ngOnChanges(changes) {\n      this.inputChanges$.next(changes);\n    }\n    ngOnDestroy() {\n      this.inputChanges$.complete();\n      this.destroy$.next(true);\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function NzFormDirective_Factory(t) {\n      return new (t || NzFormDirective)(i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzFormDirective,\n      selectors: [[\"\", \"nz-form\", \"\"]],\n      hostAttrs: [1, \"ant-form\"],\n      hostVars: 8,\n      hostBindings: function NzFormDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-form-horizontal\", ctx.nzLayout === \"horizontal\")(\"ant-form-vertical\", ctx.nzLayout === \"vertical\")(\"ant-form-inline\", ctx.nzLayout === \"inline\")(\"ant-form-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzLayout: \"nzLayout\",\n        nzNoColon: \"nzNoColon\",\n        nzAutoTips: \"nzAutoTips\",\n        nzDisableAutoTips: \"nzDisableAutoTips\",\n        nzTooltipIcon: \"nzTooltipIcon\",\n        nzLabelAlign: \"nzLabelAlign\"\n      },\n      exportAs: [\"nzForm\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  __decorate([WithConfig(), InputBoolean()], NzFormDirective.prototype, \"nzNoColon\", void 0);\n  __decorate([WithConfig()], NzFormDirective.prototype, \"nzAutoTips\", void 0);\n  __decorate([InputBoolean()], NzFormDirective.prototype, \"nzDisableAutoTips\", void 0);\n  __decorate([WithConfig()], NzFormDirective.prototype, \"nzTooltipIcon\", void 0);\n  return NzFormDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzFormControlComponent = /*#__PURE__*/(() => {\n  class NzFormControlComponent {\n    get disableAutoTips() {\n      return this.nzDisableAutoTips !== 'default' ? toBoolean(this.nzDisableAutoTips) : this.nzFormDirective?.nzDisableAutoTips;\n    }\n    set nzHasFeedback(value) {\n      this._hasFeedback = toBoolean(value);\n      this.nzFormStatusService.formStatusChanges.next({\n        status: this.status,\n        hasFeedback: this._hasFeedback\n      });\n      if (this.nzFormItemComponent) {\n        this.nzFormItemComponent.setHasFeedback(this._hasFeedback);\n      }\n    }\n    get nzHasFeedback() {\n      return this._hasFeedback;\n    }\n    set nzValidateStatus(value) {\n      if (value instanceof AbstractControl || value instanceof NgModel) {\n        this.validateControl = value;\n        this.validateString = null;\n        this.watchControl();\n      } else if (value instanceof FormControlName) {\n        this.validateControl = value.control;\n        this.validateString = null;\n        this.watchControl();\n      } else {\n        this.validateString = value;\n        this.validateControl = null;\n        this.setStatus();\n      }\n    }\n    watchControl() {\n      this.validateChanges.unsubscribe();\n      /** miss detect https://github.com/angular/angular/issues/10887 **/\n      if (this.validateControl && this.validateControl.statusChanges) {\n        this.validateChanges = this.validateControl.statusChanges.pipe(startWith(null), takeUntil(this.destroyed$)).subscribe(() => {\n          if (!this.disableAutoTips) {\n            this.updateAutoErrorTip();\n          }\n          this.setStatus();\n          this.cdr.markForCheck();\n        });\n      }\n    }\n    setStatus() {\n      this.status = this.getControlStatus(this.validateString);\n      this.innerTip = this.getInnerTip(this.status);\n      this.nzFormStatusService.formStatusChanges.next({\n        status: this.status,\n        hasFeedback: this.nzHasFeedback\n      });\n      if (this.nzFormItemComponent) {\n        this.nzFormItemComponent.setWithHelpViaTips(!!this.innerTip);\n        this.nzFormItemComponent.setStatus(this.status);\n      }\n    }\n    getControlStatus(validateString) {\n      let status;\n      if (validateString === 'warning' || this.validateControlStatus('INVALID', 'warning')) {\n        status = 'warning';\n      } else if (validateString === 'error' || this.validateControlStatus('INVALID')) {\n        status = 'error';\n      } else if (validateString === 'validating' || validateString === 'pending' || this.validateControlStatus('PENDING')) {\n        status = 'validating';\n      } else if (validateString === 'success' || this.validateControlStatus('VALID')) {\n        status = 'success';\n      } else {\n        status = '';\n      }\n      return status;\n    }\n    validateControlStatus(validStatus, statusType) {\n      if (!this.validateControl) {\n        return false;\n      } else {\n        const {\n          dirty,\n          touched,\n          status\n        } = this.validateControl;\n        return (!!dirty || !!touched) && (statusType ? this.validateControl.hasError(statusType) : status === validStatus);\n      }\n    }\n    getInnerTip(status) {\n      switch (status) {\n        case 'error':\n          return !this.disableAutoTips && this.autoErrorTip || this.nzErrorTip || null;\n        case 'validating':\n          return this.nzValidatingTip || null;\n        case 'success':\n          return this.nzSuccessTip || null;\n        case 'warning':\n          return this.nzWarningTip || null;\n        default:\n          return null;\n      }\n    }\n    updateAutoErrorTip() {\n      if (this.validateControl) {\n        const errors = this.validateControl.errors || {};\n        let autoErrorTip = '';\n        for (const key in errors) {\n          if (errors.hasOwnProperty(key)) {\n            autoErrorTip = errors[key]?.[this.localeId] ?? this.nzAutoTips?.[this.localeId]?.[key] ?? this.nzAutoTips.default?.[key] ?? this.nzFormDirective?.nzAutoTips?.[this.localeId]?.[key] ?? this.nzFormDirective?.nzAutoTips.default?.[key];\n          }\n          if (!!autoErrorTip) {\n            break;\n          }\n        }\n        this.autoErrorTip = autoErrorTip;\n      }\n    }\n    subscribeAutoTips(observable) {\n      observable?.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n        if (!this.disableAutoTips) {\n          this.updateAutoErrorTip();\n          this.setStatus();\n          this.cdr.markForCheck();\n        }\n      });\n    }\n    constructor(nzFormItemComponent, cdr, i18n, nzFormDirective, nzFormStatusService) {\n      this.nzFormItemComponent = nzFormItemComponent;\n      this.cdr = cdr;\n      this.nzFormDirective = nzFormDirective;\n      this.nzFormStatusService = nzFormStatusService;\n      this._hasFeedback = false;\n      this.validateChanges = Subscription.EMPTY;\n      this.validateString = null;\n      this.destroyed$ = new Subject();\n      this.status = '';\n      this.validateControl = null;\n      this.innerTip = null;\n      this.nzAutoTips = {};\n      this.nzDisableAutoTips = 'default';\n      this.subscribeAutoTips(i18n.localeChange.pipe(tap(locale => this.localeId = locale.locale)));\n      this.subscribeAutoTips(this.nzFormDirective?.getInputObservable('nzAutoTips'));\n      this.subscribeAutoTips(this.nzFormDirective?.getInputObservable('nzDisableAutoTips').pipe(filter(() => this.nzDisableAutoTips === 'default')));\n    }\n    ngOnChanges(changes) {\n      const {\n        nzDisableAutoTips,\n        nzAutoTips,\n        nzSuccessTip,\n        nzWarningTip,\n        nzErrorTip,\n        nzValidatingTip\n      } = changes;\n      if (nzDisableAutoTips || nzAutoTips) {\n        this.updateAutoErrorTip();\n        this.setStatus();\n      } else if (nzSuccessTip || nzWarningTip || nzErrorTip || nzValidatingTip) {\n        this.setStatus();\n      }\n    }\n    ngOnInit() {\n      this.setStatus();\n    }\n    ngOnDestroy() {\n      this.destroyed$.next();\n      this.destroyed$.complete();\n    }\n    ngAfterContentInit() {\n      if (!this.validateControl && !this.validateString) {\n        if (this.defaultValidateControl instanceof FormControlDirective) {\n          this.nzValidateStatus = this.defaultValidateControl.control;\n        } else {\n          this.nzValidateStatus = this.defaultValidateControl;\n        }\n      }\n    }\n    static #_ = this.ɵfac = function NzFormControlComponent_Factory(t) {\n      return new (t || NzFormControlComponent)(i0.ɵɵdirectiveInject(NzFormItemComponent, 9), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.NzI18nService), i0.ɵɵdirectiveInject(NzFormDirective, 8), i0.ɵɵdirectiveInject(i4.NzFormStatusService));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzFormControlComponent,\n      selectors: [[\"nz-form-control\"]],\n      contentQueries: function NzFormControlComponent_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, NgControl, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.defaultValidateControl = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-form-item-control\"],\n      inputs: {\n        nzSuccessTip: \"nzSuccessTip\",\n        nzWarningTip: \"nzWarningTip\",\n        nzErrorTip: \"nzErrorTip\",\n        nzValidatingTip: \"nzValidatingTip\",\n        nzExtra: \"nzExtra\",\n        nzAutoTips: \"nzAutoTips\",\n        nzDisableAutoTips: \"nzDisableAutoTips\",\n        nzHasFeedback: \"nzHasFeedback\",\n        nzValidateStatus: \"nzValidateStatus\"\n      },\n      exportAs: [\"nzFormControl\"],\n      features: [i0.ɵɵProvidersFeature([NzFormStatusService]), i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c0,\n      decls: 5,\n      vars: 2,\n      consts: [[1, \"ant-form-item-control-input\"], [1, \"ant-form-item-control-input-content\"], [\"class\", \"ant-form-item-explain ant-form-item-explain-connected\", 4, \"ngIf\"], [\"class\", \"ant-form-item-extra\", 4, \"ngIf\"], [1, \"ant-form-item-explain\", \"ant-form-item-explain-connected\"], [\"role\", \"alert\", 3, \"ngClass\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [1, \"ant-form-item-extra\"], [4, \"nzStringTemplateOutlet\"]],\n      template: function NzFormControlComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵprojection(2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(3, NzFormControlComponent_div_3_Template, 3, 8, \"div\", 2);\n          i0.ɵɵtemplate(4, NzFormControlComponent_div_4_Template, 2, 1, \"div\", 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.innerTip);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.nzExtra);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgIf, i6.NzStringTemplateOutletDirective],\n      encapsulation: 2,\n      data: {\n        animation: [helpMotion]\n      },\n      changeDetection: 0\n    });\n  }\n  return NzFormControlComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction toTooltipIcon(value) {\n  const icon = typeof value === 'string' ? {\n    type: value\n  } : value;\n  return {\n    ...DefaultTooltipIcon,\n    ...icon\n  };\n}\nlet NzFormLabelComponent = /*#__PURE__*/(() => {\n  class NzFormLabelComponent {\n    set nzNoColon(value) {\n      this.noColon = toBoolean(value);\n    }\n    get nzNoColon() {\n      return this.noColon !== 'default' ? this.noColon : this.nzFormDirective?.nzNoColon;\n    }\n    set nzTooltipIcon(value) {\n      this._tooltipIcon = toTooltipIcon(value);\n    }\n    // due to 'get' and 'set' accessor must have the same type, so it was renamed to `tooltipIcon`\n    get tooltipIcon() {\n      return this._tooltipIcon !== 'default' ? this._tooltipIcon : toTooltipIcon(this.nzFormDirective?.nzTooltipIcon || DefaultTooltipIcon);\n    }\n    set nzLabelAlign(value) {\n      this.labelAlign = value;\n    }\n    get nzLabelAlign() {\n      return this.labelAlign !== 'default' ? this.labelAlign : this.nzFormDirective?.nzLabelAlign || 'right';\n    }\n    constructor(cdr, nzFormDirective) {\n      this.cdr = cdr;\n      this.nzFormDirective = nzFormDirective;\n      this.nzRequired = false;\n      this.noColon = 'default';\n      this._tooltipIcon = 'default';\n      this.labelAlign = 'default';\n      this.destroy$ = new Subject();\n      if (this.nzFormDirective) {\n        this.nzFormDirective.getInputObservable('nzNoColon').pipe(filter(() => this.noColon === 'default'), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());\n        this.nzFormDirective.getInputObservable('nzTooltipIcon').pipe(filter(() => this._tooltipIcon === 'default'), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());\n        this.nzFormDirective.getInputObservable('nzLabelAlign').pipe(filter(() => this.labelAlign === 'default'), takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function NzFormLabelComponent_Factory(t) {\n      return new (t || NzFormLabelComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(NzFormDirective, 12));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzFormLabelComponent,\n      selectors: [[\"nz-form-label\"]],\n      hostAttrs: [1, \"ant-form-item-label\"],\n      hostVars: 2,\n      hostBindings: function NzFormLabelComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-form-item-label-left\", ctx.nzLabelAlign === \"left\");\n        }\n      },\n      inputs: {\n        nzFor: \"nzFor\",\n        nzRequired: \"nzRequired\",\n        nzNoColon: \"nzNoColon\",\n        nzTooltipTitle: \"nzTooltipTitle\",\n        nzTooltipIcon: \"nzTooltipIcon\",\n        nzLabelAlign: \"nzLabelAlign\"\n      },\n      exportAs: [\"nzFormLabel\"],\n      ngContentSelectors: _c0,\n      decls: 3,\n      vars: 6,\n      consts: [[\"class\", \"ant-form-item-tooltip\", \"nz-tooltip\", \"\", 3, \"nzTooltipTitle\", 4, \"ngIf\"], [\"nz-tooltip\", \"\", 1, \"ant-form-item-tooltip\", 3, \"nzTooltipTitle\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\", \"nzTheme\"]],\n      template: function NzFormLabelComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"label\");\n          i0.ɵɵprojection(1);\n          i0.ɵɵtemplate(2, NzFormLabelComponent_span_2_Template, 2, 2, \"span\", 0);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-form-item-no-colon\", ctx.nzNoColon)(\"ant-form-item-required\", ctx.nzRequired);\n          i0.ɵɵattribute(\"for\", ctx.nzFor);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.nzTooltipTitle);\n        }\n      },\n      dependencies: [i5.NgIf, i3.NzIconDirective, i4$1.NzTooltipDirective, i6.NzStringTemplateOutletDirective],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  __decorate([InputBoolean()], NzFormLabelComponent.prototype, \"nzRequired\", void 0);\n  return NzFormLabelComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzFormSplitComponent = /*#__PURE__*/(() => {\n  class NzFormSplitComponent {\n    static #_ = this.ɵfac = function NzFormSplitComponent_Factory(t) {\n      return new (t || NzFormSplitComponent)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzFormSplitComponent,\n      selectors: [[\"nz-form-split\"]],\n      hostAttrs: [1, \"ant-form-split\"],\n      exportAs: [\"nzFormSplit\"],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NzFormSplitComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return NzFormSplitComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzFormTextComponent = /*#__PURE__*/(() => {\n  class NzFormTextComponent {\n    static #_ = this.ɵfac = function NzFormTextComponent_Factory(t) {\n      return new (t || NzFormTextComponent)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzFormTextComponent,\n      selectors: [[\"nz-form-text\"]],\n      hostAttrs: [1, \"ant-form-text\"],\n      exportAs: [\"nzFormText\"],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NzFormTextComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return NzFormTextComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzFormModule = /*#__PURE__*/(() => {\n  class NzFormModule {\n    static #_ = this.ɵfac = function NzFormModule_Factory(t) {\n      return new (t || NzFormModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzFormModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [BidiModule, CommonModule, NzGridModule, NzIconModule, NzToolTipModule, LayoutModule, PlatformModule, NzOutletModule, NzGridModule]\n    });\n  }\n  return NzFormModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultTooltipIcon, NzFormControlComponent, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormModule, NzFormSplitComponent, NzFormTextComponent };\n//# sourceMappingURL=ng-zorro-antd-form.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}