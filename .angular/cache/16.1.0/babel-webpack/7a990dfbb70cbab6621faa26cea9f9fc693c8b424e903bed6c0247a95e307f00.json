{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { CountryFilterInput } from '../../modal/countryFilterInput.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../services/country.service\";\nimport * as i3 from \"../../services/regn.service\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"../../../../directive/directive/trim-input.directive\";\nexport let AddRegnFormComponent = /*#__PURE__*/(() => {\n  class AddRegnFormComponent {\n    constructor(formBuilder, cntrySrv, regnService) {\n      this.formBuilder = formBuilder;\n      this.cntrySrv = cntrySrv;\n      this.regnService = regnService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumCntry = [];\n      this.presentRegn = \"\";\n      this.previousCtry = 0;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.regnFormPanel = this.formBuilder.group({\n        regnId: [null],\n        regnCode: ['', [Validators.required]],\n        regnName: [null],\n        ctryId: ['', [Validators.required]]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.regnFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadCntry();\n    }\n    loadCntry() {\n      this.cntrySrv.getALLCountry().subscribe(res => {\n        this.enumCntry = res;\n        this.enumCntry = res.map(i => {\n          i.name = i.name ? i.ctryCode + ' - ' + i.name : i.ctryCode;\n          return i;\n        });\n        this.enumCntry.unshift(new CountryFilterInput('', 'Make a selection'));\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const regnDetails = {\n        regnId: this.regnFormPanel.controls.regnId.value,\n        regnCode: this.regnFormPanel.controls.regnCode.value,\n        regnName: this.regnFormPanel.controls.regnName.value,\n        ctryId: this.regnFormPanel.controls.ctryId.value\n      };\n      return regnDetails;\n    }\n    set value(value) {\n      this.presentRegn = value.regnCode;\n      this.previousCtry = value.ctryId;\n      setTimeout(() => {\n        this.regnFormPanel.patchValue({\n          regnId: value.regnId,\n          regnCode: value.regnCode,\n          regnName: value.regnName,\n          ctryId: value.ctryId\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.regnFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.regnFormPanel.valid ? null : {\n        regnFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    checkRegnCodeExist(control) {\n      if (control.value !== undefined && control.value != null && control.value.length > 1 && this.presentRegn.toLocaleLowerCase() != control.value.toLocaleLowerCase() && this.previousCtry != this.regnFormPanel.controls.ctryId.value) {\n        this.regnFormPanel.controls['regnCode'].setErrors(null);\n        this.regnFormPanel.clearAsyncValidators();\n        this.regnFormPanel.updateValueAndValidity();\n        let regnData = {\n          id: 0,\n          name: '',\n          code: this.regnFormPanel.controls.regnCode.value,\n          cntryId: this.regnFormPanel.controls.ctryId.value ? this.regnFormPanel.controls.ctryId.value : 0\n        };\n        this.regnService.validateRegn(regnData).subscribe(res => {\n          if (res && res.text == \"true\") {\n            this.regnFormPanel.controls['regnCode'].setErrors({\n              'incorrect': true\n            });\n            this.regnFormPanel.updateValueAndValidity();\n            return {\n              'incorrect': true\n            };\n          } else {\n            return null;\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddRegnFormComponent_Factory(t) {\n      return new (t || AddRegnFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CountryService), i0.ɵɵdirectiveInject(i3.RegnService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRegnFormComponent,\n      selectors: [[\"app-add-regn-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRegnFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRegnFormComponent),\n        multi: true\n      }])],\n      decls: 18,\n      vars: 4,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"33%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"regnCode\", \"formControlName\", \"regnCode\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"regnName\", \"formControlName\", \"regnName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"ctryId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"]],\n      template: function AddRegnFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Region Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Region Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"td\", 2)(14, \"div\", 3)(15, \"label\", 4);\n          i0.ɵɵtext(16, \"Country Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"ng-select\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.regnFormPanel);\n          i0.ɵɵadvance(17);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumCntry)(\"searchable\", true);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddRegnFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}