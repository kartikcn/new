{"ast":null,"code":"import { shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"../env.service\";\nconst CACHE_SIZE = 1;\nexport let EnumService = /*#__PURE__*/(() => {\n  class EnumService {\n    constructor(enumService, env) {\n      this.enumService = enumService;\n      this.env = env;\n      // Declare and initialize variables\n      // serverUrl = environment.baseUrl;\n      this.serverUrl = this.env.baseUrl;\n      this.ENUMSERVICE = 'enums';\n      this.ENUM = 'all';\n    }\n    getEnums() {\n      if (!this.enumCache$) {\n        console.log(\"reading enums from api\");\n        this.enumCache$ = this.requestEnums().pipe(shareReplay(CACHE_SIZE));\n      } else {\n        console.log(\"reading enums from cache\");\n      }\n      return this.enumCache$;\n    }\n    // getting name by id\n    getNameById(enullist, table, fieldName, id) {\n      return enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id) ? enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id)?.enumValue : '';\n    }\n    requestEnums() {\n      this.ENUM = \"all\";\n      return this.enumService.getAll(this.ENUMSERVICE, this.ENUM);\n    }\n    static #_ = this.ɵfac = function EnumService_Factory(t) {\n      return new (t || EnumService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.EnvService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EnumService,\n      factory: EnumService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EnumService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}