{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/connector.services\";\nimport * as i3 from \"@ng-select/ng-select\";\nexport class AddConnectorFldsComponent {\n  constructor(formBuilder, connectorService) {\n    this.formBuilder = formBuilder;\n    this.connectorService = connectorService;\n    this.subscriptions = [];\n    this.columnsList = [];\n    this.tablesList = [];\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.connectorFormPanel = this.formBuilder.group({\n      connectorFldsId: [null],\n      connectorId: [null, [Validators.required]],\n      fieldName: [null, [Validators.required]],\n      fieldTitle: [null, [Validators.required]],\n      defaultValue: [null],\n      refTable: [null]\n    });\n    this.subscriptions.push(this.connectorFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {\n    this.loadColumns();\n    this.loadTables();\n  }\n  loadColumns() {\n    this.connectorService.getAllColumns().subscribe(res => {\n      this.columnsList = res;\n    });\n  }\n  loadTables() {\n    this.connectorService.getAllTabes().subscribe(res => {\n      this.tablesList = res;\n    });\n  }\n  getValidationErrors() {\n    const validationErros = [];\n    return validationErros;\n  }\n  get value() {\n    const eqDetails = {\n      connectorId: this.connectorFormPanel.controls.connectorId.value,\n      connectorFldsId: this.connectorFormPanel.controls.connectorFldsId.value,\n      fieldName: this.connectorFormPanel.controls.fieldName.value,\n      fieldTitle: this.connectorFormPanel.controls.fieldTitle.value,\n      defaultValue: this.connectorFormPanel.controls.defaultValue.value,\n      refTable: this.connectorFormPanel.controls.refTable.value\n    };\n    return eqDetails;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.connectorFormPanel.patchValue({\n        connectorId: value.connectorId,\n        connectorFldsId: value.connectorFldsId,\n        fieldName: value.fieldName,\n        fieldTitle: value.fieldTitle,\n        defaultValue: value.defaultValue,\n        refTable: value.refTable\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.connectorFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  validate(_) {\n    return this.connectorFormPanel.valid ? null : {\n      connectorFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function AddConnectorFldsComponent_Factory(t) {\n    return new (t || AddConnectorFldsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ConnectorService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddConnectorFldsComponent,\n    selectors: [[\"app-add-connector-flds\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddConnectorFldsComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddConnectorFldsComponent),\n      multi: true\n    }])],\n    decls: 24,\n    vars: 7,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"fieldName\", \"bindLabel\", \"columnName\", \"bindValue\", \"columnName\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"width\", \"25%\"], [\"type\", \"text\", \"name\", \"fieldTitle\", \"formControlName\", \"fieldTitle\", \"maxlength\", \"128\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"defaultValue\", \"formControlName\", \"defaultValue\", \"maxlength\", \"128\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"refTable\", \"bindLabel\", \"tableName\", \"bindValue\", \"tableName\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"]],\n    template: function AddConnectorFldsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Fiield Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"ng-select\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"td\", 6)(9, \"div\", 3)(10, \"label\", 4);\n        i0.ɵɵtext(11, \" Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 6)(15, \"div\", 3)(16, \"label\", 8);\n        i0.ɵɵtext(17, \"Default Value\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"td\", 2)(20, \"div\", 3)(21, \"label\", 8);\n        i0.ɵɵtext(22, \"Reference Table Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"ng-select\", 10);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.connectorFormPanel);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.columnsList)(\"searchable\", true);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.tablesList)(\"searchable\", true);\n      }\n    },\n    dependencies: [i3.NgSelectComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALIDATORS","NG_VALUE_ACCESSOR","Validators","AddConnectorFldsComponent","constructor","formBuilder","connectorService","subscriptions","columnsList","tablesList","onChange","onTouched","connectorFormPanel","group","connectorFldsId","connectorId","required","fieldName","fieldTitle","defaultValue","refTable","push","valueChanges","subscribe","value","ngOnInit","loadColumns","loadTables","getAllColumns","res","getAllTabes","getValidationErrors","validationErros","eqDetails","controls","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","forEach","s","unsubscribe","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","ConnectorService","_2","selectors","inputs","isNew","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddConnectorFldsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty","ɵɵadvance"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\connectors\\connector\\widgets\\add-connector-flds\\add-connector-flds.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\connectors\\connector\\widgets\\add-connector-flds\\add-connector-flds.component.html"],"sourcesContent":["import { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { ConnectorService } from '../../services/connector.services';\nimport { FormBuilder, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\n\n@Component({\n  selector: 'app-add-connector-flds',\n  templateUrl: './add-connector-flds.component.html',\n  styleUrls: ['./add-connector-flds.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddConnectorFldsComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddConnectorFldsComponent),\n      multi: true\n    }\n  ]\n})\nexport class AddConnectorFldsComponent implements OnInit {\n  connectorFormPanel: FormGroup;\n  subscriptions: Subscription[] = [];\n  columnsList: any[] = [];\n  tablesList: any[] = [];\n\n  @Input() isNew!: boolean;\n  constructor(\n    private formBuilder: FormBuilder,\n    private connectorService: ConnectorService\n  ) {\n    this.connectorFormPanel = this.formBuilder.group({\n      connectorFldsId: [null],\n      connectorId: [null, [Validators.required]],\n      fieldName: [null, [Validators.required]],\n      fieldTitle: [null, [Validators.required]],\n      defaultValue: [null],\n      refTable: [null],\n    });\n    this.subscriptions.push(\n      this.connectorFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n    this.loadColumns();\n    this.loadTables();\n  }\n\n  loadColumns() {\n    this.connectorService.getAllColumns().subscribe((res: any) => {\n      this.columnsList = res;\n    })\n  }\n\n  loadTables() {\n    this.connectorService.getAllTabes().subscribe((res: any) => {\n      this.tablesList = res;\n    })\n  }\n\n  public getValidationErrors() {\n    const validationErros: VaildationError[] = [];\n    return validationErros;\n  }\n\n  get value(): any {\n    const eqDetails: any = {\n      connectorId: this.connectorFormPanel.controls.connectorId.value,\n      connectorFldsId: this.connectorFormPanel.controls.connectorFldsId.value,\n      fieldName: this.connectorFormPanel.controls.fieldName.value,\n      fieldTitle: this.connectorFormPanel.controls.fieldTitle.value,\n      defaultValue: this.connectorFormPanel.controls.defaultValue.value,\n      refTable: this.connectorFormPanel.controls.refTable.value,\n    };\n    return eqDetails;\n  }\n\n  set value(value: any) {\n    setTimeout(() => {\n      this.connectorFormPanel.patchValue({\n        connectorId: value.connectorId,\n        connectorFldsId: value.connectorFldsId,\n        fieldName: value.fieldName,\n        fieldTitle: value.fieldTitle,\n        defaultValue: value.defaultValue,\n        refTable: value.refTable,\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  writeValue(value: any) {\n\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.connectorFormPanel.reset();\n    }\n  }\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  validate(_: FormControl) {\n    return this.connectorFormPanel.valid ? null : { connectorFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n","<form [formGroup]=\"connectorFormPanel\">\n    <table width=\"100%\">\n        <tr>\n            <td style=\"width: 50%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable control-label'>Fiield Name</label>\n                    <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"columnsList\" formControlName=\"fieldName\"\n                        [searchable]=\"true\" bindLabel=\"columnName\" bindValue=\"columnName\" placeholder=\"Make a selection\"\n                        class=\"ng-select-dropdown\">\n                    </ng-select>\n                </div>\n            </td>\n            <td style=\"width: 25%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable control-label'> Title</label>\n                    <input type=\"text\" class=\"form-control\" name=\"fieldTitle\" formControlName=\"fieldTitle\"\n                        maxlength=\"128\">\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"width: 25%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable'>Default Value</label>\n                    <input type=\"text\" class=\"form-control\" name=\"defaultValue\" formControlName=\"defaultValue\"\n                        maxlength=\"128\">\n                </div>\n            </td>\n            <td style=\"width: 50%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable'>Reference Table Name</label>\n                    <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"tablesList\" formControlName=\"refTable\"\n                        [searchable]=\"true\" bindLabel=\"tableName\" bindValue=\"tableName\" placeholder=\"Make a selection\"\n                        class=\"ng-select-dropdown\">\n                    </ng-select>\n                </div>\n            </td>\n        </tr>\n    </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}