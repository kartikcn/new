{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../directive/numbers-only.directive\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/form\";\nexport let EmployeeContactComponent = /*#__PURE__*/(() => {\n  class EmployeeContactComponent {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n      this.subscriptions = [];\n      this.isNew = false;\n      this.isEdit = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      // this.currentDate = this.datePipe.transform(new Date(), \"yyyy/MM/dd hh:mm:ss\");\n      /// Start Of Building Form \n      this.frmEmployeeContact = this.formBuilder.group({\n        // phoneHome: [''],\n        phoneWork: [''],\n        phonePersonal: [''],\n        faxNum: [''],\n        altContactName: [''],\n        altContactPhone: ['']\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.frmEmployeeContact.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    /// Start Preparing Entered Data Model\n    get value() {\n      const details = {\n        // phoneHome: this.frmEmployeeContact.controls.phoneHome.value,\n        phoneWork: this.frmEmployeeContact.controls.phoneWork.value,\n        phonePersonal: this.frmEmployeeContact.controls.phonePersonal.value,\n        faxNum: this.frmEmployeeContact.controls.faxNum.value,\n        altContactName: this.frmEmployeeContact.controls.altContactName.value,\n        altContactPhone: this.frmEmployeeContact.controls.altContactPhone.value\n      };\n      return details;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.frmEmployeeContact.patchValue({\n          // phoneHome: value.phoneHome,\n          phoneWork: value.phoneWork,\n          phonePersonal: value.phonePersonal,\n          faxNum: value.faxNum,\n          altContactName: value.altContactName,\n          altContactPhone: value.altContactPhone\n        });\n        this.checkFormMode();\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    checkFormMode() {\n      if (this.isEdit == false) {\n        this.frmEmployeeContact.disable();\n      } else {\n        this.frmEmployeeContact.enable();\n      }\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.frmEmployeeContact.reset();\n        this.checkFormMode();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.frmEmployeeContact.valid ? null : {\n        frmEmployeeContact: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function EmployeeContactComponent_Factory(t) {\n      return new (t || EmployeeContactComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EmployeeContactComponent,\n      selectors: [[\"app-employee-contact\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isEdit: \"isEdit\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => EmployeeContactComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => EmployeeContactComponent),\n        multi: true\n      }])],\n      decls: 31,\n      vars: 1,\n      consts: [[\"nz-form\", \"\", 3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"phonePersonal\", \"formControlName\", \"phonePersonal\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"phoneWork\", \"formControlName\", \"phoneWork\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"faxNum\", \"formControlName\", \"faxNum\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"altContactName\", \"formControlName\", \"altContactName\", \"maxlength\", \"255\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"altContactPhone\", \"formControlName\", \"altContactPhone\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"]],\n      template: function EmployeeContactComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Personal Phone Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 4);\n          i0.ɵɵtext(11, \"Work Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 2)(15, \"div\", 3)(16, \"label\", 4);\n          i0.ɵɵtext(17, \"Fax Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"td\", 2)(20, \"div\", 3)(21, \"label\", 4);\n          i0.ɵɵtext(22, \"Preferred Contact Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(23, \"input\", 8);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"tr\")(25, \"td\", 2)(26, \"div\", 3)(27, \"label\", 4);\n          i0.ɵɵtext(28, \"Alternate Contact Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(29, \"input\", 9);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(30, \"td\", 2);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.frmEmployeeContact);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i2.NumbersOnlyDirective, i3.TrimInputDirective, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzFormDirective]\n    });\n  }\n  return EmployeeContactComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}