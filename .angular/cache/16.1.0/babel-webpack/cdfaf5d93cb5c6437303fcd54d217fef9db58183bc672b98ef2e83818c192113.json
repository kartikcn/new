{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/problem-description.services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../../../directive/directive/trim-input.directive\";\nfunction AddProblemDescriptionComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 8);\n    i0.ɵɵtext(1, \"Problem Description already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddProblemDescriptionComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 6);\n    i0.ɵɵtemplate(2, AddProblemDescriptionComponent_tr_8_label_2_Template, 2, 0, \"label\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.pbDescriptionFormPanel.controls[\"pdDescription\"] == null ? null : ctx_r0.pbDescriptionFormPanel.controls[\"pdDescription\"].errors.required));\n  }\n}\nexport let AddProblemDescriptionComponent = /*#__PURE__*/(() => {\n  class AddProblemDescriptionComponent {\n    constructor(formBuilder, service) {\n      this.formBuilder = formBuilder;\n      this.service = service;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.pbDescriptionFormPanel = this.formBuilder.group({\n        pdId: [''],\n        pdDescription: ['', [Validators.required]]\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.pbDescriptionFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const pdDetails = {\n        pdId: this.pbDescriptionFormPanel.controls.pdId.value,\n        pdDescription: this.pbDescriptionFormPanel.controls.pdDescription.value\n      };\n      return pdDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.pbDescriptionFormPanel.patchValue({\n          pdId: value.pdId,\n          pdDescription: value.pdDescription\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.pbDescriptionFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.pbDescriptionFormPanel.valid ? null : {\n        clientFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddProblemDescriptionComponent_Factory(t) {\n      return new (t || AddProblemDescriptionComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ProblemDescriptionService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddProblemDescriptionComponent,\n      selectors: [[\"app-add-problem-description\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddProblemDescriptionComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddProblemDescriptionComponent),\n        multi: true\n      }])],\n      decls: 10,\n      vars: 2,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"name\", \"pdDescription\", \"formControlName\", \"pdDescription\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [4, \"ngIf\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddProblemDescriptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Problem Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"textarea\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddProblemDescriptionComponent_tr_8_Template, 3, 1, \"tr\", 5);\n          i0.ɵɵelement(9, \"tr\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.pbDescriptionFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.pbDescriptionFormPanel.controls[\"pdDescription\"] == null ? null : ctx.pbDescriptionFormPanel.controls[\"pdDescription\"].errors) && ctx.pbDescriptionFormPanel.controls[\"pdDescription\"].dirty);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective]\n    });\n  }\n  return AddProblemDescriptionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}