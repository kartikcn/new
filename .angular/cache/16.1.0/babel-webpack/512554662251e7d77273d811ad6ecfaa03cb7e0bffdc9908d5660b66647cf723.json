{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { forkJoin } from 'rxjs';\nimport { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { SvgRoomDataInput } from 'src/app/model/svgroomdatainput.model';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BuildingFilterInputDTO } from '../background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport { FloorFilterInputDTO } from '../background-loc/model/DTO/FloorFilterInputDTO.model';\nimport { SvgViewComponent } from '../svg-view/svg-view.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../background-loc/services/bl.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"src/app/services/rmcat.service\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"src/app/services/enum.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@ng-select/ng-select\";\nimport * as i9 from \"primeng/table\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/toast\";\nimport * as i12 from \"primeng/confirmdialog\";\nimport * as i13 from \"../svg-view/svg-view.component\";\nimport * as i14 from \"@angular/material/tooltip\";\nimport * as i15 from \"primeng/paginator\";\nfunction RmcatRmtypeSvgComponent_div_28_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 33);\n    i0.ɵɵtext(2, \" Room Category \");\n    i0.ɵɵelement(3, \"p-sortIcon\", 34)(4, \"p-columnFilter\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Highlight Color\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_28_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 36)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelement(4, \"div\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rmcat_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", rmcat_r10);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rmcat_r10.rmCat);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", rmcat_r10.highlightColor);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_28_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 2);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nfunction RmcatRmtypeSvgComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-table\", 27);\n    i0.ɵɵlistener(\"onRowSelect\", function RmcatRmtypeSvgComponent_div_28_Template_p_table_onRowSelect_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onrmcatrowselect($event));\n    })(\"onFilter\", function RmcatRmtypeSvgComponent_div_28_Template_p_table_onFilter_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onInnerFilterRmCat($event));\n    })(\"onSort\", function RmcatRmtypeSvgComponent_div_28_Template_p_table_onSort_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onSortRmCat($event));\n    });\n    i0.ɵɵtemplate(2, RmcatRmtypeSvgComponent_div_28_ng_template_2_Template, 7, 0, \"ng-template\", 28);\n    i0.ɵɵtemplate(3, RmcatRmtypeSvgComponent_div_28_ng_template_3_Template, 5, 4, \"ng-template\", 29);\n    i0.ɵɵtemplate(4, RmcatRmtypeSvgComponent_div_28_ng_template_4_Template, 3, 1, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 31)(6, \"p-paginator\", 32);\n    i0.ɵɵlistener(\"onPageChange\", function RmcatRmtypeSvgComponent_div_28_Template_p_paginator_onPageChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onPageChangeRmCat($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r0.rmcatdata)(\"paginator\", false)(\"rows\", ctx_r0.rowCount)(\"rowHover\", true)(\"scrollable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"rows\", ctx_r0.rowCount)(\"totalRecords\", ctx_r0.totalElementsRmCat)(\"first\", ctx_r0.paginationObjRmCat.pageNo * ctx_r0.paginationObjRmCat.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_29_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 38);\n    i0.ɵɵtext(2, \" Room Type \");\n    i0.ɵɵelement(3, \"p-sortIcon\", 39)(4, \"p-columnFilter\", 40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Highlight Color\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_29_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 36)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelement(4, \"div\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rmtype_r20 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", rmtype_r20);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rmtype_r20.rmType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", rmtype_r20.highlightColor);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_29_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 9);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-table\", 27);\n    i0.ɵɵlistener(\"onRowSelect\", function RmcatRmtypeSvgComponent_div_29_Template_p_table_onRowSelect_1_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onrmtyperowselect($event));\n    })(\"onFilter\", function RmcatRmtypeSvgComponent_div_29_Template_p_table_onFilter_1_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.onInnerFilterRmType($event));\n    })(\"onSort\", function RmcatRmtypeSvgComponent_div_29_Template_p_table_onSort_1_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.onSortRmType($event));\n    });\n    i0.ɵɵtemplate(2, RmcatRmtypeSvgComponent_div_29_ng_template_2_Template, 7, 0, \"ng-template\", 28);\n    i0.ɵɵtemplate(3, RmcatRmtypeSvgComponent_div_29_ng_template_3_Template, 5, 4, \"ng-template\", 29);\n    i0.ɵɵtemplate(4, RmcatRmtypeSvgComponent_div_29_ng_template_4_Template, 3, 1, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 31)(6, \"p-paginator\", 32);\n    i0.ɵɵlistener(\"onPageChange\", function RmcatRmtypeSvgComponent_div_29_Template_p_paginator_onPageChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.onPageChangeRmType($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r1.rmtypeData)(\"paginator\", false)(\"rows\", ctx_r1.rowCount)(\"rowHover\", true)(\"scrollable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"rows\", ctx_r1.rowCount)(\"totalRecords\", ctx_r1.totalElementsRmType)(\"first\", ctx_r1.paginationObjRmType.pageNo * ctx_r1.paginationObjRmType.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.selectedRoomsMessage, \" \");\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"app-svg-view\", 42);\n    i0.ɵɵlistener(\"onRoomClick\", function RmcatRmtypeSvgComponent_div_40_Template_app_svg_view_onRoomClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.roomOnClickListener($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"svgInputData\", ctx_r3.svgInputData);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43)(1, \"h1\");\n    i0.ɵɵtext(2, \"No Floorplan available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_42_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 45);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 46);\n    i0.ɵɵtext(4, \" Building Code \");\n    i0.ɵɵelement(5, \"p-sortIcon\", 47)(6, \"p-columnFilter\", 48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 49);\n    i0.ɵɵtext(8, \" Floor Code\");\n    i0.ɵɵelement(9, \"p-sortIcon\", 50)(10, \"p-columnFilter\", 51);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 52);\n    i0.ɵɵtext(12, \" Room Code \");\n    i0.ɵɵelement(13, \"p-sortIcon\", 53)(14, \"p-columnFilter\", 54);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\", 55);\n    i0.ɵɵtext(16, \" Room Category \");\n    i0.ɵɵelement(17, \"p-sortIcon\", 56)(18, \"p-columnFilter\", 57);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"th\", 58);\n    i0.ɵɵtext(20, \" Room Type \");\n    i0.ɵɵelement(21, \"p-sortIcon\", 59)(22, \"p-columnFilter\", 60);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_42_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 36)(1, \"td\", 45);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 61);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rm_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", rm_r32);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", rm_r32);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r32.blBlCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r32.flFlCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r32.rmCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r32.rmcatRmCat);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r32.rmtypeRmType);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_42_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 9);\n  }\n}\nfunction RmcatRmtypeSvgComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 41)(1, \"p-table\", 44);\n    i0.ɵɵlistener(\"selectionChange\", function RmcatRmtypeSvgComponent_div_42_Template_p_table_selectionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r34.selectedRooms = $event);\n    })(\"onFilter\", function RmcatRmtypeSvgComponent_div_42_Template_p_table_onFilter_1_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.onInnerFilterRm($event));\n    })(\"onSort\", function RmcatRmtypeSvgComponent_div_42_Template_p_table_onSort_1_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.onSortRm($event));\n    });\n    i0.ɵɵtemplate(2, RmcatRmtypeSvgComponent_div_42_ng_template_2_Template, 23, 0, \"ng-template\", 28);\n    i0.ɵɵtemplate(3, RmcatRmtypeSvgComponent_div_42_ng_template_3_Template, 13, 7, \"ng-template\", 29);\n    i0.ɵɵtemplate(4, RmcatRmtypeSvgComponent_div_42_ng_template_4_Template, 3, 1, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 31)(6, \"p-paginator\", 32);\n    i0.ɵɵlistener(\"onPageChange\", function RmcatRmtypeSvgComponent_div_42_Template_p_paginator_onPageChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r38.onPageChangeRm($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r5.allRoomData)(\"paginator\", false)(\"rows\", ctx_r5.rowCount)(\"selection\", ctx_r5.selectedRooms)(\"rowHover\", false)(\"scrollable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"rows\", ctx_r5.rowCount)(\"totalRecords\", ctx_r5.totalElementsRm)(\"first\", ctx_r5.paginationObjRm.pageNo * ctx_r5.paginationObjRm.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(11, _c0));\n  }\n}\nfunction RmcatRmtypeSvgComponent_ngx_spinner_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 62)(1, \"p\", 63);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport let RmcatRmtypeSvgComponent = /*#__PURE__*/(() => {\n  class RmcatRmtypeSvgComponent {\n    constructor(blServ, formBuilder, cdr, spinner, rmcatSrv, messageService, confirmationService, enumservice) {\n      this.blServ = blServ;\n      this.formBuilder = formBuilder;\n      this.cdr = cdr;\n      this.spinner = spinner;\n      this.rmcatSrv = rmcatSrv;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.enumservice = enumservice;\n      this.allBl = [];\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.viewSvg = false;\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.rmcatdata = [];\n      this.rmtypeData = [];\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.selectedRmCatId = null;\n      this.selectedRmTypeId = null;\n      this.selectedSvgElementIds = [];\n      this.roomSelectedSvgElementIds = [];\n      this.allSVGRoomsData = [];\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n      this.allRoomData = [];\n      this.selectedRooms = [];\n      this.showrmcattable = false;\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.searchedSvgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.enumView = [{\n        id: 'list',\n        value: 'List'\n      }, {\n        id: 'svg',\n        value: 'SVG'\n      }];\n      this.enableAssignButton = false;\n      this.enableUnAssignButton = false;\n      this.enableClearButton = false;\n      this.paginationObjRmCat = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmcatId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRmCat = 0;\n      this.isFilteredRmCat = false;\n      this.filterCriteriaListRmCat = [];\n      this.isSortedRmCat = false;\n      this.paginationObjRmType = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmtypeId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRmType = 0;\n      this.isFilteredRmType = false;\n      this.filterCriteriaListRmType = [];\n      this.isSortedRmType = false;\n      this.paginationObjRm = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRm = 0;\n      this.isFilteredRm = false;\n      this.filterCriteriaListRm = [];\n      this.isSortedRm = false;\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.svgInputData = new SvgRoomDataInput(null, null, null, false, false, false, false, false, \"\", null, \"\", \"\", null, null);\n      this.selectedBl = {};\n      this.selectedFl = {};\n      this.filterPanel = this.formBuilder.group({\n        blId: [null],\n        flId: [null],\n        view: [null]\n      });\n    }\n    ngOnInit() {\n      this.loadAllRmCat();\n      this.loadNoneCommonAreaEnum();\n      this.filterPanel.patchValue({\n        view: this.enumView[0].id\n      });\n      this.showrmcattable = true;\n      this.loadGridData();\n    }\n    onSelectBlCode($event) {\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          flId: null\n        });\n      }, 10);\n      if ($event.blId != null) {\n        this.selectedBl = $event;\n        this.selectedFl = {};\n      } else {\n        this.selectedBl = {};\n        this.selectedBl = {};\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.flId != null) {\n        this.selectedFl = event;\n        const blData = {\n          blId: event.blId,\n          blNameString: event.blNameString\n        };\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {}\n    }\n    loadAllRmCat() {\n      let data = {\n        paginationDTO: this.paginationObjRmCat,\n        filterCriteria: this.filterCriteriaListRmCat\n      };\n      this.isFilteredRmCat = false;\n      this.rmcatSrv.getALLRmcatsPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFilteredRmCat = false;\n          this.rmcatdata = res.content ? res.content : [];\n          this.totalElementsRmCat = res.totalElements ? res.totalElements : 0;\n        } else {\n          this.rmcatdata = [];\n        }\n      });\n    }\n    onSearch() {\n      this.showrmcattable = false;\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n      this.selectedSvgElementIds = [];\n      this.roomSelectedSvgElementIds = [];\n      this.displayNoFloorPlanInfo = false;\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.selectedRmCatId = null;\n      this.selectedRmTypeId = null;\n      this.viewSvg = false;\n      this.selectedRooms = [];\n      this.showSpinner = true;\n      this.spinner.show();\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      let view = this.filterPanel.controls.view.value;\n      if (view == 'svg') {\n        if (blId != null && flId != null) {\n          this.svgInputData = new SvgRoomDataInput(blId, flId, null, false, false, false, true, false, \"\", null, \"\", \"rmcat-rmtype\", null, null);\n          this.selectionMessage = \"Please select a Room Category\";\n          this.viewSvg = true;\n        } else {\n          this.spinner.hide();\n          this.showSpinner = false;\n          this.selectionMessage = \"Please select Building and Floor\";\n          this.displayNoFloorPlanInfo = true;\n        }\n      } else {\n        this.loadGridData();\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.selectionMessage = \"Please select a Room Category\";\n      }\n      this.showrmcattable = true;\n    }\n    onClear() {\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.viewSvg = false;\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.showrmcattable = false;\n      this.selectedSvgElementIds = [];\n      this.roomSelectedSvgElementIds = [];\n      this.selectedRooms = [];\n      this.svgInputData = new SvgRoomDataInput(null, null, null, false, false, false, false, false, \"\", null, \"\", \"\", null, null);\n      this.searchedSvgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.selectedRmCatId = null;\n      this.selectedRmTypeId = null;\n      this.allSVGRoomsData = [];\n      this.filterPanel.patchValue({\n        blId: null,\n        flId: null,\n        view: this.enumView[0].id\n      });\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n      this.paginationObjRmCat = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmcatId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRmCat = 0;\n      this.filterCriteriaListRmCat = [];\n      this.isFilteredRmCat = false;\n      this.paginationObjRmType = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmtypeId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRmType = 0;\n      this.filterCriteriaListRmType = [];\n      this.isFilteredRmType = false;\n      this.paginationObjRm = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElementsRm = 0;\n      this.filterCriteriaListRm = [];\n      this.isFilteredRm = false;\n      this.loadAllRmCat();\n      this.onSearch();\n      this.selectedBl = {};\n      this.selectedFl = {};\n    }\n    roomOnClickListener(data) {\n      this.selectedRoomsMessage = '';\n      let svgelid = '';\n      if (data.elementIdName != null && data.elementIdName != \"\") {\n        if (data.elementIdName.startsWith(\"label\")) {\n          svgelid = data.elementIdName.substring(\"label_\".length);\n        } else {\n          svgelid = data.elementIdName;\n        }\n        if (!this.selectedSvgElementIds.includes(svgelid)) {\n          this.selectedSvgElementIds.push(svgelid);\n        }\n        this.selectedSvgElementIds.forEach(id => {\n          data.svgRoomData.content.forEach(svgData => {\n            if (svgData.svgElementId.roomElementId == id) {\n              this.roomSelectedSvgElementIds.push(id);\n              if (this.selectionHighlightColor.length > 0) {\n                svgData.highlightRoom = true;\n                svgData.color.roomColor = this.selectionHighlightColor;\n              } else {\n                svgData.highlightRoom = false;\n                svgData.color.roomColor = \"\";\n              }\n              if (this.selectedRoomsMessage.length == 0) {\n                this.selectedRoomsMessage += \"Selected Rooms : \" + svgData.rmCode;\n              } else {\n                this.selectedRoomsMessage += \", \" + svgData.rmCode;\n              }\n            }\n          });\n        });\n        this.allSVGRoomsData = [...data.allSVGRoomsData];\n        this.cdr.detectChanges();\n        this.svgViewComp.loadByDetails();\n      }\n    }\n    onAssigntoRooms() {\n      this.messageService.clear();\n      let saveRoomData = [];\n      const saveRequests = [];\n      if (this.viewSvg) {\n        this.roomSelectedSvgElementIds.forEach(id => {\n          const matchingObj = this.allSVGRoomsData.find(rm => rm.svgElementId == id);\n          if (matchingObj) {\n            saveRoomData.push(matchingObj);\n          }\n        });\n        saveRoomData.forEach(room => {\n          if (this.selectedRmCatId != null) {\n            room.rmcatId = this.selectedRmCatId;\n          }\n          if (this.selectedRmTypeId != null) {\n            room.rmtypeId = this.selectedRmTypeId;\n          } else {\n            room.rmtypeId = null;\n          }\n          saveRequests.push(this.blServ.updateRoomProp(room));\n        });\n      } else {\n        saveRoomData = [...this.selectedRooms];\n        saveRoomData.forEach(room => {\n          if (this.selectedRmCatId != null) {\n            room.rmcatId = this.selectedRmCatId;\n          }\n          if (this.selectedRmTypeId != null) {\n            room.rmtypeId = this.selectedRmTypeId;\n          } else {\n            room.rmtypeId = null;\n          }\n          saveRequests.push(this.blServ.updateRoomProp(room));\n        });\n      }\n      forkJoin(saveRequests).subscribe(res => {\n        this.messageService.add({\n          key: 'rmcatrmtypesvgMsg',\n          severity: 'success',\n          summary: 'Record updated',\n          detail: 'Room updated successfully'\n        });\n        this.onSearch();\n      }, error => {\n        console.error('Failed to save records:', error);\n      });\n    }\n    userConfirmUnAssign() {\n      this.confirmationService.confirm({\n        message: 'This will remove the selected room\\'s category and type. Do you wish to continue?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.onUnAssigntoRooms();\n        },\n        key: \"rmcatrmtypesvgGrid\"\n      });\n    }\n    onrmcatrowselect(event) {\n      this.rmtypeData = [];\n      this.selectedSvgElementIds = [];\n      this.roomSelectedSvgElementIds = [];\n      this.selectedRooms = [];\n      this.showrmtypetable = true;\n      this.selectedRmCat = event.data.rmCat;\n      this.selectedRmCatId = event.data.rmcatId;\n      this.selectionMessage = \"Please select a Room Type\";\n      this.loadRmType(event.data.rmcatId);\n      this.cdr.detectChanges();\n    }\n    loadRmType(rmcatId) {\n      let data = {\n        rmcatId: rmcatId,\n        filterDto: {\n          paginationDTO: this.paginationObjRmType,\n          filterCriteria: this.filterCriteriaListRmType\n        }\n      };\n      this.isFilteredRmType = false;\n      this.rmcatSrv.getRmTypeListPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFilteredRmType = false;\n          this.rmtypeData = res.content ? res.content : [];\n          this.totalElementsRmType = res.totalElements ? res.totalElements : 0;\n        }\n      });\n    }\n    onrmtyperowselect(event) {\n      this.selectedRmType = event.data.rmType;\n      this.selectedRmTypeId = event.data.rmtypeId;\n      this.selectionHighlightColor = event.data.highlightColor;\n      this.selectionMessage = \"Please select rooms to be assigned for \" + this.selectedRmCat + \" | \" + this.selectedRmType;\n      this.selectedSvgElementIds = [];\n      this.roomSelectedSvgElementIds = [];\n      this.selectedRooms = [];\n      this.cdr.detectChanges();\n    }\n    onCancelSelection() {\n      if (this.viewSvg) {\n        this.onSearch();\n      } else {\n        this.selectedRooms = [];\n      }\n    }\n    onUnAssigntoRooms() {\n      this.messageService.clear();\n      let saveRoomData = [];\n      const saveRequests = [];\n      if (this.viewSvg) {\n        this.roomSelectedSvgElementIds.forEach(id => {\n          const matchingObj = this.allSVGRoomsData.find(rm => rm.svgElementId == id);\n          if (matchingObj) {\n            saveRoomData.push(matchingObj);\n          }\n        });\n        saveRoomData.forEach(room => {\n          room.rmcatId = null;\n          room.rmtypeId = null;\n          saveRequests.push(this.blServ.updateRoomProp(room));\n        });\n      } else {\n        saveRoomData = [...this.selectedRooms];\n        saveRoomData.forEach(room => {\n          room.rmcatId = null;\n          room.rmtypeId = null;\n          saveRequests.push(this.blServ.updateRoomProp(room));\n        });\n      }\n      forkJoin(saveRequests).subscribe(res => {\n        this.messageService.add({\n          key: 'rmcatrmtypesvgMsg',\n          severity: 'success',\n          summary: 'Record updated',\n          detail: 'Room updated successfully'\n        });\n        this.onSearch();\n      }, error => {\n        console.error('Failed to save records:', error);\n      });\n    }\n    loadGridData() {\n      this.loadAllRoom();\n      this.selectionMessage = \"Please select a Room Category\";\n    }\n    loadAllRoom() {\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      let data = {\n        blId: blId,\n        flId: flId,\n        filterDto: {\n          paginationDTO: this.paginationObjRm,\n          filterCriteria: this.filterCriteriaListRm\n        }\n      };\n      this.isFilteredRm = false;\n      this.blServ.getRmListByPagination(data).subscribe(res => {\n        this.isFilteredRm = false;\n        let content = res.content ? res.content : [];\n        this.totalElementsRm = res.totalElements ? res.totalElements : 0;\n        this.allRoomData = content.filter(each => each.commonAreaType == this.commonAreaTypeNoneEnumValue);\n      });\n    }\n    loadNoneCommonAreaEnum() {\n      this.enumservice.getEnums().subscribe(res => {\n        let commonareaEnumList = res.filter(t => t.tableName.toLocaleUpperCase() === 'rm'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'common_area_type'.toLocaleUpperCase() && t.enumValue.toLocaleUpperCase() === 'None'.toLocaleUpperCase());\n        this.commonAreaTypeNoneEnumValue = commonareaEnumList[0].enumKey;\n      });\n    }\n    onPageChangeRmCat(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObjRmCat.pageNo = pageNo;\n      this.paginationObjRmCat.pageSize = pageSize;\n      this.loadAllRmCat();\n    }\n    onSortRmCat(event) {\n      //this.isSortedRmCat = true;\n    }\n    onInnerFilterRmCat(event) {\n      this.isSortedRmCat = false;\n      setTimeout(() => {\n        if (this.isFilteredRmCat && !this.isSortedRmCat) {\n          this.isSortedRmCat = false;\n          Object.keys(event.filters).forEach(field => {\n            const filterValue = event.filters[field][0].value;\n            const matchMode = event.filters[field][0].matchMode;\n            if (filterValue !== undefined) {\n              let filterCriteriaRmCat = {\n                fieldName: field,\n                value: filterValue,\n                matchMode: matchMode\n              };\n              this.updateFilterCriteriaListRmCat(filterCriteriaRmCat);\n            }\n          });\n          this.paginationObjRmCat.pageNo = 0;\n          this.loadAllRmCat();\n        }\n        this.isFilteredRmCat = true;\n      }, 0);\n    }\n    updateFilterCriteriaListRmCat(filterCriteria) {\n      let index = this.filterCriteriaListRmCat.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaListRmCat.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaListRmCat[index] = filterCriteria;\n        } else {\n          this.filterCriteriaListRmCat.push(filterCriteria);\n        }\n      }\n    }\n    onPageChangeRmType(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObjRmType.pageNo = pageNo;\n      this.paginationObjRmType.pageSize = pageSize;\n      this.loadRmType(this.selectedRmCatId);\n    }\n    onSortRmType(event) {\n      // this.isSortedRmType= true;\n    }\n    onInnerFilterRmType(event) {\n      this.isSortedRmType = false;\n      setTimeout(() => {\n        if (this.isFilteredRmType && !this.isSortedRmType) {\n          this.isSortedRmType = false;\n          Object.keys(event.filters).forEach(field => {\n            const filterValue = event.filters[field][0].value;\n            const matchMode = event.filters[field][0].matchMode;\n            if (filterValue !== undefined) {\n              let filterCriteriaRmType = {\n                fieldName: field,\n                value: filterValue,\n                matchMode: matchMode\n              };\n              this.updateFilterCriteriaListRmType(filterCriteriaRmType);\n            }\n          });\n          this.paginationObjRmType.pageNo = 0;\n          this.loadRmType(this.selectedRmCatId);\n        }\n        this.isFilteredRmType = true;\n      }, 0);\n    }\n    updateFilterCriteriaListRmType(filterCriteria) {\n      let index = this.filterCriteriaListRmType.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaListRmType.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaListRmType[index] = filterCriteria;\n        } else {\n          this.filterCriteriaListRmType.push(filterCriteria);\n        }\n      }\n    }\n    onPageChangeRm(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObjRm.pageNo = pageNo;\n      this.paginationObjRm.pageSize = pageSize;\n      this.selectedRooms = [];\n      this.loadAllRoom();\n    }\n    onSortRm(event) {\n      // this.isSortedRm = true;\n    }\n    onInnerFilterRm(event) {\n      this.isSortedRm = false;\n      setTimeout(() => {\n        if (this.isFilteredRm && !this.isSortedRm) {\n          this.isSortedRm = false;\n          Object.keys(event.filters).forEach(field => {\n            const filterValue = event.filters[field][0].value;\n            const matchMode = event.filters[field][0].matchMode;\n            if (filterValue !== undefined) {\n              let filterCriteriaRm = {};\n              if (field == \"blBlCode\") {\n                filterCriteriaRm = {\n                  fieldName: 'bl.blCode',\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"flFlCode\") {\n                filterCriteriaRm = {\n                  fieldName: 'fl.flCode',\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == 'rmcatRmCat') {\n                filterCriteriaRm = {\n                  fieldName: 'rmcat.rmCat',\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == 'rmtypeRmType') {\n                filterCriteriaRm = {\n                  fieldName: 'rmtype.rmType',\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else {\n                filterCriteriaRm = {\n                  fieldName: field,\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              }\n              this.updateFilterCriteriaListRm(filterCriteriaRm);\n            }\n          });\n          this.paginationObjRm.pageNo = 0;\n          this.selectedRooms = [];\n          this.loadAllRoom();\n        }\n        this.isFilteredRm = true;\n      }, 0);\n    }\n    updateFilterCriteriaListRm(filterCriteria) {\n      let index = this.filterCriteriaListRm.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaListRm.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaListRm[index] = filterCriteria;\n        } else {\n          this.filterCriteriaListRm.push(filterCriteria);\n        }\n      }\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blServ.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.updateBlList(this.selectedBl);\n      });\n    }\n    scrollToEndFl() {\n      this.offsetFl = this.limitFl;\n      this.limitFl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitFl;\n      this.filterCriteria.offset = this.offsetFl;\n      this.blServ.getALLFloorByScroll(this.filterCriteria).subscribe(res => {\n        this.enumFL = res;\n        this.updateFlList(this.selectedFl);\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    searchFl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"flName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndFl();\n    }\n    loadSvgDetails() {\n      if (this.viewSvg) {\n        this.svgViewComp.loadByDetails();\n      }\n    }\n    updateBlList(blData) {\n      if (blData.blId) {\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateFlList(flData) {\n      if (flData.flId) {\n        this.enumFL = this.enumFL.filter(t => t.flId !== flData.flId);\n        this.enumFL = this.enumFL.filter(t => t.flId !== null);\n        this.enumFL.unshift(flData);\n      }\n      this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndBl();\n    }\n    onOpenFl() {\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      if (this.selectedBl.blId) {\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: this.selectedBl.blId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndFl();\n    }\n    static #_ = this.ɵfac = function RmcatRmtypeSvgComponent_Factory(t) {\n      return new (t || RmcatRmtypeSvgComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.NgxSpinnerService), i0.ɵɵdirectiveInject(i4.RmcatService), i0.ɵɵdirectiveInject(i5.MessageService), i0.ɵɵdirectiveInject(i5.ConfirmationService), i0.ɵɵdirectiveInject(i6.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RmcatRmtypeSvgComponent,\n      selectors: [[\"app-rmcat-rmtype-svg\"]],\n      viewQuery: function RmcatRmtypeSvgComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(SvgViewComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgViewComp = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 46,\n      vars: 22,\n      consts: [[1, \"card\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\", \"open\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"flId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\", \"open\"], [\"appendTo\", \"body\", \"formControlName\", \"view\", \"bindLabel\", \"value\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"margin\", \"5px 5px 0 5px\", \"display\", \"flex\", \"justify-content\", \"flex-end\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"click\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"height\", \"600px\"], [1, \"rmcat-selection-container\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [4, \"ngIf\"], [1, \"room-selection-container\"], [1, \"room-selection-control-container\"], [1, \"room-selection-control-message\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Assign\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Unassign\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"75px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", \"matTooltip\", \"Clear Selection\", \"matTooltipPosition\", \"below\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"style\", \"height:500px;\", 4, \"ngIf\"], [\"class\", \"card no-file-found\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [\"key\", \"rmcatrmtypesvgMsg\", \"position\", \"top-center\"], [\"key\", \"rmcatrmtypesvgGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"selectionMode\", \"single\", \"scrollHeight\", \"205px\", 3, \"value\", \"paginator\", \"rows\", \"rowHover\", \"scrollable\", \"onRowSelect\", \"onFilter\", \"onSort\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"pSortableColumn\", \"rmCat\"], [\"field\", \"rmCat\"], [\"type\", \"text\", \"field\", \"rmCat\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [1, \"td-class\"], [\"pSortableColumn\", \"rmType\"], [\"field\", \"rmType\"], [\"type\", \"text\", \"field\", \"rmType\", \"display\", \"menu\"], [2, \"height\", \"500px\"], [3, \"svgInputData\", \"onRoomClick\"], [1, \"card\", \"no-file-found\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"480px\", 3, \"value\", \"paginator\", \"rows\", \"selection\", \"rowHover\", \"scrollable\", \"selectionChange\", \"onFilter\", \"onSort\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"blBlCode\"], [\"field\", \"blBlCode\"], [\"type\", \"text\", \"field\", \"blBlCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"flFlCode\"], [\"field\", \"flFlCode\"], [\"type\", \"text\", \"field\", \"flFlCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmCode\"], [\"field\", \"rmCode\"], [\"type\", \"text\", \"field\", \"rmCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmcatRmCat\"], [\"field\", \"rmcatRmCat\"], [\"type\", \"text\", \"field\", \"rmcatRmCat\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmtypeRmType\"], [\"field\", \"rmtypeRmType\"], [\"type\", \"text\", \"field\", \"rmtypeRmType\", \"display\", \"menu\"], [3, \"value\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function RmcatRmtypeSvgComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function RmcatRmtypeSvgComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.onSelectBlCode($event);\n          })(\"scrollToEnd\", function RmcatRmtypeSvgComponent_Template_ng_select_scrollToEnd_8_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function RmcatRmtypeSvgComponent_Template_ng_select_search_8_listener($event) {\n            return ctx.searchBl($event);\n          })(\"open\", function RmcatRmtypeSvgComponent_Template_ng_select_open_8_listener() {\n            return ctx.onOpenBl();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"td\", 3)(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"ng-select\", 7);\n          i0.ɵɵlistener(\"change\", function RmcatRmtypeSvgComponent_Template_ng_select_change_13_listener($event) {\n            return ctx.onSelectFlCode($event);\n          })(\"scrollToEnd\", function RmcatRmtypeSvgComponent_Template_ng_select_scrollToEnd_13_listener() {\n            return ctx.scrollToEndFl();\n          })(\"search\", function RmcatRmtypeSvgComponent_Template_ng_select_search_13_listener($event) {\n            return ctx.searchFl($event);\n          })(\"open\", function RmcatRmtypeSvgComponent_Template_ng_select_open_13_listener() {\n            return ctx.onOpenFl();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"td\", 3)(15, \"div\", 4)(16, \"label\", 5);\n          i0.ɵɵtext(17, \"View\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"ng-select\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(19, \"td\", 3);\n          i0.ɵɵelementStart(20, \"td\", 3)(21, \"div\", 9)(22, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function RmcatRmtypeSvgComponent_Template_button_click_22_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function RmcatRmtypeSvgComponent_Template_button_click_23_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(24, \"div\", 0)(25, \"div\", 12)(26, \"div\", 13)(27, \"div\", 14);\n          i0.ɵɵtemplate(28, RmcatRmtypeSvgComponent_div_28_Template, 7, 11, \"div\", 15);\n          i0.ɵɵtemplate(29, RmcatRmtypeSvgComponent_div_29_Template, 7, 11, \"div\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(30, \"div\", 16)(31, \"div\", 17)(32, \"div\", 18)(33, \"div\");\n          i0.ɵɵtext(34);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(35, RmcatRmtypeSvgComponent_div_35_Template, 2, 1, \"div\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"div\")(37, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function RmcatRmtypeSvgComponent_Template_button_click_37_listener() {\n            return ctx.onAssigntoRooms();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"button\", 20);\n          i0.ɵɵlistener(\"click\", function RmcatRmtypeSvgComponent_Template_button_click_38_listener() {\n            return ctx.userConfirmUnAssign();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function RmcatRmtypeSvgComponent_Template_button_click_39_listener() {\n            return ctx.onCancelSelection();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(40, RmcatRmtypeSvgComponent_div_40_Template, 2, 1, \"div\", 22);\n          i0.ɵɵtemplate(41, RmcatRmtypeSvgComponent_div_41_Template, 3, 0, \"div\", 23);\n          i0.ɵɵtemplate(42, RmcatRmtypeSvgComponent_div_42_Template, 7, 12, \"div\", 22);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(43, RmcatRmtypeSvgComponent_ngx_spinner_43_Template, 3, 1, \"ngx-spinner\", 24);\n          i0.ɵɵelement(44, \"p-toast\", 25)(45, \"p-confirmDialog\", 26);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumView)(\"searchable\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.showrmcattable);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showrmtypetable);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate(ctx.selectionMessage);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.roomSelectedSvgElementIds.length > 0 || ctx.selectedRooms.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !(ctx.selectedRmType.length > 0 && (ctx.roomSelectedSvgElementIds.length > 0 || ctx.selectedRooms.length > 0)));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !(ctx.roomSelectedSvgElementIds.length > 0 || ctx.selectedRooms.length > 0));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !(ctx.roomSelectedSvgElementIds.length > 0 || ctx.selectedRooms.length > 0));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.viewSvg);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.displayNoFloorPlanInfo);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.viewSvg && !ctx.displayNoFloorPlanInfo);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i7.NgIf, i8.NgSelectComponent, i5.PrimeTemplate, i9.Table, i9.SortableColumn, i9.SelectableRow, i9.SortIcon, i9.TableCheckbox, i9.TableHeaderCheckbox, i9.ColumnFilter, i10.ButtonDirective, i11.Toast, i12.ConfirmDialog, i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.NgxSpinnerComponent, i13.SvgViewComponent, i14.MatTooltip, i15.Paginator],\n      styles: [\"[_nghost-%COMP%]     .p-dialog .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}.no-file-found[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:500px}.td-class[_ngcontent-%COMP%]{background-color:inherit;display:flex;align-items:center;justify-content:center;width:40px;height:20px;margin:10px auto auto;border:1px solid black}[_nghost-%COMP%]     .p-datatable-scrollable-body{overflow-y:auto!important}[_nghost-%COMP%]     .p-datatable-scrollable-header-box{padding:0!important}.room-selection-control-container[_ngcontent-%COMP%]{max-height:80px;display:flex;justify-content:space-between}.rmcat-selection-container[_ngcontent-%COMP%]{width:22%}.room-selection-container[_ngcontent-%COMP%]{width:77%;margin:5px;height:550px}@media screen and (min-width: 600px) and (max-width: 959px){.room-selection-control-message[_ngcontent-%COMP%]{max-width:50%}.rmcat-selection-container[_ngcontent-%COMP%]{width:28%}.room-selection-container[_ngcontent-%COMP%]{width:70%}}\"]\n    });\n  }\n  return RmcatRmtypeSvgComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}