{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { UtilConstant } from '../../../../../common/UtilConstant';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/city.service\";\nimport * as i2 from \"../../../../services/country.service\";\nimport * as i3 from \"../../services/regn.service\";\nimport * as i4 from \"../../services/state.service\";\nimport * as i5 from \"../../provider/city.provider\";\nimport * as i6 from \"primeng/api\";\nimport * as i7 from \"primeng/table\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/panel\";\nimport * as i10 from \"primeng/paginator\";\nfunction CityListComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function CityListComponent_ng_template_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onAddCity());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CityListComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 16);\n    i0.ɵɵelementStart(2, \"th\", 17)(3, \"div\", 18)(4, \"div\", 19)(5, \"p\", 20);\n    i0.ɵɵtext(6, \"City Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 21);\n    i0.ɵɵelement(8, \"p-sortIcon\", 22)(9, \"p-columnFilter\", 23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 24)(11, \"div\", 18)(12, \"div\", 19)(13, \"p\", 20);\n    i0.ɵɵtext(14, \"City Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 21);\n    i0.ɵɵelement(16, \"p-sortIcon\", 25)(17, \"p-columnFilter\", 26);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 27)(19, \"div\", 18)(20, \"div\", 19)(21, \"p\", 20);\n    i0.ɵɵtext(22, \"Country Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 21);\n    i0.ɵɵelement(24, \"p-sortIcon\", 28)(25, \"p-columnFilter\", 29);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"th\", 30)(27, \"div\", 18)(28, \"div\", 19)(29, \"p\", 20);\n    i0.ɵɵtext(30, \"Region Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 21);\n    i0.ɵɵelement(32, \"p-sortIcon\", 31)(33, \"p-columnFilter\", 32);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(34, \"th\", 33)(35, \"div\", 18)(36, \"div\", 19)(37, \"p\", 20);\n    i0.ɵɵtext(38, \"State Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 21);\n    i0.ɵɵelement(40, \"p-sortIcon\", 34)(41, \"p-columnFilter\", 35);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction CityListComponent_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 36)(1, \"td\", 16)(2, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function CityListComponent_ng_template_17_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const city_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.openEditItem(city_r7.cityId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const city_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", city_r7);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(city_r7.cityCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(city_r7.cityName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(city_r7.ctryCtryName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(city_r7.regnRegnName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(city_r7.stateStateName);\n  }\n}\nfunction CityListComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 6);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let CityListComponent = /*#__PURE__*/(() => {\n  class CityListComponent {\n    constructor(citySrv, cntrySrv, regnSrv, stateSrv, cityModalDialogueProvider) {\n      this.citySrv = citySrv;\n      this.cntrySrv = cntrySrv;\n      this.regnSrv = regnSrv;\n      this.stateSrv = stateSrv;\n      this.cityModalDialogueProvider = cityModalDialogueProvider;\n      this.EnumList = [];\n      this.enumCntry = [];\n      this.enumRegn = [];\n      this.enumState = [];\n      this.enumCity = [];\n      this.city_data = [];\n      this.subscriptions = [];\n      this.loading = false;\n      this.isCityList = true;\n      this.selectedCtry = \"\";\n      this.selectedRegn = \"\";\n      this.selectedState = \"\";\n      this.isHide = true;\n      this.displayedColumns = ['id', 'cityId', 'cityName', 'countryId', 'regnId', 'stateId'];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"ctryId\", \"regnId\"],\n        sortOrder: \"ASC\"\n      };\n      this.totalElements = 0;\n      this.filterCriteriaList = [];\n      this.isSorted = false;\n      this.isFiltered = false;\n      this.parentFun = new EventEmitter();\n    }\n    ngOnInit() {\n      // this.loadCntry();\n      // this.loadRegn();\n      // this.loadState();\n    }\n    loadCntry() {\n      this.cntrySrv.getALLCountry().subscribe(res => {\n        this.enumCntry = res;\n      });\n    }\n    loadRegn() {\n      this.regnSrv.getALLRegn().subscribe(res => {\n        this.enumRegn = res;\n      });\n    }\n    loadState() {\n      this.stateSrv.getALLState().subscribe(res => {\n        this.enumState = res;\n      });\n    }\n    getCtryNameById(id) {\n      return id ? this.enumCntry.find(t => t.id == id) != null ? this.enumCntry.find(t => t.id == id)?.name : '' : '';\n    }\n    getRegnNameById(id) {\n      return id ? this.enumRegn.find(t => t.id == id) != null ? this.enumRegn.find(t => t.id == id)?.name : '' : '';\n    }\n    getStateNameById(id) {\n      return id ? this.enumState.find(t => t.stateId == id) != null ? this.enumState.find(t => t.stateId == id)?.name : '' : '';\n    }\n    loadRecords(data) {\n      this.loading = true;\n      this.cityFilter = data;\n      this.cityFilter.filterDto.paginationDTO = this.paginationObj;\n      this.cityFilter.filterDto.filterCriteria = this.filterCriteriaList;\n      this.isCityList = true;\n      //this.city_data = [];\n      this.citySrv.getCityList(this.cityFilter).subscribe(res => {\n        if (res.status != 202) {\n          this.isCityList = false;\n          this.isFiltered = false;\n          this.city_data = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n        } else {\n          this.isCityList = true;\n          this.city_data = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    openEditItem(city_id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        city_id: city_id,\n        isEdit: true,\n        newRecord: false\n      };\n      this.cityModalDialogueProvider.openDialog(dialogConfig);\n      this.cityModalDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.loadRecords(this.cityFilter);\n      });\n    }\n    onAddCity() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        city_id: null,\n        isEdit: true,\n        newRecord: true\n      };\n      this.cityModalDialogueProvider.openDialog(dialogConfig);\n      this.cityModalDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.loadRecords(this.cityFilter);\n      });\n    }\n    onRowSelect(event) {\n      //alert(event.data);\n    }\n    onClearCity() {\n      this.selectedCtry = '';\n      this.selectedRegn = '';\n      this.selectedState = '';\n      this.isHide = true;\n      let cityData = {\n        cityId: 0,\n        cityCode: \"\",\n        name: \"\",\n        stateId: 0,\n        regnId: 0,\n        cntryId: 0,\n        filterDto: {\n          paginationDTO: {},\n          filterCriteria: []\n        }\n      };\n      this.loadRecords(cityData); //CityFilterInput\n      this.parentFun.emit(true);\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadRecords(this.cityFilter);\n    }\n    onSort(event) {\n      // this.isSorted = true;\n    }\n    onInnerFilter(event) {\n      this.isSorted = false;\n      setTimeout(() => {\n        if (this.isFiltered && !this.isSorted) {\n          this.isSorted = false;\n          Object.keys(event.filters).forEach(field => {\n            const filterValue = event.filters[field][0].value;\n            const matchMode = event.filters[field][0].matchMode;\n            if (filterValue !== undefined) {\n              let filterCriteria = {};\n              if (field == \"ctryCtryName\") {\n                filterCriteria = {\n                  fieldName: \"ctry.ctryName\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"regnRegnName\") {\n                filterCriteria = {\n                  fieldName: \"regn.regnName\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"stateStateName\") {\n                filterCriteria = {\n                  fieldName: \"state.stateName\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else {\n                filterCriteria = {\n                  fieldName: field,\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              }\n              this.updateFilterCriteriaList(filterCriteria);\n            }\n          });\n          // if (this.filterCriteriaList.length!=0) {\n          //   this.paginationObj.pageNo = 0;\n          // }\n          this.paginationObj.pageNo = 0;\n          this.loadRecords(this.cityFilter);\n        }\n        this.isFiltered = true;\n      }, 0);\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaList[index] = filterCriteria;\n        } else {\n          this.filterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function CityListComponent_Factory(t) {\n      return new (t || CityListComponent)(i0.ɵɵdirectiveInject(i1.CityService), i0.ɵɵdirectiveInject(i2.CountryService), i0.ɵɵdirectiveInject(i3.RegnService), i0.ɵɵdirectiveInject(i4.StateService), i0.ɵɵdirectiveInject(i5.CityModalDialogueProvider));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CityListComponent,\n      selectors: [[\"app-city-list\"]],\n      viewQuery: function CityListComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatSort, 5);\n          i0.ɵɵviewQuery(MatPaginator, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        }\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      decls: 21,\n      vars: 14,\n      consts: [[1, \"card\", 2, \"height\", \"85vh\"], [\"header\", \" \"], [2, \"width\", \"auto\", 3, \"hidden\"], [2, \"width\", \"auto\"], [\"width\", \"30px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-times\", 1, \"p-button-text\", \"p-button\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", 3, \"value\", \"paginator\", \"rowHover\", \"scrollable\", \"onFilter\", \"onSort\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"cityCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"cityCode\"], [\"type\", \"text\", \"field\", \"cityCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"cityName\"], [\"field\", \"cityName\"], [\"type\", \"text\", \"field\", \"cityName\", \"display\", \"menu\"], [\"pSortableColumn\", \"ctryCtryName\"], [\"field\", \"ctryCtryName\"], [\"type\", \"text\", \"field\", \"ctryCtryName\", \"display\", \"menu\"], [\"pSortableColumn\", \"regnRegnName\"], [\"field\", \"regnRegnName\"], [\"type\", \"text\", \"field\", \"regnRegnName\", \"display\", \"menu\"], [\"pSortableColumn\", \"stateStateName\"], [\"field\", \"stateStateName\"], [\"type\", \"text\", \"field\", \"stateStateName\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"]],\n      template: function CityListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"td\", 3);\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"td\", 3);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"td\", 4)(11, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function CityListComponent_Template_button_click_11_listener() {\n            return ctx.onClearCity();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(12, CityListComponent_ng_template_12_Template, 1, 0, \"ng-template\", 6);\n          i0.ɵɵelementStart(13, \"div\", 7)(14, \"p-table\", 8, 9);\n          i0.ɵɵlistener(\"onFilter\", function CityListComponent_Template_p_table_onFilter_14_listener($event) {\n            return ctx.onInnerFilter($event);\n          })(\"onSort\", function CityListComponent_Template_p_table_onSort_14_listener($event) {\n            return ctx.onSort($event);\n          });\n          i0.ɵɵtemplate(16, CityListComponent_ng_template_16_Template, 42, 0, \"ng-template\", 10);\n          i0.ɵɵtemplate(17, CityListComponent_ng_template_17_Template, 13, 6, \"ng-template\", 11);\n          i0.ɵɵtemplate(18, CityListComponent_ng_template_18_Template, 3, 1, \"ng-template\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 13)(20, \"p-paginator\", 14);\n          i0.ɵɵlistener(\"onPageChange\", function CityListComponent_Template_p_paginator_onPageChange_20_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"hidden\", ctx.isHide);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"\", ctx.selectedCtry, \"\\u00A0\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"\", ctx.selectedRegn, \"\\u00A0\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"\", ctx.selectedState, \"\\u00A0\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"value\", ctx.city_data)(\"paginator\", false)(\"rowHover\", false)(\"scrollable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(13, _c0));\n        }\n      },\n      dependencies: [i6.PrimeTemplate, i7.Table, i7.SortableColumn, i7.SelectableRow, i7.SortIcon, i7.ColumnFilter, i8.ButtonDirective, i9.Panel, i10.Paginator]\n    });\n  }\n  return CityListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}