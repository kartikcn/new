{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/data.service\";\nexport class AppParamsService {\n  constructor(AppParamsSrv, AppParamsSaveSrv) {\n    this.AppParamsSrv = AppParamsSrv;\n    this.AppParamsSaveSrv = AppParamsSaveSrv;\n    this.EVENT = \"\";\n    this.API_NAME = \"ap\";\n  }\n  getAppParamById(id) {\n    this.EVENT = \"get\";\n    return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n  }\n  getAppParamByCode(id) {\n    this.EVENT = \"getByCode\";\n    return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n  }\n  getAllAppParams() {\n    this.EVENT = \"all\";\n    return this.AppParamsSrv.getAll(this.API_NAME, this.EVENT);\n  }\n  getAllAppParamsPaginated(data) {\n    this.EVENT = \"allPaginated\";\n    return this.AppParamsSrv.search(this.API_NAME, this.EVENT, data);\n  }\n  saveAppParam(data) {\n    this.EVENT = \"save\";\n    return this.AppParamsSaveSrv.add(this.API_NAME, this.EVENT, data);\n  }\n  deleteAppParamById(data) {\n    this.EVENT = \"delete\";\n    return this.AppParamsSrv.deleteById(this.API_NAME, this.EVENT, data);\n  }\n  checkAppParamExists(item) {\n    this.EVENT = \"check\";\n    return this.AppParamsSrv.getSingle(this.API_NAME, this.EVENT, item);\n  }\n  getAppParamByParamId(id) {\n    this.EVENT = \"getbyparamid\";\n    return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n  }\n  static #_ = this.ɵfac = function AppParamsService_Factory(t) {\n    return new (t || AppParamsService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppParamsService,\n    factory: AppParamsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AppParamsService","constructor","AppParamsSrv","AppParamsSaveSrv","EVENT","API_NAME","getAppParamById","id","getSingleById","getAppParamByCode","getAllAppParams","getAll","getAllAppParamsPaginated","data","search","saveAppParam","add","deleteAppParamById","deleteById","checkAppParamExists","item","getSingle","getAppParamByParamId","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/app-params/services/app-params.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DataService } from 'src/app/services/data.service';\nimport { AppParams } from '../model/app-params.model';\nimport { AppParamsDTO } from '../model/app-params.dto';\n\n@Injectable({\n        providedIn: 'root'\n})\nexport class AppParamsService {\n\n        EVENT: string = \"\";\n        API_NAME: string = \"ap\";\n        constructor(\n                private AppParamsSrv: DataService<any>,\n                private AppParamsSaveSrv: DataService<AppParamsDTO>\n        ) { }\n\n        public getAppParamById(id: any): Observable<AppParams> {\n                this.EVENT = \"get\"\n                return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n        }\n        public getAppParamByCode(id: any): Observable<AppParams> {\n                this.EVENT = \"getByCode\"\n                return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n        }\n        public getAllAppParams(): Observable<AppParams[]> {\n                this.EVENT = \"all\"\n                return this.AppParamsSrv.getAll(this.API_NAME, this.EVENT);\n        }\n        public getAllAppParamsPaginated(data:any){\n                this.EVENT = \"allPaginated\"\n                return this.AppParamsSrv.search(this.API_NAME, this.EVENT,data);\n        }\n        public saveAppParam(data: AppParamsDTO) {\n                this.EVENT = \"save\"\n                return this.AppParamsSaveSrv.add(this.API_NAME, this.EVENT, data);\n        }\n        public deleteAppParamById(data: any) {\n                this.EVENT = \"delete\"\n                return this.AppParamsSrv.deleteById(this.API_NAME, this.EVENT, data);\n        }\n        public checkAppParamExists(item: any) {\n                this.EVENT = \"check\"\n                return this.AppParamsSrv.getSingle(this.API_NAME, this.EVENT, item);\n        }\n\n        public getAppParamByParamId(id: any): Observable<AppParams> {\n                this.EVENT = \"getbyparamid\"\n                return this.AppParamsSrv.getSingleById(this.API_NAME, this.EVENT, id);\n        }\n        \n}\n"],"mappings":";;AASA,OAAM,MAAOA,gBAAgB;EAIrBC,YACgBC,YAA8B,EAC9BC,gBAA2C;IAD3C,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAJhC,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,IAAI;EAInB;EAEGC,eAAeA,CAACC,EAAO;IACtB,IAAI,CAACH,KAAK,GAAG,KAAK;IAClB,OAAO,IAAI,CAACF,YAAY,CAACM,aAAa,CAAC,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAEG,EAAE,CAAC;EAC7E;EACOE,iBAAiBA,CAACF,EAAO;IACxB,IAAI,CAACH,KAAK,GAAG,WAAW;IACxB,OAAO,IAAI,CAACF,YAAY,CAACM,aAAa,CAAC,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAEG,EAAE,CAAC;EAC7E;EACOG,eAAeA,CAAA;IACd,IAAI,CAACN,KAAK,GAAG,KAAK;IAClB,OAAO,IAAI,CAACF,YAAY,CAACS,MAAM,CAAC,IAAI,CAACN,QAAQ,EAAE,IAAI,CAACD,KAAK,CAAC;EAClE;EACOQ,wBAAwBA,CAACC,IAAQ;IAChC,IAAI,CAACT,KAAK,GAAG,cAAc;IAC3B,OAAO,IAAI,CAACF,YAAY,CAACY,MAAM,CAAC,IAAI,CAACT,QAAQ,EAAE,IAAI,CAACD,KAAK,EAACS,IAAI,CAAC;EACvE;EACOE,YAAYA,CAACF,IAAkB;IAC9B,IAAI,CAACT,KAAK,GAAG,MAAM;IACnB,OAAO,IAAI,CAACD,gBAAgB,CAACa,GAAG,CAAC,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAES,IAAI,CAAC;EACzE;EACOI,kBAAkBA,CAACJ,IAAS;IAC3B,IAAI,CAACT,KAAK,GAAG,QAAQ;IACrB,OAAO,IAAI,CAACF,YAAY,CAACgB,UAAU,CAAC,IAAI,CAACb,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAES,IAAI,CAAC;EAC5E;EACOM,mBAAmBA,CAACC,IAAS;IAC5B,IAAI,CAAChB,KAAK,GAAG,OAAO;IACpB,OAAO,IAAI,CAACF,YAAY,CAACmB,SAAS,CAAC,IAAI,CAAChB,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAEgB,IAAI,CAAC;EAC3E;EAEOE,oBAAoBA,CAACf,EAAO;IAC3B,IAAI,CAACH,KAAK,GAAG,cAAc;IAC3B,OAAO,IAAI,CAACF,YAAY,CAACM,aAAa,CAAC,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACD,KAAK,EAAEG,EAAE,CAAC;EAC7E;EAAC,QAAAgB,CAAA,G;qBAzCIvB,gBAAgB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB5B,gBAAgB;IAAA6B,OAAA,EAAhB7B,gBAAgB,CAAA8B,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}