{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nexport let LinkPlanToLocationOrAssetService = /*#__PURE__*/(() => {\n  class LinkPlanToLocationOrAssetService {\n    constructor(linkPlanToLocationorAssetService) {\n      this.linkPlanToLocationorAssetService = linkPlanToLocationorAssetService;\n    }\n    getLinkedPlansForLocation(data) {\n      return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getLinked', data);\n    }\n    getUnLinkedPlansForLocation(data) {\n      return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getUnLinked', data);\n    }\n    save(data) {\n      return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'save', data);\n    }\n    delete(data) {\n      return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'delete', data);\n    }\n    getAll() {\n      return this.linkPlanToLocationorAssetService.getAll('linkPlanToLocation', 'getAll');\n    }\n    getAllPaginated(data) {\n      return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getAllPaginated', data);\n    }\n    getLocPlansByPlanId(planId) {\n      return this.linkPlanToLocationorAssetService.getAllById('linkPlanToLocation', 'getAllByPlanId', planId);\n    }\n    getLocPlansByPlanIdPaginated(data) {\n      return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getAllByPlanIdPaginated', data);\n    }\n    checkExists(data) {\n      return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'checkExists', data);\n    }\n    deleteById(id) {\n      return this.linkPlanToLocationorAssetService.getSingleById('linkPlanToLocation', 'daleteById', id);\n    }\n    static #_ = this.ɵfac = function LinkPlanToLocationOrAssetService_Factory(t) {\n      return new (t || LinkPlanToLocationOrAssetService)(i0.ɵɵinject(i1.DataService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LinkPlanToLocationOrAssetService,\n      factory: LinkPlanToLocationOrAssetService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LinkPlanToLocationOrAssetService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}