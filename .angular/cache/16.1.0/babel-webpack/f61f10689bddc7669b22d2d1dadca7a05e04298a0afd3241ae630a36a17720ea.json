{"ast":null,"code":"import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators';\n\n/// <reference path=\"./types.ts\" />\nconst _c0 = [\"*\"];\nconst _c1 = \"[_nghost-%COMP%]{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\";\nclass ChartEditorRef {\n  constructor(editor) {\n    this.editor = editor;\n    this.doneSubject = new Subject();\n    this.addEventListeners();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n  afterClosed() {\n    return this.doneSubject.asObservable();\n  }\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n  cancel() {\n    this.editor.closeDialog();\n  }\n  addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      const updatedChartWrapper = this.editor.getChartWrapper();\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n}\nvar ChartType;\n(function (ChartType) {\n  ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n  ChartType[\"AreaChart\"] = \"AreaChart\";\n  ChartType[\"Bar\"] = \"Bar\";\n  ChartType[\"BarChart\"] = \"BarChart\";\n  ChartType[\"BubbleChart\"] = \"BubbleChart\";\n  ChartType[\"Calendar\"] = \"Calendar\";\n  ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n  ChartType[\"ColumnChart\"] = \"ColumnChart\";\n  ChartType[\"ComboChart\"] = \"ComboChart\";\n  ChartType[\"PieChart\"] = \"PieChart\";\n  ChartType[\"Gantt\"] = \"Gantt\";\n  ChartType[\"Gauge\"] = \"Gauge\";\n  ChartType[\"GeoChart\"] = \"GeoChart\";\n  ChartType[\"Histogram\"] = \"Histogram\";\n  ChartType[\"Line\"] = \"Line\";\n  ChartType[\"LineChart\"] = \"LineChart\";\n  ChartType[\"Map\"] = \"Map\";\n  ChartType[\"OrgChart\"] = \"OrgChart\";\n  ChartType[\"Sankey\"] = \"Sankey\";\n  ChartType[\"Scatter\"] = \"Scatter\";\n  ChartType[\"ScatterChart\"] = \"ScatterChart\";\n  ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n  ChartType[\"Table\"] = \"Table\";\n  ChartType[\"Timeline\"] = \"Timeline\";\n  ChartType[\"TreeMap\"] = \"TreeMap\";\n  ChartType[\"WordTree\"] = \"wordtree\";\n})(ChartType || (ChartType = {}));\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\nfunction getPackageForChart(type) {\n  return ChartTypesToPackages[type];\n}\nfunction getDefaultConfig() {\n  return {\n    version: 'current',\n    safeMode: false\n  };\n}\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n  providedIn: 'root',\n  factory: () => {\n    const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n    return of({\n      ...getDefaultConfig(),\n      ...(configFromModule || {})\n    });\n  }\n});\nclass ScriptLoaderService {\n  constructor(zone, localeId, config$) {\n    this.zone = zone;\n    this.localeId = localeId;\n    this.config$ = config$;\n    this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n    this.scriptLoadSubject = new Subject();\n  }\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n  isGoogleChartsAvailable() {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n  loadChartPackages(...packages) {\n    return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n      return {\n        ...getDefaultConfig(),\n        ...(config || {})\n      };\n    }), switchMap(googleChartsConfig => {\n      return new Observable(observer => {\n        const config = {\n          packages,\n          language: this.localeId,\n          mapsApiKey: googleChartsConfig.mapsApiKey,\n          safeMode: googleChartsConfig.safeMode\n        };\n        google.charts.load(googleChartsConfig.version, config);\n        google.charts.setOnLoadCallback(() => {\n          this.zone.run(() => {\n            observer.next();\n            observer.complete();\n          });\n        });\n      });\n    }));\n  }\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n  loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(undefined);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n    return this.scriptLoadSubject.asObservable();\n  }\n  isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n  getGoogleChartsScript() {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n  createGoogleChartsScript() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n}\nScriptLoaderService.ɵfac = function ScriptLoaderService_Factory(t) {\n  return new (t || ScriptLoaderService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(LOCALE_ID), i0.ɵɵinject(GOOGLE_CHARTS_LAZY_CONFIG));\n};\nScriptLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptLoaderService,\n  factory: ScriptLoaderService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [GOOGLE_CHARTS_LAZY_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorComponent {\n  constructor(scriptLoaderService) {\n    this.scriptLoaderService = scriptLoaderService;\n    this.initializedSubject = new Subject();\n  }\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n  get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n  ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n  editChart(component, options) {\n    if (!component.chartWrapper) {\n      throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n    if (!this.editor) {\n      throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n    return handle;\n  }\n}\nChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) {\n  return new (t || ChartEditorComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\nChartEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartEditorComponent,\n  selectors: [[\"chart-editor\"]],\n  hostAttrs: [1, \"chart-editor\"],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ChartEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-editor',\n      template: `<ng-content></ng-content>`,\n      host: {\n        class: 'chart-editor'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, null);\n})();\nclass DataTableService {\n  create(data, columns, formatters) {\n    if (data == null) {\n      return undefined;\n    }\n    let firstRowIsData = true;\n    if (columns != null) {\n      firstRowIsData = false;\n    }\n    const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n    }\n    return dataTable;\n  }\n  getDataAsTable(data, columns) {\n    if (columns) {\n      return [columns, ...data];\n    } else {\n      return data;\n    }\n  }\n  applyFormatters(dataTable, formatters) {\n    for (const val of formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n}\nDataTableService.ɵfac = function DataTableService_Factory(t) {\n  return new (t || DataTableService)();\n};\nDataTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataTableService,\n  factory: DataTableService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nfunction generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\nvar FilterType;\n(function (FilterType) {\n  FilterType[\"Category\"] = \"CategoryFilter\";\n  FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n  FilterType[\"DateRange\"] = \"DateRangeFilter\";\n  FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n  FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\nclass ControlWrapperComponent {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n    /**\n     * Emits when an error occurs when attempting to render the control.\n     */\n    this.error = new EventEmitter();\n    /**\n     * The control is ready to accept user interaction and for external method calls.\n     *\n     * Alternatively, you can listen for a ready event on the dashboard holding the control\n     * and call control methods only after the event was fired.\n     */\n    this.ready = new EventEmitter();\n    /**\n     * Emits when the user interacts with the control, affecting its state.\n     * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n     *\n     * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n     */\n    this.stateChange = new EventEmitter();\n    /**\n     * A generated id assigned to this components DOM element.\n     */\n    this.id = generateRandomId();\n    this.wrapperReadySubject = new ReplaySubject(1);\n  }\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n  get controlWrapper() {\n    if (!this._controlWrapper) {\n      throw new Error(`Cannot access the control wrapper before it being initialized.`);\n    }\n    return this._controlWrapper;\n  }\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n    });\n  }\n  ngOnChanges(changes) {\n    if (!this._controlWrapper) {\n      return;\n    }\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options || {});\n    }\n    if (changes.state) {\n      this._controlWrapper.setState(this.state || {});\n    }\n  }\n  createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n  addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n}\nControlWrapperComponent.ɵfac = function ControlWrapperComponent_Factory(t) {\n  return new (t || ControlWrapperComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\nControlWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ControlWrapperComponent,\n  selectors: [[\"control-wrapper\"]],\n  hostAttrs: [1, \"control-wrapper\"],\n  hostVars: 1,\n  hostBindings: function ControlWrapperComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    for: \"for\",\n    type: \"type\",\n    options: \"options\",\n    state: \"state\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    stateChange: \"stateChange\"\n  },\n  exportAs: [\"controlWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ControlWrapperComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ControlWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'control-wrapper',\n      template: '',\n      host: {\n        class: 'control-wrapper'\n      },\n      exportAs: 'controlWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, {\n    for: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    stateChange: [{\n      type: Output\n    }],\n    id: [{\n      type: HostBinding,\n      args: ['id']\n    }]\n  });\n})();\nclass DashboardComponent {\n  constructor(element, loaderService, dataTableService) {\n    this.element = element;\n    this.loaderService = loaderService;\n    this.dataTableService = dataTableService;\n    /**\n     * The dashboard has completed drawing and is ready to accept changes.\n     *\n     * The ready event will also fire:\n     * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n     * - after redrawing any chart on the dashboard.\n     */\n    this.ready = new EventEmitter();\n    /**\n     * Emits when an error occurs when attempting to render the dashboard.\n     * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n     */\n    this.error = new EventEmitter();\n    this.initialized = false;\n  }\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n    if (changes.data || changes.columns || changes.formatters) {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n  createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers.map(control => control.for).map(charts => {\n      if (Array.isArray(charts)) {\n        // CombineLatest waits for all observables\n        return combineLatest(charts.map(chart => chart.wrapperReady$));\n      } else {\n        return charts.wrapperReady$;\n      }\n    });\n    // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.registerEvents();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n  registerEvents() {\n    google.visualization.events.removeAllListeners(this.dashboard);\n    const registerDashEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n    registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n    registerDashEvent(this.dashboard, 'error', error => this.error.emit(error));\n  }\n  initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n}\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService));\n};\nDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"dashboard\"]],\n  contentQueries: function DashboardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, ControlWrapperComponent, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlWrappers = _t);\n    }\n  },\n  hostAttrs: [1, \"dashboard\"],\n  inputs: {\n    data: \"data\",\n    columns: \"columns\",\n    formatters: \"formatters\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\"\n  },\n  exportAs: [\"dashboard\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dashboard',\n      template: '<ng-content></ng-content>',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'dashboard',\n      host: {\n        class: 'dashboard'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    controlWrappers: [{\n      type: ContentChildren,\n      args: [ControlWrapperComponent]\n    }]\n  });\n})();\nclass GoogleChartComponent {\n  constructor(element, scriptLoaderService, dataTableService, dashboard) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.dataTableService = dataTableService;\n    this.dashboard = dashboard;\n    /**\n     * The chart-specific options. All options listen in the Google Charts documentation applying\n     * to the chart type specified can be used here.\n     */\n    this.options = {};\n    /**\n     * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n     * Defaults to `false` and should only be used when specifying the width or height of the chart\n     * in percent.\n     *\n     * Note that this can impact performance.\n     */\n    this.dynamicResize = false;\n    this.ready = new EventEmitter();\n    this.error = new EventEmitter();\n    this.select = new EventEmitter();\n    this.mouseover = new EventEmitter();\n    this.mouseleave = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n    this.eventListeners = new Map();\n  }\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Trying to access the chart wrapper before it was fully initialized');\n    }\n    return this.wrapper;\n  }\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      // Only ever create the wrapper once to allow animations to happen when something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n      this.drawChart();\n    });\n  }\n  ngOnChanges(changes) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n    if (this.initialized) {\n      let shouldRedraw = false;\n      if (changes.data || changes.columns || changes.formatters) {\n        this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.unsubscribeToResizeIfSubscribed();\n  }\n  /**\n   * For listening to events other than the most common ones (available via Output properties).\n   *\n   * Can be called after the chart emits that it's \"ready\".\n   *\n   * Returns a handle that can be used for `removeEventListener`.\n   */\n  addEventListener(eventName, callback) {\n    const handle = this.registerChartEvent(this.chart, eventName, callback);\n    this.eventListeners.set(handle, {\n      eventName,\n      callback,\n      handle\n    });\n    return handle;\n  }\n  removeEventListener(handle) {\n    const entry = this.eventListeners.get(handle);\n    if (entry) {\n      google.visualization.events.removeListener(entry.handle);\n      this.eventListeners.delete(handle);\n    }\n  }\n  updateResizeListener() {\n    this.unsubscribeToResizeIfSubscribed();\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize', {\n        passive: true\n      }).pipe(debounceTime(100)).subscribe(() => {\n        if (this.initialized) {\n          this.drawChart();\n        }\n      });\n    }\n  }\n  unsubscribeToResizeIfSubscribed() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = undefined;\n    }\n  }\n  mergeOptions() {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n    this.registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      this.registerChartEvent(this.chart, 'onmouseover', event => this.mouseover.emit(event));\n      this.registerChartEvent(this.chart, 'onmouseout', event => this.mouseleave.emit(event));\n      this.registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({\n          selection\n        });\n      });\n      this.eventListeners.forEach(x => x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback));\n      this.ready.emit({\n        chart: this.chart\n      });\n    });\n    this.registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n  }\n  registerChartEvent(object, eventName, callback) {\n    return google.visualization.events.addListener(object, eventName, callback);\n  }\n  drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n    this.wrapper.draw();\n  }\n}\nGoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) {\n  return new (t || GoogleChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService), i0.ɵɵdirectiveInject(DashboardComponent, 8));\n};\nGoogleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartComponent,\n  selectors: [[\"google-chart\"]],\n  hostAttrs: [1, \"google-chart\"],\n  inputs: {\n    type: \"type\",\n    data: \"data\",\n    columns: \"columns\",\n    title: \"title\",\n    width: \"width\",\n    height: \"height\",\n    options: \"options\",\n    formatters: \"formatters\",\n    dynamicResize: \"dynamicResize\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\",\n    select: \"select\",\n    mouseover: \"mouseover\",\n    mouseleave: \"mouseleave\"\n  },\n  exportAs: [\"googleChart\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function GoogleChartComponent_Template(rf, ctx) {},\n  styles: [\"[_nghost-%COMP%]{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-chart',\n      template: '',\n      host: {\n        class: 'google-chart'\n      },\n      exportAs: 'googleChart',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }, {\n      type: DashboardComponent,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    dynamicResize: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    mouseover: [{\n      type: Output\n    }],\n    mouseleave: [{\n      type: Output\n    }]\n  });\n})();\nclass ChartWrapperComponent {\n  constructor(element, scriptLoaderService) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.error = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.select = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n  }\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Cannot access the chart wrapper before initialization.');\n    }\n    return this.wrapper;\n  }\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {};\n      }\n      const {\n        containerId,\n        container,\n        ...specs\n      } = this.specs;\n      // Only ever create the wrapper once to allow animations to happen if something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n  updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {};\n    }\n    // The typing here are not correct. These methods accept `undefined` as well.\n    // That's why we have to cast to `any`\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n  drawChart() {\n    if (this.wrapper) {\n      this.wrapper.draw();\n    }\n  }\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n    const registerChartEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({\n      chart: this.chart\n    }));\n    registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({\n        selection\n      });\n    });\n  }\n}\nChartWrapperComponent.ɵfac = function ChartWrapperComponent_Factory(t) {\n  return new (t || ChartWrapperComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\nChartWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartWrapperComponent,\n  selectors: [[\"chart-wrapper\"]],\n  hostAttrs: [1, \"chart-wrapper\"],\n  inputs: {\n    specs: \"specs\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    select: \"select\"\n  },\n  exportAs: [\"chartWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ChartWrapperComponent_Template(rf, ctx) {},\n  styles: [_c1],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-wrapper',\n      template: '',\n      host: {\n        class: 'chart-wrapper'\n      },\n      exportAs: 'chartWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }];\n  }, {\n    specs: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\nclass GoogleChartsModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{\n        provide: GOOGLE_CHARTS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\nGoogleChartsModule.ɵfac = function GoogleChartsModule_Factory(t) {\n  return new (t || GoogleChartsModule)();\n};\nGoogleChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleChartsModule\n});\nGoogleChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptLoaderService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n      providers: [ScriptLoaderService],\n      exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };","map":{"version":3,"names":["i1","Subject","of","Observable","ReplaySubject","combineLatest","fromEvent","i0","InjectionToken","inject","InjectFlags","LOCALE_ID","Injectable","Inject","Component","ChangeDetectionStrategy","EventEmitter","Input","Output","HostBinding","ContentChildren","Optional","NgModule","mergeMap","map","switchMap","debounceTime","_c0","_c1","ChartEditorRef","constructor","editor","doneSubject","addEventListeners","afterClosed","asObservable","cancel","closeDialog","google","visualization","events","addOneTimeListener","removeAllListeners","updatedChartWrapper","getChartWrapper","next","complete","ChartType","ChartTypesToPackages","AnnotationChart","AreaChart","Bar","BarChart","BubbleChart","Calendar","CandlestickChart","ColumnChart","ComboChart","PieChart","Gantt","Gauge","GeoChart","Histogram","Line","LineChart","Map","OrgChart","Sankey","Scatter","ScatterChart","SteppedAreaChart","Table","Timeline","TreeMap","WordTree","getPackageForChart","type","getDefaultConfig","version","safeMode","GOOGLE_CHARTS_CONFIG","GOOGLE_CHARTS_LAZY_CONFIG","providedIn","factory","configFromModule","ScriptLoaderService","zone","localeId","config$","scriptSource","scriptLoadSubject","isGoogleChartsAvailable","charts","loadChartPackages","packages","loadGoogleCharts","pipe","config","googleChartsConfig","observer","language","mapsApiKey","load","setOnLoadCallback","run","undefined","isLoadingGoogleCharts","script","createGoogleChartsScript","onload","onerror","console","error","Error","getGoogleChartsScript","pageScripts","Array","from","document","getElementsByTagName","find","src","createElement","async","appendChild","ɵfac","ScriptLoaderService_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","ngDevMode","ɵsetClassMetadata","decorators","args","ChartEditorComponent","scriptLoaderService","initializedSubject","initialized$","ngOnInit","subscribe","ChartEditor","editChart","component","options","chartWrapper","handle","openDialog","result","ChartEditorComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","ngContentSelectors","decls","vars","template","ChartEditorComponent_Template","rf","ctx","ɵɵprojectionDef","ɵɵprojection","encapsulation","changeDetection","selector","host","class","OnPush","DataTableService","create","data","columns","formatters","firstRowIsData","dataTable","arrayToDataTable","getDataAsTable","applyFormatters","val","formatter","format","colIndex","DataTableService_Factory","generateRandomId","Math","random","toString","substr","FilterType","ControlWrapperComponent","loaderService","ready","stateChange","id","wrapperReadySubject","wrapperReady$","controlWrapper","_controlWrapper","createControlWrapper","ngOnChanges","changes","setControlType","setOptions","state","setState","ControlWrapper","containerId","controlType","addListener","event","emit","ControlWrapperComponent_Factory","hostVars","hostBindings","ControlWrapperComponent_HostBindings","ɵɵhostProperty","inputs","for","outputs","exportAs","features","ɵɵNgOnChangesFeature","ControlWrapperComponent_Template","DashboardComponent","element","dataTableService","initialized","createDashboard","dashboard","draw","controlWrappersReady$","controlWrappers","control","chartsReady$","isArray","chart","Dashboard","nativeElement","initializeBindings","registerEvents","registerDashEvent","object","eventName","callback","forEach","chartWrappers","bind","DashboardComponent_Factory","ElementRef","contentQueries","DashboardComponent_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","DashboardComponent_Template","GoogleChartComponent","dynamicResize","select","mouseover","mouseleave","eventListeners","getChart","wrapper","drawChart","ChartWrapper","container","chartType","mergeOptions","registerChartEvents","updateResizeListener","shouldRedraw","setDataTable","setChartType","width","height","title","ngOnDestroy","unsubscribeToResizeIfSubscribed","addEventListener","registerChartEvent","set","removeEventListener","entry","get","removeListener","delete","resizeSubscription","window","passive","unsubscribe","selection","getSelection","x","GoogleChartComponent_Factory","GoogleChartComponent_Template","styles","ChartWrapperComponent","specs","updateChart","setDataSourceUrl","dataSourceUrl","setQuery","query","setRefreshInterval","refreshInterval","setView","view","ChartWrapperComponent_Factory","ChartWrapperComponent_Template","GoogleChartsModule","forRoot","ngModule","providers","provide","useValue","GoogleChartsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports"],"sources":["/home/admin7/Documents/fms_frontend/node_modules/angular-google-charts/fesm2020/angular-google-charts.mjs"],"sourcesContent":["import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators';\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorRef {\n    constructor(editor) {\n        this.editor = editor;\n        this.doneSubject = new Subject();\n        this.addEventListeners();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is saved.\n     * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n     */\n    afterClosed() {\n        return this.doneSubject.asObservable();\n    }\n    /**\n     * Stops editing the chart and closes the dialog.\n     */\n    cancel() {\n        this.editor.closeDialog();\n    }\n    addEventListeners() {\n        google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            const updatedChartWrapper = this.editor.getChartWrapper();\n            this.doneSubject.next(updatedChartWrapper);\n            this.doneSubject.complete();\n        });\n        google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            this.doneSubject.next(null);\n            this.doneSubject.complete();\n        });\n    }\n}\n\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n    ChartType[\"AreaChart\"] = \"AreaChart\";\n    ChartType[\"Bar\"] = \"Bar\";\n    ChartType[\"BarChart\"] = \"BarChart\";\n    ChartType[\"BubbleChart\"] = \"BubbleChart\";\n    ChartType[\"Calendar\"] = \"Calendar\";\n    ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n    ChartType[\"ColumnChart\"] = \"ColumnChart\";\n    ChartType[\"ComboChart\"] = \"ComboChart\";\n    ChartType[\"PieChart\"] = \"PieChart\";\n    ChartType[\"Gantt\"] = \"Gantt\";\n    ChartType[\"Gauge\"] = \"Gauge\";\n    ChartType[\"GeoChart\"] = \"GeoChart\";\n    ChartType[\"Histogram\"] = \"Histogram\";\n    ChartType[\"Line\"] = \"Line\";\n    ChartType[\"LineChart\"] = \"LineChart\";\n    ChartType[\"Map\"] = \"Map\";\n    ChartType[\"OrgChart\"] = \"OrgChart\";\n    ChartType[\"Sankey\"] = \"Sankey\";\n    ChartType[\"Scatter\"] = \"Scatter\";\n    ChartType[\"ScatterChart\"] = \"ScatterChart\";\n    ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n    ChartType[\"Table\"] = \"Table\";\n    ChartType[\"Timeline\"] = \"Timeline\";\n    ChartType[\"TreeMap\"] = \"TreeMap\";\n    ChartType[\"WordTree\"] = \"wordtree\";\n})(ChartType || (ChartType = {}));\n\nconst ChartTypesToPackages = {\n    [ChartType.AnnotationChart]: 'annotationchart',\n    [ChartType.AreaChart]: 'corechart',\n    [ChartType.Bar]: 'bar',\n    [ChartType.BarChart]: 'corechart',\n    [ChartType.BubbleChart]: 'corechart',\n    [ChartType.Calendar]: 'calendar',\n    [ChartType.CandlestickChart]: 'corechart',\n    [ChartType.ColumnChart]: 'corechart',\n    [ChartType.ComboChart]: 'corechart',\n    [ChartType.PieChart]: 'corechart',\n    [ChartType.Gantt]: 'gantt',\n    [ChartType.Gauge]: 'gauge',\n    [ChartType.GeoChart]: 'geochart',\n    [ChartType.Histogram]: 'corechart',\n    [ChartType.Line]: 'line',\n    [ChartType.LineChart]: 'corechart',\n    [ChartType.Map]: 'map',\n    [ChartType.OrgChart]: 'orgchart',\n    [ChartType.Sankey]: 'sankey',\n    [ChartType.Scatter]: 'scatter',\n    [ChartType.ScatterChart]: 'corechart',\n    [ChartType.SteppedAreaChart]: 'corechart',\n    [ChartType.Table]: 'table',\n    [ChartType.Timeline]: 'timeline',\n    [ChartType.TreeMap]: 'treemap',\n    [ChartType.WordTree]: 'wordtree'\n};\nfunction getPackageForChart(type) {\n    return ChartTypesToPackages[type];\n}\nfunction getDefaultConfig() {\n    return {\n        version: 'current',\n        safeMode: false\n    };\n}\n\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n    providedIn: 'root',\n    factory: () => {\n        const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n        return of({ ...getDefaultConfig(), ...(configFromModule || {}) });\n    }\n});\n\nclass ScriptLoaderService {\n    constructor(zone, localeId, config$) {\n        this.zone = zone;\n        this.localeId = localeId;\n        this.config$ = config$;\n        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n        this.scriptLoadSubject = new Subject();\n    }\n    /**\n     * Checks whether `google.charts` is available.\n     *\n     * If not, it can be loaded by calling `loadChartPackages`.\n     *\n     * @returns `true` if `google.charts` is available, `false` otherwise.\n     */\n    isGoogleChartsAvailable() {\n        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Loads the Google Chart script and the provided chart packages.\n     * Can be called multiple times to load more packages.\n     *\n     * When called without any arguments, this will just load the default package\n     * containing the namespaces `google.charts` and `google.visualization` without any charts.\n     *\n     * @param packages The packages to load.\n     * @returns A stream emitting as soon as the chart packages are loaded.\n     */\n    loadChartPackages(...packages) {\n        return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n            return { ...getDefaultConfig(), ...(config || {}) };\n        }), switchMap((googleChartsConfig) => {\n            return new Observable(observer => {\n                const config = {\n                    packages,\n                    language: this.localeId,\n                    mapsApiKey: googleChartsConfig.mapsApiKey,\n                    safeMode: googleChartsConfig.safeMode\n                };\n                google.charts.load(googleChartsConfig.version, config);\n                google.charts.setOnLoadCallback(() => {\n                    this.zone.run(() => {\n                        observer.next();\n                        observer.complete();\n                    });\n                });\n            });\n        }));\n    }\n    /**\n     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n     *\n     * @returns A stream emitting as soon as loading has completed.\n     * If the google charts script is already loaded, the stream emits immediately.\n     */\n    loadGoogleCharts() {\n        if (this.isGoogleChartsAvailable()) {\n            return of(undefined);\n        }\n        else if (!this.isLoadingGoogleCharts()) {\n            const script = this.createGoogleChartsScript();\n            script.onload = () => {\n                this.zone.run(() => {\n                    this.scriptLoadSubject.next();\n                    this.scriptLoadSubject.complete();\n                });\n            };\n            script.onerror = () => {\n                this.zone.run(() => {\n                    console.error('Failed to load the google charts script!');\n                    this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n                });\n            };\n        }\n        return this.scriptLoadSubject.asObservable();\n    }\n    isLoadingGoogleCharts() {\n        return this.getGoogleChartsScript() != null;\n    }\n    getGoogleChartsScript() {\n        const pageScripts = Array.from(document.getElementsByTagName('script'));\n        return pageScripts.find(script => script.src === this.scriptSource);\n    }\n    createGoogleChartsScript() {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = this.scriptSource;\n        script.async = true;\n        document.getElementsByTagName('head')[0].appendChild(script);\n        return script;\n    }\n}\nScriptLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService, deps: [{ token: i0.NgZone }, { token: LOCALE_ID }, { token: GOOGLE_CHARTS_LAZY_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nScriptLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: i1.Observable, decorators: [{\n                    type: Inject,\n                    args: [GOOGLE_CHARTS_LAZY_CONFIG]\n                }] }]; } });\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorComponent {\n    constructor(scriptLoaderService) {\n        this.scriptLoaderService = scriptLoaderService;\n        this.initializedSubject = new Subject();\n    }\n    /**\n     * Emits as soon as the chart editor is fully initialized.\n     */\n    get initialized$() {\n        return this.initializedSubject.asObservable();\n    }\n    ngOnInit() {\n        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n            this.editor = new google.visualization.ChartEditor();\n            this.initializedSubject.next(this.editor);\n            this.initializedSubject.complete();\n        });\n    }\n    editChart(component, options) {\n        if (!component.chartWrapper) {\n            throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        if (!this.editor) {\n            throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        const handle = new ChartEditorRef(this.editor);\n        this.editor.openDialog(component.chartWrapper, options || {});\n        handle.afterClosed().subscribe(result => {\n            if (result) {\n                component.chartWrapper = result;\n            }\n        });\n        return handle;\n    }\n}\nChartEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartEditorComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ChartEditorComponent, selector: \"chart-editor\", host: { classAttribute: \"chart-editor\" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'chart-editor',\n                    template: `<ng-content></ng-content>`,\n                    host: { class: 'chart-editor' },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; } });\n\nclass DataTableService {\n    create(data, columns, formatters) {\n        if (data == null) {\n            return undefined;\n        }\n        let firstRowIsData = true;\n        if (columns != null) {\n            firstRowIsData = false;\n        }\n        const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n        if (formatters) {\n            this.applyFormatters(dataTable, formatters);\n        }\n        return dataTable;\n    }\n    getDataAsTable(data, columns) {\n        if (columns) {\n            return [columns, ...data];\n        }\n        else {\n            return data;\n        }\n    }\n    applyFormatters(dataTable, formatters) {\n        for (const val of formatters) {\n            val.formatter.format(dataTable, val.colIndex);\n        }\n    }\n}\nDataTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDataTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nfunction generateRandomId() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nvar FilterType;\n(function (FilterType) {\n    FilterType[\"Category\"] = \"CategoryFilter\";\n    FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n    FilterType[\"DateRange\"] = \"DateRangeFilter\";\n    FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n    FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\n\nclass ControlWrapperComponent {\n    constructor(loaderService) {\n        this.loaderService = loaderService;\n        /**\n         * Emits when an error occurs when attempting to render the control.\n         */\n        this.error = new EventEmitter();\n        /**\n         * The control is ready to accept user interaction and for external method calls.\n         *\n         * Alternatively, you can listen for a ready event on the dashboard holding the control\n         * and call control methods only after the event was fired.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when the user interacts with the control, affecting its state.\n         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n         *\n         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n         */\n        this.stateChange = new EventEmitter();\n        /**\n         * A generated id assigned to this components DOM element.\n         */\n        this.id = generateRandomId();\n        this.wrapperReadySubject = new ReplaySubject(1);\n    }\n    /**\n     * Emits after the `ControlWrapper` was created.\n     */\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get controlWrapper() {\n        if (!this._controlWrapper) {\n            throw new Error(`Cannot access the control wrapper before it being initialized.`);\n        }\n        return this._controlWrapper;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.createControlWrapper();\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this._controlWrapper) {\n            return;\n        }\n        if (changes.type) {\n            this._controlWrapper.setControlType(this.type);\n        }\n        if (changes.options) {\n            this._controlWrapper.setOptions(this.options || {});\n        }\n        if (changes.state) {\n            this._controlWrapper.setState(this.state || {});\n        }\n    }\n    createControlWrapper() {\n        this._controlWrapper = new google.visualization.ControlWrapper({\n            containerId: this.id,\n            controlType: this.type,\n            state: this.state,\n            options: this.options\n        });\n        this.addEventListeners();\n        this.wrapperReadySubject.next(this._controlWrapper);\n    }\n    addEventListeners() {\n        google.visualization.events.removeAllListeners(this._controlWrapper);\n        google.visualization.events.addListener(this._controlWrapper, 'ready', (event) => this.ready.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'error', (event) => this.error.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'statechange', (event) => this.stateChange.emit(event));\n    }\n}\nControlWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ControlWrapperComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nControlWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ControlWrapperComponent, selector: \"control-wrapper\", inputs: { for: \"for\", type: \"type\", options: \"options\", state: \"state\" }, outputs: { error: \"error\", ready: \"ready\", stateChange: \"stateChange\" }, host: { properties: { \"id\": \"this.id\" }, classAttribute: \"control-wrapper\" }, exportAs: [\"controlWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ControlWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'control-wrapper',\n                    template: '',\n                    host: { class: 'control-wrapper' },\n                    exportAs: 'controlWrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; }, propDecorators: { for: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], state: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], stateChange: [{\n                type: Output\n            }], id: [{\n                type: HostBinding,\n                args: ['id']\n            }] } });\n\nclass DashboardComponent {\n    constructor(element, loaderService, dataTableService) {\n        this.element = element;\n        this.loaderService = loaderService;\n        this.dataTableService = dataTableService;\n        /**\n         * The dashboard has completed drawing and is ready to accept changes.\n         *\n         * The ready event will also fire:\n         * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n         * - after redrawing any chart on the dashboard.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when an error occurs when attempting to render the dashboard.\n         * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n         */\n        this.error = new EventEmitter();\n        this.initialized = false;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.createDashboard();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.data || changes.columns || changes.formatters) {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.dashboard.draw(this.dataTable);\n        }\n    }\n    createDashboard() {\n        // TODO: This should happen in the control wrapper\n        // However, I don't yet know how to do this because then `bind()` would get called multiple times\n        // for the same control if something changes. This is not supported by google charts as far as I can tell\n        // from their source code.\n        const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n        const chartsReady$ = this.controlWrappers\n            .map(control => control.for)\n            .map(charts => {\n            if (Array.isArray(charts)) {\n                // CombineLatest waits for all observables\n                return combineLatest(charts.map(chart => chart.wrapperReady$));\n            }\n            else {\n                return charts.wrapperReady$;\n            }\n        });\n        // We have to wait for all chart wrappers and control wrappers to be initialized\n        // before we can compose them together to create the dashboard\n        combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n            this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n            this.initializeBindings();\n            this.registerEvents();\n            this.dashboard.draw(this.dataTable);\n        });\n    }\n    registerEvents() {\n        google.visualization.events.removeAllListeners(this.dashboard);\n        const registerDashEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n        registerDashEvent(this.dashboard, 'error', (error) => this.error.emit(error));\n    }\n    initializeBindings() {\n        this.controlWrappers.forEach(control => {\n            if (Array.isArray(control.for)) {\n                const chartWrappers = control.for.map(chart => chart.chartWrapper);\n                this.dashboard.bind(control.controlWrapper, chartWrappers);\n            }\n            else {\n                this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n            }\n        });\n    }\n}\nDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DashboardComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }], target: i0.ɵɵFactoryTarget.Component });\nDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: DashboardComponent, selector: \"dashboard\", inputs: { data: \"data\", columns: \"columns\", formatters: \"formatters\" }, outputs: { ready: \"ready\", error: \"error\" }, host: { classAttribute: \"dashboard\" }, queries: [{ propertyName: \"controlWrappers\", predicate: ControlWrapperComponent }], exportAs: [\"dashboard\"], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DashboardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dashboard',\n                    template: '<ng-content></ng-content>',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'dashboard',\n                    host: { class: 'dashboard' }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }]; }, propDecorators: { data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], controlWrappers: [{\n                type: ContentChildren,\n                args: [ControlWrapperComponent]\n            }] } });\n\nclass GoogleChartComponent {\n    constructor(element, scriptLoaderService, dataTableService, dashboard) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.dataTableService = dataTableService;\n        this.dashboard = dashboard;\n        /**\n         * The chart-specific options. All options listen in the Google Charts documentation applying\n         * to the chart type specified can be used here.\n         */\n        this.options = {};\n        /**\n         * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n         * Defaults to `false` and should only be used when specifying the width or height of the chart\n         * in percent.\n         *\n         * Note that this can impact performance.\n         */\n        this.dynamicResize = false;\n        this.ready = new EventEmitter();\n        this.error = new EventEmitter();\n        this.select = new EventEmitter();\n        this.mouseover = new EventEmitter();\n        this.mouseleave = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n        this.eventListeners = new Map();\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Trying to access the chart wrapper before it was fully initialized');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this for us\n        this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            // Only ever create the wrapper once to allow animations to happen when something changes.\n            this.wrapper = new google.visualization.ChartWrapper({\n                container: this.element.nativeElement,\n                chartType: this.type,\n                dataTable: this.dataTable,\n                options: this.mergeOptions()\n            });\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.initialized = true;\n            this.drawChart();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.dynamicResize) {\n            this.updateResizeListener();\n        }\n        if (this.initialized) {\n            let shouldRedraw = false;\n            if (changes.data || changes.columns || changes.formatters) {\n                this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n                this.wrapper.setDataTable(this.dataTable);\n                shouldRedraw = true;\n            }\n            if (changes.type) {\n                this.wrapper.setChartType(this.type);\n                shouldRedraw = true;\n            }\n            if (changes.options || changes.width || changes.height || changes.title) {\n                this.wrapper.setOptions(this.mergeOptions());\n                shouldRedraw = true;\n            }\n            if (shouldRedraw) {\n                this.drawChart();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribeToResizeIfSubscribed();\n    }\n    /**\n     * For listening to events other than the most common ones (available via Output properties).\n     *\n     * Can be called after the chart emits that it's \"ready\".\n     *\n     * Returns a handle that can be used for `removeEventListener`.\n     */\n    addEventListener(eventName, callback) {\n        const handle = this.registerChartEvent(this.chart, eventName, callback);\n        this.eventListeners.set(handle, { eventName, callback, handle });\n        return handle;\n    }\n    removeEventListener(handle) {\n        const entry = this.eventListeners.get(handle);\n        if (entry) {\n            google.visualization.events.removeListener(entry.handle);\n            this.eventListeners.delete(handle);\n        }\n    }\n    updateResizeListener() {\n        this.unsubscribeToResizeIfSubscribed();\n        if (this.dynamicResize) {\n            this.resizeSubscription = fromEvent(window, 'resize', { passive: true })\n                .pipe(debounceTime(100))\n                .subscribe(() => {\n                if (this.initialized) {\n                    this.drawChart();\n                }\n            });\n        }\n    }\n    unsubscribeToResizeIfSubscribed() {\n        if (this.resizeSubscription != null) {\n            this.resizeSubscription.unsubscribe();\n            this.resizeSubscription = undefined;\n        }\n    }\n    mergeOptions() {\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            ...this.options\n        };\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        this.registerChartEvent(this.wrapper, 'ready', () => {\n            // This could also be done by checking if we already subscribed to the events\n            google.visualization.events.removeAllListeners(this.chart);\n            this.registerChartEvent(this.chart, 'onmouseover', (event) => this.mouseover.emit(event));\n            this.registerChartEvent(this.chart, 'onmouseout', (event) => this.mouseleave.emit(event));\n            this.registerChartEvent(this.chart, 'select', () => {\n                const selection = this.chart.getSelection();\n                this.select.emit({ selection });\n            });\n            this.eventListeners.forEach(x => (x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback)));\n            this.ready.emit({ chart: this.chart });\n        });\n        this.registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n    }\n    registerChartEvent(object, eventName, callback) {\n        return google.visualization.events.addListener(object, eventName, callback);\n    }\n    drawChart() {\n        if (this.dashboard != null) {\n            // If this chart is part of a dashboard, the dashboard takes care of drawing\n            return;\n        }\n        this.wrapper.draw();\n    }\n}\nGoogleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }, { token: DashboardComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: GoogleChartComponent, selector: \"google-chart\", inputs: { type: \"type\", data: \"data\", columns: \"columns\", title: \"title\", width: \"width\", height: \"height\", options: \"options\", formatters: \"formatters\", dynamicResize: \"dynamicResize\" }, outputs: { ready: \"ready\", error: \"error\", select: \"select\", mouseover: \"mouseover\", mouseleave: \"mouseleave\" }, host: { classAttribute: \"google-chart\" }, exportAs: [\"googleChart\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'google-chart', template: '', host: { class: 'google-chart' }, exportAs: 'googleChart', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }, { type: DashboardComponent, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { type: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], dynamicResize: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], mouseover: [{\n                type: Output\n            }], mouseleave: [{\n                type: Output\n            }] } });\n\nclass ChartWrapperComponent {\n    constructor(element, scriptLoaderService) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.error = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.select = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Cannot access the chart wrapper before initialization.');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this else for us\n        this.scriptLoaderService.loadChartPackages().subscribe(() => {\n            if (!this.specs) {\n                this.specs = {};\n            }\n            const { containerId, container, ...specs } = this.specs;\n            // Only ever create the wrapper once to allow animations to happen if something changes.\n            this.wrapper = new google.visualization.ChartWrapper({\n                ...specs,\n                container: this.element.nativeElement\n            });\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.drawChart();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.specs) {\n            this.updateChart();\n            this.drawChart();\n        }\n    }\n    updateChart() {\n        if (!this.specs) {\n            // When creating the wrapper with empty specs, the google charts library will show an error\n            // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n            this.specs = {};\n        }\n        // The typing here are not correct. These methods accept `undefined` as well.\n        // That's why we have to cast to `any`\n        this.wrapper.setChartType(this.specs.chartType);\n        this.wrapper.setDataTable(this.specs.dataTable);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setQuery(this.specs.query);\n        this.wrapper.setOptions(this.specs.options);\n        this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n        this.wrapper.setView(this.specs.view);\n    }\n    drawChart() {\n        if (this.wrapper) {\n            this.wrapper.draw();\n        }\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        const registerChartEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n        registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n        registerChartEvent(this.wrapper, 'select', () => {\n            const selection = this.chart.getSelection();\n            this.select.emit({ selection });\n        });\n    }\n}\nChartWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartWrapperComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ChartWrapperComponent, selector: \"chart-wrapper\", inputs: { specs: \"specs\" }, outputs: { error: \"error\", ready: \"ready\", select: \"select\" }, host: { classAttribute: \"chart-wrapper\" }, exportAs: [\"chartWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartWrapperComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'chart-wrapper', template: '', host: { class: 'chart-wrapper' }, exportAs: 'chartWrapper', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }]; }, propDecorators: { specs: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }] } });\n\nclass GoogleChartsModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: GoogleChartsModule,\n            providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n        };\n    }\n}\nGoogleChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGoogleChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, declarations: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent], exports: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent] });\nGoogleChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, providers: [ScriptLoaderService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ],\n                    providers: [ScriptLoaderService],\n                    exports: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}