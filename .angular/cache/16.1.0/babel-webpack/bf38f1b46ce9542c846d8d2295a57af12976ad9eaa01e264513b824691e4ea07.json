{"ast":null,"code":"import _asyncToGenerator from \"/home/admin7/Documents/fms_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as d3 from 'd3';\nimport { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { concatMap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-spinner\";\nimport * as i2 from \"../background-loc/services/bl.service\";\nimport * as i3 from \"./services/svg-view.service\";\nimport * as i4 from \"@angular/common\";\nfunction SvgViewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n}\nfunction SvgViewComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h1\");\n    i0.ɵɵtext(2, \"No Floorplan available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SvgViewComponent_ngx_spinner_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 5)(1, \"p\", 6);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport let SvgViewComponent = /*#__PURE__*/(() => {\n  class SvgViewComponent {\n    constructor(spinner, blServ, svgViewSrv, cdr) {\n      this.spinner = spinner;\n      this.blServ = blServ;\n      this.svgViewSrv = svgViewSrv;\n      this.cdr = cdr;\n      this.reader = new FileReader();\n      this.focusOnElement = false;\n      this.onRoomClick = new EventEmitter();\n      this.allSVGRoomsData = [];\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.noSVGFound = false;\n      this.elementToBeZoomed = null;\n      this.focusedTransform = null;\n      this.showSpinner = true;\n    }\n    ngOnChanges(changes) {\n      if (!changes.svgInputData.firstChange) {\n        this.getSVGRoomData();\n      }\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.object = document.getElementById(\"svg-container\");\n        this.getSVGRoomData();\n      }, 0);\n    }\n    setSvgContainerObject() {\n      this.object = document.getElementById(\"svg-container\");\n    }\n    getSVGRoomData() {\n      var _this = this;\n      this.showSpinner = true;\n      this.spinner.show();\n      this.focusOnElement = this.svgInputData.focusOnElement;\n      let observableToUpdateSVGRoomData;\n      if (this.svgInputData.highlightSingleRoom) {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoom(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId);\n      } else if (this.svgInputData.highlightSingleRoomWithEmployee) {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithEmployee(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId, this.svgInputData.labelString);\n      } else if (this.svgInputData.highlightSingleRoomWithAsset) {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithAsset(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId, this.svgInputData.assetDetails);\n      } else if (this.svgInputData.highlightMultipleRooms && (this.svgInputData.highlightMultipleRoomsType == \"division\" || this.svgInputData.highlightMultipleRoomsType == \"department\" || this.svgInputData.highlightMultipleRoomsType == \"subDepartment\" || this.svgInputData.highlightMultipleRoomsType == \"rmcat\" || this.svgInputData.highlightMultipleRoomsType == \"rmtype\" || this.svgInputData.highlightMultipleRoomsType == \"commonArea\")) {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsWithParameter(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.highlightMultipleRoomsTypeId, this.svgInputData.highlightColorForMultiple, this.svgInputData.highlightMultipleRoomsType);\n      } else if (this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"rmcat-rmtype\") {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsRmCatRmType(this.svgInputData.blId, this.svgInputData.flId);\n      } else if (this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"booking\") {\n        observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsBooking(this.svgInputData.bookingSvgElementsData);\n      } else {\n        observableToUpdateSVGRoomData = of(null);\n      }\n      observableToUpdateSVGRoomData.pipe(concatMap( /*#__PURE__*/_asyncToGenerator(function* () {\n        return _this.getSvgFile();\n      }))).subscribe(() => {}, error => {\n        console.error('Error:', error);\n      });\n    }\n    updateSVGRoomDataForSingleRoom(blId, flId, rmId) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.svgRoomData.blId = blId;\n      this.svgRoomData.flId = flId;\n      this.svgRoomData.locate = \"room\";\n      return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n        let idObj = {\n          roomElementId: res.rm.svgElementId,\n          assetElementId: null\n        };\n        let colorObj = {\n          roomColor: \"#ff0000\",\n          assetColor: null\n        };\n        let contentData = {\n          blId: blId,\n          flId: flId,\n          rmId: res.rm.rmId,\n          label: [res.rm.rmCode],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: res.rm.rmCode,\n          zoomAtRoom: true\n        };\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      }));\n    }\n    updateSVGRoomDataForSingleRoomWithEmployee(blId, flId, rmId, empLabel) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.svgRoomData.blId = blId;\n      this.svgRoomData.flId = flId;\n      this.svgRoomData.locate = \"room\";\n      return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n        let idObj = {\n          roomElementId: res.rm.svgElementId,\n          assetElementId: null\n        };\n        let colorObj = {\n          roomColor: \"#ff0000\",\n          assetColor: null\n        };\n        let contentData = {\n          blId: blId,\n          flId: flId,\n          rmId: res.rm.rmId,\n          label: [`${res.rm.bl.blCode}-${res.rm.fl.flCode}-${res.rm.rmCode}`, empLabel],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: res.rm.rmCode,\n          zoomAtRoom: true\n        };\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      }));\n    }\n    updateSVGRoomDataForSingleRoomWithAsset(blId, flId, rmId, eq) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.svgRoomData.blId = blId;\n      this.svgRoomData.flId = flId;\n      this.svgRoomData.locate = \"asset\";\n      return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n        let idObj = {\n          roomElementId: res.rm.svgElementId,\n          assetElementId: eq.svgElementId\n        };\n        let colorObj = {\n          roomColor: \"#9999ff\",\n          assetColor: \"#ff0000\"\n        };\n        let contentData = {\n          blId: eq.blId,\n          flId: eq.flId,\n          rmId: eq.rmId,\n          label: [eq.eqCode, eq.rmCode],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: '',\n          zoomAtRoom: true\n        };\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      }));\n    }\n    updateSVGRoomDataForMultipleRoomsWithParameter(blId, flId, parameterId, color, param) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.svgRoomData.blId = blId;\n      this.svgRoomData.flId = flId;\n      this.svgRoomData.locate = \"room\";\n      let idname = this.getParameterNameForMutipleRoomHighlight(param);\n      let data = {\n        blId: blId,\n        flId: flId,\n        [idname]: parameterId\n      };\n      return this.blServ.getRmList(data).pipe(concatMap(res => {\n        let resultData = res.filter(each => each.svgElementId != null);\n        resultData.forEach(element => {\n          let idObj = {\n            roomElementId: element.svgElementId,\n            assetElementId: null\n          };\n          let colorObj = {\n            roomColor: color,\n            assetColor: null\n          };\n          let contentData = {\n            blId: blId,\n            flId: flId,\n            rmId: element.rmId,\n            label: [element.rmCode],\n            showLabel: true,\n            highlightRoom: true,\n            svgElementId: idObj,\n            color: colorObj,\n            rmCode: element.rmCode,\n            zoomAtRoom: false\n          };\n          this.svgRoomData.content.push(contentData);\n        });\n        return of(null);\n      }));\n    }\n    updateSVGRoomDataForMultipleRoomsRmCatRmType(blId, flId) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.svgRoomData.blId = blId;\n      this.svgRoomData.flId = flId;\n      this.svgRoomData.locate = \"room\";\n      let data = {\n        blId: blId,\n        flId: flId\n      };\n      return this.blServ.getrmwithcatortypecolor(data).pipe(concatMap(res => {\n        let resultData = res.filter(each => each.svgElementId != null);\n        this.allSVGRoomsData = [...resultData];\n        resultData.forEach(rm => {\n          let labeldata = [];\n          if (rm.rmType != null && rm.rmType != '') {\n            labeldata.push(rm.rmType);\n          }\n          if (rm.rmCat != null && rm.rmCat != '') {\n            labeldata.push(rm.rmCat);\n          }\n          labeldata.push(rm.rmCode);\n          let idObj = {\n            roomElementId: rm.svgElementId,\n            assetElementId: null\n          };\n          let colorObj = {\n            roomColor: rm.highlightColor,\n            assetColor: null\n          };\n          let contentData = {\n            blId: parseInt(blId),\n            flId: parseInt(flId),\n            rmId: rm.rmId,\n            label: [...labeldata],\n            showLabel: true,\n            highlightRoom: rm.highlightColor != null ? true : false,\n            svgElementId: idObj,\n            color: colorObj,\n            rmCode: rm.rmCode,\n            zoomAtRoom: false\n          };\n          this.svgRoomData.content.push(contentData);\n        });\n        return of(null);\n      }));\n    }\n    updateSVGRoomDataForMultipleRoomsBooking(SvgElementsData) {\n      if (SvgElementsData != null) {\n        this.svgRoomData = {\n          ...SvgElementsData\n        };\n      }\n      return of(null);\n    }\n    getParameterNameForMutipleRoomHighlight(param) {\n      let result = \"\";\n      if (param == \"division\") {\n        result = \"divId\";\n      } else if (param == \"department\") {\n        result = \"depId\";\n      } else if (param == \"subDepartment\") {\n        result = \"subDepId\";\n      } else if (param == \"rmcat\") {\n        result = \"rmcatId\";\n      } else if (param == \"rmtype\") {\n        result = \"rmtypeId\";\n      } else if (param == \"commonArea\") {\n        result = \"commonAreaType\";\n      }\n      return result;\n    }\n    getSvgFile() {\n      if (this.svgRoomData.content[0] == undefined) {\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.noSVGFound = true;\n        this.cdr.detectChanges();\n      } else {\n        let data = {\n          blId: this.svgInputData.blId,\n          flId: this.svgInputData.flId\n        };\n        if (this.svgRoomData.content[0].svgElementId !== null) {\n          this.svgViewSrv.getSVGFile(data).subscribe(res => {\n            if (res.code != 409) {\n              this.fileString = res.fileContent;\n              this.noSVGFound = false;\n              this.cdr.detectChanges();\n              this.setSvgContainerObject();\n              this.loadSvgFile();\n            } else {\n              this.spinner.hide();\n              this.showSpinner = false;\n              this.noSVGFound = true;\n              this.cdr.detectChanges();\n            }\n          });\n        } else {\n          this.spinner.hide();\n          this.showSpinner = false;\n          this.noSVGFound = true;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n    loadSvgFile() {\n      this.object.innerHTML = \"\";\n      let abc = d3.select('#svg-container');\n      if (this.fileString != '') {\n        this.object.innerHTML = this.fileString;\n      }\n      this.cdr.detectChanges();\n      let mySvg = abc.select(\"svg\");\n      let viewer = abc.select(\"#viewer\");\n      mySvg.select(\"title\").remove();\n      mySvg.select(\"desc\").remove();\n      this.loadByDetails();\n      let zoomed = event => {\n        let transform = event.transform;\n        if (this.focusedTransform != null) {\n          //viewer.attr('transform', `translate(${-1*(this.focusedTransform.x-transform.x)},${-1*(this.focusedTransform.y-transform.y)}) scale(${transform.k},-${transform.k})`);\n          viewer.attr('transform', `translate(${this.focusedTransform.x + transform.x},${this.focusedTransform.y + transform.y}) scale(${transform.k},-${transform.k})`);\n        } else {\n          viewer.attr('transform', `translate(${transform.x},${transform.y}) scale(${transform.k},-${transform.k})`);\n        }\n      };\n      let zoom = d3.zoom().on(\"zoom\", zoomed).scaleExtent([0.5, 20]);\n      // @ts-ignore\n      mySvg.call(zoom);\n      mySvg.attr(\"width\", \"100%\").attr(\"height\", \"auto\");\n      this.roomOnClickListener();\n      this.focusToSelection();\n      this.spinner.hide();\n      this.showSpinner = false;\n    }\n    roomOnClickListener() {\n      let abc = d3.select('#svg-container');\n      let mySvg = abc.select(\"svg\");\n      let room_layer = mySvg.select('#ROOM');\n      let elementIdName = \"\";\n      let data = {\n        elementIdName: \"\",\n        svgRoomData: {\n          ...this.svgRoomData\n        },\n        allSVGRoomsData: [...this.allSVGRoomsData]\n      };\n      room_layer.selectAll('path').on('click', event => {\n        elementIdName = event.target.id;\n        data.elementIdName = elementIdName;\n        this.onRoomClick.emit(data);\n      });\n      room_layer.select('#text_g').selectAll('foreignObject').selectAll('.label-container').on('click', event => {\n        elementIdName = event.currentTarget.id;\n        data.elementIdName = elementIdName;\n        this.onRoomClick.emit(data);\n      });\n    }\n    loadByDetails() {\n      let blId = this.svgRoomData.blId;\n      let flId = this.svgRoomData.flId;\n      let abc = d3.select('#svg-container');\n      let mySvg = abc.select(\"svg\");\n      let viewer = abc.select(\"#viewer\");\n      let externalFunctions = this;\n      if (!viewer.select(\"#text_g\").node()) {\n        viewer.append(\"g\").attr(\"id\", \"text_g\");\n      }\n      let textElement = d3.select(\"#text_g\");\n      textElement.html(\"\");\n      if (this.svgRoomData.locate == 'room') {\n        viewer.select('#ROOM').selectAll('path').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n        this.svgRoomData.content.forEach(room => {\n          if (room.svgElementId.roomElementId != null) {\n            let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n            externalFunctions.highlightandlabelobject(room, rm, textElement, room.color.roomColor);\n            if (room.zoomAtRoom) {\n              this.elementToBeZoomed = rm;\n            }\n          }\n        });\n      } else if (this.svgRoomData.locate == 'asset') {\n        viewer.select('#ASSET').raise();\n        viewer.select('#ASSET').selectAll('path,use').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n        this.svgRoomData.content.forEach(asset => {\n          if (asset.svgElementId.roomElementId != null) {\n            let rm = viewer.select(\"#ROOM\").select(\"#\" + asset.svgElementId.roomElementId);\n            externalFunctions.highlightandlabelobject(asset, rm, textElement, asset.color.roomColor);\n            if (asset.zoomAtRoom) {\n              this.elementToBeZoomed = rm;\n            }\n          }\n          if (asset.svgElementId.assetElementId != null) {\n            let eq = viewer.select(\"#ASSET\").select(\"#\" + asset.svgElementId.assetElementId);\n            externalFunctions.highlightandlabelobject(asset, eq, textElement, asset.color.assetColor);\n          }\n        });\n      }\n    }\n    getMediumFontSize() {\n      let abc = d3.select('#svg-container');\n      let viewer = abc.select(\"#viewer\");\n      let count = 0;\n      let width = 0;\n      let height = 0;\n      this.svgRoomData.content.forEach(room => {\n        let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n        if (rm.node() != null) {\n          //@ts-ignore\n          let dDetails = rm.node().getBBox();\n          width += dDetails.width;\n          height += dDetails.height;\n          count++;\n        }\n      });\n      width = width / count;\n      height = height / count;\n      return (width + height) / 2;\n    }\n    highlightandlabelobject(loopobj, svgobj, textElement, color) {\n      let externalFunctions = this;\n      let id = svgobj.attr(\"id\");\n      if (loopobj.highlightRoom) {\n        svgobj.style('fill-opacity', '1');\n        svgobj.style('opacity', '1');\n        if (color) {\n          svgobj.style('fill', color);\n          svgobj.style('stroke', color);\n        }\n      }\n      if (loopobj.showLabel && id.startsWith(\"room\")) {\n        if (svgobj.node() != null) {\n          //@ts-ignore\n          let dDetails = svgobj.node().getBBox();\n          const labelcount = loopobj.label.length;\n          let sizeel = externalFunctions.getMediumFontSize();\n          let textForeignObject = textElement.append(\"foreignObject\");\n          textForeignObject.style(\"height\", dDetails.height / 2).style(\"width\", dDetails.width / 2).style(\"overflow\", \"visible\");\n          textForeignObject.attr(\"x\", dDetails.x + 0.3 * dDetails.width).attr(\"y\", dDetails.y + 0.4 * dDetails.height);\n          for (let i = 0; i < labelcount; i++) {\n            //@ts-ignore\n            let labelContainerDiv = textForeignObject.append('xhtml:div').attr(\"class\", \"label-container\").attr(\"id\", \"label_\" + svgobj.node().id);\n            let childTextElement1 = labelContainerDiv.append('xhtml:div');\n            childTextElement1.attr(\"style\", `height:${sizeel / 10}px;white-space: nowrap;\n          overflow: hidden;text-overflow: ellipsis;width:${dDetails.width / 2}px;\n          font-size:${sizeel / 12}px;transform:scale(1,-1);display:grid;align-items:center;`);\n            childTextElement1.text(loopobj.label[i]);\n            let childTextElement2 = labelContainerDiv.append('xhtml:div');\n            childTextElement2.attr(\"class\", \"tooltip-status\").attr(\"style\", `height:${sizeel / 10}px;font-size:${sizeel / 12}px;`);\n            childTextElement2.text(loopobj.label[i]);\n          }\n        }\n      }\n    }\n    focusToSelection() {\n      let abc = d3.select('#svg-container');\n      let mySvg = abc.select(\"svg\");\n      let viewer = abc.select(\"#viewer\");\n      if (this.focusOnElement && this.elementToBeZoomed != null) {\n        let bbox = this.elementToBeZoomed.node().getBBox();\n        //@ts-ignore\n        let mySvgBbox = mySvg.node().getBBox();\n        let centerX = bbox.x + bbox.width / 2;\n        let centerY = bbox.y + bbox.height / 2;\n        let centroidX = mySvgBbox.x + mySvgBbox.width / 2;\n        let centroidY = -mySvgBbox.y + mySvgBbox.height / 2;\n        let centroidXDifference = centroidX - mySvgBbox.x;\n        let centroidYDifference = centroidY + mySvgBbox.y;\n        let centreXDifference = centerX - mySvgBbox.x;\n        let centreYDifference = centerY + mySvgBbox.y;\n        viewer.attr('transform', `translate(${centroidXDifference - centreXDifference},${-1 * (centroidYDifference - centreYDifference)}) scale(1,-1)`);\n        this.focusedTransform = {\n          x: centroidXDifference - centreXDifference,\n          y: -1 * (centroidYDifference - centreYDifference),\n          k: 1\n        };\n      }\n    }\n    static #_ = this.ɵfac = function SvgViewComponent_Factory(t) {\n      return new (t || SvgViewComponent)(i0.ɵɵdirectiveInject(i1.NgxSpinnerService), i0.ɵɵdirectiveInject(i2.BuildingService), i0.ɵɵdirectiveInject(i3.SvgViewService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SvgViewComponent,\n      selectors: [[\"app-svg-view\"]],\n      inputs: {\n        svgInputData: \"svgInputData\"\n      },\n      outputs: {\n        onRoomClick: \"onRoomClick\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 3,\n      vars: 3,\n      consts: [[\"id\", \"svg-container\", 4, \"ngIf\"], [\"class\", \"card no-file-found\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [\"id\", \"svg-container\"], [1, \"card\", \"no-file-found\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function SvgViewComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, SvgViewComponent_div_0_Template, 1, 0, \"div\", 0);\n          i0.ɵɵtemplate(1, SvgViewComponent_div_1_Template, 3, 0, \"div\", 1);\n          i0.ɵɵtemplate(2, SvgViewComponent_ngx_spinner_2_Template, 3, 1, \"ngx-spinner\", 2);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.noSVGFound);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.noSVGFound);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i4.NgIf, i1.NgxSpinnerComponent],\n      styles: [\"#svg-container[_ngcontent-%COMP%]{border:2px solid #879cc9;margin-top:5px;width:100%;height:100%;overflow:hidden}.ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.hover-container[_ngcontent-%COMP%]{position:relative}.tooltip-status[_ngcontent-%COMP%]{width:max-content;display:none;position:absolute;top:100%;left:50%;transform:translate(-50%);background-color:#333;color:#fff;font-size:x-small;text-align:center;padding:5px;border-radius:3px;opacity:0;transition:opacity .2s ease-in-out}.hover-container[_ngcontent-%COMP%]:hover   .tooltip-status[_ngcontent-%COMP%]{opacity:1;display:block}.no-file-found[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:600px}\"]\n    });\n  }\n  return SvgViewComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}