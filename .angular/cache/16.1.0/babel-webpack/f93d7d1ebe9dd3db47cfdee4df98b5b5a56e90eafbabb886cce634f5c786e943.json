{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NumbersOnlyDirective {\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(hostElement) {\n    this.hostElement = hostElement;\n    this.allowDecimals = true;\n    this.allowSign = false;\n    this.decimalSeparator = '.';\n    this.previousValue = '';\n    // --------------------------------------\n    //  Regular expressions\n    this.integerUnsigned = '^[0-9]*$';\n    this.integerSigned = '^-?[0-9]+$';\n    this.decimalUnsigned = '^[0-9]+(.[0-9]+)?$';\n    this.decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\n  }\n  /**\n   * Event handler for host's change event\n   * @param e\n   */\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n  /**\n  * Event handler for host's paste event\n  * @param e\n  */\n  onPaste(e) {\n    // get and validate data from clipboard\n    let value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n  /**\n  * Event handler for host's keydown event\n  * @param event\n  */\n  onKeyDown(e) {\n    let ev = e.target;\n    let cursorPosition = ev['selectionStart'] != null ? ev['selectionStart'] : 0;\n    let originalValue = ev['value'];\n    let key = this.getName(e);\n    let controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n    let signExists = originalValue.includes('-');\n    let separatorExists = originalValue.includes(this.decimalSeparator);\n    // allowed keys apart from numeric characters\n    let allowedKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'Escape', 'Tab'];\n    // when decimals are allowed, add\n    // decimal separator to allowed codes when\n    // its position is not close to the the sign (-. and .-)\n    let separatorIsCloseToSign = signExists && cursorPosition <= 1;\n    if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\n      if (this.decimalSeparator == '.') allowedKeys.push('.');else allowedKeys.push(',');\n    }\n    // when minus sign is allowed, add its\n    // key to allowed key only when the\n    // cursor is in the first position, and\n    // first character is different from\n    // decimal separator\n    let firstCharacterIsSeparator = originalValue.charAt(0) != this.decimalSeparator;\n    if (this.allowSign && !signExists && firstCharacterIsSeparator && cursorPosition == 0) {\n      allowedKeys.push('-');\n    }\n    // allow some non-numeric characters\n    if (allowedKeys.indexOf(key) != -1 ||\n    // Allow: Ctrl+A and Command+A\n    key == 'a' && controlOrCommand ||\n    // Allow: Ctrl+C and Command+C\n    key == 'c' && controlOrCommand ||\n    // Allow: Ctrl+V and Command+V\n    key == 'v' && controlOrCommand ||\n    // Allow: Ctrl+X and Command+X\n    key == 'x' && controlOrCommand) {\n      // let it happen, don't do anything\n      return;\n    }\n    // save value before keydown event\n    this.previousValue = originalValue;\n    // allow number characters only\n    let isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) return;else e.preventDefault();\n  }\n  /**\n  * Test whether value is a valid number or not\n  * @param value\n  */\n  validateValue(value) {\n    // choose the appropiate regular expression\n    let regex = \"\";\n    if (!this.allowDecimals && !this.allowSign) regex = this.integerUnsigned;\n    if (!this.allowDecimals && this.allowSign) regex = this.integerSigned;\n    if (this.allowDecimals && !this.allowSign) regex = this.decimalUnsigned;\n    if (this.allowDecimals && this.allowSign) regex = this.decimalSigned;\n    // when a numbers begins with a decimal separator,\n    // fix it adding a zero in the beginning\n    let firstCharacter = value.charAt(0);\n    if (firstCharacter == this.decimalSeparator) value = 0 + value;\n    // when a numbers ends with a decimal separator,\n    // fix it adding a zero in the end\n    let lastCharacter = value.charAt(value.length - 1);\n    if (lastCharacter == this.decimalSeparator) value = value + 0;\n    // test number with regular expression, when\n    // number is invalid, replace it with a zero\n    let valid = new RegExp(regex).test(value);\n    this.hostElement.nativeElement['value'] = valid ? value : null;\n  }\n  /**\n  * Get key's name\n  * @param e\n  */\n  getName(e) {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          case 188:\n            return ',';\n          case 190:\n            return '.';\n          case 109:\n            return '-';\n          // minus in numbpad\n          case 173:\n            return '-';\n          // minus in alphabet keyboard in firefox\n          case 189:\n            return '-';\n          // minus in alphabet keyboard in chrome\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      } else {\n        return e.key;\n      }\n    }\n  }\n  static #_ = this.ɵfac = function NumbersOnlyDirective_Factory(t) {\n    return new (t || NumbersOnlyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NumbersOnlyDirective,\n    selectors: [[\"\", \"NumbersOnly\", \"\"]],\n    hostBindings: function NumbersOnlyDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function NumbersOnlyDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event);\n        })(\"paste\", function NumbersOnlyDirective_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        })(\"keydown\", function NumbersOnlyDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      allowDecimals: \"allowDecimals\",\n      allowSign: \"allowSign\",\n      decimalSeparator: \"decimalSeparator\"\n    }\n  });\n}","map":{"version":3,"names":["NumbersOnlyDirective","constructor","hostElement","allowDecimals","allowSign","decimalSeparator","previousValue","integerUnsigned","integerSigned","decimalUnsigned","decimalSigned","onChange","validateValue","nativeElement","value","onPaste","e","clipboardData","getData","preventDefault","onKeyDown","ev","target","cursorPosition","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","signExists","includes","separatorExists","allowedKeys","separatorIsCloseToSign","push","firstCharacterIsSeparator","charAt","indexOf","isNumber","RegExp","test","regex","firstCharacter","lastCharacter","length","valid","keyCode","String","fromCharCode","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","NumbersOnlyDirective_HostBindings","rf","ctx","$event","NumbersOnlyDirective_paste_HostBindingHandler","NumbersOnlyDirective_keydown_HostBindingHandler"],"sources":["/home/admin7/Documents/fms_frontend/src/app/directive/numbers-only.directive.ts"],"sourcesContent":["import { Directive, HostListener, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[NumbersOnly]'\n})\nexport class NumbersOnlyDirective {\n\n  @Input() allowDecimals: boolean = true;\n  @Input() allowSign: boolean = false;\n  @Input() decimalSeparator: string = '.';\n\n  previousValue: string = '';\n\n  // --------------------------------------\n  //  Regular expressions\n  integerUnsigned: string = '^[0-9]*$';\n  integerSigned: string = '^-?[0-9]+$';\n  decimalUnsigned: string = '^[0-9]+(.[0-9]+)?$';\n  decimalSigned: string = '^-?[0-9]+(.[0-9]+)?$';\n\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef) { }\n\n  /**\n   * Event handler for host's change event\n   * @param e\n   */\n  @HostListener('change', ['$event']) onChange() {\n\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n  * Event handler for host's paste event\n  * @param e\n  */\n  @HostListener('paste', ['$event']) onPaste(e:any) {\n\n    // get and validate data from clipboard\n    let value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n  * Event handler for host's keydown event\n  * @param event\n  */\n  @HostListener('keydown', ['$event']) onKeyDown(e: KeyboardEvent) {\n    let ev = e.target as HTMLInputElement;\n    let cursorPosition: number =   ev['selectionStart'] != null ?ev['selectionStart']  :0 ;\n    let originalValue: string = ev['value'];\n    let key: string = this.getName(e);\n    let controlOrCommand = (e.ctrlKey === true || e.metaKey === true);\n    let signExists = originalValue.includes('-');\n    let separatorExists = originalValue.includes(this.decimalSeparator);\n\n    // allowed keys apart from numeric characters\n    let allowedKeys = [\n      'Backspace', 'ArrowLeft', 'ArrowRight', 'Escape', 'Tab'\n    ];\n\n    // when decimals are allowed, add\n    // decimal separator to allowed codes when\n    // its position is not close to the the sign (-. and .-)\n    let separatorIsCloseToSign = (signExists && cursorPosition <= 1);\n    if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\n\n      if (this.decimalSeparator == '.')\n        allowedKeys.push('.');\n      else\n        allowedKeys.push(',');\n    }\n\n    // when minus sign is allowed, add its\n    // key to allowed key only when the\n    // cursor is in the first position, and\n    // first character is different from\n    // decimal separator\n    let firstCharacterIsSeparator = (originalValue.charAt(0) != this.decimalSeparator);\n    if (this.allowSign && !signExists &&\n      firstCharacterIsSeparator && cursorPosition == 0) {\n\n      allowedKeys.push('-');\n    }\n\n    // allow some non-numeric characters\n    if (allowedKeys.indexOf(key) != -1 ||\n      // Allow: Ctrl+A and Command+A\n      (key == 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key == 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key == 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key == 'x' && controlOrCommand)) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    let isNumber = (new RegExp(this.integerUnsigned)).test(key);\n    if (isNumber) return; else e.preventDefault();\n  }\n\n  /**\n  * Test whether value is a valid number or not\n  * @param value\n  */\n  validateValue(value: string): void {\n\n    // choose the appropiate regular expression\n    let regex: string=\"\";\n    if (!this.allowDecimals && !this.allowSign) regex = this.integerUnsigned;\n    if (!this.allowDecimals && this.allowSign) regex = this.integerSigned;\n    if (this.allowDecimals && !this.allowSign) regex = this.decimalUnsigned;\n    if (this.allowDecimals && this.allowSign) regex = this.decimalSigned;\n\n    // when a numbers begins with a decimal separator,\n    // fix it adding a zero in the beginning\n    let firstCharacter = value.charAt(0);\n    if (firstCharacter == this.decimalSeparator)\n      value = 0 + value;\n\n    // when a numbers ends with a decimal separator,\n    // fix it adding a zero in the end\n    let lastCharacter = value.charAt(value.length - 1);\n    if (lastCharacter == this.decimalSeparator)\n      value = value + 0;\n\n    // test number with regular expression, when\n    // number is invalid, replace it with a zero\n    let valid: boolean = (new RegExp(regex)).test(value);\n    this.hostElement.nativeElement['value'] = valid ? value : null;\n  }\n\n  /**\n  * Get key's name\n  * @param e\n  */\n  getName(e:any): string {\n\n    if (e.key) {\n\n      return e.key;\n\n    } else {\n\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n\n        switch (e.keyCode) {\n          case 8: return 'Backspace';\n          case 9: return 'Tab';\n          case 27: return 'Escape';\n          case 37: return 'ArrowLeft';\n          case 39: return 'ArrowRight';\n          case 188: return ',';\n          case 190: return '.';\n          case 109: return '-'; // minus in numbpad\n          case 173: return '-'; // minus in alphabet keyboard in firefox\n          case 189: return '-'; // minus in alphabet keyboard in chrome\n          default: return String.fromCharCode(e.keyCode);\n        }\n      }else{\n          return e.key;\n      }\n    }\n  }\n}"],"mappings":";AAKA,OAAM,MAAOA,oBAAoB;EAe/B;;;;EAIAC,YAAoBC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IAjBtB,KAAAC,aAAa,GAAY,IAAI;IAC7B,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,gBAAgB,GAAW,GAAG;IAEvC,KAAAC,aAAa,GAAW,EAAE;IAE1B;IACA;IACA,KAAAC,eAAe,GAAW,UAAU;IACpC,KAAAC,aAAa,GAAW,YAAY;IACpC,KAAAC,eAAe,GAAW,oBAAoB;IAC9C,KAAAC,aAAa,GAAW,sBAAsB;EAMC;EAE/C;;;;EAIoCC,QAAQA,CAAA;IAE1C,IAAI,CAACC,aAAa,CAAC,IAAI,CAACV,WAAW,CAACW,aAAa,CAACC,KAAK,CAAC;EAC1D;EAEA;;;;EAImCC,OAAOA,CAACC,CAAK;IAE9C;IACA,IAAIF,KAAK,GAAGE,CAAC,CAACC,aAAa,CAACC,OAAO,CAAC,YAAY,CAAC;IACjD,IAAI,CAACN,aAAa,CAACE,KAAK,CAAC;IACzBE,CAAC,CAACG,cAAc,EAAE;EACpB;EAEA;;;;EAIqCC,SAASA,CAACJ,CAAgB;IAC7D,IAAIK,EAAE,GAAGL,CAAC,CAACM,MAA0B;IACrC,IAAIC,cAAc,GAAaF,EAAE,CAAC,gBAAgB,CAAC,IAAI,IAAI,GAAEA,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC;IACrF,IAAIG,aAAa,GAAWH,EAAE,CAAC,OAAO,CAAC;IACvC,IAAII,GAAG,GAAW,IAAI,CAACC,OAAO,CAACV,CAAC,CAAC;IACjC,IAAIW,gBAAgB,GAAIX,CAAC,CAACY,OAAO,KAAK,IAAI,IAAIZ,CAAC,CAACa,OAAO,KAAK,IAAK;IACjE,IAAIC,UAAU,GAAGN,aAAa,CAACO,QAAQ,CAAC,GAAG,CAAC;IAC5C,IAAIC,eAAe,GAAGR,aAAa,CAACO,QAAQ,CAAC,IAAI,CAAC1B,gBAAgB,CAAC;IAEnE;IACA,IAAI4B,WAAW,GAAG,CAChB,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,CACxD;IAED;IACA;IACA;IACA,IAAIC,sBAAsB,GAAIJ,UAAU,IAAIP,cAAc,IAAI,CAAE;IAChE,IAAI,IAAI,CAACpB,aAAa,IAAI,CAAC+B,sBAAsB,IAAI,CAACF,eAAe,EAAE;MAErE,IAAI,IAAI,CAAC3B,gBAAgB,IAAI,GAAG,EAC9B4B,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC,KAEtBF,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;IAGzB;IACA;IACA;IACA;IACA;IACA,IAAIC,yBAAyB,GAAIZ,aAAa,CAACa,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAAChC,gBAAiB;IAClF,IAAI,IAAI,CAACD,SAAS,IAAI,CAAC0B,UAAU,IAC/BM,yBAAyB,IAAIb,cAAc,IAAI,CAAC,EAAE;MAElDU,WAAW,CAACE,IAAI,CAAC,GAAG,CAAC;;IAGvB;IACA,IAAIF,WAAW,CAACK,OAAO,CAACb,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC;IACCA,GAAG,IAAI,GAAG,IAAIE,gBAAiB;IAChC;IACCF,GAAG,IAAI,GAAG,IAAIE,gBAAiB;IAChC;IACCF,GAAG,IAAI,GAAG,IAAIE,gBAAiB;IAChC;IACCF,GAAG,IAAI,GAAG,IAAIE,gBAAiB,EAAE;MAClC;MACA;;IAGF;IACA,IAAI,CAACrB,aAAa,GAAGkB,aAAa;IAElC;IACA,IAAIe,QAAQ,GAAI,IAAIC,MAAM,CAAC,IAAI,CAACjC,eAAe,CAAC,CAAEkC,IAAI,CAAChB,GAAG,CAAC;IAC3D,IAAIc,QAAQ,EAAE,OAAO,KAAMvB,CAAC,CAACG,cAAc,EAAE;EAC/C;EAEA;;;;EAIAP,aAAaA,CAACE,KAAa;IAEzB;IACA,IAAI4B,KAAK,GAAS,EAAE;IACpB,IAAI,CAAC,IAAI,CAACvC,aAAa,IAAI,CAAC,IAAI,CAACC,SAAS,EAAEsC,KAAK,GAAG,IAAI,CAACnC,eAAe;IACxE,IAAI,CAAC,IAAI,CAACJ,aAAa,IAAI,IAAI,CAACC,SAAS,EAAEsC,KAAK,GAAG,IAAI,CAAClC,aAAa;IACrE,IAAI,IAAI,CAACL,aAAa,IAAI,CAAC,IAAI,CAACC,SAAS,EAAEsC,KAAK,GAAG,IAAI,CAACjC,eAAe;IACvE,IAAI,IAAI,CAACN,aAAa,IAAI,IAAI,CAACC,SAAS,EAAEsC,KAAK,GAAG,IAAI,CAAChC,aAAa;IAEpE;IACA;IACA,IAAIiC,cAAc,GAAG7B,KAAK,CAACuB,MAAM,CAAC,CAAC,CAAC;IACpC,IAAIM,cAAc,IAAI,IAAI,CAACtC,gBAAgB,EACzCS,KAAK,GAAG,CAAC,GAAGA,KAAK;IAEnB;IACA;IACA,IAAI8B,aAAa,GAAG9B,KAAK,CAACuB,MAAM,CAACvB,KAAK,CAAC+B,MAAM,GAAG,CAAC,CAAC;IAClD,IAAID,aAAa,IAAI,IAAI,CAACvC,gBAAgB,EACxCS,KAAK,GAAGA,KAAK,GAAG,CAAC;IAEnB;IACA;IACA,IAAIgC,KAAK,GAAa,IAAIN,MAAM,CAACE,KAAK,CAAC,CAAED,IAAI,CAAC3B,KAAK,CAAC;IACpD,IAAI,CAACZ,WAAW,CAACW,aAAa,CAAC,OAAO,CAAC,GAAGiC,KAAK,GAAGhC,KAAK,GAAG,IAAI;EAChE;EAEA;;;;EAIAY,OAAOA,CAACV,CAAK;IAEX,IAAIA,CAAC,CAACS,GAAG,EAAE;MAET,OAAOT,CAAC,CAACS,GAAG;KAEb,MAAM;MAEL;MACA,IAAIT,CAAC,CAAC+B,OAAO,IAAIC,MAAM,CAACC,YAAY,EAAE;QAEpC,QAAQjC,CAAC,CAAC+B,OAAO;UACf,KAAK,CAAC;YAAE,OAAO,WAAW;UAC1B,KAAK,CAAC;YAAE,OAAO,KAAK;UACpB,KAAK,EAAE;YAAE,OAAO,QAAQ;UACxB,KAAK,EAAE;YAAE,OAAO,WAAW;UAC3B,KAAK,EAAE;YAAE,OAAO,YAAY;UAC5B,KAAK,GAAG;YAAE,OAAO,GAAG;UACpB,KAAK,GAAG;YAAE,OAAO,GAAG;UACpB,KAAK,GAAG;YAAE,OAAO,GAAG;UAAE;UACtB,KAAK,GAAG;YAAE,OAAO,GAAG;UAAE;UACtB,KAAK,GAAG;YAAE,OAAO,GAAG;UAAE;UACtB;YAAS,OAAOC,MAAM,CAACC,YAAY,CAACjC,CAAC,CAAC+B,OAAO,CAAC;;OAEjD,MAAI;QACD,OAAO/B,CAAC,CAACS,GAAG;;;EAGpB;EAAC,QAAAyB,CAAA,G;qBAzKUlD,oBAAoB,EAAAmD,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAApBtD,oBAAoB;IAAAuD,SAAA;IAAAC,YAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAApBC,GAAA,CAAAhD,QAAA,CAAAiD,MAAA,CAAgB;QAAA,qBAAAC,8CAAAD,MAAA;UAAA,OAAhBD,GAAA,CAAA5C,OAAA,CAAA6C,MAAA,CAAe;QAAA,uBAAAE,gDAAAF,MAAA;UAAA,OAAfD,GAAA,CAAAvC,SAAA,CAAAwC,MAAA,CAAiB;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}