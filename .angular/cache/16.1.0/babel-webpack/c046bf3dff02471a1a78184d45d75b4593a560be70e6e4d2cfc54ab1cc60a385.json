{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"../../../../directive/numbers-only.directive\";\nimport * as i6 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddResourcesFormComponent_tr_20_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 16);\n    i0.ɵɵtext(1, \"Resource already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddResourcesFormComponent_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddResourcesFormComponent_tr_20_label_2_Template, 2, 0, \"label\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.resourcesFormPanel.controls[\"title\"] == null ? null : ctx_r0.resourcesFormPanel.controls[\"title\"].errors.required));\n  }\n}\nfunction AddResourcesFormComponent_tr_40_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 16);\n    i0.ɵɵtext(1, \"Quantity can not be less than one\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddResourcesFormComponent_tr_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddResourcesFormComponent_tr_40_label_2_Template, 2, 0, \"label\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r1.resourcesFormPanel.controls[\"quanity\"] == null ? null : ctx_r1.resourcesFormPanel.controls[\"quanity\"].errors.required));\n  }\n}\nexport let AddResourcesFormComponent = /*#__PURE__*/(() => {\n  class AddResourcesFormComponent {\n    constructor(formBuilder, enumsrv, currencyPipe) {\n      this.formBuilder = formBuilder;\n      this.enumsrv = enumsrv;\n      this.currencyPipe = currencyPipe;\n      this.subscriptions = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumUsers = [];\n      this.enummTypeData = [];\n      this.tempTitle = '';\n      this.enumIsReusable = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.resourcesFormPanel = this.formBuilder.group({\n        resourcesId: [null, [Validators.required]],\n        title: ['', [Validators.required]],\n        description: [''],\n        type: ['', [Validators.required, Validators.min(1)]],\n        quanity: [null, [Validators.required, Validators.min(1)]],\n        costPerUnit: [null, [Validators.required]],\n        isReusable: ['', [Validators.required, Validators.min(1)]]\n      });\n      this.subscriptions.push(this.resourcesFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    ngOnInit() {\n      if (this.isView) {\n        this.resourcesFormPanel.disable();\n      }\n      this.loadEnums();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumUsers = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'resources'.toLocaleUpperCase());\n        this.enummTypeData = this.enumUsers.filter(t => t.fieldName.toLocaleUpperCase() === 'resources_type'.toLocaleUpperCase());\n        this.enummTypeData.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        // this.enumIsReusable = this.enumClonedList.map((t:any) =>{t.displayName = t.enumValue; return t} )\n        this.enumIsReusable = this.enumUsers.filter(t => t.fieldName.toLocaleUpperCase() === 'is_reusable'.toLocaleUpperCase());\n        this.enumIsReusable.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      });\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const resourcesDetails = {\n        resourcesId: this.resourcesFormPanel.controls.resourcesId.value,\n        title: this.resourcesFormPanel.controls.title.value,\n        description: this.resourcesFormPanel.controls.description.value,\n        type: this.resourcesFormPanel.controls.type.value,\n        quanity: this.resourcesFormPanel.controls.quanity.value,\n        costPerUnit: this.resourcesFormPanel.controls.costPerUnit.value,\n        isReusable: this.resourcesFormPanel.controls.isReusable.value\n      };\n      return resourcesDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.resourcesFormPanel.patchValue({\n          resourcesId: value.resourcesId,\n          title: value.title,\n          description: value.description,\n          type: value.type,\n          quanity: value.quanity,\n          costPerUnit: this.formatValue(value.costPerUnit, 'GBP', 2),\n          isReusable: value.isReusable\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    formatDate(date) {\n      if (date != null) {\n        var date = new Date(date);\n        var userTimezoneOffset = date.getTimezoneOffset() * 60000;\n        var a = new Date(date.getTime() - userTimezoneOffset);\n        return a;\n      } else {\n        return null;\n      }\n    }\n    convertToTime(value) {\n      if (value != null) {\n        var currDate = new Date();\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        currDate.setHours(data[0]);\n        currDate.setMinutes(data[1]);\n        return currDate;\n      } else {\n        return null;\n      }\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.resourcesFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.resourcesFormPanel.valid ? null : {\n        resourcesFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    formatValue(value, symbol, decimal_pt) {\n      if (value !== 'undefined' && value != null) {\n        const temp = `${value}`.replace(/\\,/g, \"\");\n        var digit_format = \"1.\" + decimal_pt + \"-\" + decimal_pt;\n        return this.currencyPipe.transform(temp, symbol, 'symbol-narrow', digit_format);\n      } else {\n        return '';\n      }\n    }\n    deformatValue(value) {\n      return value.replace(/[\\n\\£\\,]+/g, '');\n    }\n    setCostPerUnitCurrenyFormat() {\n      var costPerReq = this.deformatValue(this.resourcesFormPanel.controls.costPerUnit.value);\n      setTimeout(() => {\n        this.resourcesFormPanel.patchValue({\n          costPerUnit: this.formatValue(costPerReq, 'GBP', 2)\n        });\n      }, 10);\n    }\n    static #_ = this.ɵfac = function AddResourcesFormComponent_Factory(t) {\n      return new (t || AddResourcesFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.CurrencyPipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddResourcesFormComponent,\n      selectors: [[\"app-add-resources-form\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddResourcesFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddResourcesFormComponent),\n        multi: true\n      }])],\n      decls: 42,\n      vars: 9,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"title\", \"formControlName\", \"title\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"description\", \"formControlName\", \"description\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"p-fluid\"], [1, \"p-field\"], [\"appendTo\", \"body\", \"formControlName\", \"type\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [4, \"ngIf\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"quanity\", \"formControlName\", \"quanity\", \"maxlength\", \"9\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"costPerUnit\", \"formControlName\", \"costPerUnit\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"isReusable\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddResourcesFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Resource Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"td\", 2)(14, \"div\", 3)(15, \"div\", 8)(16, \"div\", 9)(17, \"label\", 4);\n          i0.ɵɵtext(18, \"Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"ng-select\", 10);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(20, AddResourcesFormComponent_tr_20_Template, 3, 1, \"tr\", 11);\n          i0.ɵɵelement(21, \"tr\");\n          i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 2)(24, \"div\", 3)(25, \"label\", 4);\n          i0.ɵɵtext(26, \" Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"td\", 2)(29, \"div\", 3)(30, \"label\", 4);\n          i0.ɵɵtext(31, \" Cost Per unit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"input\", 13);\n          i0.ɵɵlistener(\"change\", function AddResourcesFormComponent_Template_input_change_32_listener() {\n            return ctx.setCostPerUnitCurrenyFormat();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(33, \"td\", 2)(34, \"div\", 3)(35, \"div\", 8)(36, \"div\", 9)(37, \"label\", 4);\n          i0.ɵɵtext(38, \"Is Reusable\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(39, \"ng-select\", 14);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(40, AddResourcesFormComponent_tr_40_Template, 3, 1, \"tr\", 11);\n          i0.ɵɵelement(41, \"tr\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.resourcesFormPanel);\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enummTypeData)(\"searchable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.resourcesFormPanel.controls[\"title\"] == null ? null : ctx.resourcesFormPanel.controls[\"title\"].errors) && ctx.resourcesFormPanel.controls[\"title\"].dirty);\n          i0.ɵɵadvance(19);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumIsReusable)(\"searchable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.resourcesFormPanel.controls[\"quanity\"] == null ? null : ctx.resourcesFormPanel.controls[\"quanity\"].errors) && ctx.resourcesFormPanel.controls[\"quanity\"].dirty);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NumbersOnlyDirective, i6.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddResourcesFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}