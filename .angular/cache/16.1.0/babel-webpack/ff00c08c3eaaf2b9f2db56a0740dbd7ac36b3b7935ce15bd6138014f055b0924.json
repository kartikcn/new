{"ast":null,"code":"import { shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"../env.service\";\nconst CACHE_SIZE = 1;\nexport class EnumService {\n  constructor(enumService, env) {\n    this.enumService = enumService;\n    this.env = env;\n    // Declare and initialize variables\n    // serverUrl = environment.baseUrl;\n    this.serverUrl = this.env.baseUrl;\n    this.ENUMSERVICE = 'enums';\n    this.ENUM = 'all';\n  }\n  getEnums() {\n    if (!this.enumCache$) {\n      console.log(\"reading enums from api\");\n      this.enumCache$ = this.requestEnums().pipe(shareReplay(CACHE_SIZE));\n    } else {\n      console.log(\"reading enums from cache\");\n    }\n    return this.enumCache$;\n  }\n  // getting name by id\n  getNameById(enullist, table, fieldName, id) {\n    return enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id) ? enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id)?.enumValue : '';\n  }\n  requestEnums() {\n    this.ENUM = \"all\";\n    return this.enumService.getAll(this.ENUMSERVICE, this.ENUM);\n  }\n  static #_ = this.ɵfac = function EnumService_Factory(t) {\n    return new (t || EnumService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.EnvService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EnumService,\n    factory: EnumService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["shareReplay","CACHE_SIZE","EnumService","constructor","enumService","env","serverUrl","baseUrl","ENUMSERVICE","ENUM","getEnums","enumCache$","console","log","requestEnums","pipe","getNameById","enullist","table","fieldName","id","find","t","tableName","enumValue","getAll","_","i0","ɵɵinject","i1","DataService","i2","EnvService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/services/enum.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\nimport { DataService } from './data.service';\nimport { Enums } from '../model/enums.model';\nimport { EnumList } from '../model/enum-list.model';\nimport { EnvService } from '../env.service';\nconst CACHE_SIZE = 1;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnumService {\n  // Declare and initialize variables\n  // serverUrl = environment.baseUrl;\n  serverUrl =this.env.baseUrl;\n  errorData!: {};\n\n  private enumCache$!: Observable<EnumList[]>;\n  private ENUMSERVICE: string = 'enums';\n  private ENUM: string = 'all';\n\n\n  constructor(private enumService: DataService<EnumList>,private env: EnvService,) { }\n\n  getEnums() {\n\n    if (!this.enumCache$) {\n      console.log(\"reading enums from api\");\n      this.enumCache$ = this.requestEnums().pipe(shareReplay(CACHE_SIZE));\n    } else {\n      console.log(\"reading enums from cache\");\n    }\n\n    return this.enumCache$;\n  }\n  \n  // getting name by id\n  public getNameById(enullist: Enums[], table: string, fieldName: string, id: number) {\n    return enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id) ? enullist.find(t => t.tableName == table && t.fieldName == fieldName && t.id === id)?.enumValue : '';\n  }\n\n  private requestEnums() {\n    this.ENUM=\"all\";\n    return this.enumService.getAll(this.ENUMSERVICE, this.ENUM);\n  }\n \n  \n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAa,gBAAgB;;;;AAOjD,MAAMC,UAAU,GAAG,CAAC;AAKpB,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,WAAkC,EAASC,GAAe;IAA1D,KAAAD,WAAW,GAAXA,WAAW;IAAgC,KAAAC,GAAG,GAAHA,GAAG;IAVlE;IACA;IACA,KAAAC,SAAS,GAAE,IAAI,CAACD,GAAG,CAACE,OAAO;IAInB,KAAAC,WAAW,GAAW,OAAO;IAC7B,KAAAC,IAAI,GAAW,KAAK;EAGuD;EAEnFC,QAAQA,CAAA;IAEN,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;MACpBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAACF,UAAU,GAAG,IAAI,CAACG,YAAY,EAAE,CAACC,IAAI,CAACf,WAAW,CAACC,UAAU,CAAC,CAAC;KACpE,MAAM;MACLW,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;IAGzC,OAAO,IAAI,CAACF,UAAU;EACxB;EAEA;EACOK,WAAWA,CAACC,QAAiB,EAAEC,KAAa,EAAEC,SAAiB,EAAEC,EAAU;IAChF,OAAOH,QAAQ,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,IAAIL,KAAK,IAAII,CAAC,CAACH,SAAS,IAAIA,SAAS,IAAIG,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,IAAIL,KAAK,IAAII,CAAC,CAACH,SAAS,IAAIA,SAAS,IAAIG,CAAC,CAACF,EAAE,KAAKA,EAAE,CAAC,EAAEI,SAAS,GAAG,EAAE;EAClM;EAEQV,YAAYA,CAAA;IAClB,IAAI,CAACL,IAAI,GAAC,KAAK;IACf,OAAO,IAAI,CAACL,WAAW,CAACqB,MAAM,CAAC,IAAI,CAACjB,WAAW,EAAE,IAAI,CAACC,IAAI,CAAC;EAC7D;EAAC,QAAAiB,CAAA,G;qBAjCUxB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}