{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, Directive, NgModule } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\nexport { MAT_INPUT_VALUE_ACCESSOR as MAT_LEGACY_INPUT_VALUE_ACCESSOR, getMatInputUnsupportedTypeError as getMatLegacyInputUnsupportedTypeError } from '@angular/material/input';\nimport { MAT_LEGACY_FORM_FIELD, MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\n\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n * @deprecated Use `MatInput` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInput extends MatInput {\n  constructor() {\n    super(...arguments);\n    this._legacyFormField = inject(MAT_LEGACY_FORM_FIELD, {\n      optional: true\n    });\n  }\n  _getPlaceholder() {\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const formField = this._legacyFormField;\n    return formField && formField.appearance === 'legacy' && !formField._hasLabel?.() ? null : this.placeholder;\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyInput_BaseFactory;\n    return function MatLegacyInput_Factory(t) {\n      return (ɵMatLegacyInput_BaseFactory || (ɵMatLegacyInput_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyInput)))(t || MatLegacyInput);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyInput,\n    selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n    hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n    hostVars: 15,\n    hostBindings: function MatLegacyInput_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"data-placeholder\", ctx.placeholder);\n        i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-mdc-input-element\", false)(\"mat-mdc-form-field-textarea-control\", false)(\"mat-mdc-form-field-input-control\", false)(\"mdc-text-field__input\", false)(\"mat-mdc-native-select-inline\", false)(\"mat-native-select-inline\", ctx._isInlineSelect());\n      }\n    },\n    exportAs: [\"matInput\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatLegacyFormFieldControl,\n      useExisting: MatLegacyInput\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // These classes are inherited from the base input class and need to be cleared.\n        '[class.mat-mdc-input-element]': 'false',\n        '[class.mat-mdc-form-field-textarea-control]': 'false',\n        '[class.mat-mdc-form-field-input-control]': 'false',\n        '[class.mdc-text-field__input]': 'false',\n        '[class.mat-mdc-native-select-inline]': 'false',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[class.mat-native-select-inline]': '_isInlineSelect()'\n      },\n      providers: [{\n        provide: MatLegacyFormFieldControl,\n        useExisting: MatLegacyInput\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @deprecated Use `MatInputModule` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInputModule {\n  static #_ = this.ɵfac = function MatLegacyInputModule_Factory(t) {\n    return new (t || MatLegacyInputModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatLegacyInputModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher],\n    imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule, TextFieldModule,\n    // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n    // be used together with `MatLegacyFormField`.\n    MatLegacyFormFieldModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatLegacyInput],\n      imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule,\n      // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n      // be used together with `MatLegacyFormField`.\n      MatLegacyFormFieldModule, MatLegacyInput],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyInput, MatLegacyInputModule };","map":{"version":3,"names":["i0","inject","Directive","NgModule","MatInput","MAT_INPUT_VALUE_ACCESSOR","MAT_LEGACY_INPUT_VALUE_ACCESSOR","getMatInputUnsupportedTypeError","getMatLegacyInputUnsupportedTypeError","MAT_LEGACY_FORM_FIELD","MatLegacyFormFieldControl","MatLegacyFormFieldModule","TextFieldModule","MatCommonModule","ErrorStateMatcher","MatLegacyInput","constructor","arguments","_legacyFormField","optional","_getPlaceholder","formField","appearance","_hasLabel","placeholder","_","ɵfac","ɵMatLegacyInput_BaseFactory","MatLegacyInput_Factory","t","ɵɵgetInheritedFactory","_2","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatLegacyInput_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","_isServer","_isInlineSelect","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatLegacyInputModule","MatLegacyInputModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["/home/admin7/Documents/fms_frontend/node_modules/@angular/material/fesm2022/legacy-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, Directive, NgModule } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\nexport { MAT_INPUT_VALUE_ACCESSOR as MAT_LEGACY_INPUT_VALUE_ACCESSOR, getMatInputUnsupportedTypeError as getMatLegacyInputUnsupportedTypeError } from '@angular/material/input';\nimport { MAT_LEGACY_FORM_FIELD, MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\n\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n * @deprecated Use `MatInput` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInput extends MatInput {\n    constructor() {\n        super(...arguments);\n        this._legacyFormField = inject(MAT_LEGACY_FORM_FIELD, { optional: true });\n    }\n    _getPlaceholder() {\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const formField = this._legacyFormField;\n        return formField && formField.appearance === 'legacy' && !formField._hasLabel?.()\n            ? null\n            : this.placeholder;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInput, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", host: { properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-input-element\": \"false\", \"class.mat-mdc-form-field-textarea-control\": \"false\", \"class.mat-mdc-form-field-input-control\": \"false\", \"class.mdc-text-field__input\": \"false\", \"class.mat-mdc-native-select-inline\": \"false\", \"attr.data-placeholder\": \"placeholder\", \"class.mat-native-select-inline\": \"_isInlineSelect()\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyInput }], exportAs: [\"matInput\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // These classes are inherited from the base input class and need to be cleared.\n                        '[class.mat-mdc-input-element]': 'false',\n                        '[class.mat-mdc-form-field-textarea-control]': 'false',\n                        '[class.mat-mdc-form-field-input-control]': 'false',\n                        '[class.mdc-text-field__input]': 'false',\n                        '[class.mat-mdc-native-select-inline]': 'false',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                    },\n                    providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyInput }],\n                }]\n        }] });\n\n/**\n * @deprecated Use `MatInputModule` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInputModule, declarations: [MatLegacyInput], imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n            // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n            // be used together with `MatLegacyFormField`.\n            MatLegacyFormFieldModule,\n            MatLegacyInput] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInputModule, providers: [ErrorStateMatcher], imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule, TextFieldModule,\n            // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n            // be used together with `MatLegacyFormField`.\n            MatLegacyFormFieldModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatLegacyInput],\n                    imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n                        // be used together with `MatLegacyFormField`.\n                        MatLegacyFormFieldModule,\n                        MatLegacyInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyInput, MatLegacyInputModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}