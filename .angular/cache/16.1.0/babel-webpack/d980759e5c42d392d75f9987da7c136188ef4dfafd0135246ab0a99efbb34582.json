{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _MatTableDataSource } from '@angular/material/table';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatLegacyTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction MatLegacyTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\nexport { _MatTableDataSource as _MatLegacyTableDataSource } from '@angular/material/table';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n * @deprecated Use `MatRecycleRows` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRecycleRows {\n  static #_ = this.ɵfac = function MatLegacyRecycleRows_Factory(t) {\n    return new (t || MatLegacyRecycleRows)();\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyRecycleRows,\n    selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @deprecated Use `MatTable` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTable extends CdkTable {\n  constructor() {\n    super(...arguments);\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    this.stickyCssClass = 'mat-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    this.needsPositionStickyOnElement = false;\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyTable_BaseFactory;\n    return function MatLegacyTable_Factory(t) {\n      return (ɵMatLegacyTable_BaseFactory || (ɵMatLegacyTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTable)))(t || MatLegacyTable);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-table\"],\n    hostVars: 2,\n    hostBindings: function MatLegacyTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    exportAs: [\"matTable\"],\n    features: [i0.ɵɵProvidersFeature([\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: CdkTable,\n      useExisting: MatLegacyTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatLegacyTable\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatLegacyTable_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n        i0.ɵɵprojection(1, 1);\n        i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n      }\n    },\n    dependencies: [i1.DataRowOutlet, i1.HeaderRowOutlet, i1.FooterRowOutlet, i1.NoDataRowOutlet],\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTable, [{\n    type: Component,\n    args: [{\n      selector: 'mat-table, table[mat-table]',\n      exportAs: 'matTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'mat-table',\n        '[class.mat-table-fixed-layout]': 'fixedLayout',\n        'ngSkipHydration': ''\n      },\n      providers: [\n      // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n      //  is only included in the build if used.\n      {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: CdkTable,\n        useExisting: MatLegacyTable\n      }, {\n        provide: CDK_TABLE,\n        useExisting: MatLegacyTable\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n * @deprecated Use `MatCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCellDef extends CdkCellDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyCellDef_BaseFactory;\n    return function MatLegacyCellDef_Factory(t) {\n      return (ɵMatLegacyCellDef_BaseFactory || (ɵMatLegacyCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCellDef)))(t || MatLegacyCellDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatLegacyCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matCellDef]',\n      providers: [{\n        provide: CdkCellDef,\n        useExisting: MatLegacyCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n * @deprecated Use `MatHeaderCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCellDef extends CdkHeaderCellDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderCellDef_BaseFactory;\n    return function MatLegacyHeaderCellDef_Factory(t) {\n      return (ɵMatLegacyHeaderCellDef_BaseFactory || (ɵMatLegacyHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCellDef)))(t || MatLegacyHeaderCellDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatLegacyHeaderCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderCellDef]',\n      providers: [{\n        provide: CdkHeaderCellDef,\n        useExisting: MatLegacyHeaderCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n * @deprecated Use `MatFooterCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCellDef extends CdkFooterCellDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterCellDef_BaseFactory;\n    return function MatLegacyFooterCellDef_Factory(t) {\n      return (ɵMatLegacyFooterCellDef_BaseFactory || (ɵMatLegacyFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCellDef)))(t || MatLegacyFooterCellDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatLegacyFooterCellDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterCellDef]',\n      providers: [{\n        provide: CdkFooterCellDef,\n        useExisting: MatLegacyFooterCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n * @deprecated Use `MatColumnDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyColumnDef_BaseFactory;\n    return function MatLegacyColumnDef_Factory(t) {\n      return (ɵMatLegacyColumnDef_BaseFactory || (ɵMatLegacyColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyColumnDef)))(t || MatLegacyColumnDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"matColumnDef\", \"name\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatLegacyColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatLegacyColumnDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: CdkColumnDef,\n        useExisting: MatLegacyColumnDef\n      }, {\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: MatLegacyColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['matColumnDef']\n    }]\n  });\n})();\n/**\n * Header cell template container that adds the right classes and role.\n * @deprecated Use `MatHeaderCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCell extends CdkHeaderCell {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderCell_BaseFactory;\n    return function MatLegacyHeaderCell_Factory(t) {\n      return (ɵMatLegacyHeaderCell_BaseFactory || (ɵMatLegacyHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCell)))(t || MatLegacyHeaderCell);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-header-cell, th[mat-header-cell]',\n      host: {\n        'class': 'mat-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n * @deprecated Use `MatFooterCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCell extends CdkFooterCell {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterCell_BaseFactory;\n    return function MatLegacyFooterCell_Factory(t) {\n      return (ɵMatLegacyFooterCell_BaseFactory || (ɵMatLegacyFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCell)))(t || MatLegacyFooterCell);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-footer-cell, td[mat-footer-cell]',\n      host: {\n        'class': 'mat-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Cell template container that adds the right classes and role.\n * @deprecated Use `MatCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCell extends CdkCell {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyCell_BaseFactory;\n    return function MatLegacyCell_Factory(t) {\n      return (ɵMatLegacyCell_BaseFactory || (ɵMatLegacyCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCell)))(t || MatLegacyCell);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-cell, td[mat-cell]',\n      host: {\n        'class': 'mat-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n * @deprecated Use `MatHeaderRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRowDef extends CdkHeaderRowDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderRowDef_BaseFactory;\n    return function MatLegacyHeaderRowDef_Factory(t) {\n      return (ɵMatLegacyHeaderRowDef_BaseFactory || (ɵMatLegacyHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRowDef)))(t || MatLegacyHeaderRowDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matHeaderRowDef\", \"columns\"],\n      sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatLegacyHeaderRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderRowDef]',\n      providers: [{\n        provide: CdkHeaderRowDef,\n        useExisting: MatLegacyHeaderRowDef\n      }],\n      inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n * @deprecated Use `MatFooterRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRowDef extends CdkFooterRowDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterRowDef_BaseFactory;\n    return function MatLegacyFooterRowDef_Factory(t) {\n      return (ɵMatLegacyFooterRowDef_BaseFactory || (ɵMatLegacyFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRowDef)))(t || MatLegacyFooterRowDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matFooterRowDef\", \"columns\"],\n      sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatLegacyFooterRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterRowDef]',\n      providers: [{\n        provide: CdkFooterRowDef,\n        useExisting: MatLegacyFooterRowDef\n      }],\n      inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @deprecated Use `MatRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRowDef extends CdkRowDef {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyRowDef_BaseFactory;\n    return function MatLegacyRowDef_Factory(t) {\n      return (ɵMatLegacyRowDef_BaseFactory || (ɵMatLegacyRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRowDef)))(t || MatLegacyRowDef);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matRowDefColumns\", \"columns\"],\n      when: [\"matRowDefWhen\", \"when\"]\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatLegacyRowDef\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matRowDef]',\n      providers: [{\n        provide: CdkRowDef,\n        useExisting: MatLegacyRowDef\n      }],\n      inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n    }]\n  }], null, null);\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatHeaderRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRow extends CdkHeaderRow {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyHeaderRow_BaseFactory;\n    return function MatLegacyHeaderRow_Factory(t) {\n      return (ɵMatLegacyHeaderRow_BaseFactory || (ɵMatLegacyHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRow)))(t || MatLegacyHeaderRow);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatLegacyHeaderRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-header-row, tr[mat-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matHeaderRow',\n      providers: [{\n        provide: CdkHeaderRow,\n        useExisting: MatLegacyHeaderRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatFooterRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRow extends CdkFooterRow {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyFooterRow_BaseFactory;\n    return function MatLegacyFooterRow_Factory(t) {\n      return (ɵMatLegacyFooterRow_BaseFactory || (ɵMatLegacyFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRow)))(t || MatLegacyFooterRow);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatLegacyFooterRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-footer-row, tr[mat-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matFooterRow',\n      providers: [{\n        provide: CdkFooterRow,\n        useExisting: MatLegacyFooterRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRow extends CdkRow {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyRow_BaseFactory;\n    return function MatLegacyRow_Factory(t) {\n      return (ɵMatLegacyRow_BaseFactory || (ɵMatLegacyRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRow)))(t || MatLegacyRow);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n    exportAs: [\"matRow\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatLegacyRow\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatLegacyRow_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    dependencies: [i1.CdkCellOutlet],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-row, tr[mat-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRow',\n      providers: [{\n        provide: CdkRow,\n        useExisting: MatLegacyRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Row that can be used to display a message when no data is shown in the table.\n * @deprecated Use `MatNoDataRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyNoDataRow extends CdkNoDataRow {\n  constructor() {\n    super(...arguments);\n    this._contentClassName = 'mat-no-data-row';\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyNoDataRow_BaseFactory;\n    return function MatLegacyNoDataRow_Factory(t) {\n      return (ɵMatLegacyNoDataRow_BaseFactory || (ɵMatLegacyNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyNoDataRow)))(t || MatLegacyNoDataRow);\n    };\n  }();\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatLegacyNoDataRow,\n    selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkNoDataRow,\n      useExisting: MatLegacyNoDataRow\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matNoDataRow]',\n      providers: [{\n        provide: CdkNoDataRow,\n        useExisting: MatLegacyNoDataRow\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n *\n * @deprecated Use `MatTextColumn` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTextColumn extends CdkTextColumn {\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵMatLegacyTextColumn_BaseFactory;\n    return function MatLegacyTextColumn_Factory(t) {\n      return (ɵMatLegacyTextColumn_BaseFactory || (ɵMatLegacyTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTextColumn)))(t || MatLegacyTextColumn);\n    };\n  }();\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatLegacyTextColumn,\n    selectors: [[\"mat-text-column\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n    template: function MatLegacyTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0, 0);\n        i0.ɵɵtemplate(1, MatLegacyTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        i0.ɵɵtemplate(2, MatLegacyTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        i0.ɵɵelementContainerEnd();\n      }\n    },\n    dependencies: [MatLegacyHeaderCellDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyHeaderCell, MatLegacyCell],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'mat-text-column',\n      template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], null, null);\n})();\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatLegacyTable, MatLegacyRecycleRows,\n// Template defs\nMatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyFooterCellDef, MatLegacyFooterRowDef,\n// Cell directives\nMatLegacyHeaderCell, MatLegacyCell, MatLegacyFooterCell,\n// Row directives\nMatLegacyHeaderRow, MatLegacyRow, MatLegacyFooterRow, MatLegacyNoDataRow, MatLegacyTextColumn];\n/**\n * @deprecated Use `MatTableModule` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableModule {\n  static #_ = this.ɵfac = function MatLegacyTableModule_Factory(t) {\n    return new (t || MatLegacyTableModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatLegacyTableModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CdkTableModule, MatCommonModule, MatCommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTableModule, MatCommonModule],\n      exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using paginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n *\n * @deprecated Use `MatTableDataSource` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableDataSource extends _MatTableDataSource {}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyCell, MatLegacyCellDef, MatLegacyColumnDef, MatLegacyFooterCell, MatLegacyFooterCellDef, MatLegacyFooterRow, MatLegacyFooterRowDef, MatLegacyHeaderCell, MatLegacyHeaderCellDef, MatLegacyHeaderRow, MatLegacyHeaderRowDef, MatLegacyNoDataRow, MatLegacyRecycleRows, MatLegacyRow, MatLegacyRowDef, MatLegacyTable, MatLegacyTableDataSource, MatLegacyTableModule, MatLegacyTextColumn };","map":{"version":3,"names":["i0","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","i1","CdkTable","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","STICKY_POSITIONING_LISTENER","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CDK_ROW_TEMPLATE","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","MatCommonModule","_MatTableDataSource","_c0","_c1","MatLegacyTextColumn_th_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","MatLegacyTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","_MatLegacyTableDataSource","MatLegacyRecycleRows","_","ɵfac","MatLegacyRecycleRows_Factory","t","_2","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","provide","useClass","ngDevMode","ɵsetClassMetadata","args","selector","providers","MatLegacyTable","constructor","arguments","stickyCssClass","needsPositionStickyOnElement","ɵMatLegacyTable_BaseFactory","MatLegacyTable_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatLegacyTable_HostBindings","ɵɵclassProp","fixedLayout","exportAs","useExisting","useValue","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatLegacyTable_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵelementContainer","dependencies","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","styles","encapsulation","host","None","changeDetection","Default","MatLegacyCellDef","ɵMatLegacyCellDef_BaseFactory","MatLegacyCellDef_Factory","MatLegacyHeaderCellDef","ɵMatLegacyHeaderCellDef_BaseFactory","MatLegacyHeaderCellDef_Factory","MatLegacyFooterCellDef","ɵMatLegacyFooterCellDef_BaseFactory","MatLegacyFooterCellDef_Factory","MatLegacyColumnDef","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","ɵMatLegacyColumnDef_BaseFactory","MatLegacyColumnDef_Factory","inputs","sticky","MatLegacyHeaderCell","ɵMatLegacyHeaderCell_BaseFactory","MatLegacyHeaderCell_Factory","MatLegacyFooterCell","ɵMatLegacyFooterCell_BaseFactory","MatLegacyFooterCell_Factory","MatLegacyCell","ɵMatLegacyCell_BaseFactory","MatLegacyCell_Factory","MatLegacyHeaderRowDef","ɵMatLegacyHeaderRowDef_BaseFactory","MatLegacyHeaderRowDef_Factory","columns","MatLegacyFooterRowDef","ɵMatLegacyFooterRowDef_BaseFactory","MatLegacyFooterRowDef_Factory","MatLegacyRowDef","ɵMatLegacyRowDef_BaseFactory","MatLegacyRowDef_Factory","when","MatLegacyHeaderRow","ɵMatLegacyHeaderRow_BaseFactory","MatLegacyHeaderRow_Factory","MatLegacyHeaderRow_Template","CdkCellOutlet","MatLegacyFooterRow","ɵMatLegacyFooterRow_BaseFactory","MatLegacyFooterRow_Factory","MatLegacyFooterRow_Template","MatLegacyRow","ɵMatLegacyRow_BaseFactory","MatLegacyRow_Factory","MatLegacyRow_Template","MatLegacyNoDataRow","_contentClassName","ɵMatLegacyNoDataRow_BaseFactory","MatLegacyNoDataRow_Factory","MatLegacyTextColumn","ɵMatLegacyTextColumn_BaseFactory","MatLegacyTextColumn_Factory","MatLegacyTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","MatLegacyTableModule","MatLegacyTableModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations","MatLegacyTableDataSource"],"sources":["/home/admin7/Documents/fms_frontend/node_modules/@angular/material/fesm2022/legacy-table.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _MatTableDataSource } from '@angular/material/table';\nexport { _MatTableDataSource as _MatLegacyTableDataSource } from '@angular/material/table';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n * @deprecated Use `MatRecycleRows` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @deprecated Use `MatTable` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyTable, selector: \"mat-table, table[mat-table]\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.mat-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-table\" }, providers: [\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: CdkTable, useExisting: MatLegacyTable },\n            { provide: CDK_TABLE, useExisting: MatLegacyTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'mat-table',\n                        '[class.mat-table-fixed-layout]': 'fixedLayout',\n                        'ngSkipHydration': '',\n                    }, providers: [\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: CdkTable, useExisting: MatLegacyTable },\n                        { provide: CDK_TABLE, useExisting: MatLegacyTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n * @deprecated Use `MatCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatLegacyCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatLegacyCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n * @deprecated Use `MatHeaderCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatLegacyHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatLegacyHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n * @deprecated Use `MatFooterCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatLegacyFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatLegacyFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n * @deprecated Use `MatColumnDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatLegacyColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatLegacyColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatLegacyColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatLegacyColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/**\n * Header cell template container that adds the right classes and role.\n * @deprecated Use `MatHeaderCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/**\n * Footer cell template container that adds the right classes and role.\n * @deprecated Use `MatFooterCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n/**\n * Cell template container that adds the right classes and role.\n * @deprecated Use `MatCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyCell, selector: \"mat-cell, td[mat-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n * @deprecated Use `MatHeaderRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatLegacyHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatLegacyHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n * @deprecated Use `MatFooterRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatLegacyFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatLegacyFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @deprecated Use `MatRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatLegacyRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatLegacyRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatHeaderRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatLegacyHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatLegacyHeaderRow }],\n                }]\n        }] });\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatFooterRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-footer-row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatLegacyFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatLegacyFooterRow }],\n                }]\n        }] });\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-row\" }, providers: [{ provide: CdkRow, useExisting: MatLegacyRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatLegacyRow }],\n                }]\n        }] });\n/**\n * Row that can be used to display a message when no data is shown in the table.\n * @deprecated Use `MatNoDataRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatLegacyNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatLegacyNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n *\n * @deprecated Use `MatTextColumn` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatLegacyTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatLegacyHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatLegacyColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: MatLegacyCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatLegacyHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatLegacyCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatLegacyTable,\n    MatLegacyRecycleRows,\n    // Template defs\n    MatLegacyHeaderCellDef,\n    MatLegacyHeaderRowDef,\n    MatLegacyColumnDef,\n    MatLegacyCellDef,\n    MatLegacyRowDef,\n    MatLegacyFooterCellDef,\n    MatLegacyFooterRowDef,\n    // Cell directives\n    MatLegacyHeaderCell,\n    MatLegacyCell,\n    MatLegacyFooterCell,\n    // Row directives\n    MatLegacyHeaderRow,\n    MatLegacyRow,\n    MatLegacyFooterRow,\n    MatLegacyNoDataRow,\n    MatLegacyTextColumn,\n];\n/**\n * @deprecated Use `MatTableModule` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTableModule, declarations: [\n            // Table\n            MatLegacyTable,\n            MatLegacyRecycleRows,\n            // Template defs\n            MatLegacyHeaderCellDef,\n            MatLegacyHeaderRowDef,\n            MatLegacyColumnDef,\n            MatLegacyCellDef,\n            MatLegacyRowDef,\n            MatLegacyFooterCellDef,\n            MatLegacyFooterRowDef,\n            // Cell directives\n            MatLegacyHeaderCell,\n            MatLegacyCell,\n            MatLegacyFooterCell,\n            // Row directives\n            MatLegacyHeaderRow,\n            MatLegacyRow,\n            MatLegacyFooterRow,\n            MatLegacyNoDataRow,\n            MatLegacyTextColumn], imports: [CdkTableModule, MatCommonModule], exports: [MatCommonModule, \n            // Table\n            MatLegacyTable,\n            MatLegacyRecycleRows,\n            // Template defs\n            MatLegacyHeaderCellDef,\n            MatLegacyHeaderRowDef,\n            MatLegacyColumnDef,\n            MatLegacyCellDef,\n            MatLegacyRowDef,\n            MatLegacyFooterCellDef,\n            MatLegacyFooterRowDef,\n            // Cell directives\n            MatLegacyHeaderCell,\n            MatLegacyCell,\n            MatLegacyFooterCell,\n            // Row directives\n            MatLegacyHeaderRow,\n            MatLegacyRow,\n            MatLegacyFooterRow,\n            MatLegacyNoDataRow,\n            MatLegacyTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTableModule, imports: [CdkTableModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatLegacyTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTableModule, MatCommonModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using paginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n *\n * @deprecated Use `MatTableDataSource` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyCell, MatLegacyCellDef, MatLegacyColumnDef, MatLegacyFooterCell, MatLegacyFooterCellDef, MatLegacyFooterRow, MatLegacyFooterRowDef, MatLegacyHeaderCell, MatLegacyHeaderCellDef, MatLegacyHeaderRow, MatLegacyHeaderRowDef, MatLegacyNoDataRow, MatLegacyRecycleRows, MatLegacyRow, MatLegacyRowDef, MatLegacyTable, MatLegacyTableDataSource, MatLegacyTableModule, MatLegacyTextColumn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}