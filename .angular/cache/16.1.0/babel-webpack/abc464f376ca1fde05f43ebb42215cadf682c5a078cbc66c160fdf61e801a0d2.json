{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Output, forwardRef, Optional, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i4 from 'ng-zorro-antd/core/form';\nimport * as i3$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst _c0 = [\"*\"];\nconst _c1 = [\"inputElement\"];\nconst _c2 = [\"nz-checkbox\", \"\"];\nfunction NzCheckboxGroupComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 1);\n    i0.ɵɵlistener(\"nzCheckedChange\", function NzCheckboxGroupComponent_label_0_Template_label_nzCheckedChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const o_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onCheckedChange(o_r1, $event));\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const o_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzDisabled\", o_r1.disabled || ctx_r0.nzDisabled)(\"nzChecked\", o_r1.checked);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(o_r1.label);\n  }\n}\nlet NzCheckboxWrapperComponent = /*#__PURE__*/(() => {\n  class NzCheckboxWrapperComponent {\n    constructor() {\n      this.nzOnChange = new EventEmitter();\n      this.checkboxList = [];\n    }\n    addCheckbox(value) {\n      this.checkboxList.push(value);\n    }\n    removeCheckbox(value) {\n      this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n    }\n    onChange() {\n      const listOfCheckedValue = this.checkboxList.filter(item => item.nzChecked).map(item => item.nzValue);\n      this.nzOnChange.emit(listOfCheckedValue);\n    }\n    static #_ = this.ɵfac = function NzCheckboxWrapperComponent_Factory(t) {\n      return new (t || NzCheckboxWrapperComponent)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzCheckboxWrapperComponent,\n      selectors: [[\"nz-checkbox-wrapper\"]],\n      hostAttrs: [1, \"ant-checkbox-group\"],\n      outputs: {\n        nzOnChange: \"nzOnChange\"\n      },\n      exportAs: [\"nzCheckboxWrapper\"],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NzCheckboxWrapperComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return NzCheckboxWrapperComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzCheckboxComponent = /*#__PURE__*/(() => {\n  class NzCheckboxComponent {\n    innerCheckedChange(checked) {\n      if (!this.nzDisabled) {\n        this.nzChecked = checked;\n        this.onChange(this.nzChecked);\n        this.nzCheckedChange.emit(this.nzChecked);\n        if (this.nzCheckboxWrapperComponent) {\n          this.nzCheckboxWrapperComponent.onChange();\n        }\n      }\n    }\n    writeValue(value) {\n      this.nzChecked = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;\n      this.isNzDisableFirstChange = false;\n      this.cdr.markForCheck();\n    }\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    constructor(ngZone, elementRef, nzCheckboxWrapperComponent, cdr, focusMonitor, directionality, nzFormStatusService) {\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.nzFormStatusService = nzFormStatusService;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.isNzDisableFirstChange = true;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzCheckedChange = new EventEmitter();\n      this.nzValue = null;\n      this.nzAutoFocus = false;\n      this.nzDisabled = false;\n      this.nzIndeterminate = false;\n      this.nzChecked = false;\n      this.nzId = null;\n    }\n    ngOnInit() {\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.addCheckbox(this);\n      }\n      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.elementRef.nativeElement, 'click').pipe(takeUntil(this.destroy$)).subscribe(event => {\n          event.preventDefault();\n          this.focus();\n          if (this.nzDisabled) {\n            return;\n          }\n          this.ngZone.run(() => {\n            this.innerCheckedChange(!this.nzChecked);\n            this.cdr.markForCheck();\n          });\n        });\n        fromEvent(this.inputElement.nativeElement, 'click').pipe(takeUntil(this.destroy$)).subscribe(event => event.stopPropagation());\n      });\n    }\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.removeCheckbox(this);\n      }\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function NzCheckboxComponent_Factory(t) {\n      return new (t || NzCheckboxComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NzCheckboxWrapperComponent, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NzFormStatusService, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzCheckboxComponent,\n      selectors: [[\"\", \"nz-checkbox\", \"\"]],\n      viewQuery: function NzCheckboxComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c1, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-checkbox-wrapper\"],\n      hostVars: 6,\n      hostBindings: function NzCheckboxComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-checkbox-wrapper-in-form-item\", !!ctx.nzFormStatusService)(\"ant-checkbox-wrapper-checked\", ctx.nzChecked)(\"ant-checkbox-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzValue: \"nzValue\",\n        nzAutoFocus: \"nzAutoFocus\",\n        nzDisabled: \"nzDisabled\",\n        nzIndeterminate: \"nzIndeterminate\",\n        nzChecked: \"nzChecked\",\n        nzId: \"nzId\"\n      },\n      outputs: {\n        nzCheckedChange: \"nzCheckedChange\"\n      },\n      exportAs: [\"nzCheckbox\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzCheckboxComponent),\n        multi: true\n      }])],\n      attrs: _c2,\n      ngContentSelectors: _c0,\n      decls: 6,\n      vars: 11,\n      consts: [[1, \"ant-checkbox\"], [\"type\", \"checkbox\", 1, \"ant-checkbox-input\", 3, \"checked\", \"ngModel\", \"disabled\", \"ngModelChange\"], [\"inputElement\", \"\"], [1, \"ant-checkbox-inner\"]],\n      template: function NzCheckboxComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"span\", 0)(1, \"input\", 1, 2);\n          i0.ɵɵlistener(\"ngModelChange\", function NzCheckboxComponent_Template_input_ngModelChange_1_listener($event) {\n            return ctx.innerCheckedChange($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"span\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"span\");\n          i0.ɵɵprojection(5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-checkbox-checked\", ctx.nzChecked && !ctx.nzIndeterminate)(\"ant-checkbox-disabled\", ctx.nzDisabled)(\"ant-checkbox-indeterminate\", ctx.nzIndeterminate);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"checked\", ctx.nzChecked)(\"ngModel\", ctx.nzChecked)(\"disabled\", ctx.nzDisabled);\n          i0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"id\", ctx.nzId);\n        }\n      },\n      dependencies: [i5.CheckboxControlValueAccessor, i5.NgControlStatus, i5.NgModel],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  __decorate([InputBoolean()], NzCheckboxComponent.prototype, \"nzAutoFocus\", void 0);\n  __decorate([InputBoolean()], NzCheckboxComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean()], NzCheckboxComponent.prototype, \"nzIndeterminate\", void 0);\n  __decorate([InputBoolean()], NzCheckboxComponent.prototype, \"nzChecked\", void 0);\n  return NzCheckboxComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzCheckboxGroupComponent = /*#__PURE__*/(() => {\n  class NzCheckboxGroupComponent {\n    trackByOption(_, option) {\n      return option.value;\n    }\n    onCheckedChange(option, checked) {\n      option.checked = checked;\n      this.onChange(this.options);\n    }\n    constructor(elementRef, focusMonitor, cdr, directionality) {\n      this.elementRef = elementRef;\n      this.focusMonitor = focusMonitor;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.options = [];\n      this.nzDisabled = false;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.isNzDisableFirstChange = true;\n    }\n    ngOnInit() {\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    writeValue(value) {\n      this.options = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;\n      this.isNzDisableFirstChange = false;\n      this.cdr.markForCheck();\n    }\n    static #_ = this.ɵfac = function NzCheckboxGroupComponent_Factory(t) {\n      return new (t || NzCheckboxGroupComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzCheckboxGroupComponent,\n      selectors: [[\"nz-checkbox-group\"]],\n      hostAttrs: [1, \"ant-checkbox-group\"],\n      hostVars: 2,\n      hostBindings: function NzCheckboxGroupComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-checkbox-group-rtl\", ctx.dir === \"rtl\");\n        }\n      },\n      inputs: {\n        nzDisabled: \"nzDisabled\"\n      },\n      exportAs: [\"nzCheckboxGroup\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NzCheckboxGroupComponent),\n        multi: true\n      }])],\n      decls: 1,\n      vars: 2,\n      consts: [[\"nz-checkbox\", \"\", \"class\", \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"nz-checkbox\", \"\", 1, \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\"]],\n      template: function NzCheckboxGroupComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, NzCheckboxGroupComponent_label_0_Template, 3, 3, \"label\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngForOf\", ctx.options)(\"ngForTrackBy\", ctx.trackByOption);\n        }\n      },\n      dependencies: [i3$1.NgForOf, NzCheckboxComponent],\n      encapsulation: 2\n    });\n  }\n  __decorate([InputBoolean()], NzCheckboxGroupComponent.prototype, \"nzDisabled\", void 0);\n  return NzCheckboxGroupComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzCheckboxModule = /*#__PURE__*/(() => {\n  class NzCheckboxModule {\n    static #_ = this.ɵfac = function NzCheckboxModule_Factory(t) {\n      return new (t || NzCheckboxModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzCheckboxModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [BidiModule, CommonModule, FormsModule, A11yModule]\n    });\n  }\n  return NzCheckboxModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxModule, NzCheckboxWrapperComponent };\n//# sourceMappingURL=ng-zorro-antd-checkbox.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}