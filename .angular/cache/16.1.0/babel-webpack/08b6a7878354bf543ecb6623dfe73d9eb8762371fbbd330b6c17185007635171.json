{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { EmployeeDetails } from 'src/app/ui/employee/model/employee-details.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../request-technician/widgets/services/request_technician.service\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"src/app/ui/employee/services/employee.service\";\nimport * as i5 from \"src/app/services/auth.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"ng-zorro-antd/table\";\nimport * as i9 from \"primeng/calendar\";\nimport * as i10 from \"../../../../../../../directive/numbers-only.directive\";\nfunction AddRequestTechnicianLogComponent_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 2)(1, \"div\", 3)(2, \"label\", 4);\n    i0.ɵɵtext(3, \"Technician Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ng-select\", 18);\n    i0.ɵɵlistener(\"change\", function AddRequestTechnicianLogComponent_td_8_Template_ng_select_change_4_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onSelectTechnician($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r0.reqTechLogData)(\"readonly\", !ctx_r0.isSupervisor && ctx_r0.isTechnician);\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 2)(1, \"div\", 3)(2, \"label\", 4);\n    i0.ɵɵtext(3, \"Employee Id\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ng-select\", 19);\n    i0.ɵɵlistener(\"change\", function AddRequestTechnicianLogComponent_td_9_Template_ng_select_change_4_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onSelectEmId($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r1.employeeData);\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 2)(1, \"div\", 3)(2, \"label\", 4);\n    i0.ɵɵtext(3, \"Other\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 20);\n    i0.ɵɵlistener(\"input\", function AddRequestTechnicianLogComponent_td_10_Template_input_input_4_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onChangeOther($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_58_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 23);\n    i0.ɵɵtext(1, \" Work start date can not be greater than Work end date. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtemplate(1, AddRequestTechnicianLogComponent_td_58_label_1_Template, 2, 0, \"label\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.requestTechnicianLogFormPanel.controls[\"dateStarted\"] == null ? null : ctx_r3.requestTechnicianLogFormPanel.controls[\"dateStarted\"].errors) && !(ctx_r3.requestTechnicianLogFormPanel.controls[\"dateStarted\"] == null ? null : ctx_r3.requestTechnicianLogFormPanel.controls[\"dateStarted\"].errors.required));\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_59_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 23);\n    i0.ɵɵtext(1, \" Work start time can not be greater than Work end time. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRequestTechnicianLogComponent_td_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtemplate(1, AddRequestTechnicianLogComponent_td_59_label_1_Template, 2, 0, \"label\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r4.requestTechnicianLogFormPanel.controls[\"timeStarted\"] == null ? null : ctx_r4.requestTechnicianLogFormPanel.controls[\"timeStarted\"].errors) && !(ctx_r4.requestTechnicianLogFormPanel.controls[\"timeStarted\"] == null ? null : ctx_r4.requestTechnicianLogFormPanel.controls[\"timeStarted\"].errors.required));\n  }\n}\nexport let AddRequestTechnicianLogComponent = /*#__PURE__*/(() => {\n  class AddRequestTechnicianLogComponent {\n    constructor(formBuilder, requestTechnicianService, enumsrv, emService, autServ) {\n      this.formBuilder = formBuilder;\n      this.requestTechnicianService = requestTechnicianService;\n      this.enumsrv = enumsrv;\n      this.emService = emService;\n      this.autServ = autServ;\n      this.today = new Date();\n      this.subscriptions = [];\n      this.technicianData = [];\n      this.enumWorkType = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumTechRequLogData = [];\n      this.enumResourceType = [];\n      this.newRecord = true;\n      this.reqTechLogData = [];\n      this.showTechncianField = true;\n      this.showEmpyoyeeFiled = false;\n      this.employeeData = [];\n      this.showOtherField = false;\n      this.isRequestor = false;\n      this.isApprover = false;\n      this.isTechnician = false;\n      this.isSupervisor = false;\n      this.selectedEmOrTechncianOrOther = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.requestTechnicianLogFormPanel = this.formBuilder.group({\n        requestTechnicianLogId: [''],\n        actualHoursStd: [null, [Validators.required]],\n        actualHoursDouble: [null, [Validators.required]],\n        actualHoursOvertime: [null, [Validators.required]],\n        workType: [null, [Validators.required]],\n        dateStarted: [null, [this.checkDateValidator()]],\n        dateFinished: [null, [this.checkDateValidator()]],\n        timeStarted: [null, [this.checkTimeValidator()]],\n        timeFinished: [null, [this.checkTimeValidator()]],\n        requestId: [null],\n        technicianId: [null],\n        resourceType: [null, [Validators.required]],\n        emId: [null],\n        other: [null]\n      });\n      this.subscriptions.push(this.requestTechnicianLogFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n      if (this.isView) {\n        this.requestTechnicianLogFormPanel.disable();\n      }\n    }\n    loadRequestTechnicians(requestId) {\n      this.requestTechnicianService.getAllRequestTechnician(requestId).subscribe(res => {\n        if (res) {\n          this.reqTechLogData = res;\n          this.patchTechncianOnly();\n        } else {\n          this.reqTechLogData = [];\n        }\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const requestTechnicianLog = {\n        requestTechnicianLogId: this.requestTechnicianLogFormPanel.controls.requestTechnicianLogId.value,\n        actualHoursStd: this.requestTechnicianLogFormPanel.controls.actualHoursStd.value,\n        actualHoursDouble: this.requestTechnicianLogFormPanel.controls.actualHoursDouble.value,\n        actualHoursOvertime: this.requestTechnicianLogFormPanel.controls.actualHoursOvertime.value,\n        dateStarted: this.requestTechnicianLogFormPanel.controls.dateStarted.value,\n        dateFinished: this.requestTechnicianLogFormPanel.controls.dateFinished.value,\n        timeStarted: this.requestTechnicianLogFormPanel.controls.timeStarted.value,\n        timeFinished: this.requestTechnicianLogFormPanel.controls.timeFinished.value,\n        workType: this.requestTechnicianLogFormPanel.controls.workType.value,\n        requestId: this.requestTechnicianLogFormPanel.controls.requestId.value,\n        technicianId: this.requestTechnicianLogFormPanel.controls.technicianId.value,\n        resourceType: this.requestTechnicianLogFormPanel.controls.resourceType.value,\n        emId: this.requestTechnicianLogFormPanel.controls.emId.value,\n        other: this.requestTechnicianLogFormPanel.controls.other.value\n      };\n      return requestTechnicianLog;\n    }\n    set value(value) {\n      if (this.getEnumIdByResourceType(value.resourceType)?.toLocaleUpperCase() === 'Technician'.toLocaleUpperCase()) {\n        this.showTechncianField = true;\n        this.showEmpyoyeeFiled = false;\n        this.showOtherField = false;\n      } else if (this.getEnumIdByResourceType(value.resourceType)?.toLocaleUpperCase() === \"Facilities Manager\".toLocaleUpperCase() || this.getEnumIdByResourceType(value.resourceType)?.toLocaleUpperCase() === \"Facilities Supervisor\".toLocaleUpperCase()) {\n        this.showTechncianField = false;\n        this.showEmpyoyeeFiled = true;\n        this.showOtherField = false;\n        this.loadEmployee();\n      } else if (this.getEnumIdByResourceType(value.resourceType)?.toLocaleUpperCase() === \"Other\".toLocaleUpperCase()) {\n        this.showTechncianField = false;\n        this.showEmpyoyeeFiled = false;\n        this.showOtherField = true;\n      }\n      if (value.technicianId || value.emId || value.other) {\n        this.selectedEmOrTechncianOrOther = true;\n      } else {\n        this.selectedEmOrTechncianOrOther = false;\n      }\n      setTimeout(() => {\n        this.requestTechnicianLogFormPanel.patchValue({\n          requestTechnicianLogId: value.requestTechnicianLogId,\n          actualHoursStd: value.actualHoursStd,\n          actualHoursDouble: value.actualHoursDouble,\n          dateStarted: this.formatDate(value.dateStarted),\n          dateFinished: this.formatDate(value.dateFinished),\n          timeStarted: this.convertToTime(value.timeStarted),\n          timeFinished: this.convertToTime(value.timeFinished),\n          actualHoursOvertime: value.actualHoursOvertime,\n          workType: value.workType,\n          requestId: value.requestId,\n          technicianId: value.technicianId,\n          resourceType: value.resourceType == null ? this.isDefaultTechnician : value.resourceType,\n          emId: value.emId,\n          other: value.other\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.requestTechnicianLogFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.requestTechnicianLogFormPanel.valid ? null : {\n        partsFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumTechRequLogData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'request_technician_log'.toLocaleUpperCase());\n        this.enumWorkType = this.enumTechRequLogData.filter(t => t.fieldName.toLocaleUpperCase() === 'work_type'.toLocaleUpperCase());\n        this.enumResourceType = this.enumTechRequLogData.filter(t => t.fieldName.toLocaleUpperCase() === 'resource_type'.toLocaleUpperCase());\n        this.enumResourceType.forEach(t => {\n          if (t.enumValue === 'Technician') {\n            this.isDefaultTechnician = t.enumKey;\n          }\n        });\n      }, error => {});\n    }\n    formatDate(date) {\n      if (date != null) {\n        var dateCreated = new Date(date);\n        return dateCreated;\n      } else {\n        return null;\n      }\n    }\n    convertToTime(value) {\n      if (value != null) {\n        var currDate = new Date();\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        currDate.setHours(data[0]);\n        currDate.setMinutes(data[1]);\n        return currDate;\n      } else {\n        return null;\n      }\n    }\n    getEnumById(enumKey) {\n      return this.enumWorkType.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    getEnumIdByResourceType(enumKey) {\n      return this.enumResourceType.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    onSelect(event) {\n      this.requestTechnicianLogFormPanel.patchValue({\n        technicianId: null,\n        emId: null,\n        other: null\n      });\n      this.selectedEmOrTechncianOrOther = false;\n      if (event.enumValue.toLocaleUpperCase() === \"Technician\".toLocaleUpperCase()) {\n        this.showTechncianField = true;\n        this.showEmpyoyeeFiled = false;\n        this.showOtherField = false;\n      } else if (event.enumValue.toLocaleUpperCase() === \"Facilities Manager\".toLocaleUpperCase() || event.enumValue.toLocaleUpperCase() === \"Facilities Supervisor\".toLocaleUpperCase()) {\n        this.showTechncianField = false;\n        this.showEmpyoyeeFiled = true;\n        this.showOtherField = false;\n        this.loadEmployee();\n      } else if (event.enumValue.toLocaleUpperCase() === 'Other'.toLocaleUpperCase()) {\n        this.showTechncianField = false;\n        this.showEmpyoyeeFiled = false;\n        this.showOtherField = true;\n      }\n    }\n    loadEmployee() {\n      this.employeeData = [];\n      this.emService.getAllEmployeeList().subscribe(res => {\n        if (res) {\n          this.employeeData = res;\n          this.employeeData = res.map(i => {\n            i.fullName = i.emCode + ' - ' + i.firstName + \" \" + i.lastName;\n            return i;\n          });\n          this.employeeData.unshift(new EmployeeDetails({\n            fullName: 'Make a selection',\n            emId: \"\",\n            initials: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            maidenName: \"\",\n            aliasName: \"\",\n            email: \"\",\n            emStd: \"\",\n            emStatus: 0,\n            idNumber: \"\",\n            birthDate: null,\n            gender: 0,\n            compName: \"\",\n            dateJoin: \"\",\n            dateLeave: \"\",\n            compId: 0,\n            emPhoto: \"\",\n            ccCode: 0,\n            lineMngr: \"\",\n            emPhotoMobile: \"\"\n          }));\n        } else {\n          this.employeeData = [];\n        }\n      });\n    }\n    onSelectTechnician(event) {\n      if (event.technicianId !== null && event.technicianId !== '') {\n        this.selectedEmOrTechncianOrOther = true;\n      } else {\n        this.selectedEmOrTechncianOrOther = false;\n      }\n    }\n    onSelectEmId(event) {\n      if (event.emId !== null && event.emId !== '') {\n        this.selectedEmOrTechncianOrOther = true;\n      } else {\n        this.selectedEmOrTechncianOrOther = false;\n      }\n    }\n    getEnumIdByValue(value) {\n      return this.enumResourceType.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    patchTechncianOnly() {\n      if (!this.isSupervisor && this.isTechnician) {\n        const loggedTechnicianId = this.autServ.getLoggedInTechnicianId();\n        this.requestTechnicianLogFormPanel.patchValue({\n          resourceType: this.getEnumIdByValue('Technician'),\n          technicianId: loggedTechnicianId\n        });\n        this.selectedEmOrTechncianOrOther = true;\n      }\n    }\n    onChangeOther(event) {\n      if (event.target.value.length > 0) {\n        this.selectedEmOrTechncianOrOther = true;\n      } else {\n        this.selectedEmOrTechncianOrOther = false;\n      }\n    }\n    checkTimeValidator() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value !== \"\") {\n          this.requestTechnicianLogFormPanel.controls['timeStarted'].setErrors(null);\n          this.requestTechnicianLogFormPanel.clearAsyncValidators();\n          this.requestTechnicianLogFormPanel.updateValueAndValidity();\n          var startTime = this.requestTechnicianLogFormPanel.controls['timeStarted'].value;\n          var endTime = this.requestTechnicianLogFormPanel.controls['timeFinished'].value;\n          if (startTime != null && endTime != null) {\n            if (startTime > endTime) {\n              this.requestTechnicianLogFormPanel.controls['timeStarted'].setErrors({\n                'incorrect': true\n              });\n              this.requestTechnicianLogFormPanel.updateValueAndValidity();\n              return {\n                'incorrect': true\n              };\n            } else {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    checkDateValidator() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value !== \"\") {\n          this.requestTechnicianLogFormPanel.controls['dateStarted'].setErrors(null);\n          this.requestTechnicianLogFormPanel.controls['dateFinished'].setErrors(null);\n          this.requestTechnicianLogFormPanel.clearAsyncValidators();\n          this.requestTechnicianLogFormPanel.updateValueAndValidity();\n          var startDate = this.requestTechnicianLogFormPanel.controls['dateStarted'].value;\n          var endDate = this.requestTechnicianLogFormPanel.controls['dateFinished'].value;\n          if (startDate != null && endDate != null) {\n            if (startDate > endDate) {\n              this.requestTechnicianLogFormPanel.controls['dateStarted'].setErrors({\n                'incorrect': true\n              });\n              this.requestTechnicianLogFormPanel.controls['dateFinished'].setErrors({\n                'incorrect': true\n              });\n              this.requestTechnicianLogFormPanel.updateValueAndValidity();\n              return {\n                'incorrect': true\n              };\n            } else {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    static #_ = this.ɵfac = function AddRequestTechnicianLogComponent_Factory(t) {\n      return new (t || AddRequestTechnicianLogComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.RequestTechnicianService), i0.ɵɵdirectiveInject(i3.EnumService), i0.ɵɵdirectiveInject(i4.EmployeeService), i0.ɵɵdirectiveInject(i5.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRequestTechnicianLogComponent,\n      selectors: [[\"app-add-request-technician-log\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRequestTechnicianLogComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRequestTechnicianLogComponent),\n        multi: true\n      }])],\n      decls: 60,\n      vars: 19,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [\"width\", \"33%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"name\", \"resourceType\", \"formControlName\", \"resourceType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"readonly\", \"change\"], [\"width\", \"33%\", 4, \"ngIf\"], [\"appendTo\", \"body\", \"name\", \"workType\", \"formControlName\", \"workType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\"], [\"type\", \"text\", \"formControlName\", \"actualHoursStd\", \"optionLabel\", \"enumValue\", \"optionValue\", \"id\", \"NumbersOnly\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"actualHoursDouble\", \"NumbersOnly\", \"\", \"formControlName\", \"actualHoursDouble\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"actualHoursOvertime\", \"NumbersOnly\", \"\", \"formControlName\", \"actualHoursOvertime\", 1, \"form-control\"], [\"width\", \"25%\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateStarted\", \"formControlName\", \"dateStarted\", \"inputId\", \"icon\", 3, \"minDate\", \"showIcon\"], [\"appendTo\", \"body\", \"name\", \"timeStarted\", \"formControlName\", \"timeStarted\", 3, \"timeOnly\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateFinished\", \"formControlName\", \"dateFinished\", \"inputId\", \"icon\", 3, \"minDate\", \"showIcon\"], [\"appendTo\", \"body\", \"name\", \"timeFinished\", \"formControlName\", \"timeFinished\", 3, \"timeOnly\"], [\"colspan\", \"2\", 4, \"ngIf\"], [\"appendTo\", \"body\", \"name\", \"technicianId\", \"formControlName\", \"technicianId\", \"bindLabel\", \"technicianName\", \"bindValue\", \"technicianId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"readonly\", \"change\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"emId\", \"bindLabel\", \"fullName\", \"bindValue\", \"emId\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [\"type\", \"text\", \"formControlName\", \"other\", \"maxlength\", \"64\", \"name\", \"other\", 1, \"form-control\", 3, \"input\"], [\"colspan\", \"2\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;margin-left: 5px;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\", \"margin-left\", \"5px\"]],\n      template: function AddRequestTechnicianLogComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Resource Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"ng-select\", 5);\n          i0.ɵɵlistener(\"change\", function AddRequestTechnicianLogComponent_Template_ng_select_change_7_listener($event) {\n            return ctx.onSelect($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddRequestTechnicianLogComponent_td_8_Template, 5, 4, \"td\", 6);\n          i0.ɵɵtemplate(9, AddRequestTechnicianLogComponent_td_9_Template, 5, 3, \"td\", 6);\n          i0.ɵɵtemplate(10, AddRequestTechnicianLogComponent_td_10_Template, 5, 0, \"td\", 6);\n          i0.ɵɵelementStart(11, \"td\", 2)(12, \"div\", 3)(13, \"label\", 4);\n          i0.ɵɵtext(14, \"Work Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"ng-select\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(16, \"td\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"table\", 1)(18, \"tr\")(19, \"td\", 2)(20, \"div\", 3)(21, \"label\", 4);\n          i0.ɵɵtext(22, \" Standard Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(23, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(24, \"td\", 2)(25, \"div\", 3)(26, \"label\", 4);\n          i0.ɵɵtext(27, \" Doubletime Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"input\", 9);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"td\", 2)(30, \"div\", 3)(31, \"label\", 4);\n          i0.ɵɵtext(32, \" Overtime Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(33, \"input\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(34, \"td\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(35, \"table\", 1)(36, \"tr\")(37, \"td\", 11)(38, \"div\", 3)(39, \"label\", 12);\n          i0.ɵɵtext(40, \"Work Start Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(41, \"p-calendar\", 13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(42, \"td\", 11)(43, \"div\", 3)(44, \"label\", 12);\n          i0.ɵɵtext(45, \"Work Start Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(46, \"p-calendar\", 14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(47, \"td\", 11)(48, \"div\", 3)(49, \"label\", 12);\n          i0.ɵɵtext(50, \"Work End Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(51, \"p-calendar\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(52, \"td\", 11)(53, \"div\", 3)(54, \"label\", 12);\n          i0.ɵɵtext(55, \"Work End Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(56, \"p-calendar\", 16);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(57, \"tr\");\n          i0.ɵɵtemplate(58, AddRequestTechnicianLogComponent_td_58_Template, 2, 1, \"td\", 17);\n          i0.ɵɵtemplate(59, AddRequestTechnicianLogComponent_td_59_Template, 2, 1, \"td\", 17);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.requestTechnicianLogFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumResourceType)(\"readonly\", !ctx.isSupervisor && ctx.isTechnician || ctx.isView);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showTechncianField);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showEmpyoyeeFiled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showOtherField);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumWorkType);\n          i0.ɵɵadvance(26);\n          i0.ɵɵproperty(\"minDate\", ctx.today)(\"showIcon\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"timeOnly\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"minDate\", ctx.today)(\"showIcon\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"timeOnly\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", (ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"].errors) && ((ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"].dirty) || (ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"dateStarted\"].touched)));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"].errors) && ((ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"].dirty) || (ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"] == null ? null : ctx.requestTechnicianLogFormPanel.controls[\"timeStarted\"].touched)));\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i7.NgSelectComponent, i8.NzTableCellDirective, i8.NzTrDirective, i9.Calendar, i10.NumbersOnlyDirective],\n      styles: [\"[_nghost-%COMP%]  .p-calendar{width:100%}\"]\n    });\n  }\n  return AddRequestTechnicianLogComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}