{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../confirm-box-dialog/provider/account_purchase.provider\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../env.service\";\nimport * as i6 from \"./shared.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, x- client - key, x - client - token, x - client - secret, Authorization'\n  })\n};\nconst httpFileOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, x- client - key, x - client - token, x - client - secret, Authorization'\n  }),\n  responseType: \"arraybuffer\"\n};\nconst httpFormDataOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, x- client - key, x - client - token, x - client - secret, Authorization'\n  })\n};\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    //get rest api configuration from configuration.ts\n    constructor(http, modalBox, autSrv, router, env, sharedSrv) {\n      this.http = http;\n      this.modalBox = modalBox;\n      this.autSrv = autSrv;\n      this.router = router;\n      this.env = env;\n      this.sharedSrv = sharedSrv;\n      // actionUrl = environment.baseUrl + 'api/v1/';\n      this.actionUrl = this.env.baseUrl + 'api/v1/';\n      this.headers = new HttpHeaders();\n      this.headers.append('Content-Type', 'application/json');\n      this.headers.append('Accept', 'application/json');\n    }\n    getAll(ns, event) {\n      console.log('GetAll ' + ns + ' to ' + this.actionUrl + ns + '/' + event);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.get(this.actionUrl + ns + '/' + event + '/', httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getAllById(ns, event, id) {\n      console.log('GetAll ' + ns + ' to ' + this.actionUrl + ns + '/' + event);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + id + '/');\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + id, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getSingleByItem(ns, event, asset) {\n      console.log('Entered DataService Filter');\n      console.log('Filter ' + ns);\n      console.log('asset', JSON.stringify(asset));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event, asset, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getAllByIdPost(ns, event, id) {\n      console.log('GetAll ' + ns + ' to ' + this.actionUrl + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + id + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event + '/' + id, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getAllByIds(ns, event, name, id) {\n      console.log('GetAll ' + ns + ' to ' + this.actionUrl + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + name + '/' + id);\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + name + '/' + id, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getAllByAllIds(ns, event, name, cat, stat) {\n      console.log('GetAll ' + ns + ' to ' + this.actionUrl + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + cat + '/' + stat + '/');\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + name + '/' + cat + '/' + stat + '/', httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getSingle(ns, event, id) {\n      console.log('GetSingle ' + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + id + '/');\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + id, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    add(ns, event, asset) {\n      console.log('Entered DataService add');\n      console.log('Add ' + ns);\n      console.log('asset', JSON.stringify(asset));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event, asset, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    update(ns, event, itemToUpdate) {\n      console.log('what is the updated item?', JSON.stringify(itemToUpdate));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.put(`${this.actionUrl}${ns}/${event}`, itemToUpdate, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    deleteById(ns, event, id) {\n      console.log('Delete ' + ns);\n      return this.http.delete(this.actionUrl + ns + '/' + event + '/' + id).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    delete(ns, event, asset) {\n      console.log('Delete ' + ns);\n      return this.http.put(this.actionUrl + ns + '/' + event, asset, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    search(ns, event, asset) {\n      console.log('Entered DataService Filter');\n      console.log('Filter ' + ns);\n      console.log('asset', JSON.stringify(asset));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event, asset, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    downloadFile(ns, event, asset) {\n      console.log('Entered DataService Filter');\n      console.log('Filter ' + ns);\n      console.log('asset', JSON.stringify(asset));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event, asset, httpFileOptions).pipe(map(response => response), catchError(this.handleError));\n    }\n    getSingleById(ns, event, id) {\n      console.log('GetSingle ' + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + id + '/');\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + id, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    download(ns, event, id) {\n      ;\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + id, {\n        responseType: 'blob'\n      }).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    upload(ns, event, formData) {\n      console.log('Entered DataService add');\n      console.log('Add ' + ns);\n      console.log('asset', JSON.stringify(formData));\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/');\n      return this.http.post(this.actionUrl + ns + '/' + event, formData, {\n        observe: 'response'\n      }).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    getEvents(ns, event, id, flag) {\n      console.log('GetSingle ' + ns);\n      console.log('payload ' + this.actionUrl + ns + '/' + event + '/' + id + '/' + flag);\n      return this.http.get(this.actionUrl + ns + '/' + event + '/' + id + '/' + flag, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    searchByType(ns, event, asset) {\n      console.log('Entered DataService getScheduleEvents');\n      console.log('getScheduleEvents ' + ns);\n      console.log('asset', JSON.stringify(asset));\n      return this.http.post(this.actionUrl + ns + '/' + event, asset, httpOptions).pipe(map(response => response), catchError(err => this.handleError(err, this)));\n    }\n    sessionExpired() {}\n    handleError(error, context) {\n      console.log(\"-----------------error------------------------\");\n      console.log(error);\n      if (error.status == 406) {\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = false;\n        dialogConfig.width = '550px';\n        dialogConfig.data = {\n          title: \"Session Expired\",\n          message: \"Please login Again\"\n        };\n        context.modalBox.openDialog(dialogConfig);\n        context.modalBox.onDialogueClosed.subscribe(result => {\n          context.autSrv.logout();\n          context.router.navigate(['logout']);\n        });\n      }\n      // In a real world app, we might use a remote logging infrastructure\n      // We'd also dig deeper into the error to get a better message\n      // let errMsg = (error.message) ? error.message :\n      //     error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      let errMsg = error ? `${error.status} - ${error.statusText}` : 'Server error';\n      console.error(errMsg); // log to console instead\n      return throwError(errMsg);\n    }\n    extractData(res) {\n      return res;\n    }\n    static #_ = this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfirmBoxDialogModalDialogueProvider), i0.ɵɵinject(i3.AuthService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.EnvService), i0.ɵɵinject(i6.SharedService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}