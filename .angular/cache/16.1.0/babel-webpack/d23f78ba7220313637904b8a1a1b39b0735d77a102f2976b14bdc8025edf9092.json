{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/problem-description.services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../../../directive/directive/trim-input.directive\";\nfunction AddProblemDescriptionComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 8);\n    i0.ɵɵtext(1, \"Problem Description already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddProblemDescriptionComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 6);\n    i0.ɵɵtemplate(2, AddProblemDescriptionComponent_tr_8_label_2_Template, 2, 0, \"label\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.pbDescriptionFormPanel.controls[\"pdDescription\"] == null ? null : ctx_r0.pbDescriptionFormPanel.controls[\"pdDescription\"].errors.required));\n  }\n}\nexport class AddProblemDescriptionComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.subscriptions = [];\n    this.newRecord = true;\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.pbDescriptionFormPanel = this.formBuilder.group({\n      pdId: [''],\n      pdDescription: ['', [Validators.required]]\n    });\n    this.subscriptions.push(\n    // any time the inner form changes update the parent of any change\n    this.pbDescriptionFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {}\n  isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n  getValidationErrors() {\n    const me = this;\n    const validationErros = [];\n    return validationErros;\n  }\n  /// Start Preparing Entered Data Model\n  get value() {\n    const pdDetails = {\n      pdId: this.pbDescriptionFormPanel.controls.pdId.value,\n      pdDescription: this.pbDescriptionFormPanel.controls.pdDescription.value\n    };\n    return pdDetails;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.pbDescriptionFormPanel.patchValue({\n        pdId: value.pdId,\n        pdDescription: value.pdDescription\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.pbDescriptionFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  // communicate the inner form validation to the parent form\n  validate(_) {\n    return this.pbDescriptionFormPanel.valid ? null : {\n      clientFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function AddProblemDescriptionComponent_Factory(t) {\n    return new (t || AddProblemDescriptionComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ProblemDescriptionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddProblemDescriptionComponent,\n    selectors: [[\"app-add-problem-description\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddProblemDescriptionComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddProblemDescriptionComponent),\n      multi: true\n    }])],\n    decls: 10,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"name\", \"pdDescription\", \"formControlName\", \"pdDescription\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [4, \"ngIf\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n    template: function AddProblemDescriptionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Problem Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"textarea\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(8, AddProblemDescriptionComponent_tr_8_Template, 3, 1, \"tr\", 5);\n        i0.ɵɵelement(9, \"tr\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.pbDescriptionFormPanel);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (ctx.pbDescriptionFormPanel.controls[\"pdDescription\"] == null ? null : ctx.pbDescriptionFormPanel.controls[\"pdDescription\"].errors) && ctx.pbDescriptionFormPanel.controls[\"pdDescription\"].dirty);\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AddProblemDescriptionComponent_tr_8_label_2_Template","ɵɵadvance","ɵɵproperty","ctx_r0","pbDescriptionFormPanel","controls","errors","required","AddProblemDescriptionComponent","constructor","formBuilder","service","subscriptions","newRecord","onChange","onTouched","group","pdId","pdDescription","push","valueChanges","subscribe","value","ngOnInit","isValid","getValidationErrors","length","me","validationErros","pdDetails","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","clientFormPanel","ngOnDestroy","forEach","s","unsubscribe","ɵɵdirectiveInject","i1","UntypedFormBuilder","i2","ProblemDescriptionService","_2","selectors","inputs","isNew","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddProblemDescriptionComponent_Template","rf","ctx","ɵɵelement","AddProblemDescriptionComponent_tr_8_Template","dirty"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\Helpdesk\\help-desk-problem-description\\widgets\\add-problem-description\\add-problem-description\\add-problem-description.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\Helpdesk\\help-desk-problem-description\\widgets\\add-problem-description\\add-problem-description\\add-problem-description.component.html"],"sourcesContent":["import { Component, Input, OnInit, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, UntypedFormGroup, UntypedFormBuilder, Validators, UntypedFormControl, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ProblemDescriptionService } from '../../../services/problem-description.services';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\n\n@Component({\n  selector: 'app-add-problem-description',\n  templateUrl: './add-problem-description.component.html',\n  styleUrls: ['./add-problem-description.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddProblemDescriptionComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddProblemDescriptionComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class AddProblemDescriptionComponent implements OnInit {\n  pbDescriptionFormPanel: UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  newRecord: boolean = true;\n  currentDate: any;\n  @Input() isNew!: boolean;\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private service: ProblemDescriptionService,\n  ) {\n    this.pbDescriptionFormPanel = this.formBuilder.group({\n      pdId: ['',],\n      pdDescription: ['', [Validators.required]],\n\n    });\n\n    this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.pbDescriptionFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n  public isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n    \n    public getValidationErrors() {\n      const me = this;\n      const validationErros: VaildationError[] = [];\n      return validationErros;\n   }\n   \n  \n    /// Start Preparing Entered Data Model\n    get value(): any {\n      const pdDetails: any = {\n        pdId: this.pbDescriptionFormPanel.controls.pdId.value,\n        pdDescription: this.pbDescriptionFormPanel.controls.pdDescription.value,\n      };\n      return pdDetails;\n   }\n  \n    set value(value: any) {\n      setTimeout(() => {\n        this.pbDescriptionFormPanel.patchValue({\n          pdId: value.pdId,\n          pdDescription: value.pdDescription,\n         });\n      });\n      this.onChange(value);\n      this.onTouched();\n   }\n    \n  \n  writeValue(value:any) {\n      \n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.pbDescriptionFormPanel.reset();\n      }\n   }\n    \n  \n  registerOnChange(fn:any) {\n      this.onChange = fn;\n    }\n  registerOnTouched(fn: any) {\n      this.onTouched = fn;\n    }\n    onChange: any = () => { };\n    onTouched: any = () => { };\n  \n    // communicate the inner form validation to the parent form\n  validate(_: UntypedFormControl) {\n      return this.pbDescriptionFormPanel.valid ? null : { clientFormPanel: { valid: false } };\n    }\n  \n  ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n","\n<form [formGroup]=\"pbDescriptionFormPanel\">\n    <table width=\"100%\">\n      <tr>\n        <td>\n          <div class=\"input-label-custom \">\n            <label class='form-field-lable'>Problem Description</label>\n            <textarea class=\"form-control note-border\" name=\"pdDescription\" formControlName=\"pdDescription\" rows=\"2\" nz-input\n              maxlength=\"256\" appTrimInput></textarea>\n          </div>\n        </td>\n      </tr>\n      <tr *ngIf=\"(pbDescriptionFormPanel.controls['pdDescription']?.errors && pbDescriptionFormPanel.controls['pdDescription'].dirty)\">\n        <td style=\"width:25%\">\n          <label *ngIf=\"!pbDescriptionFormPanel.controls['pdDescription']?.errors.required\" class='form-field-lable'\n            style=\"color:red;\">Problem Description already exists </label>\n        </td>\n      <tr>\n    </table>\n  </form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}