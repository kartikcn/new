{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"primeng/calendar\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddTermsComponent_tr_21_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 14);\n    i0.ɵɵtext(1, \"Date To should be greater than Date From\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTermsComponent_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 6);\n    i0.ɵɵtemplate(2, AddTermsComponent_tr_21_label_2_Template, 2, 0, \"label\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.termFormPanel.controls[\"dateTo\"] == null ? null : ctx_r0.termFormPanel.controls[\"dateTo\"].errors) && !(ctx_r0.termFormPanel.controls[\"dateTo\"] == null ? null : ctx_r0.termFormPanel.controls[\"dateTo\"].errors.required));\n  }\n}\nexport let AddTermsComponent = /*#__PURE__*/(() => {\n  class AddTermsComponent {\n    constructor(formBuilder, datePipe) {\n      this.formBuilder = formBuilder;\n      this.datePipe = datePipe;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.isNew = false;\n      this.processList = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.termFormPanel = this.formBuilder.group({\n        term: ['', [Validators.required]],\n        dateFrom: [null, [Validators.required]],\n        dateTo: [null, [Validators.required]],\n        comments: [null]\n      });\n      this.subscriptions.push(this.termFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.termFormPanel.controls).forEach(key => {\n        let field = this.termFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        term: this.termFormPanel.controls.term.value,\n        dateFrom: this.termFormPanel.controls.dateFrom.value,\n        dateTo: this.termFormPanel.controls.dateTo.value,\n        comments: this.termFormPanel.controls.comments.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.termFormPanel.patchValue({\n          term: value.term,\n          dateFrom: this.datePipe.transform(this.formatDate(value.dateFrom), 'dd MMM yyyy'),\n          dateTo: this.datePipe.transform(this.formatDate(value.dateTo), 'dd MMM yyyy'),\n          comments: value.comments\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.termFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.termFormPanel.valid ? null : {\n        termFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    formatDate(date) {\n      if (date != null) {\n        var d = new Date(date);\n        // var userTimezoneOffset = date.getTimezoneOffset() * 60000;\n        // var a = new Date(date.getTime() - userTimezoneOffset);\n        return d;\n      } else {\n        return null;\n      }\n    }\n    checkDates(control) {\n      if (control !== undefined && control != null) {\n        this.termFormPanel.controls['dateTo'].setErrors(null);\n        this.termFormPanel.clearAsyncValidators();\n        this.termFormPanel.updateValueAndValidity();\n        let dateFrom = this.formatDate(this.termFormPanel.controls.dateFrom.value);\n        let dateTo = this.formatDate(this.termFormPanel.controls.dateTo.value);\n        if (dateFrom != null && dateTo != null && dateTo <= dateFrom) {\n          this.termFormPanel.controls['dateTo'].setErrors({\n            'incorrect': true\n          });\n          this.termFormPanel.updateValueAndValidity();\n          return {\n            'incorrect': true\n          };\n        } else {\n          return null;\n        }\n      }\n      return null;\n    }\n    static #_ = this.ɵfac = function AddTermsComponent_Factory(t) {\n      return new (t || AddTermsComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddTermsComponent,\n      selectors: [[\"app-add-terms\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddTermsComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddTermsComponent),\n        multi: true\n      }])],\n      decls: 28,\n      vars: 4,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [\"colspan\", \"2\", 2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"term\", \"formControlName\", \"term\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [2, \"width\", \"50%\"], [1, \"p-fluid\", \"p-field\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateFrom\", \"inputId\", \"icon\", 3, \"showIcon\", \"ngModelChange\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateTo\", \"inputId\", \"icon\", 3, \"showIcon\", \"ngModelChange\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"comments\", \"formControlName\", \"comments\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;margin-left:5px;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\", \"margin-left\", \"5px\"]],\n      template: function AddTermsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Term\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 6)(10, \"div\", 3)(11, \"div\", 7)(12, \"label\", 4);\n          i0.ɵɵtext(13, \"Date From\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"p-calendar\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function AddTermsComponent_Template_p_calendar_ngModelChange_14_listener($event) {\n            return ctx.checkDates($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(15, \"td\", 6)(16, \"div\", 3)(17, \"div\", 7)(18, \"label\", 4);\n          i0.ɵɵtext(19, \"Date To\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"p-calendar\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function AddTermsComponent_Template_p_calendar_ngModelChange_20_listener($event) {\n            return ctx.checkDates($event);\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(21, AddTermsComponent_tr_21_Template, 3, 1, \"tr\", 10);\n          i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 2)(24, \"div\", 3)(25, \"label\", 11);\n          i0.ɵɵtext(26, \"Notes\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"textarea\", 12);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.termFormPanel);\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.termFormPanel.controls[\"dateTo\"] == null ? null : ctx.termFormPanel.controls[\"dateTo\"].errors);\n        }\n      },\n      dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.Calendar, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective],\n      styles: [\".mat-dialog-title-ext{font-size:16px!important}  .mdc-dialog__title:before{height:24px!important}\"]\n    });\n  }\n  return AddTermsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}