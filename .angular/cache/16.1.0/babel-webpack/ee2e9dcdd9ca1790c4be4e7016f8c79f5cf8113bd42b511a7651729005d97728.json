{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../craftsperson/services/craftsperson.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"../services/technician-time-usage-analysis.services\";\nimport * as i6 from \"src/app/services/breakpoint.service\";\nimport * as i7 from \"primeng/api\";\nimport * as i8 from \"primeng/table\";\nimport * as i9 from \"primeng/calendar\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/dialog\";\nimport * as i12 from \"primeng/dropdown\";\nimport * as i13 from \"primeng/panel\";\nimport * as i14 from \"@ng-select/ng-select\";\nfunction TechnicianTimeUsageAnalysisComponent_table_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 9)(1, \"tr\")(2, \"td\", 10)(3, \"div\", 11)(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Technician\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"ng-select\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\", 10)(8, \"div\", 11)(9, \"div\", 14)(10, \"div\", 15)(11, \"label\", 16);\n    i0.ɵɵtext(12, \"Scheduled From\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"p-calendar\", 17);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(14, \"td\", 10)(15, \"div\", 11)(16, \"div\", 14)(17, \"div\", 15)(18, \"label\", 16);\n    i0.ɵɵtext(19, \"Scheduled To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"p-calendar\", 18);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(21, \"td\", 10)(22, \"div\", 11)(23, \"label\", 16);\n    i0.ɵɵtext(24, \"Requests Type \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(25, \"ng-select\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"td\", 10)(27, \"div\", 20)(28, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_table_2_Template_button_click_28_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onSearch());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_table_2_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onClear());\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.technicianData)(\"searchable\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r0.showRequestsTypeList)(\"searchable\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.filterPanel.valid);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 9)(1, \"tr\")(2, \"td\", 23)(3, \"div\", 11)(4, \"label\", 12);\n    i0.ɵɵtext(5, \"Technician\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"ng-select\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\", 23)(8, \"div\", 11)(9, \"div\", 14)(10, \"div\", 15)(11, \"label\", 16);\n    i0.ɵɵtext(12, \"Scheduled From\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"p-calendar\", 17);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(14, \"td\", 23)(15, \"div\", 11)(16, \"div\", 14)(17, \"div\", 15)(18, \"label\", 16);\n    i0.ɵɵtext(19, \"Scheduled To\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"p-calendar\", 18);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(21, \"tr\")(22, \"td\", 23)(23, \"div\", 11)(24, \"label\", 16);\n    i0.ɵɵtext(25, \"Requests Type \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"ng-select\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"td\", 23)(28, \"div\", 20)(29, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_table_3_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onSearch());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_table_3_Template_button_click_30_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClear());\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r1.technicianData)(\"searchable\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"showIcon\", false);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r1.showRequestsTypeList)(\"searchable\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.filterPanel.valid);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_ng_template_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.exportExcel());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r2.technicanTimeUsageanalysisData.length > 0));\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 26)(2, \"div\", 27)(3, \"div\", 28)(4, \"p\", 29);\n    i0.ɵɵtext(5, \"Scheduled Date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 30);\n    i0.ɵɵelement(7, \"p-sortIcon\", 31)(8, \"p-columnFilter\", 32);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"th\", 33)(10, \"div\", 27)(11, \"div\", 28)(12, \"p\", 29);\n    i0.ɵɵtext(13, \"Scheduled Time\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 30);\n    i0.ɵɵelement(15, \"p-sortIcon\", 34)(16, \"p-columnFilter\", 35);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"th\", 36)(18, \"div\", 27)(19, \"div\", 28)(20, \"p\", 29);\n    i0.ɵɵtext(21, \"Estimated Hours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(22, \"div\", 30);\n    i0.ɵɵelement(23, \"p-sortIcon\", 37)(24, \"p-columnFilter\", 38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(25, \"th\", 39)(26, \"div\", 27)(27, \"div\", 28)(28, \"p\", 29);\n    i0.ɵɵtext(29, \"Actual Hours\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(30, \"div\", 30);\n    i0.ɵɵelement(31, \"p-sortIcon\", 40)(32, \"p-columnFilter\", 41);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"th\", 42)(34, \"div\", 27)(35, \"div\", 28)(36, \"p\", 29);\n    i0.ɵɵtext(37, \"Request Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"div\", 30);\n    i0.ɵɵelement(39, \"p-sortIcon\", 43)(40, \"p-columnFilter\", 44);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function TechnicianTimeUsageAnalysisComponent_ng_template_9_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const techTime_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.getWorkingHoursByTechnicianIdAndRequestId(techTime_r15.requestId));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const techTime_r15 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 5, techTime_r15.dateAssign, \"dd MMM yyyy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.convertToDisplayTime(techTime_r15.timeAssign));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(techTime_r15.hoursRequired);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", techTime_r15.actualHoursStd + techTime_r15.actualHoursDouble + techTime_r15.actualHoursOvertime, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(techTime_r15.requestId);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 5);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_2_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 60);\n    i0.ɵɵlistener(\"onChange\", function TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_2_ng_template_5_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const filter_r24 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r24($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r23 = ctx.$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngModel\", value_r23)(\"options\", ctx_r22.enumWorkType)(\"showClear\", true);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 47);\n    i0.ɵɵtext(2, \" Work Type\");\n    i0.ɵɵelement(3, \"p-sortIcon\", 48);\n    i0.ɵɵelementStart(4, \"p-columnFilter\", 49);\n    i0.ɵɵtemplate(5, TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_2_ng_template_5_Template, 1, 3, \"ng-template\", 50);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"th\", 51);\n    i0.ɵɵtext(7, \" Standard Hours\");\n    i0.ɵɵelement(8, \"p-sortIcon\", 52)(9, \"p-columnFilter\", 53);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 54);\n    i0.ɵɵtext(11, \" Double Hours\");\n    i0.ɵɵelement(12, \"p-sortIcon\", 55)(13, \"p-columnFilter\", 56);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\", 57);\n    i0.ɵɵtext(15, \" Overtime Hours\");\n    i0.ɵɵelement(16, \"p-sortIcon\", 58)(17, \"p-columnFilter\", 59);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const techTime_r27 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r20.getEnumById(techTime_r27.workType));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(techTime_r27.actualHoursStd);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(techTime_r27.actualHoursDouble);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(techTime_r27.actualHoursOvertime);\n  }\n}\nfunction TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No Records. \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", ctx_r21.technicanData.length);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"50vw\"\n  };\n};\nfunction TechnicianTimeUsageAnalysisComponent_p_dialog_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 46);\n    i0.ɵɵlistener(\"visibleChange\", function TechnicianTimeUsageAnalysisComponent_p_dialog_11_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.showDetails = $event);\n    });\n    i0.ɵɵelementStart(1, \"p-table\", 5);\n    i0.ɵɵtemplate(2, TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_2_Template, 18, 0, \"ng-template\", 3);\n    i0.ɵɵtemplate(3, TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_3_Template, 9, 4, \"ng-template\", 6);\n    i0.ɵɵtemplate(4, TechnicianTimeUsageAnalysisComponent_p_dialog_11_ng_template_4_Template, 3, 1, \"ng-template\", 7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c0));\n    i0.ɵɵproperty(\"visible\", ctx_r6.showDetails)(\"draggable\", false)(\"modal\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rows\", ctx_r6.rowCount)(\"value\", ctx_r6.technicanData)(\"paginator\", false)(\"loading\", ctx_r6.loading);\n  }\n}\nexport let TechnicianTimeUsageAnalysisComponent = /*#__PURE__*/(() => {\n  class TechnicianTimeUsageAnalysisComponent {\n    constructor(cfSrv, datePipe, formBuilder, enumsrv, technicianTimeUsageanalysisService, bps) {\n      this.cfSrv = cfSrv;\n      this.datePipe = datePipe;\n      this.formBuilder = formBuilder;\n      this.enumsrv = enumsrv;\n      this.technicianTimeUsageanalysisService = technicianTimeUsageanalysisService;\n      this.bps = bps;\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.technicianData = [];\n      this.technicanTimeUsageanalysisData = [];\n      this.technicanData = [];\n      this.enumWorkType = [];\n      this.enumList = [];\n      this.req_array = [];\n      this.enableDetailsBtn = false;\n      this.enumTechRequLogData = [];\n      this.enumClonedList = [];\n      this.isTableRecordLoading = false;\n      this.isErr = false;\n      this.errorMsg = '';\n      this.isShow = false;\n      this.totalActualHr = [];\n      this.showDetails = false;\n      this.showRequestsTypeList = [{\n        label: \"Preventive Maintenance\",\n        value: \"ppm\"\n      }, {\n        label: \"Facilities Helpdesk\",\n        value: \"facilities\"\n      }, {\n        label: \"All\",\n        value: \"all\"\n      }];\n      this.showType = \"facilities\";\n      this.useTabletProtrait = false;\n      this.filterPanel = this.formBuilder.group({\n        technicianId: [null, [Validators.required]],\n        dateFrom: [null],\n        dateTo: [null],\n        showType: [this.showType]\n      });\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      this.loadTechinician();\n      // this.loadRecords();\n      this.loadEnums();\n      var date = new Date();\n      var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n      var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          dateFrom: firstDay,\n          dateTo: lastDay,\n          showType: this.showType\n        });\n      });\n    }\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n    }\n    loadRecords() {\n      const filterData = this.getFilterData();\n      this.getRequestByTechnicianTime(filterData);\n    }\n    getFilterData() {\n      var fromDate = this.filterPanel.controls.dateFrom.value;\n      var toDate = this.filterPanel.controls.dateTo.value;\n      var technicianId = this.filterPanel.controls.technicianId.value;\n      var filterData = {\n        \"fromDate\": this.datePipe.transform(fromDate, \"yyyy-MM-dd\"),\n        \"toDate\": this.datePipe.transform(toDate, \"yyyy-MM-dd\"),\n        \"technicianId\": technicianId,\n        \"showRequestType\": this.filterPanel.controls.showType.value\n      };\n      return filterData;\n    }\n    getRequestByTechnicianTime(filter) {\n      this.loading = true;\n      this.technicianTimeUsageanalysisService.getRequestByTechnicianTime(filter).subscribe(res => {\n        this.loading = false;\n        this.technicanTimeUsageanalysisData = res.map(each => {\n          return {\n            ...each,\n            formatedScheduledDate: this.datePipe.transform(each.dateAssign, 'dd MMM yyyy')\n          };\n        });\n      }, error => {\n        this.loading = false;\n        this.technicanTimeUsageanalysisData = [];\n      });\n    }\n    onSearch() {\n      const filterData = this.getFilterData();\n      this.getRequestByTechnicianTime(filterData);\n    }\n    loadTechinician() {\n      this.cfSrv.getAllCraftsperson().subscribe(res => {\n        if (res) {\n          this.technicianData = res;\n        } else {\n          this.technicianData = [];\n        }\n      });\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumTechRequLogData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'request_technician_log'.toLocaleUpperCase());\n        this.enumWorkType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'request_technician_log'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'work_type'.toLocaleUpperCase());\n      }, error => {});\n    }\n    getEnumById(enumKey) {\n      return this.enumWorkType.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    convertToDisplayTime(value) {\n      if (value != null) {\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        return time;\n      } else {\n        return '';\n      }\n    }\n    onClick(technicianId) {\n      var fromDate = this.filterPanel.controls.dateFrom.value;\n      var toDate = this.filterPanel.controls.dateTo.value;\n      var technicianId = this.filterPanel.controls.technicianId.value;\n      var filterData = {\n        \"fromDate\": this.datePipe.transform(fromDate, \"yyyy-MM-dd\"),\n        \"toDate\": this.datePipe.transform(toDate, \"yyyy-MM-dd\"),\n        \"technicianId\": technicianId\n      };\n      this.onRowClick(filterData);\n    }\n    onRowClick(event) {\n      this.isShow = this.isTableRecordLoading = true;\n      let postData = {\n        ...event\n      };\n      this.getRequestByTechnicianTime(postData);\n    }\n    getWorkingHoursByTechnicianIdAndRequestId(requestId) {\n      let filterdata = {\n        requestId: requestId,\n        technicianId: this.filterPanel.controls.technicianId.value\n      };\n      this.technicianTimeUsageanalysisService.getWorkingHoursByTechnicianIdAndRequestId(filterdata).subscribe(res => {\n        this.showDetails = true;\n        this.technicanData = res;\n      }, error => {\n        this.loading = false;\n        this.technicanData = [];\n      });\n    }\n    exportExcel() {\n      if (this.technicanTimeUsageanalysisData.length === 0) {\n        // Data is not present, only print the headings\n        var excelHeaders = [\"Technician Id\", \"Technician Name\", \"Scheduled Date\", \"Scheduled Time\", \"Estimated Hours\", \"Work Type\", \"Actual Hours\", \"Request Code\"];\n        let options = {\n          header: excelHeaders\n        };\n        const worksheet = XLSX.utils.json_to_sheet([], options); // Provide empty data array\n        worksheet['!cols'] = [{\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }];\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = XLSX.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"TechnicianTimeUsageAnalysisReports\");\n      } else {\n        this.getDestructuredData(() => {\n          var excelHeaders = [\"Technician Id\", \"Technician Name\", \"Scheduled Date\", \"Scheduled Time\", \"Estimated Hours\", \"Work Type\", \"Actual Hours\", \"Request Code\"];\n          let options = {\n            header: excelHeaders\n          };\n          const worksheet = XLSX.utils.json_to_sheet(this.req_array);\n          worksheet['!cols'] = [{\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }];\n          const workbook = {\n            Sheets: {\n              'data': worksheet\n            },\n            SheetNames: ['data']\n          };\n          const excelBuffer = XLSX.write(workbook, {\n            bookType: 'xlsx',\n            type: 'array'\n          });\n          this.saveAsExcelFile(excelBuffer, \"TechnicianTimeUsageAnalysisReports\");\n        });\n      }\n    }\n    getDestructuredData(callback) {\n      if (!this.technicanTimeUsageanalysisData || this.technicanTimeUsageanalysisData.length === 0) {\n        this.req_array = [];\n        callback();\n        return;\n      }\n      this.req_array = this.technicanTimeUsageanalysisData.map(item => ({\n        \"Technician Id\": item.technicianId,\n        \"Technician Name\": this.getTechnicianName(item.technicianId),\n        \"Scheduled Date\": this.datePipe.transform(item.dateAssign, \"dd MMM yyyy\"),\n        \"Scheduled Time\": item.timeAssign,\n        \"Estimated Hours\": item.hoursRequired,\n        \"Work Type\": this.getEnumById(item.workType),\n        \"Actual Hours\": item.actualHoursStd + item.actualHoursDouble + item.actualHoursOvertime,\n        \"Request Code\": item.requestId\n      }));\n      callback();\n    }\n    saveAsExcelFile(buffer, fileName) {\n      const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      const EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    getTechnicianName(id) {\n      const data = this.technicianData.filter(each => each.cfId === id);\n      return data[0].name;\n    }\n    onClear() {\n      this.filterPanel.reset();\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          showType: this.showType\n        });\n      });\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    static #_ = this.ɵfac = function TechnicianTimeUsageAnalysisComponent_Factory(t) {\n      return new (t || TechnicianTimeUsageAnalysisComponent)(i0.ɵɵdirectiveInject(i1.CraftspersonService), i0.ɵɵdirectiveInject(i2.DatePipe), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.EnumService), i0.ɵɵdirectiveInject(i5.TechnicianTimeUsageanalysisService), i0.ɵɵdirectiveInject(i6.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TechnicianTimeUsageAnalysisComponent,\n      selectors: [[\"app-technician-time-usage-analysis\"]],\n      inputs: {\n        showType: \"showType\"\n      },\n      decls: 12,\n      vars: 9,\n      consts: [[\"header\", \"Technician Time Usage\", 3, \"toggleable\"], [3, \"formGroup\"], [\"width\", \"100%\", 4, \"ngIf\"], [\"pTemplate\", \"header\"], [1, \"card\"], [\"styleClass\", \"p-datatable-customers p-datatable-gridlines\", 3, \"rows\", \"value\", \"paginator\", \"loading\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"header\", \"Work Log Details\", 3, \"visible\", \"draggable\", \"modal\", \"style\", \"visibleChange\", 4, \"ngIf\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"technicianId\", \"bindLabel\", \"name\", \"bindValue\", \"cfId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateFrom\", \"formControlName\", \"dateFrom\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateTo\", \"formControlName\", \"dateTo\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"showType\", \"bindLabel\", \"label\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\", \"justify-content\", \"center\", \"margin-top\", \"12.5px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"filter-search-button\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull-right\", \"filter-clear-button\", 3, \"click\"], [2, \"width\", \"30%\"], [1, \"xls-container\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 2, \"margin-left\", \"auto\", 3, \"disabled\", \"click\"], [\"pSortableColumn\", \"formatedScheduledDate\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"formatedScheduledDate\"], [\"type\", \"text\", \"field\", \"formatedScheduledDate\", \"display\", \"menu\"], [\"pSortableColumn\", \"timeAssign\"], [\"field\", \"timeAssign\"], [\"type\", \"text\", \"field\", \"timeAssign\", \"display\", \"menu\"], [\"pSortableColumn\", \"hoursRequired\"], [\"field\", \"hoursRequired\"], [\"type\", \"text\", \"field\", \"hoursRequired\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHours\"], [\"field\", \"actualHours\"], [\"type\", \"text\", \"field\", \"actualHours\", \"display\", \"menu\"], [\"pSortableColumn\", \"requestId\"], [\"field\", \"requestId\"], [\"type\", \"text\", \"field\", \"requestId\", \"display\", \"menu\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-info-circle\", \"matTooltip\", \"View Detailed Log\", 1, \"p-button-rounded\", \"pull-right\", 2, \"height\", \"16px !important\", \"width\", \"16px\", 3, \"click\"], [\"header\", \"Work Log Details\", 3, \"visible\", \"draggable\", \"modal\", \"visibleChange\"], [\"pSortableColumn\", \"workType\"], [\"field\", \"workType\"], [\"field\", \"workType\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"actualHoursStd\"], [\"field\", \"actualHoursStd\"], [\"type\", \"text\", \"field\", \"actualHoursStd\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHoursDouble\"], [\"field\", \"actualHoursDouble\"], [\"type\", \"text\", \"field\", \"actualHoursDouble\", \"display\", \"menu\"], [\"pSortableColumn\", \"actualHoursOvertime\"], [\"field\", \"actualHoursOvertime\"], [\"type\", \"text\", \"field\", \"actualHoursOvertime\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a work type\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"]],\n      template: function TechnicianTimeUsageAnalysisComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0)(1, \"form\", 1);\n          i0.ɵɵtemplate(2, TechnicianTimeUsageAnalysisComponent_table_2_Template, 30, 10, \"table\", 2);\n          i0.ɵɵtemplate(3, TechnicianTimeUsageAnalysisComponent_table_3_Template, 31, 10, \"table\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"p-panel\");\n          i0.ɵɵtemplate(5, TechnicianTimeUsageAnalysisComponent_ng_template_5_Template, 2, 1, \"ng-template\", 3);\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"p-table\", 5);\n          i0.ɵɵtemplate(8, TechnicianTimeUsageAnalysisComponent_ng_template_8_Template, 41, 0, \"ng-template\", 3);\n          i0.ɵɵtemplate(9, TechnicianTimeUsageAnalysisComponent_ng_template_9_Template, 13, 8, \"ng-template\", 6);\n          i0.ɵɵtemplate(10, TechnicianTimeUsageAnalysisComponent_ng_template_10_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(11, TechnicianTimeUsageAnalysisComponent_p_dialog_11_Template, 5, 10, \"p-dialog\", 8);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"toggleable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.useTabletProtrait);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"value\", ctx.technicanTimeUsageanalysisData)(\"paginator\", false)(\"loading\", ctx.loading);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.showDetails);\n        }\n      },\n      dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i7.PrimeTemplate, i8.Table, i8.SortableColumn, i8.SortIcon, i8.ColumnFilter, i9.Calendar, i10.ButtonDirective, i11.Dialog, i12.Dropdown, i13.Panel, i3.FormGroupDirective, i3.FormControlName, i14.NgSelectComponent, i2.DatePipe],\n      styles: [\"@charset \\\"UTF-8\\\";.ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}  p-datatable-scrollable-header-box{padding:0}  .p-panel .p-panel-content{border:none!important;padding:0!important}  .ng-select.ng-select-single .ng-select-container .ng-value-container .ng-value{overflow:hidden!important;text-overflow:ellipsis!important;white-space:nowrap!important;max-width:280px!important}[_nghost-%COMP%]     .pi-chevron-down:before{content:\\\"\\\\2212\\\"!important;font-size:1.5rem;font-weight:700;color:#0d89ec}[_nghost-%COMP%]     .pi-chevron-right:before{content:\\\"+\\\"!important;font-size:1.5rem;font-weight:700;color:#0d89ec}.hold-dialog-header[_ngcontent-%COMP%]{margin-left:5px;font-weight:700;font-size:14px}[_nghost-%COMP%]     .p-dialog .p-dialog-content{padding:0 1.5rem 0rem}.xls-container[_ngcontent-%COMP%]{width:100%}.filter-search-button[_ngcontent-%COMP%]{width:80px;margin:0 20px 0 0}.filter-clear-button[_ngcontent-%COMP%]{width:80px;margin-left:-5px}\"]\n    });\n  }\n  return TechnicianTimeUsageAnalysisComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}