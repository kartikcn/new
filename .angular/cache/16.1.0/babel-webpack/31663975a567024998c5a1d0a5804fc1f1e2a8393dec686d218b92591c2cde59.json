{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../providers/connector-list.provider\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"../../services/connector.services\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"ng-zorro-antd/table\";\nimport * as i7 from \"primeng/table\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/dropdown\";\nimport * as i10 from \"primeng/toast\";\nimport * as i11 from \"primeng/panel\";\nimport * as i12 from \"primeng/confirmdialog\";\nimport * as i13 from \"@angular/material/tooltip\";\nfunction ConnectorListComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ConnectorListComponent_ng_template_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ConnectorListComponent_ng_template_5_ng_template_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 30);\n    i0.ɵɵlistener(\"onChange\", function ConnectorListComponent_ng_template_5_ng_template_26_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const filter_r9 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r9($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r8 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r8)(\"options\", ctx_r6.enumType)(\"showClear\", true);\n  }\n}\nfunction ConnectorListComponent_ng_template_5_ng_template_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 30);\n    i0.ɵɵlistener(\"onChange\", function ConnectorListComponent_ng_template_5_ng_template_35_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const filter_r13 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r13($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r12 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r12)(\"options\", ctx_r7.enumFormat)(\"showClear\", true);\n  }\n}\nfunction ConnectorListComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 12);\n    i0.ɵɵelementStart(2, \"th\", 13)(3, \"div\", 14)(4, \"div\", 15)(5, \"p\", 16);\n    i0.ɵɵtext(6, \"Connector Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 17);\n    i0.ɵɵelement(8, \"p-sortIcon\", 18)(9, \"p-columnFilter\", 19);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 20)(11, \"div\", 14)(12, \"div\", 15)(13, \"p\", 16);\n    i0.ɵɵtext(14, \"Table Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 17);\n    i0.ɵɵelement(16, \"p-sortIcon\", 21)(17, \"p-columnFilter\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 23)(19, \"div\", 14)(20, \"div\", 15)(21, \"p\", 16);\n    i0.ɵɵtext(22, \"Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 17);\n    i0.ɵɵelement(24, \"p-sortIcon\", 24);\n    i0.ɵɵelementStart(25, \"p-columnFilter\", 25);\n    i0.ɵɵtemplate(26, ConnectorListComponent_ng_template_5_ng_template_26_Template, 1, 3, \"ng-template\", 26);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(27, \"th\", 27)(28, \"div\", 14)(29, \"div\", 15)(30, \"p\", 16);\n    i0.ɵɵtext(31, \"File Format\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(32, \"div\", 17);\n    i0.ɵɵelement(33, \"p-sortIcon\", 28);\n    i0.ɵɵelementStart(34, \"p-columnFilter\", 29);\n    i0.ɵɵtemplate(35, ConnectorListComponent_ng_template_5_ng_template_35_Template, 1, 3, \"ng-template\", 26);\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction ConnectorListComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 31)(1, \"td\", 32)(2, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function ConnectorListComponent_ng_template_6_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const connector_r16 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onEdit(connector_r16.connectorId));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function ConnectorListComponent_ng_template_6_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const connector_r16 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.onExecute(connector_r16));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\", 35);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const connector_r16 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", connector_r16);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", connector_r16.connectorName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", connector_r16.connectorName, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(connector_r16.tableName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumByKey(connector_r16.connectorType));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumByKey(connector_r16.fileFormat));\n  }\n}\nfunction ConnectorListComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 10);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let ConnectorListComponent = /*#__PURE__*/(() => {\n  class ConnectorListComponent {\n    constructor(connectorListDialogueProvider, enumsrv, connectorSrv, messageService) {\n      this.connectorListDialogueProvider = connectorListDialogueProvider;\n      this.enumsrv = enumsrv;\n      this.connectorSrv = connectorSrv;\n      this.messageService = messageService;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.connectorData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumType = [];\n      this.enumFormat = [];\n      this.enumSeperator = [];\n      this.event = {\n        data: '',\n        type: ''\n      };\n      this.parentFun = new EventEmitter();\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadRecords();\n    }\n    loadRecords() {\n      this.connectorSrv.getAllConnectors().subscribe(res => {\n        this.connectorData = res;\n      });\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'conncetor'.toLocaleUpperCase());\n        this.enumType = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'connector_type'.toLocaleUpperCase());\n        this.enumFormat = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'file_format'.toLocaleUpperCase());\n        this.enumSeperator = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'seperator'.toLocaleUpperCase());\n      }, error => {});\n    }\n    getEnumByKey(enumKey) {\n      return this.enumClonedList.find(t => t.enumKey == enumKey) ? this.enumClonedList.find(t => t.enumKey == enumKey)?.enumValue : null;\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '800px';\n      dialogConfig.data = {\n        isEdit: false,\n        connectorId: null,\n        newRecord: true\n      };\n      this.connectorListDialogueProvider.openDialog(dialogConfig);\n      this.connectorListDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords();\n        }\n      });\n    }\n    onEdit(id) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '800px';\n      dialogConfig.data = {\n        connectorId: id,\n        isEdit: true,\n        newRecord: false\n      };\n      this.connectorListDialogueProvider.openDialog(dialogConfig);\n      this.connectorListDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords();\n        }\n      });\n    }\n    onRowSelect(event) {\n      this.event.data = event.data;\n      this.event.type = \"row\";\n      this.parentFun.emit(this.event);\n    }\n    onExecute(event) {\n      this.connectorSrv.execute(event).subscribe(res => {\n        console.log(res);\n      });\n      this.event.data = event;\n      this.event.type = \"execute\";\n      this.parentFun.emit(this.event);\n    }\n    static #_ = this.ɵfac = function ConnectorListComponent_Factory(t) {\n      return new (t || ConnectorListComponent)(i0.ɵɵdirectiveInject(i1.ConnectorListDialogueProvider), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.ConnectorService), i0.ɵɵdirectiveInject(i4.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ConnectorListComponent,\n      selectors: [[\"app-connector-list\"]],\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 11,\n      vars: 8,\n      consts: [[1, \"card\", 2, \"height\", \"82vh\"], [\"header\", \"Connectors\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"scrollDirection\", \"both\", \"scrollHeight\", \"550px\", \"selectionMode\", \"single\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"scrollable\", \"rowsPerPageOptions\", \"rowHover\", \"onRowSelect\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"key\", \"eqDelete\", \"position\", \"top-center\"], [\"key\", \"mygrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"10rem\"], [\"pSortableColumn\", \"connectorName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"connectorName\"], [\"type\", \"text\", \"field\", \"connectorName\", \"display\", \"menu\"], [\"pSortableColumn\", \"tableName\"], [\"field\", \"tableName\"], [\"type\", \"text\", \"field\", \"tableName\", \"display\", \"menu\"], [\"pSortableColumn\", \"connectorType\"], [\"field\", \"connectorType\"], [\"field\", \"connectorType\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"fileFormat\"], [\"field\", \"fileFormat\"], [\"field\", \"fileFormat\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Type\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [2, \"width\", \"3rem\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Execute\", 1, \"pull-right\", 3, \"click\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function ConnectorListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1);\n          i0.ɵɵtemplate(2, ConnectorListComponent_ng_template_2_Template, 1, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"p-table\", 4);\n          i0.ɵɵlistener(\"onRowSelect\", function ConnectorListComponent_Template_p_table_onRowSelect_4_listener($event) {\n            return ctx.onRowSelect($event);\n          });\n          i0.ɵɵtemplate(5, ConnectorListComponent_ng_template_5_Template, 36, 0, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, ConnectorListComponent_ng_template_6_Template, 12, 6, \"ng-template\", 6);\n          i0.ɵɵtemplate(7, ConnectorListComponent_ng_template_7_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelement(8, \"p-toast\", 8)(9, \"p-toast\", 9)(10, \"p-confirmDialog\", 10);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"value\", ctx.connectorData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"scrollable\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(7, _c0))(\"rowHover\", true);\n        }\n      },\n      dependencies: [i5.NgControlStatus, i5.NgModel, i6.NzTableCellDirective, i6.NzThMeasureDirective, i6.NzTrDirective, i4.PrimeTemplate, i7.Table, i7.SortableColumn, i7.SelectableRow, i7.SortIcon, i7.ColumnFilter, i8.ButtonDirective, i9.Dropdown, i10.Toast, i11.Panel, i12.ConfirmDialog, i13.MatTooltip],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return ConnectorListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}