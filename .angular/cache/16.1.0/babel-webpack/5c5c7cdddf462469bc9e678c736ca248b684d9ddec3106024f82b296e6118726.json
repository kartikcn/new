{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { BuildingFilterInput } from '../../background-loc/model/DTO/blFilterInput.model';\nimport { FLFilterInputDTO } from '../../background-loc/model/DTO/flFilterInput.model';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { RMFilterInputDTO } from '../../background-loc/model/DTO/rmFilterInput.model';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { SvgViewComponent } from '../../svg-view/svg-view.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../background-loc/services/bl.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../../svg-view/services/svg-view.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../background-loc/provider/bl.provider\";\nimport * as i6 from \"../../background-loc/provider/fl.provider\";\nimport * as i7 from \"../../background-loc/provider/rm.provider\";\nimport * as i8 from \"primeng/api\";\nimport * as i9 from \"ngx-spinner\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@ng-select/ng-select\";\nimport * as i12 from \"primeng/button\";\nimport * as i13 from \"primeng/dialog\";\nimport * as i14 from \"primeng/toast\";\nimport * as i15 from \"primeng/panel\";\nimport * as i16 from \"primeng/confirmdialog\";\nfunction LinkRoomSvgComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 25);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Building: \", ctx_r0.svgFlList[0].blId, \" | Floor: \", ctx_r0.svgFlList[0].flId, \"\");\n  }\n}\nfunction LinkRoomSvgComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 26);\n  }\n}\nfunction LinkRoomSvgComponent_ng_container_32_p_header_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-header\");\n    i0.ɵɵtext(1, \"Room Details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LinkRoomSvgComponent_ng_container_32_p_header_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-header\");\n    i0.ɵɵtext(1, \"Select Room\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"29vw\",\n    height: \"fit-content\"\n  };\n};\nfunction LinkRoomSvgComponent_ng_container_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p-dialog\", 27);\n    i0.ɵɵlistener(\"visibleChange\", function LinkRoomSvgComponent_ng_container_32_Template_p_dialog_visibleChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.displayRmUpdate = $event);\n    });\n    i0.ɵɵtemplate(2, LinkRoomSvgComponent_ng_container_32_p_header_2_Template, 2, 0, \"p-header\", 9);\n    i0.ɵɵtemplate(3, LinkRoomSvgComponent_ng_container_32_p_header_3_Template, 2, 0, \"p-header\", 9);\n    i0.ɵɵelementStart(4, \"form\", 12)(5, \"div\")(6, \"div\", 28)(7, \"p\", 29);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 29);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 13)(12, \"label\", 14);\n    i0.ɵɵtext(13, \"Room\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"ng-select\", 30);\n    i0.ɵɵlistener(\"change\", function LinkRoomSvgComponent_ng_container_32_Template_ng_select_change_14_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onSelectRoom($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_ng_container_32_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onAddNewRoom());\n    });\n    i0.ɵɵtext(16, \"Add new Room\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"div\", 18)(18, \"div\", 19)(19, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_ng_container_32_Template_button_click_19_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.saveDialog());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_ng_container_32_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.cancelRoom());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_ng_container_32_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.unassignDialog());\n    });\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(18, _c0));\n    i0.ɵɵproperty(\"visible\", ctx_r2.displayRmUpdate)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.roomAlreadyAssignedElement);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.roomAlreadyAssignedElement);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.rmForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" Building Id : \", ctx_r2.svgFlList[0].blId, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Floor Id : \", ctx_r2.svgFlList[0].flId, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r2.rmData)(\"searchable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r2.isRoomSelected);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.rmForm.valid || !ctx_r2.isRoomIdChanged);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.roomAlreadyAssignedElement);\n  }\n}\nfunction LinkRoomSvgComponent_ngx_spinner_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 32)(1, \"p\", 33);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"33vw\",\n    height: \"fit-content\"\n  };\n};\nexport let LinkRoomSvgComponent = /*#__PURE__*/(() => {\n  class LinkRoomSvgComponent {\n    constructor(blServ, authSrv, svgviewSrv, formBuilder, blProvider, flProvider, rmProvider, messageService, confirmationService, spinner, cdr) {\n      this.blServ = blServ;\n      this.authSrv = authSrv;\n      this.svgviewSrv = svgviewSrv;\n      this.formBuilder = formBuilder;\n      this.blProvider = blProvider;\n      this.flProvider = flProvider;\n      this.rmProvider = rmProvider;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.spinner = spinner;\n      this.cdr = cdr;\n      this.fileName = \"\";\n      this.elementIdName = \"\";\n      this.svgFlList = [];\n      this.fileString = \"\";\n      this.displayBlFlUpdate = false;\n      this.displayRmUpdate = false;\n      this.allBl = [];\n      this.allFL = [];\n      this.rmData = [];\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.isBuildingSelected = false;\n      this.isFloorSelected = false;\n      this.isRoomSelected = false;\n      this.isNewBuilding = false;\n      this.selectedFloorData = [];\n      this.selectedRoomData = [];\n      this.roomAlreadyAssignedElement = false;\n      this.roomWithElementId = [];\n      this.reader = new FileReader();\n      this.isRoomIdChanged = false;\n      this.defaultLoadColor = \"#0000FF\";\n      this.assignedColor = \"#ff0000\";\n      this.viewSvg = false;\n      this.isLinkRoomSvg = false;\n      this.allSVGElementsData = [];\n      this.showSpinner = true;\n      this.blAndFlForm = this.formBuilder.group({\n        blId: [null, [Validators.required]],\n        flId: [null, [Validators.required]]\n      });\n      this.rmForm = this.formBuilder.group({\n        rmId: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.compId = this.authSrv.getLoggedInUserCompId();\n      this.loadBuilding();\n      this.loadFloor();\n      this.messageService.clear();\n    }\n    ngAfterViewInit() {\n      if (this.viewSvg) {\n        this.svgViewComp;\n      }\n    }\n    onChange(event) {\n      this.blAndFlForm.patchValue({\n        blId: null,\n        flId: null\n      });\n      this.rmForm.patchValue({\n        rmId: null\n      });\n      let filename = event.target.files[0].name;\n      this.fileName = filename.split('.').slice(0, -1).join('.');\n      this.reader.readAsText(event.target.files[0]);\n      this.reader.onload = () => {\n        this.fileString = this.reader.result;\n      };\n      this.showSpinner = true;\n      this.spinner.show();\n      let ext = filename.match(/\\.([^\\.]+)$/)[1];\n      if (ext == \"svg\") {\n        this.blServ.checkSvgNameExists(this.fileName).subscribe(res => {\n          if (res.text == \"true\") {\n            this.getFloorOfSvg();\n            this.displayBlFlUpdate = false;\n            this.isLinkRoomSvg = true;\n            setTimeout(() => {\n              setTimeout(() => {\n                setTimeout(() => {\n                  this.viewSvg = true;\n                  this.cdr.detectChanges();\n                  this.svgViewComp.loadSvgFile();\n                  this.spinner.hide();\n                  this.showSpinner = false;\n                }, 10);\n              }, 10);\n            }, 10);\n          } else {\n            this.displayBlFlUpdate = true;\n            this.svgFlList = [];\n            this.allSVGElementsData = [];\n            this.loadFloor();\n            this.spinner.hide();\n            this.showSpinner = false;\n          }\n        });\n      } else {\n        alert('It is an unsupported file format.Please choose only SVG file.');\n        this.onClearSvg();\n        this.spinner.hide();\n        this.showSpinner = false;\n      }\n    }\n    addRoomOnClickListener(elementN) {\n      this.elementIdName = elementN;\n      if (this.elementIdName.includes('room')) {\n        this.roomWithElementId = this.allSVGElementsData.filter(each => each.svgElementId == this.elementIdName);\n        this.getAllRoomsOfSvg();\n        setTimeout(() => {\n          if (this.roomWithElementId.length > 0) {\n            this.roomAlreadyAssignedElement = true;\n            this.rmData.unshift({\n              id: this.roomWithElementId[0].rmId,\n              name: this.roomWithElementId[0].rmId + ' - ' + this.roomWithElementId[0].rmName,\n              rmId: this.roomWithElementId[0].rmId,\n              compId: this.compId\n            });\n            this.rmForm.patchValue({\n              rmId: this.roomWithElementId[0].rmId\n            });\n            this.isRoomIdChanged = false;\n          } else {\n            this.roomAlreadyAssignedElement = false;\n            this.rmForm.patchValue({\n              rmId: null\n            });\n            this.isRoomIdChanged = true;\n          }\n          this.displayRmUpdate = true;\n        }, 10);\n      }\n    }\n    onClearSvg() {\n      let svgInput = document.getElementById(\"svgUpload\");\n      svgInput.value = '';\n      let obj = document.getElementById(\"svg-container\");\n      if (obj != null) {\n        obj.innerHTML = \"\";\n      }\n      this.svgFlList = [];\n      this.fileName = \"\";\n      this.blAndFlForm.patchValue({\n        blId: null,\n        flId: null\n      });\n      this.rmForm.patchValue({\n        rmId: null\n      });\n      this.isBuildingSelected = false;\n      this.isFloorSelected = false;\n      this.isRoomSelected = false;\n      this.isNewBuilding = false;\n      this.selectedFloorData = [];\n      this.selectedRoomData = [];\n      this.roomAlreadyAssignedElement = false;\n      this.roomWithElementId = [];\n      this.isRoomIdChanged = false;\n    }\n    getFloorOfSvg() {\n      this.svgFlList = [];\n      let data = {\n        id: '',\n        name: '',\n        blId: '',\n        compId: this.compId,\n        svgName: this.fileName\n      };\n      this.svgviewSrv.getFloorBySvgName(data).subscribe(res => {\n        if (res != null) {\n          let data = {\n            blId: res[0].blId,\n            flId: res[0].flId\n          };\n          this.svgFlList.push(data);\n          this.getAllRoomsOfSvg();\n        }\n      });\n    }\n    getAllRoomsOfSvg() {\n      this.allSVGElementsData = [];\n      this.rmData = [];\n      let data = {\n        id: '',\n        name: '',\n        blId: '',\n        compId: this.compId,\n        svgName: this.fileName\n      };\n      this.svgviewSrv.getRoomBySvgName(data).subscribe(res => {\n        if (res != null) {\n          this.allSVGElementsData = res;\n          this.rmData = res.filter(rm => rm.svgElementId === null);\n          this.rmData.map(rm => rm.id = rm.rmId);\n          this.rmData.map(i => {\n            i.name = i.rmId + ' - ' + i.rmName;\n            return i;\n          });\n          this.rmData.unshift(new RMFilterInputDTO('', 'Make a selection', '', '', this.compId));\n        }\n      });\n    }\n    loadBuilding() {\n      this.blServ.getALLBuilding().subscribe(res => {\n        this.enumBL = res;\n        this.enumBL = res.map(i => {\n          i.name = i.blNameString;\n          return i;\n        });\n        this.enumBL.unshift(new BuildingFilterInput('', 'Make a selection', '', this.compId));\n      });\n    }\n    loadFloor() {\n      this.blServ.getALLFloor().subscribe(res => {\n        this.enumAllFL = res;\n        this.enumAllFL.map(i => {\n          i.flName = i.name;\n          return i;\n        });\n        this.enumAllFL.map(i => {\n          i.name = i.flNameString;\n          return i;\n        });\n        this.enumFL = this.enumAllFL.filter(f => f.svgName === null);\n        this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n      });\n    }\n    onSelectBlCode($event) {\n      if ($event.id != null && $event.id != \"\") {\n        setTimeout(() => {\n          this.blAndFlForm.patchValue({\n            flId: null\n          });\n          this.loadFloorCode($event.id);\n        }, 10);\n        this.isBuildingSelected = true;\n      } else {\n        this.enumFL = [];\n        this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n        this.isBuildingSelected = false;\n      }\n    }\n    onSelectFlCode($event) {\n      this.selectedFloorData = [];\n      if ($event.id || $event.flId) {\n        this.isFloorSelected = true;\n        this.selectedFloorData.push({\n          flId: $event.id ? $event.id : $event.flId,\n          flName: $event.flName,\n          blId: $event.blId,\n          compId: this.compId,\n          flInfo: $event.flInfo,\n          svgName: this.fileName\n        });\n      } else {\n        this.isFloorSelected = false;\n        this.selectedFloorData = [];\n      }\n    }\n    onSelectRoom($event) {\n      this.selectedRoomData = [];\n      if ($event.id || $event.rmId) {\n        this.isRoomSelected = true;\n        this.selectedRoomData.push({\n          blId: $event.blId,\n          flId: $event.flId,\n          rmId: $event.rmId,\n          rmName: $event.rmName,\n          rmCat: $event.rmCat,\n          rmType: $event.rmType,\n          rmInfo: $event.rmInfo,\n          rmArea: $event.rmArea,\n          compId: this.compId,\n          svgElementId: this.elementIdName,\n          isReservable: $event.isReservable,\n          isHotelable: $event.isHotelable,\n          rmPhoto1: $event.rmPhoto1,\n          rmPhoto2: $event.rmPhoto2\n        });\n      } else {\n        this.isRoomSelected = false;\n        this.selectedRoomData = [];\n      }\n      if (this.roomWithElementId[0].rmId == $event.rmId) {\n        this.isRoomIdChanged = false;\n      } else {\n        this.isRoomIdChanged = true;\n      }\n    }\n    loadFloorCode(bl_id) {\n      if (bl_id != null) {\n        this.enumFL = [];\n        this.enumFL = this.enumAllFL.filter(t => t.blId == bl_id && t.svgName === null).map(i => {\n          if (!i.name.includes(i.id + ' - ')) {\n            i.name = i.name;\n          }\n          return i;\n        });\n        this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n      }\n    }\n    saveBlAndFl() {\n      this.messageService.clear();\n      this.svgFlList = [];\n      this.showSpinner = true;\n      this.spinner.show();\n      this.blServ.saveFloor(this.selectedFloorData[0]).subscribe(res => {\n        if (res != null) {\n          this.displayBlFlUpdate = false;\n          this.isLinkRoomSvg = true;\n          this.messageService.add({\n            key: 'svgMessage',\n            severity: 'success',\n            summary: 'Floor added',\n            detail: 'The floor was added successfully'\n          });\n          this.svgFlList = this.selectedFloorData;\n          this.viewSvg = true;\n          this.cdr.detectChanges();\n          this.svgViewComp.loadSvgFile();\n          this.spinner.hide();\n          this.showSpinner = false;\n        }\n      });\n    }\n    cancelBlAndFl() {\n      this.displayBlFlUpdate = false;\n      this.onClearSvg();\n    }\n    saveRoom() {\n      this.messageService.clear();\n      this.updateUnassignRoom();\n      this.blServ.saveRoom(this.selectedRoomData[0]).subscribe(res => {\n        if (res != null) {\n          this.messageService.clear();\n          this.displayRmUpdate = false;\n          if (this.roomAlreadyAssignedElement) {\n            this.messageService.add({\n              key: 'svgMessage',\n              severity: 'success',\n              summary: 'Room updated',\n              detail: 'The room was updated successfully'\n            });\n          } else {\n            this.messageService.add({\n              key: 'svgMessage',\n              severity: 'success',\n              summary: 'Room added',\n              detail: 'The room was added successfully'\n            });\n          }\n          this.getAllRoomsOfSvg();\n          this.isRoomSelected = false;\n          setTimeout(() => {\n            //this.svgViewComp.loadRoomColors();\n          }, 10);\n        }\n      });\n    }\n    cancelRoom() {\n      this.displayRmUpdate = false;\n    }\n    onAddNewBuilding() {\n      this.messageService.clear();\n      this.isNewBuilding = true;\n      this.isBuildingSelected = true;\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        bl_id: null,\n        isEdit: true,\n        newRecord: true\n      };\n      this.blProvider.openDialog(dialogConfig);\n      this.displayBlFlUpdate = false;\n      this.blProvider.onDialogueClosed.subscribe(result => {\n        this.displayBlFlUpdate = true;\n        this.messageService.clear();\n        if (result != \"Cancel\") {\n          this.messageService.add({\n            key: 'svgMessage',\n            severity: 'success',\n            summary: 'Building Added',\n            detail: 'The building was added successfully'\n          });\n          this.loadBuilding();\n          this.blAndFlForm.patchValue({\n            blId: result[1].blId,\n            flId: null\n          });\n          this.isBuildingSelected = true;\n          setTimeout(() => {\n            this.loadFloorCode(result[1].blId);\n          }, 100);\n        }\n      });\n    }\n    onAddNewFloor() {\n      this.messageService.clear();\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        fl_id: null,\n        bl_id: this.blAndFlForm.controls.blId.value,\n        isEdit: true,\n        newRecord: true,\n        isSvg: true\n      };\n      this.flProvider.openDialog(dialogConfig);\n      this.displayBlFlUpdate = false;\n      this.flProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        this.displayBlFlUpdate = true;\n        if (result != \"Cancel\") {\n          this.loadFloor();\n          setTimeout(() => {\n            this.loadFloorCode(result.blId);\n          }, 100);\n          this.blAndFlForm.patchValue({\n            blId: result.blId,\n            flId: result.flId\n          });\n          this.onSelectFlCode(result);\n          this.messageService.add({\n            key: 'svgMessage',\n            severity: 'success',\n            summary: 'Floor Added',\n            detail: 'The floor was added successfully'\n          });\n        }\n      });\n    }\n    onAddNewRoom() {\n      this.messageService.clear();\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        bl_id: this.svgFlList[0].blId,\n        fl_id: this.svgFlList[0].flId,\n        rm_id: null,\n        isEdit: true,\n        newRecord: true,\n        isSvg: true\n      };\n      this.rmProvider.openDialog(dialogConfig);\n      this.displayRmUpdate = false;\n      this.rmProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        this.displayRmUpdate = true;\n        if (result != \"Cancel\") {\n          this.getAllRoomsOfSvg();\n          this.rmForm.patchValue({\n            rmId: result.rmId\n          });\n          this.onSelectRoom(result);\n          this.messageService.add({\n            key: 'svgMessage',\n            severity: 'success',\n            summary: 'Room Added',\n            detail: 'The room was added successfully'\n          });\n        }\n      });\n    }\n    getval(e) {\n      if (e.target.className.includes('p-dialog-header-close')) {\n        this.onClearSvg();\n      }\n    }\n    saveDialog() {\n      let msg = \"\";\n      if (this.roomAlreadyAssignedElement) {\n        msg = \"Are you sure you want to update from room \" + this.roomWithElementId[0].rmId + \" to room \" + this.selectedRoomData[0].rmId + \" ?\";\n      } else {\n        msg = UtilConstant.UPDATE_SVG_ROOM;\n      }\n      this.confirmationService.confirm({\n        message: msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        key: 'svgConfirm',\n        accept: () => {\n          this.saveRoom();\n        }\n      });\n    }\n    unassignRoom() {\n      this.updateUnassignRoom();\n      this.rmForm.patchValue({\n        rmId: null\n      });\n      this.isRoomIdChanged = true;\n      this.roomWithElementId = [];\n      this.roomAlreadyAssignedElement = false;\n      this.displayRmUpdate = false;\n    }\n    updateUnassignRoom() {\n      if (this.roomAlreadyAssignedElement) {\n        let updateData = {\n          blId: this.roomWithElementId[0].blId,\n          flId: this.roomWithElementId[0].flId,\n          rmId: this.roomWithElementId[0].rmId,\n          rmName: this.roomWithElementId[0].rmName,\n          rmCat: this.roomWithElementId[0].rmCat,\n          rmType: this.roomWithElementId[0].rmType,\n          rmInfo: this.roomWithElementId[0].rmInfo,\n          rmArea: this.roomWithElementId[0].rmArea,\n          compId: this.compId,\n          svgElementId: null,\n          isReservable: this.roomWithElementId[0].isReservable,\n          isHotelable: this.roomWithElementId[0].isHotelable,\n          rmPhoto1: this.roomWithElementId[0].rmPhoto1,\n          rmPhoto2: this.roomWithElementId[0].rmPhoto2\n        };\n        this.blServ.saveRoom(updateData).subscribe(res => {\n          this.getAllRoomsOfSvg();\n          setTimeout(() => {\n            //this.svgViewComp.loadRoomColors();\n          }, 10);\n        });\n      }\n    }\n    unassignDialog() {\n      this.confirmationService.confirm({\n        message: UtilConstant.UnAssign_Warning,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        key: 'svgConfirm',\n        accept: () => {\n          this.unassignRoom();\n        }\n      });\n    }\n    static #_ = this.ɵfac = function LinkRoomSvgComponent_Factory(t) {\n      return new (t || LinkRoomSvgComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.SvgViewService), i0.ɵɵdirectiveInject(i4.UntypedFormBuilder), i0.ɵɵdirectiveInject(i5.BLModalDialogueProvider), i0.ɵɵdirectiveInject(i6.FLModalDialogueProvider), i0.ɵɵdirectiveInject(i7.RMModalDialogueProvider), i0.ɵɵdirectiveInject(i8.MessageService), i0.ɵɵdirectiveInject(i8.ConfirmationService), i0.ɵɵdirectiveInject(i9.NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LinkRoomSvgComponent,\n      selectors: [[\"app-link-room-svg\"]],\n      viewQuery: function LinkRoomSvgComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(SvgViewComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgViewComp = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 36,\n      vars: 23,\n      consts: [[\"header\", \"Link Room with SVG\"], [1, \"card\"], [1, \"upload-box\"], [1, \"input-group\"], [1, \"input-group-btn\", 2, \"margin-right\", \"10px\"], [1, \"btn\", \"btn-primary\"], [\"type\", \"file\", \"multiple\", \"\", \"accept\", \".svg\", \"id\", \"svgUpload\", 1, \"upload-input\", 2, \"display\", \"none\", 3, \"change\"], [\"type\", \"text\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"btn\", \"btn-primary\", 2, \"margin-left\", \"10px\", 3, \"click\"], [4, \"ngIf\"], [\"style\", \"height: 520px;\", 4, \"ngIf\"], [\"header\", \"Select Building and Floor\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\", \"click\"], [3, \"formGroup\"], [1, \"input-label-custom\", \"input-container\"], [1, \"form-field-lable\"], [\"formControlName\", \"blId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Select Building\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [1, \"btn\", \"btn-success\", 2, \"margin-left\", \"10px\", 3, \"hidden\", \"click\"], [\"formControlName\", \"flId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Select Floor\", 1, \"ng-select-dropdown\", 2, \"margin-left\", \"26px\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [2, \"display\", \"flex\", \"justify-content\", \"center\"], [2, \"display\", \"flex\", \"margin-top\", \"10px\", \"margin-right\", \"10px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", \"p-button-sm\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"10px\", 3, \"click\"], [\"key\", \"svgMessage\", \"position\", \"top-right\"], [\"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\", \"key\", \"svgConfirm\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-fussion\", 3, \"fullScreen\", 4, \"ngIf\"], [1, \"svg-details-text\"], [2, \"height\", \"520px\"], [3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [2, \"margin-top\", \"10px\"], [1, \"svg-element-text\"], [\"formControlName\", \"rmId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Select Room\", 1, \"ng-select-dropdown\", 2, \"margin-left\", \"10px\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Unassign Room\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"10px\", 3, \"disabled\", \"click\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-fussion\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function LinkRoomSvgComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4)(5, \"span\", 5);\n          i0.ɵɵtext(6, \" Select file \");\n          i0.ɵɵelementStart(7, \"input\", 6);\n          i0.ɵɵlistener(\"change\", function LinkRoomSvgComponent_Template_input_change_7_listener($event) {\n            return ctx.onChange($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(8, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_Template_button_click_9_listener() {\n            return ctx.onClearSvg();\n          });\n          i0.ɵɵtext(10, \"Clear\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(11, LinkRoomSvgComponent_div_11_Template, 3, 2, \"div\", 9);\n          i0.ɵɵtemplate(12, LinkRoomSvgComponent_div_12_Template, 1, 0, \"div\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"p-dialog\", 11);\n          i0.ɵɵlistener(\"visibleChange\", function LinkRoomSvgComponent_Template_p_dialog_visibleChange_13_listener($event) {\n            return ctx.displayBlFlUpdate = $event;\n          })(\"click\", function LinkRoomSvgComponent_Template_p_dialog_click_13_listener($event) {\n            return ctx.getval($event);\n          });\n          i0.ɵɵelementStart(14, \"form\", 12)(15, \"div\")(16, \"div\", 13)(17, \"label\", 14);\n          i0.ɵɵtext(18, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"ng-select\", 15);\n          i0.ɵɵlistener(\"change\", function LinkRoomSvgComponent_Template_ng_select_change_19_listener($event) {\n            return ctx.onSelectBlCode($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_Template_button_click_20_listener() {\n            return ctx.onAddNewBuilding();\n          });\n          i0.ɵɵtext(21, \"Add new building\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"div\", 13)(23, \"label\", 14);\n          i0.ɵɵtext(24, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"ng-select\", 17);\n          i0.ɵɵlistener(\"change\", function LinkRoomSvgComponent_Template_ng_select_change_25_listener($event) {\n            return ctx.onSelectFlCode($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_Template_button_click_26_listener() {\n            return ctx.onAddNewFloor();\n          });\n          i0.ɵɵtext(27, \"Add new Floor\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(28, \"div\", 18)(29, \"div\", 19)(30, \"button\", 20);\n          i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_Template_button_click_30_listener() {\n            return ctx.saveBlAndFl();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function LinkRoomSvgComponent_Template_button_click_31_listener() {\n            return ctx.cancelBlAndFl();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(32, LinkRoomSvgComponent_ng_container_32_Template, 22, 19, \"ng-container\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(33, \"p-toast\", 22)(34, \"p-confirmDialog\", 23);\n          i0.ɵɵtemplate(35, LinkRoomSvgComponent_ngx_spinner_35_Template, 3, 1, \"ngx-spinner\", 24);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"value\", ctx.fileName);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.svgFlList.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.viewSvg);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(22, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.displayBlFlUpdate)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.blAndFlForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"hidden\", ctx.isBuildingSelected);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"hidden\", !ctx.isBuildingSelected || ctx.isFloorSelected);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.blAndFlForm.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.displayRmUpdate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i10.NgIf, i11.NgSelectComponent, i8.Header, i12.ButtonDirective, i13.Dialog, i14.Toast, i15.Panel, i16.ConfirmDialog, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i9.NgxSpinnerComponent],\n      styles: [\".card[_ngcontent-%COMP%]{overflow:auto;height:600px;min-height:400px;padding:10px}.upload-box[_ngcontent-%COMP%]{display:flex}.upload-btn[_ngcontent-%COMP%]{margin-left:10px}.upload-input[_ngcontent-%COMP%]{width:77vw}#svg-container[_ngcontent-%COMP%]{border:2px solid #879cc9;margin-top:5px;width:100%;height:100%;overflow:hidden}.svg-content[_ngcontent-%COMP%]{display:inline-block;position:absolute}.form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}[_nghost-%COMP%]     .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}.input-container[_ngcontent-%COMP%]{display:flex;align-items:center}.ng-select-dropdown[_ngcontent-%COMP%]{width:60%;margin-left:10px}.svg-details-text[_ngcontent-%COMP%]{margin:5px 0 5px 20px;font-size:13px}.svg-element-text[_ngcontent-%COMP%]{font-size:13px;font-weight:450}\"]\n    });\n  }\n  return LinkRoomSvgComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}