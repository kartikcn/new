{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/tool-type.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddToolTypeComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 9);\n    i0.ɵɵtext(1, \"Tool Type is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddToolTypeComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtemplate(2, AddToolTypeComponent_tr_8_label_2_Template, 2, 0, \"label\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx_r0.toolTypeFormPanel.controls[\"toolType\"].errors) && !(ctx_r0.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx_r0.toolTypeFormPanel.controls[\"toolType\"].errors.required));\n  }\n}\nexport class AddToolTypeComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.subscriptions = [];\n    this.newRecord = true;\n    this.presentToolType = '';\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.toolTypeFormPanel = this.formBuilder.group({\n      toolTypeId: [null],\n      toolType: [null, [Validators.required]],\n      description: ['']\n    });\n    this.subscriptions.push(\n    // any time the inner form changes update the parent of any change\n    this.toolTypeFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {}\n  isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n  getValidationErrors() {\n    const me = this;\n    const validationErros = [];\n    return validationErros;\n  }\n  /// End Of Form Validation Related Code\n  get value() {\n    const toolTypeDetails = {\n      toolTypeId: this.toolTypeFormPanel.controls.toolTypeId.value,\n      toolType: this.toolTypeFormPanel.controls.toolType.value,\n      description: this.toolTypeFormPanel.controls.description.value\n    };\n    return toolTypeDetails;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.toolTypeFormPanel.patchValue({\n        toolTypeId: value.toolTypeId,\n        toolType: value.toolType,\n        description: value.description\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.toolTypeFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  // communicate the inner form validation to the parent form\n  validate(_) {\n    return this.toolTypeFormPanel.valid ? null : {\n      toolTypeFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function AddToolTypeComponent_Factory(t) {\n    return new (t || AddToolTypeComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ToolTypeService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddToolTypeComponent,\n    selectors: [[\"app-add-tool-type\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddToolTypeComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddToolTypeComponent),\n      multi: true\n    }])],\n    decls: 15,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"toolType\", \"formControlName\", \"toolType\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n    template: function AddToolTypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Tool Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(8, AddToolTypeComponent_tr_8_Template, 4, 1, \"tr\", 5);\n        i0.ɵɵelementStart(9, \"tr\")(10, \"td\")(11, \"div\", 2)(12, \"label\", 6);\n        i0.ɵɵtext(13, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"textarea\", 7);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.toolTypeFormPanel);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].errors) && ((ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].dirty) || (ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].touched)));\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AddToolTypeComponent_tr_8_label_2_Template","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r0","toolTypeFormPanel","controls","errors","required","AddToolTypeComponent","constructor","formBuilder","service","subscriptions","newRecord","presentToolType","onChange","onTouched","group","toolTypeId","toolType","description","push","valueChanges","subscribe","value","ngOnInit","isValid","getValidationErrors","length","me","validationErros","toolTypeDetails","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","forEach","s","unsubscribe","ɵɵdirectiveInject","i1","UntypedFormBuilder","i2","ToolTypeService","_2","selectors","inputs","isNew","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddToolTypeComponent_Template","rf","ctx","AddToolTypeComponent_tr_8_Template","dirty","touched"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/Helpdesk/tool-type/widgets/add-tool-type/add-tool-type.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/Helpdesk/tool-type/widgets/add-tool-type/add-tool-type.component.html"],"sourcesContent":["import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, UntypedFormGroup, UntypedFormBuilder, Validators, UntypedFormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { ToolTypeService } from '../../services/tool-type.service';\n\n@Component({\n  selector: 'app-add-tool-type',\n  templateUrl: './add-tool-type.component.html',\n  styleUrls: ['./add-tool-type.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddToolTypeComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddToolTypeComponent),\n      multi: true\n    }\n  ]\n})\nexport class AddToolTypeComponent implements OnInit {\n  toolTypeFormPanel: UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  newRecord: boolean = true;\n  presentToolType: string = '';\n  @Input() isNew!: boolean;\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private service: ToolTypeService\n  ) {\n    this.toolTypeFormPanel = this.formBuilder.group({\n      toolTypeId:[null],\n      toolType: [null, [Validators.required]],\n      description: ['',],\n\n    });\n\n    this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.toolTypeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n  public isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n\n  public getValidationErrors() {\n    const me = this;\n    const validationErros: VaildationError[] = [];\n\n    return validationErros;\n  }\n  /// End Of Form Validation Related Code\n  get value(): any {\n    const toolTypeDetails: any = {\n      toolTypeId: this.toolTypeFormPanel.controls.toolTypeId.value,\n      toolType: this.toolTypeFormPanel.controls.toolType.value,\n      description: this.toolTypeFormPanel.controls.description.value,\n\n    };\n    return toolTypeDetails;\n  }\n\n  set value(value: any) {\n    setTimeout(() => {\n      this.toolTypeFormPanel.patchValue({\n        toolTypeId: value.toolTypeId,\n        toolType: value.toolType,\n        description: value.description,\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  writeValue(value: any) {\n\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.toolTypeFormPanel.reset();\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  // communicate the inner form validation to the parent form\n  validate(_: UntypedFormControl) {\n    return this.toolTypeFormPanel.valid ? null : { toolTypeFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n","<form [formGroup]=\"toolTypeFormPanel\">\n    <table width=\"100%\">\n        <tr>\n            <td>\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable control-label'>Tool Type</label>\n                    <input type=\"text\" class=\"form-control\" name=\"toolType\" formControlName=\"toolType\" maxlength=\"64\" appTrimInput>\n                </div>\n            </td>\n        </tr>\n        <tr\n            *ngIf=\"(toolTypeFormPanel.controls['toolType']?.errors && (toolTypeFormPanel.controls['toolType']?.dirty || toolTypeFormPanel.controls['toolType']?.touched))\">\n            <td >\n                <label\n                    *ngIf=\"toolTypeFormPanel.controls['toolType']?.errors && !toolTypeFormPanel.controls['toolType']?.errors.required\"\n                    class='form-field-lable' style=\"color:red;\">Tool Type is already exists</label>\n            </td>\n            <td ></td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable'>Description</label>\n                    <textarea class=\"form-control note-border\" name=\"description\" formControlName=\"description\" rows=\"2\" nz-input\n                        maxlength=\"256\" appTrimInput></textarea>\n                </div>\n            </td>\n        </tr>\n\n    </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}