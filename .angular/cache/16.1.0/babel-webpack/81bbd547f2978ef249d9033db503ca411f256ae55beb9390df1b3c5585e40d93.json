{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/users.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/card\";\nimport * as i8 from \"primeng/password\";\nimport * as i9 from \"primeng/fieldset\";\nfunction PasswordResetComponent_p_card_5_div_10_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 18);\n    i0.ɵɵtext(1, \" passwords that you enter is inconsistent! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetComponent_p_card_5_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, PasswordResetComponent_p_card_5_div_10_label_1_Template, 2, 0, \"label\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r3.passResetForm.controls[\"newPasswordConfirm\"].errors) && !(ctx_r3.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r3.passResetForm.controls[\"newPasswordConfirm\"].errors.required));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\nfunction PasswordResetComponent_p_card_5_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.isSuccess == true ? \"green\" : \"red\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.msg);\n  }\n}\nconst _c1 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nfunction PasswordResetComponent_p_card_5_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 20);\n    i0.ɵɵlistener(\"click\", function PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onSave());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"p-button\", 21);\n    i0.ɵɵlistener(\"click\", function PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.passResetForm.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n  }\n}\nfunction PasswordResetComponent_p_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-card\", 7)(1, \"form\", 8)(2, \"div\", 9)(3, \"div\", 10);\n    i0.ɵɵelement(4, \"label\", 11)(5, \"p-password\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 9)(7, \"div\", 10);\n    i0.ɵɵelement(8, \"label\", 11)(9, \"p-password\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(10, PasswordResetComponent_p_card_5_div_10_Template, 2, 1, \"div\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, PasswordResetComponent_p_card_5_div_11_Template, 2, 4, \"div\", 15);\n    i0.ɵɵtemplate(12, PasswordResetComponent_p_card_5_ng_template_12_Template, 2, 4, \"ng-template\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.passResetForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"toggleMask\", true);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"feedback\", false)(\"toggleMask\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].errors) && ((ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].dirty) || (ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].touched)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.resMsg);\n  }\n}\nfunction PasswordResetComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-fieldset\", 22)(1, \"p\");\n    i0.ɵɵtext(2, \"The above link is expired.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementStart(4, \"i\");\n    i0.ɵɵtext(5, \"please contact administrator.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let PasswordResetComponent = /*#__PURE__*/(() => {\n  class PasswordResetComponent {\n    constructor(formBuilder, router, userSrv, route, datePipe) {\n      this.formBuilder = formBuilder;\n      this.router = router;\n      this.userSrv = userSrv;\n      this.route = route;\n      this.datePipe = datePipe;\n      this.subscriptions = [];\n      this.isExpired = true;\n      this.resetLinkTime = 0;\n      this.currentTime = new Date().getTime();\n      this.msg = \"\";\n      this.resMsg = false;\n      this.isSuccess = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      /// Start Of Building Form \n      this.passResetForm = this.formBuilder.group({\n        userName: [''],\n        userNewPwd: ['', [Validators.required]],\n        newPasswordConfirm: ['', [Validators.required, this.checkPassword()]]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.passResetForm.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const records = {\n        userName: this.passResetForm.controls.userName.value,\n        userNewPwd: this.passResetForm.controls.userNewPwd.value,\n        userPwd: this.passResetForm.controls.userPwd.value,\n        userDatePwdChanged: this.passResetForm.controls.userDatePwdChanged.value\n      };\n      return records;\n    }\n    ngOnInit() {\n      this.route.queryParams.subscribe(params => {\n        if (params.key != null) {\n          var url_key = params.key;\n          this.resetLinkTime = Number(url_key.substr(url_key.lastIndexOf(\"_\") + 1, url_key.length));\n          if (Math.abs(this.currentTime - this.resetLinkTime) <= 60 * 60 * 24 * 1000) {\n            this.isExpired = false;\n          } else {\n            this.isExpired = true;\n          }\n        } else {\n          this.isExpired = true;\n        }\n        if (params.user != null) {\n          setTimeout(() => {\n            this.passResetForm.patchValue({\n              userName: params.user\n            });\n          }, 0);\n        }\n      });\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.passResetForm.patchValue({\n          userName: value.userName,\n          userNewPwd: value.userNewPwd,\n          userPwd: value.userPwd,\n          userDatePwdChanged: value.userDatePwdChanged\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.passResetForm.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    checkPassword() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value.length > 1) {\n          this.passResetForm.controls['newPasswordConfirm'].setErrors(null);\n          this.passResetForm.clearAsyncValidators();\n          this.passResetForm.updateValueAndValidity();\n          let userPwd = this.passResetForm.controls['userNewPwd'].value;\n          if (userPwd != null && userPwd === control.value) {\n            return null;\n          } else {\n            return {\n              'incorrect': true\n            };\n          }\n        }\n        return null;\n      };\n    }\n    onCancel() {\n      this.passResetForm.reset();\n    }\n    onSave() {\n      this.msg = \"\";\n      if (this.passResetForm.valid) {\n        let userPwdRec = {\n          \"userName\": this.passResetForm.controls.userName.value,\n          \"userDatePwdChanged\": this.datePipe.transform(new Date(), \"dd/MM/yyyy\"),\n          \"userNewPwd\": this.passResetForm.controls.userNewPwd.value,\n          \"userPwd\": \"\"\n        };\n        this.userSrv.updateUserCrendentials(userPwdRec).subscribe(res => {\n          if (res !== null && res.code == \"200\") {\n            this.resMsg = true;\n            this.isSuccess = true;\n            this.msg = \"password updated successfully\";\n          } else {\n            this.resMsg = true;\n            this.isSuccess = false;\n            this.msg = \"Unable to process the record.\";\n          }\n        }, error => {\n          this.resMsg = true;\n          this.isSuccess = false;\n          this.msg = \"Unable to process the record.\";\n        });\n      }\n    }\n    static #_ = this.ɵfac = function PasswordResetComponent_Factory(t) {\n      return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UsersService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i4.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PasswordResetComponent,\n      selectors: [[\"app-password-reset\"]],\n      decls: 8,\n      vars: 2,\n      consts: [[1, \"container\"], [\"id\", \"loginbox\", 1, \"mainbox\", \"col-md-6\", \"col-md-offset-3\", \"col-sm-8\", \"col-sm-offset-2\", \"logInBoxDiv\"], [1, \"panel\", \"panel-info\", 2, \"background-color\", \"white !important\"], [\"href\", \"#\", \"target\", \"_blank\"], [\"src\", \"assets/images/login_logo.jpg\", \"width\", \"250px\", \"alt\", \"FMS\", 1, \"companyLogo\"], [\"header\", \"Reset your Password\", 4, \"ngIf\", \"ngIfElse\"], [\"elseTemplate\", \"\"], [\"header\", \"Reset your Password\"], [\"id\", \"loginTenant\", 3, \"formGroup\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\"], [\"placeholder\", \"Enter new Password\", \"formControlName\", \"userNewPwd\", 3, \"toggleMask\"], [\"placeholder\", \"Re-enter new passwor\", \"formControlName\", \"newPasswordConfirm\", 3, \"feedback\", \"toggleMask\"], [4, \"ngIf\"], [3, \"ngStyle\", 4, \"ngIf\"], [\"pTemplate\", \"footer\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [3, \"ngStyle\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"legend\", \"Reset your Password\"]],\n      template: function PasswordResetComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"a\", 3);\n          i0.ɵɵelement(4, \"img\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, PasswordResetComponent_p_card_5_Template, 13, 6, \"p-card\", 5);\n          i0.ɵɵtemplate(6, PasswordResetComponent_ng_template_6_Template, 6, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(7);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.isExpired == false)(\"ngIfElse\", _r1);\n        }\n      },\n      dependencies: [i4.NgIf, i4.NgStyle, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.PrimeTemplate, i6.Button, i7.Card, i8.Password, i9.Fieldset],\n      styles: [\".container[_ngcontent-%COMP%]{display:flex;justify-content:center}.center[_ngcontent-%COMP%]{width:400px;padding:10px;background:#5F85DB;color:#fff;font-weight:700;font-family:Tahoma}\"]\n    });\n  }\n  return PasswordResetComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}