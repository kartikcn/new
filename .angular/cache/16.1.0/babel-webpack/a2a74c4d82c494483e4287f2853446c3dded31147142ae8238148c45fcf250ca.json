{"ast":null,"code":"import { UtilConstant } from 'src/common/UtilConstant';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../service/work-request-comments.services\";\nimport * as i5 from \"src/app/services/auth.service\";\nimport * as i6 from \"@angular/material/legacy-card\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"ng-zorro-antd/input\";\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nexport let AddWrCommentsComponent = /*#__PURE__*/(() => {\n  class AddWrCommentsComponent {\n    constructor(data, dialogRef, confirmationService, formBuilder, wrCommentsService, authSrv) {\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.confirmationService = confirmationService;\n      this.formBuilder = formBuilder;\n      this.wrCommentsService = wrCommentsService;\n      this.authSrv = authSrv;\n      this.subscriptions = [];\n      this.title = 'Add';\n      this.isView = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.wrCommentsFormPanel = this.formBuilder.group({\n        comments: [null],\n        wrId: [null]\n      });\n      this.subscriptions.push(this.wrCommentsFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.title = this.data.isEdit ? \"Edit\" : this.data.isView ? \"\" : \"Add\";\n      this.isView = this.data.isView;\n      if (this.data.commentId != null) {\n        this.wrCommentsService.getWrCommentsById(this.data.commentId).subscribe(res => {\n          this.commentData = res;\n          setTimeout(() => {\n            this.wrCommentsFormPanel.patchValue({\n              comments: res.comments,\n              wrId: res.wrId\n            });\n          });\n        });\n      } else {\n        setTimeout(() => {\n          this.wrCommentsFormPanel.patchValue({\n            comments: null,\n            wrId: this.data.wrId\n          });\n        });\n      }\n      if (this.isView) {\n        this.wrCommentsFormPanel.disable();\n      }\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const wrCommentsData = {\n        comments: this.wrCommentsFormPanel.controls.comments.value,\n        wrId: this.wrCommentsFormPanel.controls.wrId.value\n      };\n      return wrCommentsData;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.wrCommentsFormPanel.patchValue({\n          comments: value.comments,\n          wrId: value.wrId\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.wrCommentsFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.wrCommentsFormPanel.valid ? null : {\n        wrCommentsFormPanel: {\n          valid: false\n        }\n      };\n    }\n    onCancel() {\n      this.confirmationService.confirm({\n        message: UtilConstant.CANCEL_Msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.dialogRef.close(false);\n        },\n        key: \"wr-comments-cancel\"\n      });\n    }\n    onSave() {\n      if (this.wrCommentsFormPanel.value.comments != '' && this.wrCommentsFormPanel.value.comments != null) {\n        let wrCommentsData;\n        if (this.data.isEdit) {\n          wrCommentsData = {\n            commentId: this.commentData.commentId,\n            emId: this.commentData.emId,\n            commentDate: this.commentData.commentDate,\n            commentTime: this.commentData.commentTime,\n            comments: this.wrCommentsFormPanel.controls.comments.value,\n            compId: this.authSrv.getLoggedInUserCompId(),\n            wrId: this.wrCommentsFormPanel.controls.wrId.value\n          };\n        } else {\n          wrCommentsData = {\n            commentId: 0,\n            emId: this.authSrv.getLoggedInUserEMId(),\n            commentDate: null,\n            commentTime: null,\n            comments: this.wrCommentsFormPanel.controls.comments.value,\n            compId: this.authSrv.getLoggedInUserCompId(),\n            wrId: this.wrCommentsFormPanel.controls.wrId.value\n          };\n        }\n        this.wrCommentsService.saveWrComments(wrCommentsData).subscribe(res => {\n          if (res.commentId) {\n            this.dialogRef.close(res);\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddWrCommentsComponent_Factory(t) {\n      return new (t || AddWrCommentsComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.WrCommentsServices), i0.ɵɵdirectiveInject(i5.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddWrCommentsComponent,\n      selectors: [[\"app-add-wr-comments\"]],\n      decls: 14,\n      vars: 7,\n      consts: [[\"mat-dialog-title\", \"\", 1, \"mat-dialog-title-ext\"], [3, \"formGroup\"], [\"id\", \"wr-comments\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [3, \"nzMaxCharacterCount\"], [\"name\", \"commetns\", \"formControlName\", \"comments\", \"rows\", \"4\", \"maxlength\", \"4000\", \"nz-input\", \"\", 1, \"form-control\", \"note-border\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"key\", \"wr-comments-cancel\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"]],\n      template: function AddWrCommentsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"form\", 1)(4, \"mat-card-content\", 2)(5, \"div\", 3)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"Comments\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"nz-textarea-count\", 5);\n          i0.ɵɵelement(9, \"textarea\", 6);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(10, \"mat-dialog-actions\", 7)(11, \"p-button\", 8);\n          i0.ɵɵlistener(\"click\", function AddWrCommentsComponent_Template_p_button_click_11_listener() {\n            return ctx.onSave();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"p-button\", 9);\n          i0.ɵɵlistener(\"click\", function AddWrCommentsComponent_Template_p_button_click_12_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(13, \"p-confirmDialog\", 10);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\"\", ctx.title, \" Comments\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.wrCommentsFormPanel);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"nzMaxCharacterCount\", 4000);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", !ctx.wrCommentsFormPanel.value.comments || ctx.isView);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c0));\n        }\n      },\n      dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.MaxLengthValidator, i3.FormGroupDirective, i3.FormControlName, i6.MatLegacyCardContent, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i7.Button, i8.ConfirmDialog, i9.NzTextareaCountComponent, i9.NzInputDirective],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;margin-right:15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}.btn-filter[_ngcontent-%COMP%]{margin-left:4px;margin-right:5px;width:50px;margin-top:17px}.btn-ggb-orange[_ngcontent-%COMP%]{width:90px!important}.btn-ggb-default-custom[_ngcontent-%COMP%]{margin:16px!important}  .mat-dialog-content{margin:0!important}\"]\n    });\n  }\n  return AddWrCommentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}