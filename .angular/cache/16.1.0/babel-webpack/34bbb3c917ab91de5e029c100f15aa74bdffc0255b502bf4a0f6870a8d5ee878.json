{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/role.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/panel\";\nimport * as i8 from \"ng-zorro-antd/table\";\nimport * as i9 from \"ng-zorro-antd/input\";\nimport * as i10 from \"../../../../../directive/directive/upper-case.directive\";\nimport * as i11 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddRoleComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function AddRoleComponent_ng_template_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSaveRecord());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function AddRoleComponent_ng_template_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.roleFormPanel.valid);\n  }\n}\nfunction AddRoleComponent_tr_11_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 16);\n    i0.ɵɵtext(1, \"Role name required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoleComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 4);\n    i0.ɵɵtemplate(2, AddRoleComponent_tr_11_label_2_Template, 2, 0, \"label\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.roleFormPanel.controls[\"roleName\"] == null ? null : ctx_r1.roleFormPanel.controls[\"roleName\"].errors.required);\n  }\n}\nexport let AddRoleComponent = /*#__PURE__*/(() => {\n  class AddRoleComponent {\n    constructor(userRoleSrv, formBuilder, messageService) {\n      this.userRoleSrv = userRoleSrv;\n      this.formBuilder = formBuilder;\n      this.messageService = messageService;\n      this.subscriptions = [];\n      this.isNew = false;\n      this.role_title = \"User Role\";\n      this.notifyParent = new EventEmitter();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.roleFormPanel = this.formBuilder.group({\n        roleName: [null, [Validators.required]],\n        roleTitle: [''],\n        userRoleId: [0]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.roleFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      if (!this.isNew && this.dataRec != null) {\n        this.preLoadData(this.dataRec);\n      }\n    }\n    preLoadData(rec) {\n      this.writeValue(rec);\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const details = {\n        roleName: this.roleFormPanel.controls.roleName.value,\n        roleTitle: this.roleFormPanel.controls.roleTitle.value,\n        userRoleId: this.roleFormPanel.controls.value\n      };\n      return details;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.roleFormPanel.patchValue({\n          roleName: value.roleName,\n          roleTitle: value.roleTitle,\n          userRoleId: value.userRoleId\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.roleFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    onSaveRecord() {\n      if (this.roleFormPanel.valid) {\n        let record = this.roleFormPanel.value;\n        if (record.userRoleId == null) {\n          record.userRoleId = 0;\n        }\n        this.userRoleSrv.saveRecord(record).subscribe(res => {\n          if (res.code == 200) {\n            this.messageService.add({\n              severity: 'success',\n              summary: 'Success',\n              detail: 'Record saved successfully',\n              life: 1500\n            });\n            this.notifyParent.emit(\"save\");\n          } else {\n            this.messageService.add({\n              severity: 'warn',\n              summary: 'Role name must be unique',\n              life: 1500\n            });\n          }\n        }, error => {\n          console.error(error);\n        });\n      }\n    }\n    onCancel() {\n      this.notifyParent.emit(\"cancel\");\n    }\n    static #_ = this.ɵfac = function AddRoleComponent_Factory(t) {\n      return new (t || AddRoleComponent)(i0.ɵɵdirectiveInject(i1.RoleService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRoleComponent,\n      selectors: [[\"app-add-user-role\"]],\n      inputs: {\n        isNew: \"isNew\",\n        dataRec: \"dataRec\",\n        role_title: \"role_title\"\n      },\n      outputs: {\n        notifyParent: \"notifyParent\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRoleComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRoleComponent),\n        multi: true\n      }, MessageService])],\n      decls: 20,\n      vars: 4,\n      consts: [[3, \"formGroup\"], [3, \"header\"], [\"pTemplate\", \"icons\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"uppercase\", \"\", \"name\", \"roleName\", \"formControlName\", \"roleName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [4, \"ngIf\"], [\"colspan\", \"2\", 2, \"width\", \"50%\"], [1, \"form-field-lable\"], [\"rows\", \"2\", \"cols\", \"2\", \"name\", \"roleTitle\", \"formControlName\", \"roleTitle\", \"nz-input\", \"\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"pButton\", \"\", \"label\", \"Save\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"ml10\", 3, \"click\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [2, \"width\", \"calc(100% / 2)\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddRoleComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"p-panel\", 1);\n          i0.ɵɵtemplate(2, AddRoleComponent_ng_template_2_Template, 2, 1, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Role Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(10, \"td\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(11, AddRoleComponent_tr_11_Template, 4, 1, \"tr\", 8);\n          i0.ɵɵelementStart(12, \"tr\")(13, \"td\", 9)(14, \"div\", 5)(15, \"label\", 10);\n          i0.ɵɵtext(16, \"Role Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"textarea\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(18, \"td\", 4);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelement(19, \"p-toast\");\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.roleFormPanel);\n          i0.ɵɵadvance(1);\n          i0.ɵɵpropertyInterpolate(\"header\", ctx.role_title);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"readonly\", ctx.isNew == false ? true : null);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", (ctx.roleFormPanel.controls[\"roleName\"] == null ? null : ctx.roleFormPanel.controls[\"roleName\"].errors) && ((ctx.roleFormPanel.controls[\"roleName\"] == null ? null : ctx.roleFormPanel.controls[\"roleName\"].dirty) || (ctx.roleFormPanel.controls[\"roleName\"] == null ? null : ctx.roleFormPanel.controls[\"roleName\"].touched)));\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName, i3.PrimeTemplate, i5.ButtonDirective, i6.Toast, i7.Panel, i8.NzTableCellDirective, i8.NzTrDirective, i9.NzInputDirective, i10.UppercaseDirective, i11.TrimInputDirective]\n    });\n  }\n  return AddRoleComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}