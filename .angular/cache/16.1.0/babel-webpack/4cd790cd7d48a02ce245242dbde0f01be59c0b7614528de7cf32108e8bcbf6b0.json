{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { forkJoin, of } from 'rxjs';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { AddRequestToolsComponent } from '../add-request-tools/add-request-tools.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"../services/request-tools.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/legacy-card\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"../add-request-tools/add-request-tools.component\";\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nexport let AddEditRequestToolsComponent = /*#__PURE__*/(() => {\n  class AddEditRequestToolsComponent {\n    constructor(data, formBuilder, dialog, dialogRef, confirmationService, requestToolsService, datePipe) {\n      this.data = data;\n      this.formBuilder = formBuilder;\n      this.dialog = dialog;\n      this.dialogRef = dialogRef;\n      this.confirmationService = confirmationService;\n      this.requestToolsService = requestToolsService;\n      this.datePipe = datePipe;\n      this.today = new Date();\n      this.subscriptions = [];\n      this.isNew = true;\n      this.isEdit = true;\n      this.title = 'Add';\n      this.isView = false;\n      // technicianId!: number;\n      this.reqToolId = 0;\n      this.frmreqToolDetail = this.formBuilder.group({\n        reqToolsFormPanel: []\n      });\n    }\n    ngOnInit() {\n      this.isEdit = true;\n      this.isNew = true;\n      if (this.data != null) {\n        this.isView = this.data.isView;\n        this.loadData();\n        this.disableButton();\n        this.isNewRecord();\n      }\n      if (this.isView) {\n        this.title = \"\";\n      }\n    }\n    setUserChecks(data) {\n      this.AddRequestToolsComponent.isRequestor = data.isRequestor;\n      this.AddRequestToolsComponent.isApprover = data.isApprover;\n      this.AddRequestToolsComponent.isSupervisor = data.isSupervisor;\n      this.AddRequestToolsComponent.isTechnician = data.isTechnician;\n    }\n    saveRecords() {\n      if (this.frmreqToolDetail.valid) {\n        const data = this.frmreqToolDetail.controls.reqToolsFormPanel.value;\n        data.dateAssign = this.datePipe.transform(data.dateAssign, \"yyyy-MM-dd\");\n        data.timeAssign = this.convertToTime(data.timeAssign);\n        this.requestToolsService.saveRequestTools(data).subscribe(res => {\n          if (res.status != 202) {\n            this.dialogRef.close(true);\n          }\n        }, error => {});\n      }\n    }\n    disableButton() {\n      if (this.data.isEdit != null && !this.data.isEdit && !this.data.description) {\n        this.isEdit = false;\n      }\n    }\n    isNewRecord() {\n      if (this.data.newRecord != null) {\n        this.isNew = this.data.newRecord;\n        if (!this.isNew) this.title = 'Edit';\n      }\n    }\n    confirmDialog() {\n      this.confirmationService.confirm({\n        message: UtilConstant.CANCEL_Msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.dialogRef.close(false);\n        },\n        key: \"reqtools\"\n      });\n    }\n    loadData() {\n      const calls = [];\n      if (this.data.reqToolId != null) {\n        calls.push(this.requestToolsService.getByrequestToolsId(this.data.reqToolId));\n      } else {\n        calls.push(of(null));\n      }\n      forkJoin(...calls).subscribe(results => {\n        if (results[0] == null) {\n          var reqtoolsData = {\n            reqToolId: null,\n            dateAssign: null,\n            timeAssign: null,\n            hoursRequired: null,\n            requestId: this.data.requestId,\n            actualHoursStd: null,\n            actualHoursDouble: null,\n            actualHoursOvertime: null\n          };\n          setTimeout(() => {\n            this.frmreqToolDetail.patchValue({\n              reqToolsFormPanel: reqtoolsData\n            });\n          }, 0);\n        } else {\n          setTimeout(() => {\n            this.AddRequestToolsComponent.previousTools = results[0].toolId;\n            this.setUserChecks(this.data.userChecks);\n            this.reqToolId = results[0].reqToolId;\n            this.frmreqToolDetail.patchValue({\n              reqToolsFormPanel: results[0]\n            });\n          }, 0);\n        }\n      });\n    }\n    convertToTime(value) {\n      if (value != null) {\n        return this.datePipe.transform(value, \"HH:mm:ss\");\n      } else {\n        return this.datePipe.transform(new Date(), \"HH:mm:ss\");\n      }\n    }\n    onDelete() {\n      if (this.reqToolId != 0 && !this.isView) {\n        this.confirmationService.confirm({\n          message: 'Are you sure that you want to delete ?',\n          header: 'Confirmation',\n          icon: 'pi pi-exclamation-triangle',\n          accept: () => {\n            this.deleteRequestTools();\n          },\n          key: \"reqtools\"\n        });\n      }\n    }\n    deleteRequestTools() {\n      let requestToolId = this.data.reqToolId;\n      this.requestToolsService.deleteByRequestTools(requestToolId).subscribe(res => {\n        if (res.text === \"could not execute statement\" && res.code == 409) {\n          this.dialogRef.close(\"not able to delete\");\n        } else {\n          this.dialogRef.close(\"deleted\");\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AddEditRequestToolsComponent_Factory(t) {\n      return new (t || AddEditRequestToolsComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i4.RequestToolsService), i0.ɵɵdirectiveInject(i5.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditRequestToolsComponent,\n      selectors: [[\"app-add-edit-request-tools\"]],\n      viewQuery: function AddEditRequestToolsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(AddRequestToolsComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.AddRequestToolsComponent = _t.first);\n        }\n      },\n      decls: 12,\n      vars: 12,\n      consts: [[\"mat-dialog-title\", \"\", 1, \"mat-dialog-title-ext\"], [1, \"mat-typography\", \"mat-dialog-content-ext\"], [3, \"formGroup\"], [\"id\", \"frmreqToolsDetailCard\"], [\"formControlName\", \"reqToolsFormPanel\", 3, \"isNew\", \"isView\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Unassign\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"key\", \"reqtools\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"]],\n      template: function AddEditRequestToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"form\", 2)(4, \"mat-card\")(5, \"mat-card-content\", 3);\n          i0.ɵɵelement(6, \"app-add-request-tools\", 4);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(7, \"mat-dialog-actions\", 5)(8, \"p-button\", 6);\n          i0.ɵɵlistener(\"click\", function AddEditRequestToolsComponent_Template_p_button_click_8_listener() {\n            return ctx.onDelete();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"p-button\", 7);\n          i0.ɵɵlistener(\"click\", function AddEditRequestToolsComponent_Template_p_button_click_9_listener() {\n            return ctx.saveRecords();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"p-button\", 8);\n          i0.ɵɵlistener(\"click\", function AddEditRequestToolsComponent_Template_p_button_click_10_listener() {\n            return ctx.confirmDialog();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(11, \"p-confirmDialog\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\"\", ctx.title, \" Tools\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.frmreqToolDetail);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"isNew\", ctx.isNew)(\"isView\", ctx.isView);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.reqToolId == 0 || ctx.isView);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(10, _c0));\n          i0.ɵɵproperty(\"disabled\", !ctx.frmreqToolDetail.valid || ctx.AddRequestToolsComponent.toolsExist);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(11, _c0));\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatLegacyCard, i6.MatLegacyCardContent, i2.MatDialogTitle, i2.MatDialogContent, i2.MatDialogActions, i7.Button, i8.ConfirmDialog, i9.AddRequestToolsComponent],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;margin-right:15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}.btn-filter[_ngcontent-%COMP%]{margin-left:4px;margin-right:5px;width:50px;margin-top:17px}.btn-ggb-orange[_ngcontent-%COMP%]{width:90px!important}.btn-ggb-default-custom[_ngcontent-%COMP%]{margin:16px!important}\"]\n    });\n  }\n  return AddEditRequestToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}