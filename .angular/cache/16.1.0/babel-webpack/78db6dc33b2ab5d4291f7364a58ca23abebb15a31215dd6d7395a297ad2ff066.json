{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let NumbersOnlyDirective = /*#__PURE__*/(() => {\n  class NumbersOnlyDirective {\n    /**\n     * Class constructor\n     * @param hostElement\n     */\n    constructor(hostElement) {\n      this.hostElement = hostElement;\n      this.allowDecimals = true;\n      this.allowSign = false;\n      this.decimalSeparator = '.';\n      this.previousValue = '';\n      // --------------------------------------\n      //  Regular expressions\n      this.integerUnsigned = '^[0-9]*$';\n      this.integerSigned = '^-?[0-9]+$';\n      this.decimalUnsigned = '^[0-9]+(.[0-9]+)?$';\n      this.decimalSigned = '^-?[0-9]+(.[0-9]+)?$';\n    }\n    /**\n     * Event handler for host's change event\n     * @param e\n     */\n    onChange() {\n      this.validateValue(this.hostElement.nativeElement.value);\n    }\n    /**\n    * Event handler for host's paste event\n    * @param e\n    */\n    onPaste(e) {\n      // get and validate data from clipboard\n      let value = e.clipboardData.getData('text/plain');\n      this.validateValue(value);\n      e.preventDefault();\n    }\n    /**\n    * Event handler for host's keydown event\n    * @param event\n    */\n    onKeyDown(e) {\n      let ev = e.target;\n      let cursorPosition = ev['selectionStart'] != null ? ev['selectionStart'] : 0;\n      let originalValue = ev['value'];\n      let key = this.getName(e);\n      let controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n      let signExists = originalValue.includes('-');\n      let separatorExists = originalValue.includes(this.decimalSeparator);\n      // allowed keys apart from numeric characters\n      let allowedKeys = ['Backspace', 'ArrowLeft', 'ArrowRight', 'Escape', 'Tab'];\n      // when decimals are allowed, add\n      // decimal separator to allowed codes when\n      // its position is not close to the the sign (-. and .-)\n      let separatorIsCloseToSign = signExists && cursorPosition <= 1;\n      if (this.allowDecimals && !separatorIsCloseToSign && !separatorExists) {\n        if (this.decimalSeparator == '.') allowedKeys.push('.');else allowedKeys.push(',');\n      }\n      // when minus sign is allowed, add its\n      // key to allowed key only when the\n      // cursor is in the first position, and\n      // first character is different from\n      // decimal separator\n      let firstCharacterIsSeparator = originalValue.charAt(0) != this.decimalSeparator;\n      if (this.allowSign && !signExists && firstCharacterIsSeparator && cursorPosition == 0) {\n        allowedKeys.push('-');\n      }\n      // allow some non-numeric characters\n      if (allowedKeys.indexOf(key) != -1 ||\n      // Allow: Ctrl+A and Command+A\n      key == 'a' && controlOrCommand ||\n      // Allow: Ctrl+C and Command+C\n      key == 'c' && controlOrCommand ||\n      // Allow: Ctrl+V and Command+V\n      key == 'v' && controlOrCommand ||\n      // Allow: Ctrl+X and Command+X\n      key == 'x' && controlOrCommand) {\n        // let it happen, don't do anything\n        return;\n      }\n      // save value before keydown event\n      this.previousValue = originalValue;\n      // allow number characters only\n      let isNumber = new RegExp(this.integerUnsigned).test(key);\n      if (isNumber) return;else e.preventDefault();\n    }\n    /**\n    * Test whether value is a valid number or not\n    * @param value\n    */\n    validateValue(value) {\n      // choose the appropiate regular expression\n      let regex = \"\";\n      if (!this.allowDecimals && !this.allowSign) regex = this.integerUnsigned;\n      if (!this.allowDecimals && this.allowSign) regex = this.integerSigned;\n      if (this.allowDecimals && !this.allowSign) regex = this.decimalUnsigned;\n      if (this.allowDecimals && this.allowSign) regex = this.decimalSigned;\n      // when a numbers begins with a decimal separator,\n      // fix it adding a zero in the beginning\n      let firstCharacter = value.charAt(0);\n      if (firstCharacter == this.decimalSeparator) value = 0 + value;\n      // when a numbers ends with a decimal separator,\n      // fix it adding a zero in the end\n      let lastCharacter = value.charAt(value.length - 1);\n      if (lastCharacter == this.decimalSeparator) value = value + 0;\n      // test number with regular expression, when\n      // number is invalid, replace it with a zero\n      let valid = new RegExp(regex).test(value);\n      this.hostElement.nativeElement['value'] = valid ? value : null;\n    }\n    /**\n    * Get key's name\n    * @param e\n    */\n    getName(e) {\n      if (e.key) {\n        return e.key;\n      } else {\n        // for old browsers\n        if (e.keyCode && String.fromCharCode) {\n          switch (e.keyCode) {\n            case 8:\n              return 'Backspace';\n            case 9:\n              return 'Tab';\n            case 27:\n              return 'Escape';\n            case 37:\n              return 'ArrowLeft';\n            case 39:\n              return 'ArrowRight';\n            case 188:\n              return ',';\n            case 190:\n              return '.';\n            case 109:\n              return '-';\n            // minus in numbpad\n            case 173:\n              return '-';\n            // minus in alphabet keyboard in firefox\n            case 189:\n              return '-';\n            // minus in alphabet keyboard in chrome\n            default:\n              return String.fromCharCode(e.keyCode);\n          }\n        } else {\n          return e.key;\n        }\n      }\n    }\n    static #_ = this.ɵfac = function NumbersOnlyDirective_Factory(t) {\n      return new (t || NumbersOnlyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: NumbersOnlyDirective,\n      selectors: [[\"\", \"NumbersOnly\", \"\"]],\n      hostBindings: function NumbersOnlyDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function NumbersOnlyDirective_change_HostBindingHandler($event) {\n            return ctx.onChange($event);\n          })(\"paste\", function NumbersOnlyDirective_paste_HostBindingHandler($event) {\n            return ctx.onPaste($event);\n          })(\"keydown\", function NumbersOnlyDirective_keydown_HostBindingHandler($event) {\n            return ctx.onKeyDown($event);\n          });\n        }\n      },\n      inputs: {\n        allowDecimals: \"allowDecimals\",\n        allowSign: \"allowSign\",\n        decimalSeparator: \"decimalSeparator\"\n      }\n    });\n  }\n  return NumbersOnlyDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}