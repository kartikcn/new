{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/Helpdesk/craftsperson/services/craftsperson.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../services/request_technician.service\";\nimport * as i5 from \"@ng-select/ng-select\";\nimport * as i6 from \"ng-zorro-antd/table\";\nimport * as i7 from \"primeng/calendar\";\nimport * as i8 from \"../../../../../../../directive/numbers-only.directive\";\nimport * as i9 from \"../../../../../../../directive/directive/two-digit-decimal-number\";\nfunction AddRequestTechniciansComponent_label_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 12);\n    i0.ɵɵtext(1, \"Technician Name already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return {\n    \"width\": \"70%\"\n  };\n};\nexport let AddRequestTechniciansComponent = /*#__PURE__*/(() => {\n  class AddRequestTechniciansComponent {\n    constructor(formBuilder, cfSrv, datePipe, reqiestTechnicianSrv) {\n      this.formBuilder = formBuilder;\n      this.cfSrv = cfSrv;\n      this.datePipe = datePipe;\n      this.reqiestTechnicianSrv = reqiestTechnicianSrv;\n      this.today = new Date();\n      this.subscriptions = [];\n      this.technicianData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumRequestTechnicianData = [];\n      this.enumTechnicianId = [];\n      this.technicianExist = false;\n      this.enableDetailsBtn = false;\n      this.isRequestor = false;\n      this.isApprover = false;\n      this.isTechnician = false;\n      this.isSupervisor = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.reqTechnicianFormPanel = this.formBuilder.group({\n        technicianId: [null, [Validators.required]],\n        hoursRequired: [null, [Validators.required, Validators.min(1)]],\n        dateAssign: [null, [Validators.required]],\n        timeAssign: [null, [Validators.required]],\n        requestTechnicianId: [null],\n        requestId: [null],\n        actualHoursStd: [null],\n        actualHoursDouble: [null],\n        actualHoursOvertime: [null],\n        totalHours: [null],\n        teamId: [null]\n      });\n      this.subscriptions.push(this.reqTechnicianFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadTechinician();\n      if (this.isView) {\n        this.reqTechnicianFormPanel.disable();\n      }\n    }\n    get value() {\n      const trequestTechnician = {\n        technicianId: this.reqTechnicianFormPanel.controls.technicianId.value,\n        hoursRequired: this.reqTechnicianFormPanel.controls.hoursRequired.value,\n        requestTechnicianId: this.reqTechnicianFormPanel.controls.requestTechnicianId.value,\n        requestId: this.reqTechnicianFormPanel.controls.requestId.value,\n        dateAssign: this.reqTechnicianFormPanel.controls.dateAssign.value,\n        timeAssign: this.reqTechnicianFormPanel.controls.timeAssign.value,\n        actualHoursStd: this.reqTechnicianFormPanel.controls.actualHoursStd.value,\n        actualHoursDouble: this.reqTechnicianFormPanel.controls.actualHoursDouble.value,\n        actualHoursOvertime: this.reqTechnicianFormPanel.controls.actualHoursOvertime.value,\n        teamId: this.reqTechnicianFormPanel.controls.teamId.value\n      };\n      return trequestTechnician;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.reqTechnicianFormPanel.patchValue({\n          technicianId: value.technicianId,\n          hoursRequired: value.hoursRequired,\n          dateAssign: this.formatDate(value.dateAssign),\n          timeAssign: this.convertToTime(value.timeAssign),\n          requestTechnicianId: value.requestTechnicianId,\n          requestId: value.requestId,\n          actualHoursStd: value.actualHoursStd,\n          actualHoursDouble: value.actualHoursDouble,\n          actualHoursOvertime: value.actualHoursOvertime,\n          totalHours: parseFloat(value.actualHoursStd) + parseFloat(value.actualHoursDouble) + parseFloat(value.actualHoursOvertime),\n          teamId: value.teamId\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.reqTechnicianFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.reqTechnicianFormPanel.valid ? null : {\n        reqTechnicianFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    loadTechinician() {\n      this.cfSrv.getAllCraftsperson().subscribe(res => {\n        if (res) {\n          this.technicianData = res;\n        } else {\n          this.technicianData = [];\n        }\n      });\n    }\n    formatDate(date) {\n      if (date != null) {\n        var dateCreated = new Date(date);\n        return dateCreated;\n      } else {\n        return null;\n      }\n    }\n    convertToTime(value) {\n      if (value != null) {\n        var currDate = new Date();\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        currDate.setHours(data[0]);\n        currDate.setMinutes(data[1]);\n        return currDate;\n      } else {\n        return null;\n      }\n    }\n    onChangeHours(event) {\n      let actualHoursStd = this.reqTechnicianFormPanel.controls.actualHoursStd.value;\n      let actualHoursDouble = this.reqTechnicianFormPanel.controls.actualHoursDouble.value;\n      let actualHoursOvertime = this.reqTechnicianFormPanel.controls.actualHoursOvertime.value;\n      let totalHours = parseFloat(actualHoursStd) + parseFloat(actualHoursDouble) + parseFloat(actualHoursOvertime);\n      setTimeout(() => {\n        this.reqTechnicianFormPanel.patchValue({\n          totalHours: totalHours\n        });\n      });\n    }\n    selectTechnician(event) {\n      if (this.previousTechnician != event.cfId) {\n        let requestId = this.reqTechnicianFormPanel.controls.requestId.value;\n        let technicianId = event.cfId;\n        this.reqiestTechnicianSrv.checkTechnicianExist(requestId, technicianId).subscribe(res => {\n          this.technicianExist = false;\n          if (res) {\n            this.technicianExist = true;\n          } else {\n            this.technicianExist = false;\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddRequestTechniciansComponent_Factory(t) {\n      return new (t || AddRequestTechniciansComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CraftspersonService), i0.ɵɵdirectiveInject(i3.DatePipe), i0.ɵɵdirectiveInject(i4.RequestTechnicianService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRequestTechniciansComponent,\n      selectors: [[\"app-add-request-technicians\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRequestTechniciansComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRequestTechniciansComponent),\n        multi: true\n      }])],\n      decls: 34,\n      vars: 17,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [\"colspan\", \"3\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"name\", \"technicianId\", \"formControlName\", \"technicianId\", \"bindLabel\", \"name\", \"bindValue\", \"cfId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 2, \"width\", \"350px\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [\"type\", \"text\", \"name\", \"hoursRequired\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"hoursRequired\", 1, \"form-control\", 2, \"width\", \"110px\", 3, \"readonly\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"dateAssign\", \"formControlName\", \"dateAssign\", \"inputId\", \"icon\", 3, \"minDate\", \"showIcon\", \"inputStyle\", \"disabled\"], [2, \"width\", \"80px\"], [1, \"input-label-custom\", 2, \"margin-left\", \"-40px\"], [\"appendTo\", \"body\", \"name\", \"timeAssign\", \"formControlName\", \"timeAssign\", 3, \"timeOnly\", \"disabled\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddRequestTechniciansComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"div\")(3, \"tr\")(4, \"td\", 2)(5, \"div\", 3)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"Technician Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 5);\n          i0.ɵɵlistener(\"change\", function AddRequestTechniciansComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.selectTechnician($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(9, \"td\")(10, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"tr\")(12, \"td\");\n          i0.ɵɵtemplate(13, AddRequestTechniciansComponent_label_13_Template, 2, 0, \"label\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"td\")(15, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"tr\")(17, \"td\")(18, \"div\", 3)(19, \"label\", 4);\n          i0.ɵɵtext(20, \"Required Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"br\")(22, \"input\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"td\")(24, \"div\", 3)(25, \"label\", 4);\n          i0.ɵɵtext(26, \"Scheduled Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"br\")(28, \"p-calendar\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"td\", 9)(30, \"div\", 10)(31, \"label\", 4);\n          i0.ɵɵtext(32, \"Scheduled Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(33, \"p-calendar\", 11);\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.reqTechnicianFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.technicianData)(\"searchable\", true)(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.technicianExist);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(15, _c0));\n          i0.ɵɵproperty(\"minDate\", ctx.today)(\"showIcon\", false)(\"inputStyle\", i0.ɵɵpureFunction0(16, _c0))(\"disabled\", !ctx.isSupervisor && !ctx.isNew || ctx.isView);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"timeOnly\", true)(\"disabled\", !ctx.isSupervisor && !ctx.isNew || ctx.isView);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.NgSelectComponent, i6.NzTableCellDirective, i6.NzTrDirective, i7.Calendar, i8.NumbersOnlyDirective, i9.TwoDigitDecimalNumberDirective],\n      styles: [\".actual-hours-container[_ngcontent-%COMP%]{width:97%}fieldset.scheduler-border[_ngcontent-%COMP%]{border:1px groove #ddd!important;padding:0 1.4em 1.4em!important;margin:30px 0 1.5em!important;box-shadow:0 0 #000}legend.scheduler-border[_ngcontent-%COMP%]{font-size:1em!important;text-align:left!important;width:auto;padding:0 10px;border-bottom:none;margin-top:-10px;background-color:#fff;width:90px}\"]\n    });\n  }\n  return AddRequestTechniciansComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}