{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule, Host, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, Injectable } from '@angular/core';\nimport { Subject, BehaviorSubject, merge, fromEvent, EMPTY, combineLatest, Subscription } from 'rxjs';\nimport { mapTo, map, switchMap, filter, auditTime, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { POSITION_MAP, NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i2$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from 'ng-zorro-antd/button';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport * as i3$1 from 'ng-zorro-antd/core/no-animation';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i1$2 from 'ng-zorro-antd/menu';\nimport { MenuService, NzIsMenuInsideDropDownToken, NzMenuModule } from 'ng-zorro-antd/menu';\nimport { slideMotion } from 'ng-zorro-antd/core/animation';\nfunction NzDropdownMenuComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"@slideMotion.done\", function NzDropdownMenuComponent_ng_template_0_Template_div_animation_slideMotion_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onAnimationEvent($event));\n    })(\"mouseenter\", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.setMouseState(true));\n    })(\"mouseleave\", function NzDropdownMenuComponent_ng_template_0_Template_div_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.setMouseState(false));\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"ant-dropdown-rtl\", ctx_r0.dir === \"rtl\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.nzOverlayClassName)(\"ngStyle\", ctx_r0.nzOverlayStyle)(\"@slideMotion\", undefined)(\"@.disabled\", !!(ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation))(\"nzNoAnimation\", ctx_r0.noAnimation == null ? null : ctx_r0.noAnimation.nzNoAnimation);\n  }\n}\nconst _c0 = [\"*\"];\nconst NZ_CONFIG_MODULE_NAME = 'dropDown';\nconst listOfPositions$1 = [POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight, POSITION_MAP.topRight, POSITION_MAP.topLeft];\nlet NzDropDownDirective = /*#__PURE__*/(() => {\n  class NzDropDownDirective {\n    setDropdownMenuValue(key, value) {\n      if (this.nzDropdownMenu) {\n        this.nzDropdownMenu.setValue(key, value);\n      }\n    }\n    constructor(nzConfigService, elementRef, overlay, renderer, viewContainerRef, platform) {\n      this.nzConfigService = nzConfigService;\n      this.elementRef = elementRef;\n      this.overlay = overlay;\n      this.renderer = renderer;\n      this.viewContainerRef = viewContainerRef;\n      this.platform = platform;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.overlayRef = null;\n      this.destroy$ = new Subject();\n      this.positionStrategy = this.overlay.position().flexibleConnectedTo(this.elementRef.nativeElement).withLockedPosition().withTransformOriginOn('.ant-dropdown');\n      this.inputVisible$ = new BehaviorSubject(false);\n      this.nzTrigger$ = new BehaviorSubject('hover');\n      this.overlayClose$ = new Subject();\n      this.nzDropdownMenu = null;\n      this.nzTrigger = 'hover';\n      this.nzMatchWidthElement = null;\n      this.nzBackdrop = false;\n      this.nzClickHide = true;\n      this.nzDisabled = false;\n      this.nzVisible = false;\n      this.nzOverlayClassName = '';\n      this.nzOverlayStyle = {};\n      this.nzPlacement = 'bottomLeft';\n      this.nzVisibleChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n      if (this.nzDropdownMenu) {\n        const nativeElement = this.elementRef.nativeElement;\n        /** host mouse state **/\n        const hostMouseState$ = merge(fromEvent(nativeElement, 'mouseenter').pipe(mapTo(true)), fromEvent(nativeElement, 'mouseleave').pipe(mapTo(false)));\n        /** menu mouse state **/\n        const menuMouseState$ = this.nzDropdownMenu.mouseState$;\n        /** merged mouse state **/\n        const mergedMouseState$ = merge(menuMouseState$, hostMouseState$);\n        /** host click state **/\n        const hostClickState$ = fromEvent(nativeElement, 'click').pipe(map(() => !this.nzVisible));\n        /** visible state switch by nzTrigger **/\n        const visibleStateByTrigger$ = this.nzTrigger$.pipe(switchMap(trigger => {\n          if (trigger === 'hover') {\n            return mergedMouseState$;\n          } else if (trigger === 'click') {\n            return hostClickState$;\n          } else {\n            return EMPTY;\n          }\n        }));\n        const descendantMenuItemClick$ = this.nzDropdownMenu.descendantMenuItemClick$.pipe(filter(() => this.nzClickHide), mapTo(false));\n        const domTriggerVisible$ = merge(visibleStateByTrigger$, descendantMenuItemClick$, this.overlayClose$).pipe(filter(() => !this.nzDisabled));\n        const visible$ = merge(this.inputVisible$, domTriggerVisible$);\n        combineLatest([visible$, this.nzDropdownMenu.isChildSubMenuOpen$]).pipe(map(([visible, sub]) => visible || sub), auditTime(150), distinctUntilChanged(), filter(() => this.platform.isBrowser), takeUntil(this.destroy$)).subscribe(visible => {\n          const element = this.nzMatchWidthElement ? this.nzMatchWidthElement.nativeElement : nativeElement;\n          const triggerWidth = element.getBoundingClientRect().width;\n          if (this.nzVisible !== visible) {\n            this.nzVisibleChange.emit(visible);\n          }\n          this.nzVisible = visible;\n          if (visible) {\n            /** set up overlayRef **/\n            if (!this.overlayRef) {\n              /** new overlay **/\n              this.overlayRef = this.overlay.create({\n                positionStrategy: this.positionStrategy,\n                minWidth: triggerWidth,\n                disposeOnNavigation: true,\n                hasBackdrop: this.nzBackdrop && this.nzTrigger === 'click',\n                scrollStrategy: this.overlay.scrollStrategies.reposition()\n              });\n              merge(this.overlayRef.backdropClick(), this.overlayRef.detachments(), this.overlayRef.outsidePointerEvents().pipe(filter(e => !this.elementRef.nativeElement.contains(e.target))), this.overlayRef.keydownEvents().pipe(filter(e => e.keyCode === ESCAPE && !hasModifierKey(e)))).pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.overlayClose$.next(false);\n              });\n            } else {\n              /** update overlay config **/\n              const overlayConfig = this.overlayRef.getConfig();\n              overlayConfig.minWidth = triggerWidth;\n            }\n            /** open dropdown with animation **/\n            this.positionStrategy.withPositions([POSITION_MAP[this.nzPlacement], ...listOfPositions$1]);\n            /** reset portal if needed **/\n            if (!this.portal || this.portal.templateRef !== this.nzDropdownMenu.templateRef) {\n              this.portal = new TemplatePortal(this.nzDropdownMenu.templateRef, this.viewContainerRef);\n            }\n            this.overlayRef.attach(this.portal);\n          } else {\n            /** detach overlayRef if needed **/\n            if (this.overlayRef) {\n              this.overlayRef.detach();\n            }\n          }\n        });\n        this.nzDropdownMenu.animationStateChange$.pipe(takeUntil(this.destroy$)).subscribe(event => {\n          if (event.toState === 'void') {\n            if (this.overlayRef) {\n              this.overlayRef.dispose();\n            }\n            this.overlayRef = null;\n          }\n        });\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next(true);\n      this.destroy$.complete();\n      if (this.overlayRef) {\n        this.overlayRef.dispose();\n        this.overlayRef = null;\n      }\n    }\n    ngOnChanges(changes) {\n      const {\n        nzVisible,\n        nzDisabled,\n        nzOverlayClassName,\n        nzOverlayStyle,\n        nzTrigger\n      } = changes;\n      if (nzTrigger) {\n        this.nzTrigger$.next(this.nzTrigger);\n      }\n      if (nzVisible) {\n        this.inputVisible$.next(this.nzVisible);\n      }\n      if (nzDisabled) {\n        const nativeElement = this.elementRef.nativeElement;\n        if (this.nzDisabled) {\n          this.renderer.setAttribute(nativeElement, 'disabled', '');\n          this.inputVisible$.next(false);\n        } else {\n          this.renderer.removeAttribute(nativeElement, 'disabled');\n        }\n      }\n      if (nzOverlayClassName) {\n        this.setDropdownMenuValue('nzOverlayClassName', this.nzOverlayClassName);\n      }\n      if (nzOverlayStyle) {\n        this.setDropdownMenuValue('nzOverlayStyle', this.nzOverlayStyle);\n      }\n    }\n    static #_ = this.ɵfac = function NzDropDownDirective_Factory(t) {\n      return new (t || NzDropDownDirective)(i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Overlay), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i3.Platform));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzDropDownDirective,\n      selectors: [[\"\", \"nz-dropdown\", \"\"]],\n      hostAttrs: [1, \"ant-dropdown-trigger\"],\n      inputs: {\n        nzDropdownMenu: \"nzDropdownMenu\",\n        nzTrigger: \"nzTrigger\",\n        nzMatchWidthElement: \"nzMatchWidthElement\",\n        nzBackdrop: \"nzBackdrop\",\n        nzClickHide: \"nzClickHide\",\n        nzDisabled: \"nzDisabled\",\n        nzVisible: \"nzVisible\",\n        nzOverlayClassName: \"nzOverlayClassName\",\n        nzOverlayStyle: \"nzOverlayStyle\",\n        nzPlacement: \"nzPlacement\"\n      },\n      outputs: {\n        nzVisibleChange: \"nzVisibleChange\"\n      },\n      exportAs: [\"nzDropdown\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  __decorate([WithConfig(), InputBoolean()], NzDropDownDirective.prototype, \"nzBackdrop\", void 0);\n  __decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzClickHide\", void 0);\n  __decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean()], NzDropDownDirective.prototype, \"nzVisible\", void 0);\n  return NzDropDownDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzContextMenuServiceModule = /*#__PURE__*/(() => {\n  class NzContextMenuServiceModule {\n    static #_ = this.ɵfac = function NzContextMenuServiceModule_Factory(t) {\n      return new (t || NzContextMenuServiceModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzContextMenuServiceModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return NzContextMenuServiceModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzDropDownADirective = /*#__PURE__*/(() => {\n  class NzDropDownADirective {\n    constructor() {}\n    static #_ = this.ɵfac = function NzDropDownADirective_Factory(t) {\n      return new (t || NzDropDownADirective)();\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzDropDownADirective,\n      selectors: [[\"a\", \"nz-dropdown\", \"\"]],\n      hostAttrs: [1, \"ant-dropdown-link\"]\n    });\n  }\n  return NzDropDownADirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzDropdownButtonDirective = /*#__PURE__*/(() => {\n  class NzDropdownButtonDirective {\n    constructor(renderer, nzButtonGroupComponent, elementRef) {\n      this.renderer = renderer;\n      this.nzButtonGroupComponent = nzButtonGroupComponent;\n      this.elementRef = elementRef;\n    }\n    ngAfterViewInit() {\n      const parentElement = this.renderer.parentNode(this.elementRef.nativeElement);\n      if (this.nzButtonGroupComponent && parentElement) {\n        this.renderer.addClass(parentElement, 'ant-dropdown-button');\n      }\n    }\n    static #_ = this.ɵfac = function NzDropdownButtonDirective_Factory(t) {\n      return new (t || NzDropdownButtonDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1$1.NzButtonGroupComponent, 9), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzDropdownButtonDirective,\n      selectors: [[\"\", \"nz-button\", \"\", \"nz-dropdown\", \"\"]]\n    });\n  }\n  return NzDropdownButtonDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzDropdownMenuComponent = /*#__PURE__*/(() => {\n  class NzDropdownMenuComponent {\n    onAnimationEvent(event) {\n      this.animationStateChange$.emit(event);\n    }\n    setMouseState(visible) {\n      this.mouseState$.next(visible);\n    }\n    setValue(key, value) {\n      this[key] = value;\n      this.cdr.markForCheck();\n    }\n    constructor(cdr, elementRef, renderer, viewContainerRef, nzMenuService, directionality, noAnimation) {\n      this.cdr = cdr;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.viewContainerRef = viewContainerRef;\n      this.nzMenuService = nzMenuService;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this.mouseState$ = new BehaviorSubject(false);\n      this.isChildSubMenuOpen$ = this.nzMenuService.isChildSubMenuOpen$;\n      this.descendantMenuItemClick$ = this.nzMenuService.descendantMenuItemClick$;\n      this.animationStateChange$ = new EventEmitter();\n      this.nzOverlayClassName = '';\n      this.nzOverlayStyle = {};\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngAfterContentInit() {\n      this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    static #_ = this.ɵfac = function NzDropdownMenuComponent_Factory(t) {\n      return new (t || NzDropdownMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1$2.MenuService), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(i3$1.NzNoAnimationDirective, 9));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzDropdownMenuComponent,\n      selectors: [[\"nz-dropdown-menu\"]],\n      viewQuery: function NzDropdownMenuComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n        }\n      },\n      exportAs: [\"nzDropdownMenu\"],\n      features: [i0.ɵɵProvidersFeature([MenuService, /** menu is inside dropdown-menu component **/\n      {\n        provide: NzIsMenuInsideDropDownToken,\n        useValue: true\n      }])],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      consts: [[1, \"ant-dropdown\", 3, \"ngClass\", \"ngStyle\", \"nzNoAnimation\", \"mouseenter\", \"mouseleave\"]],\n      template: function NzDropdownMenuComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, NzDropdownMenuComponent_ng_template_0_Template, 2, 7, \"ng-template\");\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgStyle, i3$1.NzNoAnimationDirective],\n      encapsulation: 2,\n      data: {\n        animation: [slideMotion]\n      },\n      changeDetection: 0\n    });\n  }\n  return NzDropdownMenuComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzDropDownModule = /*#__PURE__*/(() => {\n  class NzDropDownModule {\n    static #_ = this.ɵfac = function NzDropDownModule_Factory(t) {\n      return new (t || NzDropDownModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzDropDownModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [BidiModule, CommonModule, OverlayModule, NzButtonModule, NzMenuModule, NzIconModule, NzNoAnimationModule, PlatformModule, NzOverlayModule, NzContextMenuServiceModule, NzOutletModule, NzMenuModule]\n    });\n  }\n  return NzDropDownModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst listOfPositions = [new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'start',\n  overlayY: 'top'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'start',\n  overlayY: 'bottom'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'end',\n  overlayY: 'bottom'\n}), new ConnectionPositionPair({\n  originX: 'start',\n  originY: 'top'\n}, {\n  overlayX: 'end',\n  overlayY: 'top'\n})];\nlet NzContextMenuService = /*#__PURE__*/(() => {\n  class NzContextMenuService {\n    constructor(ngZone, overlay) {\n      this.ngZone = ngZone;\n      this.overlay = overlay;\n      this.overlayRef = null;\n      this.closeSubscription = Subscription.EMPTY;\n    }\n    create($event, nzDropdownMenuComponent) {\n      this.close(true);\n      const {\n        x,\n        y\n      } = $event;\n      if ($event instanceof MouseEvent) {\n        $event.preventDefault();\n      }\n      const positionStrategy = this.overlay.position().flexibleConnectedTo({\n        x,\n        y\n      }).withPositions(listOfPositions).withTransformOriginOn('.ant-dropdown');\n      this.overlayRef = this.overlay.create({\n        positionStrategy,\n        disposeOnNavigation: true,\n        scrollStrategy: this.overlay.scrollStrategies.close()\n      });\n      this.closeSubscription = new Subscription();\n      this.closeSubscription.add(nzDropdownMenuComponent.descendantMenuItemClick$.subscribe(() => this.close()));\n      this.closeSubscription.add(this.ngZone.runOutsideAngular(() => fromEvent(document, 'click').pipe(filter(event => !!this.overlayRef && !this.overlayRef.overlayElement.contains(event.target)), /** handle firefox contextmenu event **/\n      filter(event => event.button !== 2), take(1)).subscribe(() => this.ngZone.run(() => this.close()))));\n      this.overlayRef.attach(new TemplatePortal(nzDropdownMenuComponent.templateRef, nzDropdownMenuComponent.viewContainerRef));\n    }\n    close(clear = false) {\n      if (this.overlayRef) {\n        this.overlayRef.detach();\n        if (clear) {\n          this.overlayRef.dispose();\n        }\n        this.overlayRef = null;\n        this.closeSubscription.unsubscribe();\n      }\n    }\n    static #_ = this.ɵfac = function NzContextMenuService_Factory(t) {\n      return new (t || NzContextMenuService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.Overlay));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NzContextMenuService,\n      factory: NzContextMenuService.ɵfac,\n      providedIn: NzContextMenuServiceModule\n    });\n  }\n  return NzContextMenuService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzContextMenuService, NzContextMenuServiceModule, NzDropDownADirective, NzDropDownDirective, NzDropDownModule, NzDropdownButtonDirective, NzDropdownMenuComponent };\n//# sourceMappingURL=ng-zorro-antd-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}