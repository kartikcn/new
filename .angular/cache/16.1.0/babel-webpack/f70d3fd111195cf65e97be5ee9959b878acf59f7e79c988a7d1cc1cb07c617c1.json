{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\nlet NzResizeObserverFactory = /*#__PURE__*/(() => {\n  class NzResizeObserverFactory {\n    create(callback) {\n      return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n    static #_ = this.ɵfac = function NzResizeObserverFactory_Factory(t) {\n      return new (t || NzResizeObserverFactory)();\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NzResizeObserverFactory,\n      factory: NzResizeObserverFactory.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NzResizeObserverFactory;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nlet NzResizeObserver = /*#__PURE__*/(() => {\n  class NzResizeObserver {\n    constructor(nzResizeObserverFactory) {\n      this.nzResizeObserverFactory = nzResizeObserverFactory;\n      /** Keeps track of the existing ResizeObservers so they can be reused. */\n      this.observedElements = new Map();\n    }\n    ngOnDestroy() {\n      this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      return new Observable(observer => {\n        const stream = this.observeElement(element);\n        const subscription = stream.subscribe(observer);\n        return () => {\n          subscription.unsubscribe();\n          this.unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n    observeElement(element) {\n      if (!this.observedElements.has(element)) {\n        const stream = new Subject();\n        const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n        if (observer) {\n          observer.observe(element);\n        }\n        this.observedElements.set(element, {\n          observer,\n          stream,\n          count: 1\n        });\n      } else {\n        this.observedElements.get(element).count++;\n      }\n      return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n    unobserveElement(element) {\n      if (this.observedElements.has(element)) {\n        this.observedElements.get(element).count--;\n        if (!this.observedElements.get(element).count) {\n          this.cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n    cleanupObserver(element) {\n      if (this.observedElements.has(element)) {\n        const {\n          observer,\n          stream\n        } = this.observedElements.get(element);\n        if (observer) {\n          observer.disconnect();\n        }\n        stream.complete();\n        this.observedElements.delete(element);\n      }\n    }\n    static #_ = this.ɵfac = function NzResizeObserver_Factory(t) {\n      return new (t || NzResizeObserver)(i0.ɵɵinject(NzResizeObserverFactory));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NzResizeObserver,\n      factory: NzResizeObserver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NzResizeObserver;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzResizeObserverDirective = /*#__PURE__*/(() => {\n  class NzResizeObserverDirective {\n    subscribe() {\n      this.unsubscribe();\n      this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);\n    }\n    unsubscribe() {\n      this.currentSubscription?.unsubscribe();\n    }\n    constructor(nzResizeObserver, elementRef) {\n      this.nzResizeObserver = nzResizeObserver;\n      this.elementRef = elementRef;\n      this.nzResizeObserve = new EventEmitter();\n      this.nzResizeObserverDisabled = false;\n      this.currentSubscription = null;\n    }\n    ngAfterContentInit() {\n      if (!this.currentSubscription && !this.nzResizeObserverDisabled) {\n        this.subscribe();\n      }\n    }\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n    ngOnChanges(changes) {\n      const {\n        nzResizeObserve\n      } = changes;\n      if (nzResizeObserve) {\n        if (this.nzResizeObserverDisabled) {\n          this.unsubscribe();\n        } else {\n          this.subscribe();\n        }\n      }\n    }\n    static #_ = this.ɵfac = function NzResizeObserverDirective_Factory(t) {\n      return new (t || NzResizeObserverDirective)(i0.ɵɵdirectiveInject(NzResizeObserver), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzResizeObserverDirective,\n      selectors: [[\"\", \"nzResizeObserver\", \"\"]],\n      inputs: {\n        nzResizeObserverDisabled: \"nzResizeObserverDisabled\"\n      },\n      outputs: {\n        nzResizeObserve: \"nzResizeObserve\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  __decorate([InputBoolean()], NzResizeObserverDirective.prototype, \"nzResizeObserverDisabled\", void 0);\n  return NzResizeObserverDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzResizeObserverModule = /*#__PURE__*/(() => {\n  class NzResizeObserverModule {\n    static #_ = this.ɵfac = function NzResizeObserverModule_Factory(t) {\n      return new (t || NzResizeObserverModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzResizeObserverModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [NzResizeObserverFactory]\n    });\n  }\n  return NzResizeObserverModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzResizeObserver, NzResizeObserverDirective, NzResizeObserverFactory, NzResizeObserverModule };\n//# sourceMappingURL=ng-zorro-antd-cdk-resize-observer.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}