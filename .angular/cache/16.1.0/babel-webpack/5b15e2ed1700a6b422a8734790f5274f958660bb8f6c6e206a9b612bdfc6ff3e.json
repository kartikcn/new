{"ast":null,"code":"import { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { SvgViewComponent } from '../svg-view/svg-view.component';\nimport { MessageService } from 'primeng/api';\nimport { Validators } from '@angular/forms';\nimport html2canvas from 'html2canvas';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../background-loc/services/bl.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../svg-view/services/svg-view.service\";\nimport * as i4 from \"ngx-spinner\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../booking/services/booking.services\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@ng-select/ng-select\";\nimport * as i10 from \"primeng/table\";\nimport * as i11 from \"primeng/button\";\nimport * as i12 from \"primeng/toast\";\nimport * as i13 from \"primeng/confirmdialog\";\nimport * as i14 from \"../svg-view/svg-view.component\";\nconst _c0 = [\"content\"];\nfunction HighlightRoomsComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"h1\");\n    i0.ɵɵtext(2, \"No Floorplan available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction HighlightRoomsComponent_div_26_ng_template_6_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.selectedSecondParamName);\n  }\n}\nfunction HighlightRoomsComponent_div_26_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, HighlightRoomsComponent_div_26_ng_template_6_th_1_Template, 2, 1, \"th\", 29);\n    i0.ɵɵelementStart(2, \"th\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"th\");\n    i0.ɵɵtext(5, \"Area (sq.ft)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\");\n    i0.ɵɵtext(7, \"Highlight Color\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showSecondParam);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.selectedParamName);\n  }\n}\nfunction HighlightRoomsComponent_div_26_ng_template_7_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const selectedparam_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(selectedparam_r9.secondparamname);\n  }\n}\nfunction HighlightRoomsComponent_div_26_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, HighlightRoomsComponent_div_26_ng_template_7_td_1_Template, 2, 1, \"td\", 29);\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵelement(7, \"div\", 30);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const selectedparam_r9 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.showSecondParam);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selectedparam_r9.paramname);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selectedparam_r9.area.toFixed(2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", selectedparam_r9.highlightColor);\n  }\n}\nfunction HighlightRoomsComponent_div_26_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 9);\n  }\n}\nfunction HighlightRoomsComponent_div_26_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵelement(1, \"app-svg-view\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function () {\n  return [5, 10, 25];\n};\nfunction HighlightRoomsComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 19, 20)(3, \"div\", 21)(4, \"div\", 22)(5, \"p-table\", 23);\n    i0.ɵɵtemplate(6, HighlightRoomsComponent_div_26_ng_template_6_Template, 8, 2, \"ng-template\", 24);\n    i0.ɵɵtemplate(7, HighlightRoomsComponent_div_26_ng_template_7_Template, 8, 5, \"ng-template\", 25);\n    i0.ɵɵtemplate(8, HighlightRoomsComponent_div_26_ng_template_8_Template, 3, 1, \"ng-template\", 26);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"div\", 27);\n    i0.ɵɵtemplate(10, HighlightRoomsComponent_div_26_div_10_Template, 2, 0, \"div\", 28);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"value\", ctx_r1.selectedParamData)(\"paginator\", true)(\"rows\", ctx_r1.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c1))(\"rowHover\", true)(\"scrollable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.viewSvg);\n  }\n}\nfunction HighlightRoomsComponent_ngx_spinner_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 32)(1, \"p\", 33);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport let HighlightRoomsComponent = /*#__PURE__*/(() => {\n  class HighlightRoomsComponent {\n    constructor(blServ, authSrv, svgViewSrv, cdr, spinner, messageService, formBuilder, bookingSrv) {\n      this.blServ = blServ;\n      this.authSrv = authSrv;\n      this.svgViewSrv = svgViewSrv;\n      this.cdr = cdr;\n      this.spinner = spinner;\n      this.messageService = messageService;\n      this.formBuilder = formBuilder;\n      this.bookingSrv = bookingSrv;\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.allBl = [];\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.enumParam = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.viewSvg = false;\n      this.fileString = '';\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.allSVGRoomsData = [];\n      this.selectedParamData = [];\n      this.selectedParamName = '';\n      this.showSecondParam = false;\n      this.selectedSecondParamName = '';\n      this.chartImg = [];\n      this.filterPanel = this.formBuilder.group({\n        blId: [null, [Validators.required]],\n        flId: [null, [Validators.required]],\n        parameter: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.compId = this.authSrv.getLoggedInUserCompId();\n      this.loadAllBuilding();\n      this.loadAllFloor();\n      this.loadAllParameters();\n    }\n    loadAllBuilding() {\n      this.blServ.getALLBuilding().subscribe(res => {\n        this.enumBL = res;\n        this.enumBL.unshift({\n          id: '',\n          blNameString: 'Make a selection'\n        });\n      });\n    }\n    loadAllFloor() {\n      this.blServ.getALLFloor().subscribe(res => {\n        this.enumAllFL = res;\n        this.enumAllFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n        this.enumFL = this.enumAllFL;\n      });\n    }\n    loadAllParameters() {\n      this.enumParam.push({\n        id: '',\n        name: 'Make a selection'\n      });\n      this.enumParam.push({\n        id: 'division',\n        name: 'Division'\n      });\n      this.enumParam.push({\n        id: 'department',\n        name: 'Department'\n      });\n      this.enumParam.push({\n        id: 'rmcat',\n        name: 'Room Category'\n      });\n      this.enumParam.push({\n        id: 'rmtype',\n        name: 'Room Type'\n      });\n    }\n    onSelectBlCode($event) {\n      if ($event.id != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null\n          });\n          this.loadFloorCode($event.id);\n        }, 10);\n      } else {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null\n          });\n        }, 10);\n        this.enumFL = this.enumAllFL;\n      }\n    }\n    loadFloorCode(bl_id) {\n      if (bl_id != null) {\n        this.enumFL = [];\n        this.enumFL = this.enumAllFL.filter(t => t.blId == bl_id);\n        this.enumFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.id != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {\n        this.enumFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n      }\n    }\n    onSearch() {\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      this.selectedParamName = this.getParameterName(this.filterPanel.controls.parameter.value);\n      this.displayNoFloorPlanInfo = false;\n      this.viewSvg = false;\n      this.showSpinner = true;\n      this.spinner.show();\n      this.getAllRoomsOfSvg(blId, flId);\n      let flData = this.enumFL.filter(i => i.blId == blId && i.id == flId);\n      //@ts-ignore\n      if (flData[0].svgName != null) {\n        let data = {\n          id: flId,\n          blId: blId,\n          name: '',\n          compId: this.compId,\n          svgName: '',\n          flInfo: '',\n          units: ''\n        };\n        this.svgViewSrv.getSVGFile(data).subscribe(res => {\n          if (res.code != 409) {\n            setTimeout(() => {\n              this.fileString = res.fileContent;\n              this.viewSvg = true;\n              this.cdr.detectChanges();\n              this.spinner.hide();\n              this.showSpinner = false;\n            }, 0);\n          } else {\n            this.spinner.hide();\n            this.showSpinner = false;\n            this.displayNoFloorPlanInfo = true;\n          }\n        });\n      } else {\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.displayNoFloorPlanInfo = true;\n      }\n    }\n    getAllRoomsOfSvg(blId, flId) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.selectedParamData = [];\n      this.allSVGRoomsData = [];\n      let selectedparam = this.filterPanel.controls.parameter.value;\n      let parameterName = '';\n      let allParamData = [];\n      if (selectedparam.toLowerCase() == 'division') {\n        parameterName = 'division';\n        this.showSecondParam = false;\n      } else if (selectedparam.toLowerCase() == 'department') {\n        parameterName = 'department';\n        this.showSecondParam = true;\n        this.selectedSecondParamName = 'Division';\n      } else if (selectedparam.toLowerCase() == 'rmcat') {\n        parameterName = 'rmcat';\n        this.showSecondParam = false;\n      } else if (selectedparam.toLowerCase() == 'rmtype') {\n        parameterName = 'rmtype';\n        this.showSecondParam = true;\n        this.selectedSecondParamName = 'Room Category';\n      }\n      let data = {\n        id: '',\n        name: '',\n        blId: blId,\n        flId: flId,\n        svgElementId: '',\n        compId: this.compId,\n        parameterName: parameterName\n      };\n      this.blServ.getrmwithparametercolor(data).subscribe(res => {\n        if (res) {\n          this.allSVGRoomsData = res.filter(each => each.svgElementId != null);\n          this.allSVGRoomsData.forEach(rm => {\n            let labeldata = [];\n            if (parameterName == 'division') {\n              labeldata.push(rm.divId);\n            } else if (parameterName == 'department') {\n              labeldata.push(rm.depId);\n              labeldata.push(rm.divId);\n            } else if (parameterName == 'rmcat') {\n              labeldata.push(rm.rmCat);\n            } else if (parameterName == 'rmtype') {\n              labeldata.push(rm.rmType);\n              labeldata.push(rm.rmCat);\n            }\n            labeldata.push(rm.rmId);\n            let idObj = {\n              roomElementId: rm.svgElementId,\n              assetElementId: null\n            };\n            let colorObj = {\n              roomColor: rm.highlightColor,\n              assetColor: null\n            };\n            let contentData = {\n              blId: parseInt(blId),\n              flId: parseInt(flId),\n              rmId: rm.rmId,\n              label: [...labeldata],\n              showLabel: true,\n              highlightRoom: rm.highlightColor != null ? true : false,\n              svgElementId: idObj,\n              color: colorObj,\n              rmCode: '',\n              zoomAtRoom: false\n            };\n            this.svgRoomData.content.push(contentData);\n          });\n          this.svgRoomData.blId = parseInt(blId);\n          this.svgRoomData.flId = parseInt(flId);\n          this.svgRoomData.locate = \"room\";\n          allParamData = this.allSVGRoomsData.map(rm => {\n            let paramname = '';\n            let secondparamname = '';\n            if (parameterName == 'division') {\n              paramname = rm.divId;\n            } else if (parameterName == 'department') {\n              paramname = rm.depId;\n              secondparamname = rm.divId;\n            } else if (parameterName == 'rmcat') {\n              paramname = rm.rmCat;\n            } else if (parameterName == 'rmtype') {\n              paramname = rm.rmType;\n              secondparamname = rm.rmCat;\n            }\n            return {\n              paramname: paramname,\n              highlightColor: rm.highlightColor,\n              area: rm.rmArea,\n              secondparamname: secondparamname\n            };\n          });\n          const paramnameMap = {};\n          for (const obj of allParamData) {\n            const {\n              paramname,\n              area,\n              highlightColor,\n              secondparamname\n            } = obj;\n            if (paramname === null) {\n              continue;\n            }\n            if (!paramnameMap[paramname]) {\n              paramnameMap[paramname] = {\n                paramname,\n                area: area,\n                highlightColor,\n                secondparamname\n              };\n            } else paramnameMap[paramname].area += area;\n          }\n          this.selectedParamData = Object.values(paramnameMap);\n        }\n      });\n    }\n    onClear() {\n      this.viewSvg = false;\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.allSVGRoomsData = [];\n      this.selectedParamData = [];\n      this.filterPanel.patchValue({\n        blId: null,\n        flId: null,\n        parameter: null\n      });\n      this.selectedParamName = '';\n      this.viewSvg = false;\n      this.fileString = '';\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n    }\n    getParameterName(id) {\n      let paramobj = this.enumParam.filter(each => each.id == id);\n      if (paramobj.length > 0) {\n        return paramobj[0].name;\n      } else {\n        return '';\n      }\n    }\n    exportToPdf() {\n      if (this.contentElement) {\n        this.showSpinner = true;\n        this.spinner.show();\n        const divElement = this.contentElement.nativeElement;\n        this.updateSvgBeforePdf();\n        html2canvas(divElement).then(canvas => {\n          const imgData = canvas.toDataURL('image/png');\n          this.chartImg = [];\n          this.chartImg.push(imgData);\n          this.printPDF();\n          this.svgViewComp.loadSvgFile();\n          this.spinner.hide();\n          this.showSpinner = false;\n        });\n      }\n    }\n    printPDF() {\n      this.messageService.clear();\n      let headerstring = this.getSelectedBlandFlHeader();\n      var reportDetails = {\n        chartImg: this.chartImg,\n        title: `Hightlight Rooms by ${this.selectedParamName}`,\n        heading: headerstring\n      };\n      this.bookingSrv.printPdf(reportDetails).subscribe(res => {\n        if (res != null) {\n          this.messageService.add({\n            key: 'highlingroomsmsg',\n            severity: 'success',\n            summary: 'PDF Created',\n            detail: 'PDF created successfully'\n          });\n          var file = new Blob([res], {\n            type: 'application/pdf'\n          });\n          var fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        }\n      });\n    }\n    updateSvgBeforePdf() {\n      let assetlayerblocks = [];\n      const divElement = this.contentElement.nativeElement;\n      const blockDefs = this.contentElement.nativeElement.querySelector('#block_defs');\n      const svgElement = document.getElementById('svg-container');\n      const useElements = svgElement.getElementsByTagName('use');\n      const keyValuePairs = {};\n      for (let i = 0; i < useElements.length; i++) {\n        const useElement = useElements[i];\n        let href = useElement.getAttribute('href')?.substring(1);\n        const strokeWidth = useElement.getAttribute('stroke-width');\n        if (href && strokeWidth) {\n          keyValuePairs[href] = strokeWidth;\n        }\n      }\n      if (blockDefs != null) {\n        const childElements = blockDefs.children;\n        for (let i = 0; i < childElements.length; i++) {\n          let blockid = childElements[i].getAttribute(\"id\");\n          childElements[i].setAttribute(\"class\", \"pdf-export\");\n          let swval = keyValuePairs[blockid];\n          if (swval) {\n            childElements[i].setAttribute(\"stroke-width\", swval);\n          }\n        }\n      }\n    }\n    getSelectedBlandFlHeader() {\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      let blstring = '';\n      let flstring = '';\n      let bldata = this.enumBL.filter(i => i.id == blId);\n      let fldata = this.enumFL.filter(i => i.id == flId);\n      if (bldata[0].name != null && bldata[0].name != '') {\n        blstring = `Building: ${bldata[0].id} - ${bldata[0].name}`;\n      } else {\n        blstring = `Building: ${bldata[0].id}`;\n      }\n      if (fldata[0].name != null && fldata[0].name != '') {\n        flstring = ` | Floor: ${fldata[0].id} - ${fldata[0].name}`;\n      } else {\n        flstring = ` | Floor: ${fldata[0].id}`;\n      }\n      return `${blstring}${flstring}`;\n    }\n    static #_ = this.ɵfac = function HighlightRoomsComponent_Factory(t) {\n      return new (t || HighlightRoomsComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.SvgViewService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.NgxSpinnerService), i0.ɵɵdirectiveInject(i5.MessageService), i0.ɵɵdirectiveInject(i6.UntypedFormBuilder), i0.ɵɵdirectiveInject(i7.BookingService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HighlightRoomsComponent,\n      selectors: [[\"app-highlight-rooms\"]],\n      viewQuery: function HighlightRoomsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(SvgViewComponent, 5);\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgViewComp = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 30,\n      vars: 15,\n      consts: [[1, \"card\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"parameter\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"margin\", \"5px 0 0 5px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Export\", \"icon\", \"pi pi-file-pdf\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"70px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"class\", \"card no-file-found\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-fussion\", 3, \"fullScreen\", 4, \"ngIf\"], [\"key\", \"highlingroomsmsg\", \"position\", \"top-center\"], [\"key\", \"highlingroomsgrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"card\", \"no-file-found\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"height\", \"600px\"], [\"content\", \"\"], [2, \"width\", \"28%\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"95%\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [2, \"width\", \"70%\", \"margin\", \"5px\", \"height\", \"600px\"], [\"style\", \"height:580px;\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"td-class\"], [2, \"height\", \"580px\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-fussion\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function HighlightRoomsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function HighlightRoomsComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.onSelectBlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"td\", 3)(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"ng-select\", 7);\n          i0.ɵɵlistener(\"change\", function HighlightRoomsComponent_Template_ng_select_change_13_listener($event) {\n            return ctx.onSelectFlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"td\", 3)(15, \"div\", 4)(16, \"label\", 5);\n          i0.ɵɵtext(17, \"Highlight By\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"ng-select\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(19, \"td\", 3);\n          i0.ɵɵelementStart(20, \"td\", 3)(21, \"div\", 9)(22, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function HighlightRoomsComponent_Template_button_click_22_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function HighlightRoomsComponent_Template_button_click_23_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function HighlightRoomsComponent_Template_button_click_24_listener() {\n            return ctx.exportToPdf();\n          });\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵtemplate(25, HighlightRoomsComponent_div_25_Template, 3, 0, \"div\", 13);\n          i0.ɵɵtemplate(26, HighlightRoomsComponent_div_26_Template, 11, 9, \"div\", 14);\n          i0.ɵɵtemplate(27, HighlightRoomsComponent_ngx_spinner_27_Template, 3, 1, \"ngx-spinner\", 15);\n          i0.ɵɵelement(28, \"p-toast\", 16)(29, \"p-confirmDialog\", 17);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumParam)(\"searchable\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.viewSvg);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.displayNoFloorPlanInfo);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.viewSvg);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i8.NgIf, i9.NgSelectComponent, i5.PrimeTemplate, i10.Table, i11.ButtonDirective, i12.Toast, i13.ConfirmDialog, i6.ɵNgNoValidate, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i4.NgxSpinnerComponent, i14.SvgViewComponent],\n      styles: [\".no-file-found[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:500px}.td-class[_ngcontent-%COMP%]{background-color:inherit;display:flex;align-items:center;justify-content:center;width:40px;height:20px;margin:10px auto auto;border:1px solid black}\"]\n    });\n  }\n  return HighlightRoomsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}