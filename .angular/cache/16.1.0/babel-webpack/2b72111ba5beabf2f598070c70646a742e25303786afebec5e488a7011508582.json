{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { ToolTypeDTO } from '../../../tool-type/model/toolTypeDTO';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../tool-type/services/tool-type.service\";\nimport * as i3 from \"../../../tool-type/providers/tool-type.oroviders\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-select/ng-select\";\nimport * as i6 from \"ng-zorro-antd/table\";\nimport * as i7 from \"ng-zorro-antd/input\";\nimport * as i8 from \"../../../../../directive/numbers-only.directive\";\nimport * as i9 from \"../../../../../directive/directive/two-digit-decimal-number\";\nimport * as i10 from \"../../../../../directive/directive/trim-input.directive\";\nimport * as i11 from \"@angular/material/tooltip\";\nimport * as i12 from \"primeng/button\";\nfunction AddToolsComponent_tr_16_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 21);\n    i0.ɵɵtext(1, \"Tool is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddToolsComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 19);\n    i0.ɵɵtemplate(2, AddToolsComponent_tr_16_label_2_Template, 2, 0, \"label\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.toolsFormPanel.controls[\"tool\"] == null ? null : ctx_r0.toolsFormPanel.controls[\"tool\"].errors) && !(ctx_r0.toolsFormPanel.controls[\"tool\"] == null ? null : ctx_r0.toolsFormPanel.controls[\"tool\"].errors.required));\n  }\n}\nexport let AddToolsComponent = /*#__PURE__*/(() => {\n  class AddToolsComponent {\n    constructor(formBuilder, toolTypeSrv, toolTypeProvider) {\n      this.formBuilder = formBuilder;\n      this.toolTypeSrv = toolTypeSrv;\n      this.toolTypeProvider = toolTypeProvider;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.presentTool = '';\n      this.toolTypeData = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.toolsFormPanel = this.formBuilder.group({\n        toolsId: [null],\n        tool: [null, [Validators.required]],\n        toolTypeId: [null, [Validators.required]],\n        hourlyRate: [null, [Validators.required]],\n        overTimeRate: [null, [Validators.required]],\n        standardAvalTime: [null, [Validators.required]],\n        doubleRate: [null, [Validators.required]],\n        description: ['']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.toolsFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadToolTypes();\n    }\n    loadToolTypes() {\n      this.toolTypeSrv.getAllToolTypes().subscribe(res => {\n        this.toolTypeData = res;\n        this.toolTypeData = res.map(t => {\n          t.displayName = t.description != null ? t.toolType + \" - \" + t.description : t.toolType;\n          return t;\n        });\n        this.toolTypeData.unshift(new ToolTypeDTO(\"Make a Selection\", '', '', 0));\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const toolsDetails = {\n        tool: this.toolsFormPanel.controls.tool.value,\n        toolsId: this.toolsFormPanel.controls.toolsId.value,\n        toolTypeId: this.toolsFormPanel.controls.toolTypeId.value,\n        hourlyRate: this.toolsFormPanel.controls.hourlyRate.value,\n        overTimeRate: this.toolsFormPanel.controls.overTimeRate.value,\n        standardAvalTime: this.toolsFormPanel.controls.standardAvalTime.value,\n        doubleRate: this.toolsFormPanel.controls.standardAvalTime.value,\n        description: this.toolsFormPanel.controls.description.value\n      };\n      return toolsDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.toolsFormPanel.patchValue({\n          tool: value.tool,\n          toolsId: value.toolsId,\n          toolTypeId: parseInt(value.toolTypeId),\n          hourlyRate: value.hourlyRate,\n          overTimeRate: value.overTimeRate,\n          standardAvalTime: value.standardAvalTime,\n          doubleRate: value.doubleRate,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.toolsFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.toolsFormPanel.valid ? null : {\n        toolsFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    onAddToolType() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '500px';\n      dialogConfig.data = {\n        toolTypeId: null,\n        isEdit: true,\n        newRecord: true\n      };\n      this.toolTypeProvider.openDialog(dialogConfig);\n      this.toolTypeProvider.onDialogueClosed.subscribe(result => {\n        if (result) {\n          this.loadToolTypes();\n          this.setLatestToolType(result);\n        }\n      });\n    }\n    setLatestToolType(toolTypeId) {\n      setTimeout(() => {\n        this.toolsFormPanel.patchValue({\n          toolTypeId: toolTypeId\n        });\n      }, 100);\n    }\n    static #_ = this.ɵfac = function AddToolsComponent_Factory(t) {\n      return new (t || AddToolsComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ToolTypeService), i0.ɵɵdirectiveInject(i3.ToolTypeDialogueProvider));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddToolsComponent,\n      selectors: [[\"app-add-tools\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddToolsComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddToolsComponent),\n        multi: true\n      }])],\n      decls: 45,\n      vars: 5,\n      consts: [[\"autocomplete\", \"off\", 3, \"formGroup\"], [\"width\", \"100%\"], [\"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"tool\", \"formControlName\", \"tool\", \"maxlength\", \"80\", \"appTrimInput\", \"\", 1, \"form-control\"], [2, \"display\", \"flex\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [\"appendTo\", \"body\", \"formControlName\", \"toolTypeId\", \"bindLabel\", \"displayName\", \"bindValue\", \"toolTypeId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"margin\", \"16px 0px 0px -5px\"], [\"id\", \"add-btn\", \"icon\", \"pi pi-plus\", \"matTooltip\", \"Add Tool type\", 1, \"pull-right\", \"m-3\", 3, \"click\"], [4, \"ngIf\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"name\", \"hourlyRate\", \"formControlName\", \"hourlyRate\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"name\", \"overTimeRate\", \"formControlName\", \"overTimeRate\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"name\", \"doubleRate\", \"formControlName\", \"doubleRate\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"standardAvalTime\", \"formControlName\", \"standardAvalTime\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"colspan\", \"2\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [2, \"width\", \"50%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Tool \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 6)(10, \"div\", 7)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Tool type \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"ng-select\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 9)(15, \"p-button\", 10);\n          i0.ɵɵlistener(\"click\", function AddToolsComponent_Template_p_button_click_15_listener() {\n            return ctx.onAddToolType();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(16, AddToolsComponent_tr_16_Template, 4, 1, \"tr\", 11);\n          i0.ɵɵelementStart(17, \"tr\")(18, \"td\", 2)(19, \"div\", 3)(20, \"label\", 4);\n          i0.ɵɵtext(21, \"Hourly Rate \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"input\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"td\", 2)(24, \"div\", 3)(25, \"label\", 4);\n          i0.ɵɵtext(26, \"Overtime Rate \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(28, \"tr\")(29, \"td\", 2)(30, \"div\", 3)(31, \"label\", 4);\n          i0.ɵɵtext(32, \"Doubletime Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(33, \"input\", 14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(34, \"td\", 2)(35, \"div\", 3)(36, \"label\", 4);\n          i0.ɵɵtext(37, \"Standard Available Time (Hours/Day)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"input\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(39, \"tr\")(40, \"td\", 16)(41, \"div\", 3)(42, \"label\", 17);\n          i0.ɵɵtext(43, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(44, \"textarea\", 18);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.toolsFormPanel);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.toolTypeData)(\"searchable\", true);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", (ctx.toolsFormPanel.controls[\"tool\"] == null ? null : ctx.toolsFormPanel.controls[\"tool\"].errors) && ((ctx.toolsFormPanel.controls[\"tool\"] == null ? null : ctx.toolsFormPanel.controls[\"tool\"].dirty) || (ctx.toolsFormPanel.controls[\"tool\"] == null ? null : ctx.toolsFormPanel.controls[\"tool\"].touched)));\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i5.NgSelectComponent, i6.NzTableCellDirective, i6.NzTrDirective, i7.NzInputDirective, i8.NumbersOnlyDirective, i9.TwoDigitDecimalNumberDirective, i10.TrimInputDirective, i11.MatTooltip, i12.Button],\n      styles: [\".ng-select.ng-select-single .ng-select-container .ng-value-container, .ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]   .ng-value-container[_ngcontent-%COMP%]   .ng-value[_ngcontent-%COMP%]{overflow:hidden!important;text-overflow:ellipsis!important;white-space:nowrap!important;max-width:300px!important}[_nghost-%COMP%]     #add-btn .p-button{background-color:#fff!important;border-radius:50%;border:2px solid #2196F3;color:#2196f3;height:20px!important;width:20px}\"]\n    });\n  }\n  return AddToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}