{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/users.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/api\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/card\";\nimport * as i8 from \"primeng/password\";\nimport * as i9 from \"primeng/fieldset\";\nfunction PasswordResetComponent_p_card_5_div_10_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 18);\n    i0.ɵɵtext(1, \" passwords that you enter is inconsistent! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordResetComponent_p_card_5_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, PasswordResetComponent_p_card_5_div_10_label_1_Template, 2, 0, \"label\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r3.passResetForm.controls[\"newPasswordConfirm\"].errors) && !(ctx_r3.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r3.passResetForm.controls[\"newPasswordConfirm\"].errors.required));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\nfunction PasswordResetComponent_p_card_5_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.isSuccess == true ? \"green\" : \"red\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.msg);\n  }\n}\nconst _c1 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nfunction PasswordResetComponent_p_card_5_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 20);\n    i0.ɵɵlistener(\"click\", function PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onSave());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"p-button\", 21);\n    i0.ɵɵlistener(\"click\", function PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.passResetForm.valid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n  }\n}\nfunction PasswordResetComponent_p_card_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-card\", 7)(1, \"form\", 8)(2, \"div\", 9)(3, \"div\", 10);\n    i0.ɵɵelement(4, \"label\", 11)(5, \"p-password\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 9)(7, \"div\", 10);\n    i0.ɵɵelement(8, \"label\", 11)(9, \"p-password\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(10, PasswordResetComponent_p_card_5_div_10_Template, 2, 1, \"div\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, PasswordResetComponent_p_card_5_div_11_Template, 2, 4, \"div\", 15);\n    i0.ɵɵtemplate(12, PasswordResetComponent_p_card_5_ng_template_12_Template, 2, 4, \"ng-template\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.passResetForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"toggleMask\", true);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"feedback\", false)(\"toggleMask\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].errors) && ((ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].dirty) || (ctx_r0.passResetForm.controls[\"newPasswordConfirm\"] == null ? null : ctx_r0.passResetForm.controls[\"newPasswordConfirm\"].touched)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.resMsg);\n  }\n}\nfunction PasswordResetComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p-fieldset\", 22)(1, \"p\");\n    i0.ɵɵtext(2, \"The above link is expired.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementStart(4, \"i\");\n    i0.ɵɵtext(5, \"please contact administrator.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class PasswordResetComponent {\n  constructor(formBuilder, router, userSrv, route, datePipe) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.userSrv = userSrv;\n    this.route = route;\n    this.datePipe = datePipe;\n    this.subscriptions = [];\n    this.isExpired = true;\n    this.resetLinkTime = 0;\n    this.currentTime = new Date().getTime();\n    this.msg = \"\";\n    this.resMsg = false;\n    this.isSuccess = false;\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    /// Start Of Building Form \n    this.passResetForm = this.formBuilder.group({\n      userName: [''],\n      userNewPwd: ['', [Validators.required]],\n      newPasswordConfirm: ['', [Validators.required, this.checkPassword()]]\n    });\n    // End Of Building Form\n    this.subscriptions.push(\n    // any time the inner form changes update the parent of any change\n    this.passResetForm.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  /// Start Preparing Entered Data Model\n  get value() {\n    const records = {\n      userName: this.passResetForm.controls.userName.value,\n      userNewPwd: this.passResetForm.controls.userNewPwd.value,\n      userPwd: this.passResetForm.controls.userPwd.value,\n      userDatePwdChanged: this.passResetForm.controls.userDatePwdChanged.value\n    };\n    return records;\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      if (params.key != null) {\n        var url_key = params.key;\n        this.resetLinkTime = Number(url_key.substr(url_key.lastIndexOf(\"_\") + 1, url_key.length));\n        if (Math.abs(this.currentTime - this.resetLinkTime) <= 60 * 60 * 24 * 1000) {\n          this.isExpired = false;\n        } else {\n          this.isExpired = true;\n        }\n      } else {\n        this.isExpired = true;\n      }\n      if (params.user != null) {\n        setTimeout(() => {\n          this.passResetForm.patchValue({\n            userName: params.user\n          });\n        }, 0);\n      }\n    });\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.passResetForm.patchValue({\n        userName: value.userName,\n        userNewPwd: value.userNewPwd,\n        userPwd: value.userPwd,\n        userDatePwdChanged: value.userDatePwdChanged\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.passResetForm.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  checkPassword() {\n    return control => {\n      if (control.value !== undefined && control.value != null && control.value.length > 1) {\n        this.passResetForm.controls['newPasswordConfirm'].setErrors(null);\n        this.passResetForm.clearAsyncValidators();\n        this.passResetForm.updateValueAndValidity();\n        let userPwd = this.passResetForm.controls['userNewPwd'].value;\n        if (userPwd != null && userPwd === control.value) {\n          return null;\n        } else {\n          return {\n            'incorrect': true\n          };\n        }\n      }\n      return null;\n    };\n  }\n  onCancel() {\n    this.passResetForm.reset();\n  }\n  onSave() {\n    this.msg = \"\";\n    if (this.passResetForm.valid) {\n      let userPwdRec = {\n        \"userName\": this.passResetForm.controls.userName.value,\n        \"userDatePwdChanged\": this.datePipe.transform(new Date(), \"dd/MM/yyyy\"),\n        \"userNewPwd\": this.passResetForm.controls.userNewPwd.value,\n        \"userPwd\": \"\"\n      };\n      this.userSrv.updateUserCrendentials(userPwdRec).subscribe(res => {\n        if (res !== null && res.code == \"200\") {\n          this.resMsg = true;\n          this.isSuccess = true;\n          this.msg = \"password updated successfully\";\n        } else {\n          this.resMsg = true;\n          this.isSuccess = false;\n          this.msg = \"Unable to process the record.\";\n        }\n      }, error => {\n        this.resMsg = true;\n        this.isSuccess = false;\n        this.msg = \"Unable to process the record.\";\n      });\n    }\n  }\n  static #_ = this.ɵfac = function PasswordResetComponent_Factory(t) {\n    return new (t || PasswordResetComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UsersService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i4.DatePipe));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordResetComponent,\n    selectors: [[\"app-password-reset\"]],\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"container\"], [\"id\", \"loginbox\", 1, \"mainbox\", \"col-md-6\", \"col-md-offset-3\", \"col-sm-8\", \"col-sm-offset-2\", \"logInBoxDiv\"], [1, \"panel\", \"panel-info\", 2, \"background-color\", \"white !important\"], [\"href\", \"#\", \"target\", \"_blank\"], [\"src\", \"assets/images/login_logo.jpg\", \"width\", \"250px\", \"alt\", \"FMS\", 1, \"companyLogo\"], [\"header\", \"Reset your Password\", 4, \"ngIf\", \"ngIfElse\"], [\"elseTemplate\", \"\"], [\"header\", \"Reset your Password\"], [\"id\", \"loginTenant\", 3, \"formGroup\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\"], [\"placeholder\", \"Enter new Password\", \"formControlName\", \"userNewPwd\", 3, \"toggleMask\"], [\"placeholder\", \"Re-enter new passwor\", \"formControlName\", \"newPasswordConfirm\", 3, \"feedback\", \"toggleMask\"], [4, \"ngIf\"], [3, \"ngStyle\", 4, \"ngIf\"], [\"pTemplate\", \"footer\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [3, \"ngStyle\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"legend\", \"Reset your Password\"]],\n    template: function PasswordResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"a\", 3);\n        i0.ɵɵelement(4, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, PasswordResetComponent_p_card_5_Template, 13, 6, \"p-card\", 5);\n        i0.ɵɵtemplate(6, PasswordResetComponent_ng_template_6_Template, 6, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(7);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.isExpired == false)(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: [i4.NgIf, i4.NgStyle, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.PrimeTemplate, i6.Button, i7.Card, i8.Password, i9.Fieldset],\n    styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.center[_ngcontent-%COMP%] {\\n  width: 400px;\\n  padding: 10px;\\n  background: #5F85DB;\\n  color: #fff;\\n  font-weight: bold;\\n  font-family: Tahoma;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8uLi8uLi8uLi9NYW5hdiUyMEd1cHRhL0Rvd25sb2Fkcy9mbXMvZm1zL2Zyb250ZW5kL2Ztc19mcm9udGVuZC9zcmMvYXBwL3VpL3Bhc3N3b3JkLXJlc2V0L3Bhc3N3b3JkLXJlc2V0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0FDQ0Y7O0FEQ0E7RUFDRSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUNFRiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbi5jZW50ZXIge1xuICB3aWR0aDogNDAwcHg7IFxuICBwYWRkaW5nOiAxMHB4O1xuICBiYWNrZ3JvdW5kOiAjNUY4NURCO1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtZmFtaWx5OiBUYWhvbWE7XG59IiwiLmNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uY2VudGVyIHtcbiAgd2lkdGg6IDQwMHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBiYWNrZ3JvdW5kOiAjNUY4NURCO1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtZmFtaWx5OiBUYWhvbWE7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","PasswordResetComponent_p_card_5_div_10_label_1_Template","ɵɵadvance","ɵɵproperty","ctx_r3","passResetForm","controls","errors","required","ɵɵpureFunction1","_c0","ctx_r4","isSuccess","ɵɵtextInterpolate","msg","ɵɵlistener","PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_0_listener","ɵɵrestoreView","_r8","ctx_r7","ɵɵnextContext","ɵɵresetView","onSave","PasswordResetComponent_p_card_5_ng_template_12_Template_p_button_click_1_listener","ctx_r9","onCancel","ctx_r5","valid","ɵɵstyleMap","ɵɵpureFunction0","_c1","ɵɵelement","PasswordResetComponent_p_card_5_div_10_Template","PasswordResetComponent_p_card_5_div_11_Template","PasswordResetComponent_p_card_5_ng_template_12_Template","ctx_r0","dirty","touched","resMsg","PasswordResetComponent","constructor","formBuilder","router","userSrv","route","datePipe","subscriptions","isExpired","resetLinkTime","currentTime","Date","getTime","onChange","onTouched","group","userName","userNewPwd","newPasswordConfirm","checkPassword","push","valueChanges","subscribe","value","records","userPwd","userDatePwdChanged","ngOnInit","queryParams","params","key","url_key","Number","substr","lastIndexOf","length","Math","abs","user","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","ngOnDestroy","forEach","s","unsubscribe","control","undefined","setErrors","clearAsyncValidators","updateValueAndValidity","userPwdRec","transform","updateUserCrendentials","res","code","error","_","ɵɵdirectiveInject","i1","UntypedFormBuilder","i2","Router","i3","UsersService","ActivatedRoute","i4","DatePipe","_2","selectors","decls","vars","consts","template","PasswordResetComponent_Template","rf","ctx","PasswordResetComponent_p_card_5_Template","PasswordResetComponent_ng_template_6_Template","ɵɵtemplateRefExtractor","_r1"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\password-reset\\password-reset.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\password-reset\\password-reset.component.html"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, UntypedFormGroup, ValidatorFn } from '@angular/forms';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { ActivatedRoute, Router, Routes } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { UsersService } from 'src/app/services/users.service';\nimport { UserPasswrodInputDto } from '../user-profile/model/user-password.model';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.scss']\n})\nexport class PasswordResetComponent implements  OnInit, ControlValueAccessor, OnDestroy {\n\n  passResetForm: UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  isExpired:boolean=true;\n  resetLinkTime:number=0;\n  currentTime: number = new Date().getTime();\n  msg:string=\"\";\n  resMsg:boolean=false;\n  isSuccess:boolean=false;\n\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private router: Router,\n    private userSrv:UsersService,\n    private route: ActivatedRoute,\n    private datePipe: DatePipe,\n  ) { \n    /// Start Of Building Form \n    this.passResetForm = this.formBuilder.group({\n      userName: [''],\n      userNewPwd: ['', [Validators.required]],\n      newPasswordConfirm: ['', [Validators.required, this.checkPassword()]],\n\n    });\n\n    // End Of Building Form\n    this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.passResetForm.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n  /// Start Preparing Entered Data Model\n  get value(): UserPasswrodInputDto {\n    const records: UserPasswrodInputDto = {\n      userName: this.passResetForm.controls.userName.value,\n      userNewPwd: this.passResetForm.controls.userNewPwd.value,\n      userPwd: this.passResetForm.controls.userPwd.value,\n      userDatePwdChanged: this.passResetForm.controls.userDatePwdChanged.value,\n    }\n    return records;\n  }\n\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params.key != null) {\n        var url_key:string = params.key;\n        this.resetLinkTime = Number(url_key.substr(url_key.lastIndexOf(\"_\")+1, url_key.length));\n\n        if (Math.abs(this.currentTime - this.resetLinkTime) <= 60 * 60 * 24 * 1000) {\n          this.isExpired =false;\n        }\n        else{\n          this.isExpired=true;\n        }\n        \n         \n      }\n      else{\n        this.isExpired = true;\n      }\n      if (params.user !=null){\n          setTimeout(() => {\n            this.passResetForm.patchValue({\n              userName: params.user,\n            });\n          },0\n        );\n      }\n    });\n  }\n\n  set value(value: UserPasswrodInputDto) {\n    setTimeout(() => {\n      this.passResetForm.patchValue({\n        userName: value.userName,\n        userNewPwd: value.userNewPwd,\n        userPwd: value.userPwd,\n        userDatePwdChanged: value.userDatePwdChanged,\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  writeValue(value: any): void {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.passResetForm.reset();\n\n    }\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n\n  checkPassword(): ValidatorFn {\n\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value !== undefined && control.value != null && control.value.length > 1) {\n        this.passResetForm.controls['newPasswordConfirm'].setErrors(null);\n        this.passResetForm.clearAsyncValidators();\n        this.passResetForm.updateValueAndValidity();\n        let userPwd = this.passResetForm.controls['userNewPwd'].value;\n        if (userPwd != null && userPwd === control.value) {\n          return null;\n        }\n        else {\n          return { 'incorrect': true };\n        }\n\n      }\n      return null;\n    };\n  }\n\n  onCancel(){\n    this.passResetForm.reset();\n  }\n  onSave(){\n    this.msg=\"\";\n    if (this.passResetForm.valid){\n      let userPwdRec: UserPasswrodInputDto = {\n        \"userName\": this.passResetForm.controls.userName.value,\n        \"userDatePwdChanged\": this.datePipe.transform(new Date(), \"dd/MM/yyyy\"),\n        \"userNewPwd\": this.passResetForm.controls.userNewPwd.value,\n        \"userPwd\": \"\"\n      };\n      this.userSrv.updateUserCrendentials(userPwdRec).subscribe((res) => {\n        if(res !== null && res.code==\"200\"){\n          this.resMsg=true;\n          this.isSuccess =true;\n          this.msg = \"password updated successfully\"\n        }else{\n          this.resMsg = true;\n          this.isSuccess=false;\n          this.msg = \"Unable to process the record.\"\n        }\n        \n      },(error)=>{\n        this.resMsg = true;\n        this.isSuccess = false;\n        this.msg = \"Unable to process the record.\"\n      })\n\n    }\n  }\n\n}\n","<div class=\"container\">\n        <div id=\"loginbox\" class=\"mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2 logInBoxDiv\">\n                <div class=\"panel panel-info\" style=\"background-color: white !important;\">\n                        <a href=\"#\" target=\"_blank\"><img src=\"assets/images/login_logo.jpg\" width=\"250px\" alt=\"FMS\"\n                                        class=\"companyLogo\" />\n                        </a>\n                                <p-card header=\"Reset your Password\"  *ngIf=\"isExpired==false else elseTemplate\">\n                                        \n                                \n                                \n                               \n                                <form id=\"loginTenant\" [formGroup]=\"passResetForm\">\n                                        <div class=\"p-fluid\">\n                                                <div class=\" p-field\">\n                                                        <label class='form-field-lable'></label>\n                                                        <p-password placeholder=\"Enter new Password\" formControlName=\"userNewPwd\" [toggleMask]=\"true\"></p-password>\n                                        \n                                                </div>\n                                        </div>\n                                                <div class=\"p-fluid\">\n                                                        <div class=\" p-field\">\n                                                                <label class='form-field-lable'></label>\n                                                                <p-password placeholder=\"Re-enter new passwor\" formControlName=\"newPasswordConfirm\" [feedback]=\"false\" [toggleMask]=\"true\"></p-password>\n                                                \n                                                        </div>\n                                                </div>\n                                        <div *ngIf=\"(passResetForm.controls['newPasswordConfirm']?.errors && (passResetForm.controls['newPasswordConfirm']?.dirty || passResetForm.controls['newPasswordConfirm']?.touched))\">\n                                                \n                                                        <label *ngIf=\"passResetForm.controls['newPasswordConfirm']?.errors && !passResetForm.controls['newPasswordConfirm']?.errors.required\"\n                                                                class='form-field-lable' style=\"color:red;\">\n                                                                passwords that you enter is inconsistent!\n                                                        </label>\n                                               \n                                        \n                                                \n                                        </div>\n                                        \n                                        \n                                </form>\n                                <div *ngIf=\"resMsg\" [ngStyle]=\"{'color': isSuccess ==true ? 'green':'red'}\">{{msg}}</div>\n                                <ng-template pTemplate=\"footer\">\n                                        <p-button label=\"Save\" [disabled]=\"!passResetForm.valid\" (click)=\"onSave()\" icon=\"pi pi-check\"></p-button>\n                                        <p-button label=\"Cancel\" (click)=\"onCancel()\" icon=\"pi pi-times\" styleClass=\"p-button-secondary\" [style]=\"{'margin-left': '.5em'}\">\n                                        </p-button>\n                                </ng-template>\n                                \n                                </p-card>\n                                <ng-template #elseTemplate>\n                                        <p-fieldset legend=\"Reset your Password\">\n                                                <p>The above link is expired.</p>\n                                                <br>\n                                                <i>please contact administrator.</i>\n                                        </p-fieldset>\n                                </ng-template>\n                                \n\n                </div>\n        </div>\n</div>"],"mappings":"AAIA,SAASA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;;ICwBaC,EAAA,CAAAC,cAAA,gBACoD;IAC5CD,EAAA,CAAAE,MAAA,kDACR;IAAAF,EAAA,CAAAG,YAAA,EAAQ;;;;;IALxBH,EAAA,CAAAC,cAAA,UAAsL;IAEtKD,EAAA,CAAAI,UAAA,IAAAC,uDAAA,oBAGQ;IAIxBL,EAAA,CAAAG,YAAA,EAAM;;;;IAPkBH,EAAA,CAAAM,SAAA,GAA4H;IAA5HN,EAAA,CAAAO,UAAA,UAAAC,MAAA,CAAAC,aAAA,CAAAC,QAAA,wCAAAF,MAAA,CAAAC,aAAA,CAAAC,QAAA,uBAAAC,MAAA,OAAAH,MAAA,CAAAC,aAAA,CAAAC,QAAA,wCAAAF,MAAA,CAAAC,aAAA,CAAAC,QAAA,uBAAAC,MAAA,CAAAC,QAAA,EAA4H;;;;;;;;;;IAW5JZ,EAAA,CAAAC,cAAA,cAA4E;IAAAD,EAAA,CAAAE,MAAA,GAAO;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;IAArEH,EAAA,CAAAO,UAAA,YAAAP,EAAA,CAAAa,eAAA,IAAAC,GAAA,EAAAC,MAAA,CAAAC,SAAA,4BAAuD;IAAChB,EAAA,CAAAM,SAAA,GAAO;IAAPN,EAAA,CAAAiB,iBAAA,CAAAF,MAAA,CAAAG,GAAA,CAAO;;;;;;;;;;;IAE3ElB,EAAA,CAAAC,cAAA,mBAA+F;IAAtCD,EAAA,CAAAmB,UAAA,mBAAAC,kFAAA;MAAApB,EAAA,CAAAqB,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAvB,EAAA,CAAAwB,aAAA;MAAA,OAASxB,EAAA,CAAAyB,WAAA,CAAAF,MAAA,CAAAG,MAAA,EAAQ;IAAA,EAAC;IAAoB1B,EAAA,CAAAG,YAAA,EAAW;IAC1GH,EAAA,CAAAC,cAAA,mBAAmI;IAA1GD,EAAA,CAAAmB,UAAA,mBAAAQ,kFAAA;MAAA3B,EAAA,CAAAqB,aAAA,CAAAC,GAAA;MAAA,MAAAM,MAAA,GAAA5B,EAAA,CAAAwB,aAAA;MAAA,OAASxB,EAAA,CAAAyB,WAAA,CAAAG,MAAA,CAAAC,QAAA,EAAU;IAAA,EAAC;IAC7C7B,EAAA,CAAAG,YAAA,EAAW;;;;IAFYH,EAAA,CAAAO,UAAA,cAAAuB,MAAA,CAAArB,aAAA,CAAAsB,KAAA,CAAiC;IACyC/B,EAAA,CAAAM,SAAA,GAAiC;IAAjCN,EAAA,CAAAgC,UAAA,CAAAhC,EAAA,CAAAiC,eAAA,IAAAC,GAAA,EAAiC;;;;;IApC1IlC,EAAA,CAAAC,cAAA,gBAAiF;IAQzDD,EAAA,CAAAmC,SAAA,gBAAwC;IAGhDnC,EAAA,CAAAG,YAAA,EAAM;IAENH,EAAA,CAAAC,cAAA,aAAqB;IAELD,EAAA,CAAAmC,SAAA,gBAAwC;IAGhDnC,EAAA,CAAAG,YAAA,EAAM;IAEtBH,EAAA,CAAAI,UAAA,KAAAgC,+CAAA,kBASM;IAGdpC,EAAA,CAAAG,YAAA,EAAO;IACPH,EAAA,CAAAI,UAAA,KAAAiC,+CAAA,kBAAyF;IACzFrC,EAAA,CAAAI,UAAA,KAAAkC,uDAAA,0BAIc;IAEdtC,EAAA,CAAAG,YAAA,EAAS;;;;IAnCcH,EAAA,CAAAM,SAAA,GAA2B;IAA3BN,EAAA,CAAAO,UAAA,cAAAgC,MAAA,CAAA9B,aAAA,CAA2B;IAIgDT,EAAA,CAAAM,SAAA,GAAmB;IAAnBN,EAAA,CAAAO,UAAA,oBAAmB;IAODP,EAAA,CAAAM,SAAA,GAAkB;IAAlBN,EAAA,CAAAO,UAAA,mBAAkB;IAIxHP,EAAA,CAAAM,SAAA,GAA8K;IAA9KN,EAAA,CAAAO,UAAA,UAAAgC,MAAA,CAAA9B,aAAA,CAAAC,QAAA,wCAAA6B,MAAA,CAAA9B,aAAA,CAAAC,QAAA,uBAAAC,MAAA,OAAA4B,MAAA,CAAA9B,aAAA,CAAAC,QAAA,wCAAA6B,MAAA,CAAA9B,aAAA,CAAAC,QAAA,uBAAA8B,KAAA,MAAAD,MAAA,CAAA9B,aAAA,CAAAC,QAAA,wCAAA6B,MAAA,CAAA9B,aAAA,CAAAC,QAAA,uBAAA+B,OAAA,GAA8K;IAatLzC,EAAA,CAAAM,SAAA,GAAY;IAAZN,EAAA,CAAAO,UAAA,SAAAgC,MAAA,CAAAG,MAAA,CAAY;;;;;IASV1C,EAAA,CAAAC,cAAA,qBAAyC;IAC9BD,EAAA,CAAAE,MAAA,iCAA0B;IAAAF,EAAA,CAAAG,YAAA,EAAI;IACjCH,EAAA,CAAAmC,SAAA,SAAI;IACJnC,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAE,MAAA,oCAA6B;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;ADpCpF,OAAM,MAAOwC,sBAAsB;EAWjCC,YACUC,WAA+B,EAC/BC,MAAc,EACdC,OAAoB,EACpBC,KAAqB,EACrBC,QAAkB;IAJlB,KAAAJ,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,QAAQ,GAARA,QAAQ;IAblB,KAAAC,aAAa,GAAmB,EAAE;IAClC,KAAAC,SAAS,GAAS,IAAI;IACtB,KAAAC,aAAa,GAAQ,CAAC;IACtB,KAAAC,WAAW,GAAW,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC1C,KAAArC,GAAG,GAAQ,EAAE;IACb,KAAAwB,MAAM,GAAS,KAAK;IACpB,KAAA1B,SAAS,GAAS,KAAK;IAiGvB,KAAAwC,QAAQ,GAAQ,MAAK,CAAG,CAAC;IACzB,KAAAC,SAAS,GAAQ,MAAK,CAAG,CAAC;IAzFxB;IACA,IAAI,CAAChD,aAAa,GAAG,IAAI,CAACoC,WAAW,CAACa,KAAK,CAAC;MAC1CC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC7D,UAAU,CAACa,QAAQ,CAAC,CAAC;MACvCiD,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAAC9D,UAAU,CAACa,QAAQ,EAAE,IAAI,CAACkD,aAAa,EAAE,CAAC;KAErE,CAAC;IAEF;IACA,IAAI,CAACZ,aAAa,CAACa,IAAI;IACrB;IACA,IAAI,CAACtD,aAAa,CAACuD,YAAY,CAACC,SAAS,CAACC,KAAK,IAAG;MAChD,IAAI,CAACV,QAAQ,CAACU,KAAK,CAAC;MACpB,IAAI,CAACT,SAAS,EAAE;IAClB,CAAC,CAAC,CACH;EACH;EACA;EACA,IAAIS,KAAKA,CAAA;IACP,MAAMC,OAAO,GAAyB;MACpCR,QAAQ,EAAE,IAAI,CAAClD,aAAa,CAACC,QAAQ,CAACiD,QAAQ,CAACO,KAAK;MACpDN,UAAU,EAAE,IAAI,CAACnD,aAAa,CAACC,QAAQ,CAACkD,UAAU,CAACM,KAAK;MACxDE,OAAO,EAAE,IAAI,CAAC3D,aAAa,CAACC,QAAQ,CAAC0D,OAAO,CAACF,KAAK;MAClDG,kBAAkB,EAAE,IAAI,CAAC5D,aAAa,CAACC,QAAQ,CAAC2D,kBAAkB,CAACH;KACpE;IACD,OAAOC,OAAO;EAChB;EAGAG,QAAQA,CAAA;IACN,IAAI,CAACtB,KAAK,CAACuB,WAAW,CAACN,SAAS,CAACO,MAAM,IAAG;MACxC,IAAIA,MAAM,CAACC,GAAG,IAAI,IAAI,EAAE;QACtB,IAAIC,OAAO,GAAUF,MAAM,CAACC,GAAG;QAC/B,IAAI,CAACrB,aAAa,GAAGuB,MAAM,CAACD,OAAO,CAACE,MAAM,CAACF,OAAO,CAACG,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,CAAC,CAAC;QAEvF,IAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC3B,WAAW,GAAG,IAAI,CAACD,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;UAC1E,IAAI,CAACD,SAAS,GAAE,KAAK;SACtB,MACG;UACF,IAAI,CAACA,SAAS,GAAC,IAAI;;OAItB,MACG;QACF,IAAI,CAACA,SAAS,GAAG,IAAI;;MAEvB,IAAIqB,MAAM,CAACS,IAAI,IAAG,IAAI,EAAC;QACnBC,UAAU,CAAC,MAAK;UACd,IAAI,CAACzE,aAAa,CAAC0E,UAAU,CAAC;YAC5BxB,QAAQ,EAAEa,MAAM,CAACS;WAClB,CAAC;QACJ,CAAC,EAAC,CAAC,CACJ;;IAEL,CAAC,CAAC;EACJ;EAEA,IAAIf,KAAKA,CAACA,KAA2B;IACnCgB,UAAU,CAAC,MAAK;MACd,IAAI,CAACzE,aAAa,CAAC0E,UAAU,CAAC;QAC5BxB,QAAQ,EAAEO,KAAK,CAACP,QAAQ;QACxBC,UAAU,EAAEM,KAAK,CAACN,UAAU;QAC5BQ,OAAO,EAAEF,KAAK,CAACE,OAAO;QACtBC,kBAAkB,EAAEH,KAAK,CAACG;OAC3B,CAAC;MACF,IAAI,CAACb,QAAQ,CAACU,KAAK,CAAC;MACpB,IAAI,CAACT,SAAS,EAAE;IAClB,CAAC,EAAE,CAAC,CAAC;EACP;EACA2B,UAAUA,CAAClB,KAAU;IACnB,IAAIA,KAAK,EAAE;MACT,IAAI,CAACA,KAAK,GAAGA,KAAK;;IAEpB,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,IAAI,CAACzD,aAAa,CAAC4E,KAAK,EAAE;;EAG9B;EACAC,gBAAgBA,CAACC,EAAO;IACtB,IAAI,CAAC/B,QAAQ,GAAG+B,EAAE;EACpB;EACAC,iBAAiBA,CAACD,EAAO;IACvB,IAAI,CAAC9B,SAAS,GAAG8B,EAAE;EACrB;EACAE,WAAWA,CAAA;IACT,IAAI,CAACvC,aAAa,CAACwC,OAAO,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,EAAE,CAAC;EAClD;EAKA9B,aAAaA,CAAA;IAEX,OAAQ+B,OAAwB,IAAuC;MACrE,IAAIA,OAAO,CAAC3B,KAAK,KAAK4B,SAAS,IAAID,OAAO,CAAC3B,KAAK,IAAI,IAAI,IAAI2B,OAAO,CAAC3B,KAAK,CAACY,MAAM,GAAG,CAAC,EAAE;QACpF,IAAI,CAACrE,aAAa,CAACC,QAAQ,CAAC,oBAAoB,CAAC,CAACqF,SAAS,CAAC,IAAI,CAAC;QACjE,IAAI,CAACtF,aAAa,CAACuF,oBAAoB,EAAE;QACzC,IAAI,CAACvF,aAAa,CAACwF,sBAAsB,EAAE;QAC3C,IAAI7B,OAAO,GAAG,IAAI,CAAC3D,aAAa,CAACC,QAAQ,CAAC,YAAY,CAAC,CAACwD,KAAK;QAC7D,IAAIE,OAAO,IAAI,IAAI,IAAIA,OAAO,KAAKyB,OAAO,CAAC3B,KAAK,EAAE;UAChD,OAAO,IAAI;SACZ,MACI;UACH,OAAO;YAAE,WAAW,EAAE;UAAI,CAAE;;;MAIhC,OAAO,IAAI;IACb,CAAC;EACH;EAEArC,QAAQA,CAAA;IACN,IAAI,CAACpB,aAAa,CAAC4E,KAAK,EAAE;EAC5B;EACA3D,MAAMA,CAAA;IACJ,IAAI,CAACR,GAAG,GAAC,EAAE;IACX,IAAI,IAAI,CAACT,aAAa,CAACsB,KAAK,EAAC;MAC3B,IAAImE,UAAU,GAAyB;QACrC,UAAU,EAAE,IAAI,CAACzF,aAAa,CAACC,QAAQ,CAACiD,QAAQ,CAACO,KAAK;QACtD,oBAAoB,EAAE,IAAI,CAACjB,QAAQ,CAACkD,SAAS,CAAC,IAAI7C,IAAI,EAAE,EAAE,YAAY,CAAC;QACvE,YAAY,EAAE,IAAI,CAAC7C,aAAa,CAACC,QAAQ,CAACkD,UAAU,CAACM,KAAK;QAC1D,SAAS,EAAE;OACZ;MACD,IAAI,CAACnB,OAAO,CAACqD,sBAAsB,CAACF,UAAU,CAAC,CAACjC,SAAS,CAAEoC,GAAG,IAAI;QAChE,IAAGA,GAAG,KAAK,IAAI,IAAIA,GAAG,CAACC,IAAI,IAAE,KAAK,EAAC;UACjC,IAAI,CAAC5D,MAAM,GAAC,IAAI;UAChB,IAAI,CAAC1B,SAAS,GAAE,IAAI;UACpB,IAAI,CAACE,GAAG,GAAG,+BAA+B;SAC3C,MAAI;UACH,IAAI,CAACwB,MAAM,GAAG,IAAI;UAClB,IAAI,CAAC1B,SAAS,GAAC,KAAK;UACpB,IAAI,CAACE,GAAG,GAAG,+BAA+B;;MAG9C,CAAC,EAAEqF,KAAK,IAAG;QACT,IAAI,CAAC7D,MAAM,GAAG,IAAI;QAClB,IAAI,CAAC1B,SAAS,GAAG,KAAK;QACtB,IAAI,CAACE,GAAG,GAAG,+BAA+B;MAC5C,CAAC,CAAC;;EAGN;EAAC,QAAAsF,CAAA,G;qBAhKU7D,sBAAsB,EAAA3C,EAAA,CAAAyG,iBAAA,CAAAC,EAAA,CAAAC,kBAAA,GAAA3G,EAAA,CAAAyG,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAA7G,EAAA,CAAAyG,iBAAA,CAAAK,EAAA,CAAAC,YAAA,GAAA/G,EAAA,CAAAyG,iBAAA,CAAAG,EAAA,CAAAI,cAAA,GAAAhH,EAAA,CAAAyG,iBAAA,CAAAQ,EAAA,CAAAC,QAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAtBxE,sBAAsB;IAAAyE,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCfnC1H,EAAA,CAAAC,cAAA,aAAuB;QAG6BD,EAAA,CAAAmC,SAAA,aACU;QACtCnC,EAAA,CAAAG,YAAA,EAAI;QACIH,EAAA,CAAAI,UAAA,IAAAwH,wCAAA,qBAwCS;QACT5H,EAAA,CAAAI,UAAA,IAAAyH,6CAAA,gCAAA7H,EAAA,CAAA8H,sBAAA,CAMc;QAG9B9H,EAAA,CAAAG,YAAA,EAAM;;;;QAlDiDH,EAAA,CAAAM,SAAA,GAAuB;QAAvBN,EAAA,CAAAO,UAAA,SAAAoH,GAAA,CAAAxE,SAAA,UAAuB,aAAA4E,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}