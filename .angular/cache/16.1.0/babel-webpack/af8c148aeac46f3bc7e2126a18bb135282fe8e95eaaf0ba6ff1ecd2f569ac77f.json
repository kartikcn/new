{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddSecurityGroupFormComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtext(1, \"Group name required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSecurityGroupFormComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddSecurityGroupFormComponent_tr_8_label_2_Template, 2, 0, \"label\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sgFormPanel.controls[\"groupName\"] == null ? null : ctx_r0.sgFormPanel.controls[\"groupName\"].errors.required);\n  }\n}\nexport let AddSecurityGroupFormComponent = /*#__PURE__*/(() => {\n  class AddSecurityGroupFormComponent {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n      this.subscriptions = [];\n      this.errorMsg = '';\n      this.tempTitle = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.sgFormPanel = this.formBuilder.group({\n        securityGroupId: [0],\n        groupName: ['', [Validators.required]],\n        description: ['']\n      });\n      this.subscriptions.push(this.sgFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    get value() {\n      const SgDetails = {\n        securityGroupId: this.sgFormPanel.controls.securityGroupId.value,\n        groupName: this.sgFormPanel.controls.groupName.value,\n        description: this.sgFormPanel.controls.description.value\n      };\n      return SgDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.sgFormPanel.patchValue({\n          securityGroupId: value.securityGroupId,\n          groupName: value.groupName,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.sgFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.sgFormPanel.valid ? null : {\n        sgFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddSecurityGroupFormComponent_Factory(t) {\n      return new (t || AddSecurityGroupFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddSecurityGroupFormComponent,\n      selectors: [[\"app-add-security-group-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n        multi: true\n      }])],\n      decls: 15,\n      vars: 3,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"groupName\", \"formControlName\", \"groupName\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddSecurityGroupFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Group Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddSecurityGroupFormComponent_tr_8_Template, 3, 1, \"tr\", 6);\n          i0.ɵɵelementStart(9, \"tr\")(10, \"td\", 2)(11, \"div\", 3)(12, \"label\", 7);\n          i0.ɵɵtext(13, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.sgFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].errors) && ((ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].dirty) || (ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].touched)));\n        }\n      },\n      dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.TrimInputDirective]\n    });\n  }\n  return AddSecurityGroupFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}