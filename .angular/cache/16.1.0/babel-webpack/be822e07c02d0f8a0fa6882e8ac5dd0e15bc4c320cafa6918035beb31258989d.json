{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    getALLEmp() {\n      throw new Error('Method not implemented.');\n    }\n    constructor(empService, empDetailService, authSrv) {\n      this.empService = empService;\n      this.empDetailService = empDetailService;\n      this.authSrv = authSrv;\n    }\n    getAllEmployeeList() {\n      return this.empService.getAll('em', 'getAllEm');\n    }\n    getAllEmployeeListPaginated(data) {\n      return this.empService.search('em', 'getAllEmPaginated', data);\n    }\n    getEmById(id) {\n      return this.empService.getSingleById('em', 'getEmById', id);\n    }\n    saveEmployee(data) {\n      return this.empService.add('em', 'saveEmp', data);\n    }\n    getAllUnAssignEmployees(emId) {\n      return this.empService.getAllById('em', 'getAllUnAssign', emId);\n    }\n    checkEmployeeExists(em_id) {\n      return this.empService.getSingleById('em', 'check', em_id);\n    }\n    getAllEmpByComp() {\n      return this.empService.getAll('em', 'getAllEmp');\n    }\n    getReportsByFilter(data) {\n      return this.empService.search('em', 'resportsByGroup', data);\n    }\n    getReportsByFilterPaginated(data) {\n      return this.empService.search('em', 'resportsByGroupPaginated', data);\n    }\n    getEmployeeByFilter(data) {\n      return this.empService.search('em', 'reportfilter', data);\n    }\n    getspaceutilization(data) {\n      return this.empService.search('em', 'spaceutilizationbygroup', data);\n    }\n    getALLmployeeByScroll(data) {\n      return this.empService.search(\"em\", \"getAllEmByScroll\", data);\n    }\n    static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i2.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}