{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddSecurityGroupFormComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtext(1, \"Group name required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSecurityGroupFormComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddSecurityGroupFormComponent_tr_8_label_2_Template, 2, 0, \"label\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sgFormPanel.controls[\"groupName\"] == null ? null : ctx_r0.sgFormPanel.controls[\"groupName\"].errors.required);\n  }\n}\nexport class AddSecurityGroupFormComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.subscriptions = [];\n    this.errorMsg = '';\n    this.tempTitle = '';\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.sgFormPanel = this.formBuilder.group({\n      securityGroupId: [0],\n      groupName: ['', [Validators.required]],\n      description: ['']\n    });\n    this.subscriptions.push(this.sgFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {}\n  get value() {\n    const SgDetails = {\n      securityGroupId: this.sgFormPanel.controls.securityGroupId.value,\n      groupName: this.sgFormPanel.controls.groupName.value,\n      description: this.sgFormPanel.controls.description.value\n    };\n    return SgDetails;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.sgFormPanel.patchValue({\n        securityGroupId: value.securityGroupId,\n        groupName: value.groupName,\n        description: value.description\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.sgFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  validate(_) {\n    return this.sgFormPanel.valid ? null : {\n      sgFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function AddSecurityGroupFormComponent_Factory(t) {\n    return new (t || AddSecurityGroupFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddSecurityGroupFormComponent,\n    selectors: [[\"app-add-security-group-form\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n      multi: true\n    }])],\n    decls: 15,\n    vars: 3,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"groupName\", \"formControlName\", \"groupName\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n    template: function AddSecurityGroupFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Group Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(8, AddSecurityGroupFormComponent_tr_8_Template, 3, 1, \"tr\", 6);\n        i0.ɵɵelementStart(9, \"tr\")(10, \"td\", 2)(11, \"div\", 3)(12, \"label\", 7);\n        i0.ɵɵtext(13, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"textarea\", 8);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.sgFormPanel);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].errors) && ((ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].dirty) || (ctx.sgFormPanel.controls[\"groupName\"] == null ? null : ctx.sgFormPanel.controls[\"groupName\"].touched)));\n      }\n    },\n    dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.TrimInputDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AddSecurityGroupFormComponent_tr_8_label_2_Template","ɵɵadvance","ɵɵproperty","ctx_r0","sgFormPanel","controls","errors","required","AddSecurityGroupFormComponent","constructor","formBuilder","subscriptions","errorMsg","tempTitle","onChange","onTouched","group","securityGroupId","groupName","description","push","valueChanges","subscribe","value","ngOnInit","SgDetails","setTimeout","patchValue","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","forEach","s","unsubscribe","ɵɵdirectiveInject","i1","UntypedFormBuilder","_2","selectors","inputs","isNew","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddSecurityGroupFormComponent_Template","rf","ctx","ɵɵelement","AddSecurityGroupFormComponent_tr_8_Template","dirty","touched"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\security-group\\widgets\\add-security-group\\add-security-group-form.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\security-group\\widgets\\add-security-group\\add-security-group-form.component.html"],"sourcesContent":["import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, UntypedFormGroup, UntypedFormBuilder, Validators, UntypedFormControl} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-add-security-group-form',\n  templateUrl: './add-security-group-form.component.html',\n  styleUrls: ['./add-security-group-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddSecurityGroupFormComponent),\n      multi: true\n    }\n  ]\n})\nexport class AddSecurityGroupFormComponent implements OnInit {\n  sgFormPanel: UntypedFormGroup;\n  subscriptions: Subscription[] = []\n  errorMsg: string = '';\n  tempTitle: string = '';\n  @Input() isNew!: boolean;\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n  ) {\n    this.sgFormPanel = this.formBuilder.group({\n      securityGroupId:[0,],\n      groupName: ['', [Validators.required]],\n      description: ['',],\n    });\n    this.subscriptions.push(\n      this.sgFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n  }\n\n  get value(): any {\n    const SgDetails: any = {\n      securityGroupId: this.sgFormPanel.controls.securityGroupId.value,\n      groupName: this.sgFormPanel.controls.groupName.value,\n      description: this.sgFormPanel.controls.description.value,\n    };\n    return SgDetails;\n  }\n  \n  set value(value: any) {\n    setTimeout(() => {\n      this.sgFormPanel.patchValue({\n        securityGroupId: value.securityGroupId,\n        groupName: value.groupName,\n        description: value.description,\n      });\n    });\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  writeValue(value: any) {\n\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.sgFormPanel.reset();\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  validate(_: UntypedFormControl) {\n    return this.sgFormPanel.valid ? null : { sgFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n","<form [formGroup]=\"sgFormPanel\">\n    <table width=\"100%\">\n        <tr>\n            <td style=\"width: 25%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable control-label'>Group Name</label>\n                    <input type=\"text\" [readonly]=\"!isNew\" class=\"form-control\" name=\"groupName\" formControlName=\"groupName\" maxlength=\"32\"\n                        appTrimInput>\n                </div>\n            </td>\n        </tr>\n        <tr *ngIf=\"(sgFormPanel.controls['groupName']?.errors && (sgFormPanel.controls['groupName']?.dirty || sgFormPanel.controls['groupName']?.touched))\">\n            <td style=\"width:25%\">\n                <label *ngIf=\"sgFormPanel.controls['groupName']?.errors.required\" class='form-field-lable'\n                    style=\"color:red;\">Group name required</label>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"width: 25%\">\n                <div class=\"input-label-custom \">\n                    <label class='form-field-lable'>Description</label>\n                    <textarea class=\"form-control note-border\" name=\"description\" formControlName=\"description\" rows=\"3\" maxlength=\"128\"\n                        appTrimInput></textarea>\n                </div>\n            </td>\n        </tr>\n    </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}