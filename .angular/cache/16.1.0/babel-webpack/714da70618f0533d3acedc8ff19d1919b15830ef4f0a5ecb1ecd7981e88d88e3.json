{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { forkJoin, of } from 'rxjs';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../../services/arrangement.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"ngx-toastr\";\nimport * as i7 from \"@angular/material/legacy-card\";\nimport * as i8 from \"primeng/button\";\nimport * as i9 from \"primeng/toast\";\nimport * as i10 from \"primeng/confirmdialog\";\nimport * as i11 from \"../add-arrangement/add-arrangement.component\";\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nexport let AddEditArrangementComponent = /*#__PURE__*/(() => {\n  class AddEditArrangementComponent {\n    constructor(data, formBuilder, authSrv, arrangeSrv, messageService, dialog, dialogRef, confirmationService, toastr) {\n      this.data = data;\n      this.formBuilder = formBuilder;\n      this.authSrv = authSrv;\n      this.arrangeSrv = arrangeSrv;\n      this.messageService = messageService;\n      this.dialog = dialog;\n      this.dialogRef = dialogRef;\n      this.confirmationService = confirmationService;\n      this.toastr = toastr;\n      this.title = 'Add';\n      this.checkTitle = false;\n      this.isNew = true;\n      this.isEdit = true;\n      this.frmArrangementDetail = this.formBuilder.group({\n        arrangementFormPanel: []\n      });\n    }\n    ngOnInit() {\n      this.isEdit = true;\n      this.isNew = true;\n      if (this.data != null) {\n        this.loadData();\n        this.disableButton();\n        this.isNewRecord();\n      }\n    }\n    disableButton() {\n      if (this.data.isEdit != null && !this.data.isEdit) {\n        this.isEdit = false;\n      }\n    }\n    isNewRecord() {\n      if (this.data.newRecord != null) {\n        this.isNew = this.data.newRecord;\n        if (!this.isNew) {\n          this.title = 'Edit';\n        }\n      }\n    }\n    loadData() {\n      let calls = [];\n      if (this.data.arrangementId != null && this.data.arrangementId > 0) {\n        calls.push(this.arrangeSrv.getArrangementByType(this.data.arrangementType));\n      } else {\n        calls.push(of(null));\n      }\n      forkJoin(...calls).subscribe(results => {\n        if (results[0] == null) {\n          var arrangeData = {\n            \"arrangementId\": 0,\n            \"arrangementType\": \"\",\n            \"description\": \"\",\n            \"highlightColor\": \"#a6a6a6\"\n          };\n          setTimeout(() => {\n            this.frmArrangementDetail.patchValue({\n              arrangementFormPanel: arrangeData\n            });\n          }, 0);\n        } else {\n          setTimeout(() => {\n            this.frmArrangementDetail.patchValue({\n              arrangementFormPanel: results[0]\n            });\n          }, 0);\n        }\n      });\n    }\n    saveRecords() {\n      if (this.frmArrangementDetail.valid) {\n        const DataRecord = this.frmArrangementDetail.controls.arrangementFormPanel.value;\n        this.arrangeSrv.updateArrangement(DataRecord).subscribe(res => {\n          if (res.code == 200) {\n            this.messageService.add({\n              key: 'arrangeMessage',\n              severity: 'success',\n              summary: 'Arrangement saved',\n              detail: 'The arrangement is saved successfully'\n            });\n            setTimeout(() => {\n              this.dialogRef.close(true);\n            }, 1000);\n          } else {\n            this.messageService.add({\n              key: 'arrangeMessage',\n              severity: 'error',\n              summary: 'error',\n              detail: res.text\n            });\n          }\n        });\n      }\n    }\n    onCancel() {\n      this.confirmationService.confirm({\n        message: UtilConstant.CANCEL_Msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.dialogRef.close('cancel');\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AddEditArrangementComponent_Factory(t) {\n      return new (t || AddEditArrangementComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.ArrangementService), i0.ɵɵdirectiveInject(i4.MessageService), i0.ɵɵdirectiveInject(i5.MatDialog), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(i4.ConfirmationService), i0.ɵɵdirectiveInject(i6.ToastrService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditArrangementComponent,\n      selectors: [[\"app-add-edit-arrangement\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 12,\n      vars: 7,\n      consts: [[\"mat-dialog-title\", \"\", 1, \"mat-dialog-title-ext\"], [1, \"mat-typography\", \"mat-dialog-content-ext\"], [3, \"formGroup\"], [\"formControlName\", \"arrangementFormPanel\", 3, \"isNew\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"], [\"key\", \"arrangeMessage\", \"position\", \"top-right\"], [\"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"]],\n      template: function AddEditArrangementComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"form\", 2)(4, \"mat-card\")(5, \"mat-card-content\");\n          i0.ɵɵelement(6, \"app-add-arrangement\", 3);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(7, \"mat-dialog-actions\", 4)(8, \"p-button\", 5);\n          i0.ɵɵlistener(\"click\", function AddEditArrangementComponent_Template_p_button_click_8_listener() {\n            return ctx.saveRecords();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"p-button\", 6);\n          i0.ɵɵlistener(\"click\", function AddEditArrangementComponent_Template_p_button_click_9_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(10, \"p-toast\", 7)(11, \"p-confirmDialog\", 8);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.title, \" Arrangement\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.frmArrangementDetail);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"isNew\", ctx.isNew);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.frmArrangementDetail.valid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c0));\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatDialogTitle, i5.MatDialogContent, i5.MatDialogActions, i7.MatLegacyCard, i7.MatLegacyCardContent, i8.Button, i9.Toast, i10.ConfirmDialog, i11.AddArrangementComponent],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px;background-color:#fff!important}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;background-color:#fff!important}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}.btn-filter[_ngcontent-%COMP%]{margin-left:4px;margin-right:5px;width:50px;margin-top:17px}.btn-ggb-orange[_ngcontent-%COMP%]{width:90px!important}.btn-ggb-default-custom[_ngcontent-%COMP%]{margin:16px!important}.form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddEditArrangementComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}