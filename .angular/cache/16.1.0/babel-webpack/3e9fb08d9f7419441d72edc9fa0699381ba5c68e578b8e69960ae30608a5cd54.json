{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"primeng/dialog\";\nimport * as i3 from \"../../../../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nimport * as i4 from \"@swimlane/ngx-charts\";\nfunction DashboardStatusPieChartComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 4);\n    i0.ɵɵtext(1, \"Request List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardStatusPieChartComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r1.detailsPopUpData)(\"isEscalatedData\", ctx_r1.viewForEscalation);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"66vw\",\n    \"overflow-x\": \"scroll\"\n  };\n};\nexport let DashboardStatusPieChartComponent = /*#__PURE__*/(() => {\n  class DashboardStatusPieChartComponent {\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.data = [];\n      this.labels = [];\n      this.detailsPopUpData = [];\n      this.showDetailsPopUp = false;\n      this.viewForEscalation = true;\n      this.basicOptions = {\n        title: {\n          display: false,\n          text: 'Bar Chart',\n          fontSize: 18\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Status',\n              fontStyle: 'bold'\n            },\n            ticks: {\n              display: true\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Request Count',\n              fontStyle: 'bold'\n            },\n            ticks: {\n              beginAtZero: true,\n              stepSize: 5,\n              display: true\n            },\n            grid: {\n              display: false\n            }\n          }\n        },\n        tooltips: {\n          enabled: true,\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            label: function (tooltipItem) {\n              return \"Requests: \" + tooltipItem.formattedValue;\n            }\n          }\n        },\n        responsive: true,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutBounce'\n        }\n      };\n      this.pieContent = [];\n      this.customColor = {\n        domain: ['#000000']\n      };\n      this.view = [730, 242];\n    }\n    ngOnInit() {}\n    loadChartData(statusChartData) {\n      this.data = [statusChartData.requested.data.length, statusChartData.approved.data.length, statusChartData.rejected.data.length, statusChartData.inProcess.data.length, statusChartData.onHoldForAccess.data.length, statusChartData.onHoldForParts.data.length, statusChartData.onHoldForLabour.data.length, statusChartData.completed.data.length, statusChartData.close.data.length, statusChartData.cancelled.data.length];\n      this.setChartData(statusChartData);\n    }\n    setChartData(statusChartData) {\n      let initialChartData = {\n        labels: this.labels,\n        datasets: [{\n          label: \"\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1\n        }]\n      };\n      const dynamicColors = [];\n      for (let key in statusChartData) {\n        if (statusChartData.hasOwnProperty(key)) {\n          let color = '';\n          do {\n            color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color));\n          {\n            // Regenerate color if it is white\n            color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          }\n          ;\n          dynamicColors.push(color);\n        }\n      }\n      Object.values(statusChartData).forEach((each, index) => {\n        if (each.data.length > 0) {\n          // initialChartData.labels.push(each.label);\n          this.labels.push(each.label);\n          initialChartData.datasets[0].data.push(each.data.length);\n          //initialChartData.datasets[0].label = each.label;\n          initialChartData.datasets[0].backgroundColor.push(dynamicColors[index % dynamicColors.length]);\n          initialChartData.datasets[0].borderColor.push(dynamicColors[index % dynamicColors.length]);\n        }\n      });\n      //this.basicOptions.scales.xAxes[0].scaleLabel.labelString = 'Status';\n      this.chartData = initialChartData;\n    }\n    isWhiteColorShade(color) {\n      // Extract RGB values from the color string\n      const rgbValues = color.match(/\\d+/g);\n      const r = parseInt(rgbValues[0]);\n      const g = parseInt(rgbValues[1]);\n      const b = parseInt(rgbValues[2]);\n      // Check if all RGB values are close to 255 (white)\n      const threshold = 50; // Adjust this threshold as needed\n      const average = (r + g + b) / 3;\n      return average > threshold;\n    }\n    onClickBarChart(event) {\n      this.viewForEscalation = true;\n      this.detailsPopUpData = [];\n      // const selectedStatus = this.labels[event.element.index];\n      switch (event.label) {\n        case 'Requested':\n          this.detailsPopUpData.push(...this.statusChartData.requested.data);\n          this.viewForEscalation = false;\n          break;\n        case 'Approved':\n          this.detailsPopUpData.push(...this.statusChartData.approved.data);\n          break;\n        case 'Rejected':\n          this.detailsPopUpData.push(...this.statusChartData.rejected.data);\n          break;\n        case 'In Process':\n          this.detailsPopUpData.push(...this.statusChartData.inProcess.data);\n          break;\n        case 'On Hold For Access':\n          this.detailsPopUpData.push(...this.statusChartData.onHoldForAccess.data);\n          break;\n        case 'On Hold For Parts':\n          this.detailsPopUpData.push(...this.statusChartData.onHoldForParts.data);\n          break;\n        case 'On Hold For Labour':\n          this.detailsPopUpData.push(...this.statusChartData.onHoldForLabour.data);\n          break;\n        case 'Completed':\n          this.detailsPopUpData.push(...this.statusChartData.completed.data);\n          break;\n        case 'Close':\n          this.detailsPopUpData.push(...this.statusChartData.close.data);\n          break;\n        case 'Cancelled':\n          this.detailsPopUpData.push(...this.statusChartData.cancelled.data);\n          break;\n        default:\n          break;\n      }\n      this.showDetailsPopUp = true;\n    }\n    loadPieData(statusChartData) {\n      this.generateColors(statusChartData);\n      this.pieContent = [];\n      Object.values(statusChartData).forEach((each, index) => {\n        let name = each.label;\n        let value = each.data.length;\n        if (value > 0) {\n          let dataobj = {\n            name: name,\n            value: value\n          };\n          this.pieContent.push(dataobj);\n        }\n      });\n      this.cdr.detectChanges();\n    }\n    generateColors(statusChartData) {\n      const dynamicColors = [];\n      Object.values(statusChartData).forEach((each, index) => {\n        if (each.data.length > 0) {\n          let color = '';\n          do {\n            color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          } while (color === 'rgba(255, 255, 255, 1)' || this.isWhiteColorShade(color));\n          {\n            // Regenerate color if it is white\n            color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          }\n          ;\n          dynamicColors.push(color);\n        }\n      });\n      this.customColor = {\n        domain: [...dynamicColors]\n      };\n    }\n    static #_ = this.ɵfac = function DashboardStatusPieChartComponent_Factory(t) {\n      return new (t || DashboardStatusPieChartComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardStatusPieChartComponent,\n      selectors: [[\"app-dashboard-status-pie-chart\"]],\n      inputs: {\n        statusChartData: \"statusChartData\"\n      },\n      decls: 4,\n      vars: 11,\n      consts: [[3, \"results\", \"scheme\", \"view\", \"select\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [2, \"margin\", \"0px\"], [3, \"data\", \"isEscalatedData\"]],\n      template: function DashboardStatusPieChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ngx-charts-advanced-pie-chart\", 0);\n          i0.ɵɵlistener(\"select\", function DashboardStatusPieChartComponent_Template_ngx_charts_advanced_pie_chart_select_0_listener($event) {\n            return ctx.onClickBarChart($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(1, \"p-dialog\", 1);\n          i0.ɵɵlistener(\"visibleChange\", function DashboardStatusPieChartComponent_Template_p_dialog_visibleChange_1_listener($event) {\n            return ctx.showDetailsPopUp = $event;\n          });\n          i0.ɵɵtemplate(2, DashboardStatusPieChartComponent_ng_template_2_Template, 2, 0, \"ng-template\", 2);\n          i0.ɵɵtemplate(3, DashboardStatusPieChartComponent_ng_template_3_Template, 1, 2, \"ng-template\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"results\", ctx.pieContent)(\"scheme\", ctx.customColor)(\"view\", ctx.view);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(10, _c0));\n          i0.ɵɵproperty(\"visible\", ctx.showDetailsPopUp)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i1.PrimeTemplate, i2.Dialog, i3.AddTableComponent, i4.AdvancedPieChartComponent],\n      styles: [\"[_nghost-%COMP%]     .total-label{margin-top:10px;margin-bottom:10px!important;font-size:18px!important}[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{margin-top:0;margin-bottom:3px;font-size:18px!important}[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items{white-space:pre-wrap;overflow:hidden;display:grid;grid-template-columns:repeat(3,1fr);grid-gap:10px}[_nghost-%COMP%]     .advanced-pie-legend .total-value{font-size:24px!important}[_nghost-%COMP%]     .advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:18px!important}[_nghost-%COMP%]     .advanced-pie-legend-wrapper{overflow:scroll!important}[_nghost-%COMP%]     .advanced-pie-legend{top:58%!important}\"]\n    });\n  }\n  return DashboardStatusPieChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}