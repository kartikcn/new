{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/shared.service\";\nexport class AuthGuard {\n  constructor(authService, router, ss) {\n    this.authService = authService;\n    this.router = router;\n    this.ss = ss;\n  }\n  canActivate(next, state) {\n    const url = state.url;\n    return this.checkLogin(url);\n  }\n  canActivateChild(next, state) {\n    const url = state.url;\n    return this.checkLogin(url);\n  }\n  canLoad(route, segments) {\n    return true;\n  }\n  canDeactivate(component, route, state) {\n    let url = state.url;\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n  checkLogin(url) {\n    // Return true if logged in otherwise return false\n    if (this.authService.isLoggedIn()) {\n      // setTimeout(() => {\n      //   this.ss.change(this.authService.isLoggedIn());\n      // });\n      return true;\n    }\n    this.authService.redirectUrl = url;\n    // Return login url with where it from \n    return this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: url\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SharedService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","ss","canActivate","next","state","url","checkLogin","canActivateChild","canLoad","route","segments","canDeactivate","component","isLoggedIn","redirectUrl","navigate","queryParams","returnUrl","_","i0","ɵɵinject","i1","AuthService","i2","Router","i3","SharedService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\helper\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { SharedService } from '../services/shared.service';\n\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthGuard  {\n  constructor(private authService: AuthService, private router: Router,\n    private ss: SharedService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const url: string = state.url;\n    return this.checkLogin(url);\n  }\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const url: string = state.url;\n    return this.checkLogin(url);\n  }\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n\n  canDeactivate(component: CanComponentDeactivate,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot) {\n\n    let url: string = state.url;\n\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n  checkLogin(url: string) {\n    // Return true if logged in otherwise return false\n    if (this.authService.isLoggedIn()) {\n      // setTimeout(() => {\n      //   this.ss.change(this.authService.isLoggedIn());\n      // });\n      return true;\n    }\n    this.authService.redirectUrl = url;\n    // Return login url with where it from \n    return this.router.navigate(['/login'], { queryParams: { returnUrl: url } });\n  }\n}\n\n\n"],"mappings":";;;;AAeA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc,EAC1DC,EAAiB;IADP,KAAAF,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAClD,KAAAC,EAAE,GAAFA,EAAE;EAAmB;EAC/BC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAC1B,MAAMC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAC7B,OAAO,IAAI,CAACC,UAAU,CAACD,GAAG,CAAC;EAC7B;EACAE,gBAAgBA,CACdJ,IAA4B,EAC5BC,KAA0B;IAC1B,MAAMC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAC7B,OAAO,IAAI,CAACC,UAAU,CAACD,GAAG,CAAC;EAC7B;EACAG,OAAOA,CACLC,KAAY,EACZC,QAAsB;IACtB,OAAO,IAAI;EACb;EAEAC,aAAaA,CAACC,SAAiC,EAC7CH,KAA6B,EAC7BL,KAA0B;IAE1B,IAAIC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAE3B,OAAOO,SAAS,CAACD,aAAa,GAAGC,SAAS,CAACD,aAAa,EAAE,GAAG,IAAI;EACnE;EAEAL,UAAUA,CAACD,GAAW;IACpB;IACA,IAAI,IAAI,CAACN,WAAW,CAACc,UAAU,EAAE,EAAE;MACjC;MACA;MACA;MACA,OAAO,IAAI;;IAEb,IAAI,CAACd,WAAW,CAACe,WAAW,GAAGT,GAAG;IAClC;IACA,OAAO,IAAI,CAACL,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEZ;MAAG;IAAE,CAAE,CAAC;EAC9E;EAAC,QAAAa,CAAA,G;qBAzCUrB,SAAS,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAT9B,SAAS;IAAA+B,OAAA,EAAT/B,SAAS,CAAAgC,IAAA;IAAAC,UAAA,EAHR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}