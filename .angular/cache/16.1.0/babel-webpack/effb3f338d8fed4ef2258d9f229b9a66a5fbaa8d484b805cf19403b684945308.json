{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzStringTemplateOutletDirective {\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n  recreateView() {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n  }\n  updateContext() {\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n    const oldCtx = this.embeddedViewRef.context;\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n  constructor(viewContainer, templateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n  ngOnChanges(changes) {\n    const {\n      nzStringTemplateOutletContext,\n      nzStringTemplateOutlet\n    } = changes;\n    const shouldRecreateView = () => {\n      let shouldOutletRecreate = false;\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n      const hasContextShapeChanged = ctxChange => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n          return false;\n        } else {\n          return true;\n        }\n      };\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n    if (nzStringTemplateOutlet) {\n      this.context.$implicit = nzStringTemplateOutlet.currentValue;\n    }\n    const recreateView = shouldRecreateView();\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n  static #_ = this.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n    return new (t || NzStringTemplateOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NzStringTemplateOutletDirective,\n    selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n    inputs: {\n      nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n      nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n    },\n    exportAs: [\"nzStringTemplateOutlet\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\nclass NzStringTemplateOutletContext {}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n  static #_ = this.ɵfac = function NzOutletModule_Factory(t) {\n    return new (t || NzOutletModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzOutletModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzStringTemplateOutletDirective],\n      declarations: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };","map":{"version":3,"names":["CommonModule","i0","TemplateRef","Directive","Input","NgModule","NzStringTemplateOutletDirective","ngTemplateContextGuard","_dir","_ctx","recreateView","viewContainer","clear","isTemplateRef","nzStringTemplateOutlet","templateRef","embeddedViewRef","createEmbeddedView","nzStringTemplateOutletContext","context","updateContext","newCtx","oldCtx","propName","Object","keys","constructor","NzStringTemplateOutletContext","ngOnChanges","changes","shouldRecreateView","shouldOutletRecreate","firstChange","isPreviousOutletTemplate","previousValue","isCurrentOutletTemplate","currentValue","hasContextShapeChanged","ctxChange","prevCtxKeys","currCtxKeys","length","indexOf","shouldContextRecreate","$implicit","_","ɵfac","NzStringTemplateOutletDirective_Factory","t","ɵɵdirectiveInject","ViewContainerRef","_2","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","args","selector","NzOutletModule","NzOutletModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["C:/Users/Manav Gupta/Downloads/fms/fms/frontend/fms_frontend/node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-outlet.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzStringTemplateOutletDirective {\n    static ngTemplateContextGuard(_dir, _ctx) {\n        return true;\n    }\n    recreateView() {\n        this.viewContainer.clear();\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef);\n        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n    updateContext() {\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n        const oldCtx = this.embeddedViewRef.context;\n        if (newCtx) {\n            for (const propName of Object.keys(newCtx)) {\n                oldCtx[propName] = newCtx[propName];\n            }\n        }\n    }\n    constructor(viewContainer, templateRef) {\n        this.viewContainer = viewContainer;\n        this.templateRef = templateRef;\n        this.embeddedViewRef = null;\n        this.context = new NzStringTemplateOutletContext();\n        this.nzStringTemplateOutletContext = null;\n        this.nzStringTemplateOutlet = null;\n    }\n    ngOnChanges(changes) {\n        const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n        const shouldRecreateView = () => {\n            let shouldOutletRecreate = false;\n            if (nzStringTemplateOutlet) {\n                if (nzStringTemplateOutlet.firstChange) {\n                    shouldOutletRecreate = true;\n                }\n                else {\n                    const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n                    const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n                    shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n                }\n            }\n            const hasContextShapeChanged = (ctxChange) => {\n                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n                const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n                if (prevCtxKeys.length === currCtxKeys.length) {\n                    for (const propName of currCtxKeys) {\n                        if (prevCtxKeys.indexOf(propName) === -1) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            };\n            const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n            return shouldContextRecreate || shouldOutletRecreate;\n        };\n        if (nzStringTemplateOutlet) {\n            this.context.$implicit = nzStringTemplateOutlet.currentValue;\n        }\n        const recreateView = shouldRecreateView();\n        if (recreateView) {\n            /** recreate view when context shape or outlet change **/\n            this.recreateView();\n        }\n        else {\n            /** update context **/\n            this.updateContext();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzStringTemplateOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.3\", type: NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: { nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\", nzStringTemplateOutlet: \"nzStringTemplateOutlet\" }, exportAs: [\"nzStringTemplateOutlet\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzStringTemplateOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzStringTemplateOutlet]',\n                    exportAs: 'nzStringTemplateOutlet'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { nzStringTemplateOutletContext: [{\n                type: Input\n            }], nzStringTemplateOutlet: [{\n                type: Input\n            }] } });\nclass NzStringTemplateOutletContext {\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzOutletModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.3\", ngImport: i0, type: NzOutletModule, declarations: [NzStringTemplateOutletDirective], imports: [CommonModule], exports: [NzStringTemplateOutletDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzOutletModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzOutletModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [NzStringTemplateOutletDirective],\n                    declarations: [NzStringTemplateOutletDirective]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}