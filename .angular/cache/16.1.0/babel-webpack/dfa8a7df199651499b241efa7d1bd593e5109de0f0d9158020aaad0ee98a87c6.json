{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { BuildingFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport { FloorFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/FloorFilterInputDTO.model';\nimport { RoomFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/RoomFilterInputDTO.model';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/background-loc/services/bl.service\";\nimport * as i3 from \"@ng-select/ng-select\";\nexport let LinkNewLocationPlanFormComponent = /*#__PURE__*/(() => {\n  class LinkNewLocationPlanFormComponent {\n    constructor(formBuilder, blSrv) {\n      this.formBuilder = formBuilder;\n      this.blSrv = blSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.enumAllRm = [];\n      this.enumRm = [];\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      this.limitRm = 0;\n      this.offsetRm = 0;\n      this.limitEm = 0;\n      this.offsetEm = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.selectedBl = {};\n      this.selectedFl = {};\n      this.selectedRm = {};\n      this.selectedEm = {};\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.locationPlanFormPanel = this.formBuilder.group({\n        planLocEqId: [null],\n        planId: [null],\n        blId: [null, [Validators.required]],\n        flId: [null],\n        rmId: [null]\n      });\n      this.subscriptions.push(this.locationPlanFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    onSelectBlCode($event) {\n      setTimeout(() => {\n        this.locationPlanFormPanel.patchValue({\n          flId: null,\n          rmId: null\n        });\n      }, 10);\n      if ($event.blId != null) {\n        this.selectedBl = $event;\n        this.selectedFl = {};\n      } else {\n        this.selectedBl = {};\n        this.selectedFl = {};\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.flId != null) {\n        this.selectedFl = event;\n        const blData = {\n          blId: event.blId,\n          blNameString: event.blNameString,\n          site: null\n        };\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n        setTimeout(() => {\n          this.locationPlanFormPanel.patchValue({\n            blId: event.blId,\n            rmId: null\n          });\n          this.selectedRm = {};\n        }, 10);\n      } else {\n        this.selectedFl = {};\n        this.selectedRm = {};\n      }\n    }\n    onSelectRmCode($event) {\n      if ($event.rmId != null) {\n        this.selectedRm = $event;\n        const blData = {\n          blId: $event.blId,\n          blNameString: $event.blNameString,\n          site: null\n        };\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n        const flData = {\n          flId: $event.flId,\n          flNameString: $event.flNameString,\n          blId: $event.blId,\n          blNameString: $event.blNameString\n        };\n        this.selectedFl = flData;\n        this.updateFlList(flData);\n        setTimeout(() => {\n          this.locationPlanFormPanel.patchValue({\n            blId: $event.blId,\n            flId: $event.flId\n          });\n        }, 10);\n      } else {}\n    }\n    get value() {\n      const blDetails = {\n        planLocEqId: this.locationPlanFormPanel.controls.planLocEqId.value,\n        planId: this.locationPlanFormPanel.controls.planId.value,\n        blId: this.locationPlanFormPanel.controls.blId.value,\n        flId: this.locationPlanFormPanel.controls.flId.value,\n        rmId: this.locationPlanFormPanel.controls.rmId.value\n      };\n      return blDetails;\n    }\n    set value(value) {\n      if (value.blId !== null) {\n        this.getBlById(value.blId);\n        if (value.flId != null) {\n          this.getFlById(value.flId);\n        }\n        if (value.rmId != null) {\n          this.getRmById(value.rmId);\n        }\n      }\n      setTimeout(() => {\n        this.locationPlanFormPanel.patchValue({\n          planLocEqId: value.planLocEqId,\n          planId: value.planId,\n          blId: value.blId,\n          flId: value.flId,\n          rmId: value.rmId\n        });\n        if (value.blId != null && value.flId != null && value.rmId != null) {\n          setTimeout(() => {\n            this.locationPlanFormPanel.patchValue({\n              rmId: value.rmId\n            });\n          }, 100);\n        }\n      }, 100);\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.locationPlanFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.locationPlanFormPanel.valid ? null : {\n        locationPlanFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    getBlById(blId) {\n      this.blSrv.getBlById(blId).subscribe(res => {\n        const blData = this.createBlData(res.bl);\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n      });\n    }\n    getFlById(flId) {\n      this.blSrv.getFlById(flId).subscribe(res => {\n        const flData = this.createFlData(res);\n        this.selectedFl = flData;\n        this.updateFlList(flData);\n      });\n    }\n    getRmById(rmId) {\n      this.blSrv.getRmById(rmId).subscribe(res => {\n        const rmData = this.createRmData(res.rm);\n        this.selectedRm = rmData;\n        this.updateRmList(rmData);\n      });\n    }\n    createBlData(bl) {\n      const blData = {\n        blId: bl.blId,\n        blNameString: bl.blName != null ? bl.blCode + \" - \" + bl.blName : bl.blCode,\n        site: null\n      };\n      return blData;\n    }\n    createFlData(fl) {\n      const flData = {\n        flId: fl.flId,\n        flNameString: fl.flName != null ? fl.flCode + \" - \" + fl.flName : fl.flCode,\n        blId: fl.blId,\n        blNameString: fl.bl.blName != null ? fl.bl.blCode + \" - \" + fl.bl.blName : fl.bl.blCode\n      };\n      return flData;\n    }\n    createRmData(rm) {\n      const rmData = {\n        rmId: rm.rmId,\n        rmNameString: rm.rmName != null ? rm.rmCode + \" - \" + rm.rmName : rm.rmCode,\n        flId: rm.flId,\n        blId: rm.blId\n      };\n      return rmData;\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blSrv.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.updateBlList(this.selectedBl);\n      });\n    }\n    scrollToEndFl() {\n      this.offsetFl = this.limitFl;\n      this.limitFl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitFl;\n      this.filterCriteria.offset = this.offsetFl;\n      this.blSrv.getALLFloorByScroll(this.filterCriteria).subscribe(res => {\n        this.enumFL = res;\n        this.updateFlList(this.selectedFl);\n      });\n    }\n    scrollToEndRm() {\n      this.offsetRm = this.limitRm;\n      this.limitRm += this.scrollLimit;\n      this.filterCriteria.limit = this.limitRm;\n      this.filterCriteria.offset = this.offsetRm;\n      this.blSrv.getALLRoomByScroll(this.filterCriteria).subscribe(res => {\n        this.enumRm = res;\n        this.updateRmList(this.selectedRm);\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    searchFl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"flName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndFl();\n    }\n    searchRm(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"rmName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndRm();\n    }\n    updateBlList(blData) {\n      if (blData.blId) {\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateFlList(flData) {\n      if (flData.flId) {\n        this.enumFL = this.enumFL.filter(t => t.flId !== flData.flId);\n        this.enumFL = this.enumFL.filter(t => t.flId !== null);\n        this.enumFL.unshift(flData);\n      }\n      this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateRmList(rmData) {\n      if (rmData.rmId) {\n        this.enumRm = this.enumRm.filter(t => t.rmId !== rmData.rmId);\n        this.enumRm = this.enumRm.filter(t => t.rmId !== null);\n        this.enumRm.unshift(rmData);\n      }\n      this.enumRm.unshift(new RoomFilterInputDTO(null, 'Make a selection', null, null));\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndBl();\n    }\n    onOpenFl() {\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      if (this.selectedBl.blId) {\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: this.selectedBl.blId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndFl();\n    }\n    onOpenRm() {\n      this.limitRm = 0;\n      this.offsetRm = 0;\n      if (this.selectedFl.flId) {\n        this.filterCriteria = {\n          fieldName: \"fl.flId\",\n          value: this.selectedFl.flId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else if (this.selectedBl.blId) {\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: this.selectedBl.blId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndRm();\n    }\n    static #_ = this.ɵfac = function LinkNewLocationPlanFormComponent_Factory(t) {\n      return new (t || LinkNewLocationPlanFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BuildingService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LinkNewLocationPlanFormComponent,\n      selectors: [[\"app-link-new-location-plan-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => LinkNewLocationPlanFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => LinkNewLocationPlanFormComponent),\n        multi: true\n      }])],\n      decls: 20,\n      vars: 10,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\", \"open\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"flId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"open\", \"change\", \"scrollToEnd\", \"search\"], [\"appendTo\", \"body\", \"formControlName\", \"rmId\", \"bindLabel\", \"rmNameString\", \"bindValue\", \"rmId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"open\", \"scrollToEnd\", \"search\"]],\n      template: function LinkNewLocationPlanFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Building\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"ng-select\", 5);\n          i0.ɵɵlistener(\"change\", function LinkNewLocationPlanFormComponent_Template_ng_select_change_7_listener($event) {\n            return ctx.onSelectBlCode($event);\n          })(\"scrollToEnd\", function LinkNewLocationPlanFormComponent_Template_ng_select_scrollToEnd_7_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function LinkNewLocationPlanFormComponent_Template_ng_select_search_7_listener($event) {\n            return ctx.searchBl($event);\n          })(\"open\", function LinkNewLocationPlanFormComponent_Template_ng_select_open_7_listener() {\n            return ctx.onOpenBl();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 3)(11, \"label\", 6);\n          i0.ɵɵtext(12, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"ng-select\", 7);\n          i0.ɵɵlistener(\"open\", function LinkNewLocationPlanFormComponent_Template_ng_select_open_13_listener() {\n            return ctx.onOpenFl();\n          })(\"change\", function LinkNewLocationPlanFormComponent_Template_ng_select_change_13_listener($event) {\n            return ctx.onSelectFlCode($event);\n          })(\"scrollToEnd\", function LinkNewLocationPlanFormComponent_Template_ng_select_scrollToEnd_13_listener() {\n            return ctx.scrollToEndFl();\n          })(\"search\", function LinkNewLocationPlanFormComponent_Template_ng_select_search_13_listener($event) {\n            return ctx.searchFl($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 2)(16, \"div\", 3)(17, \"label\", 6);\n          i0.ɵɵtext(18, \"Room\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"ng-select\", 8);\n          i0.ɵɵlistener(\"change\", function LinkNewLocationPlanFormComponent_Template_ng_select_change_19_listener($event) {\n            return ctx.onSelectRmCode($event);\n          })(\"open\", function LinkNewLocationPlanFormComponent_Template_ng_select_open_19_listener() {\n            return ctx.onOpenRm();\n          })(\"scrollToEnd\", function LinkNewLocationPlanFormComponent_Template_ng_select_scrollToEnd_19_listener() {\n            return ctx.scrollToEndRm();\n          })(\"search\", function LinkNewLocationPlanFormComponent_Template_ng_select_search_19_listener($event) {\n            return ctx.searchRm($event);\n          });\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.locationPlanFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRm)(\"searchable\", true);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.NgSelectComponent]\n    });\n  }\n  return LinkNewLocationPlanFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}