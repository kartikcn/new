{"ast":null,"code":"import * as CryptoJS from \"crypto-js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/tokenStorage.service\";\n//import * as CryptoJS from \"crypto\";\n//import * as AES from \"crypto\";\nexport class LogintrythatComponent {\n  // param1: string;\n  // param2: string;\n  constructor(\n  // private fb: UntypedFormBuilder,\n  // private authService: AuthService,\n  route, router, tokenStorage // private ss: SharedService, // private userSrv: UsersService, // private spinner: NgxSpinnerService\n  ) {\n    this.route = route;\n    this.router = router;\n    this.tokenStorage = tokenStorage;\n    this.TOKEN_KEY = \"auth-token\";\n    this.USER_KEY = \"auth-user\";\n    // this.route.queryParams.subscribe((params) => {\n    //   this.param1 = params[\"param1\"];\n    //   this.param2 = params[\"param2\"];\n    // });\n    // Initialization of Reactive Form elements\n    // this.loginForm = this.fb.group({\n    //   username: [\"\", [Validators.required, Validators.min(18)]],\n    //   password: [\"\", Validators.required],\n    // });\n    // this.resetForm = this.fb.group({\n    //   userEmail: [\"\", [Validators.required, Validators.email]],\n    // });\n  }\n\n  ngOnInit() {\n    // this.route.queryParams\n    //   .filter((params) => params.order)\n    //   .subscribe((params) => {\n    //     console.log(params); // { order: \"popular\" }\n    //     this.order = params.order;\n    //     console.log(this.order); // popular\n    //   });\n    // const queryParams = this.route.snapshot.queryParams;\n    // let ciphertext = queryParams.split(\"=\")[1];\n    // //queryParams.get(token).split(\",\");\n    // console.log(\"Query Params:\", ciphertext);\n    // console.log(\"Query Params:\", queryParams[\"token\"]);\n    // const keyExists = \"token\" in this.route.snapshot.queryParams;\n    // console.log(\"keyExists\", keyExists);\n    // if (keyExists) {\n    //   console.log(\"Value:fsgsdfasdf\");\n    //   const value = this.route.snapshot.queryParams[\"token\"];\n    //   console.log(\"Value:\", value);\n    // }\n    this.route.queryParams.subscribe(params => {\n      console.log(\"params\", params[\"token\"]);\n      let ciphertext = params[\"token\"].split(\"=\")[1];\n      //let ciphertext = params[\"token\"];\n      let bytes = CryptoJS.AES.decrypt(ciphertext, \"my-secret-key@123\");\n      //console.log(\"params\", bytes);\n      let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      console.log(\"==>decryptedData\", decryptedData);\n      let res = decryptedData;\n      if (res) {\n        console.log(res);\n        this.tokenStorage.saveToken(\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTVNARk1TLkNPTSIsImlhdCI6MTcxMzk2NjUxOSwiZXhwIjoxNzE0MDUyOTE5fQ.vcF9tiYdRmfHvPxRWZTqET50RZKGYufWGYhUbPZbbZuRKhoZMQud82mt4ITynF0O8NjvipkmVnAX12JDbBQF_Q\");\n        this.tokenStorage.saveUser(res);\n        this.route.navigate;\n        // this.route.navigate([\"/team/113/user/ganesh\"]);\n      } else {\n        console.log(\"res not found\");\n      }\n      //console.log(\"==>decryptedData\", res);\n      // var data = {\n      //   token:\n      //     \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTVNARk1TLkNPTSIsImlhdCI6MTcxMzk2NjUxOSwiZXhwIjoxNzE0MDUyOTE5fQ.vcF9tiYdRmfHvPxRWZTqET50RZKGYufWGYhUbPZbbZuRKhoZMQud82mt4ITynF0O8NjvipkmVnAX12JDbBQF_Q\",\n      //   type: \"Bearer\",\n      //   username: \"FMS@FMS.COM\",\n      //   userId: 11,\n      //   emId: 98,\n      //   userRoleId: 1,\n      //   technicianId: null,\n      // };\n    });\n    // console.log(\"queryParams\", this.route.snapshot.queryParams);\n    // let ciphertext = this.route.snapshot.queryParams.split(\"=\")[1];\n    // let bytes = CryptoJS.AES.decrypt(ciphertext, \"my-secret-key@123\");\n    // let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    // console.log(\"==>decryptedData\", decryptedData);\n    // let res = decryptedData;\n    // this.route.queryParams\n    //   .pipe(filter((queryParam) => queryParam instanceof NavigationEnd))\n    //   .subscribe(() => {\n    //     console.log(\"test-==============\", this.route);\n    //     console.log(\"this.route.root\", this.route.root);\n    //   });\n  }\n  static #_ = this.ɵfac = function LogintrythatComponent_Factory(t) {\n    return new (t || LogintrythatComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.TokenStorageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LogintrythatComponent,\n    selectors: [[\"app-logintrythat\"]],\n    decls: 2,\n    vars: 0,\n    template: function LogintrythatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"logintrythat works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["CryptoJS","LogintrythatComponent","constructor","route","router","tokenStorage","TOKEN_KEY","USER_KEY","ngOnInit","queryParams","subscribe","params","console","log","ciphertext","split","bytes","AES","decrypt","decryptedData","JSON","parse","toString","enc","Utf8","res","saveToken","saveUser","navigate","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","TokenStorageService","_2","selectors","decls","vars","template","LogintrythatComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/home/admin7/Documents/fms_frontend/src/app/logintrythat/logintrythat.component.ts","/home/admin7/Documents/fms_frontend/src/app/logintrythat/logintrythat.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { TokenStorageService } from \"../services/tokenStorage.service\";\nimport { ActivatedRoute, NavigationEnd, Router } from \"@angular/router\";\nimport * as CryptoJS from \"crypto-js\";\n//import { filter } from \"rxjs/operators\";\nimport { filter } from \"rxjs/operators\";\nimport { __values } from \"tslib\";\n//import * as CryptoJS from \"crypto\";\n//import * as AES from \"crypto\";\n\n@Component({\n  selector: \"app-logintrythat\",\n  templateUrl: \"./logintrythat.component.html\",\n  styleUrls: [\"./logintrythat.component.scss\"],\n})\nexport class LogintrythatComponent {\n  TOKEN_KEY = \"auth-token\";\n  USER_KEY = \"auth-user\";\n  // param1: string;\n  // param2: string;\n  constructor(\n    // private fb: UntypedFormBuilder,\n    // private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private tokenStorage: TokenStorageService // private ss: SharedService, // private userSrv: UsersService, // private spinner: NgxSpinnerService\n  ) {\n    // this.route.queryParams.subscribe((params) => {\n    //   this.param1 = params[\"param1\"];\n    //   this.param2 = params[\"param2\"];\n    // });\n    // Initialization of Reactive Form elements\n    // this.loginForm = this.fb.group({\n    //   username: [\"\", [Validators.required, Validators.min(18)]],\n    //   password: [\"\", Validators.required],\n    // });\n    // this.resetForm = this.fb.group({\n    //   userEmail: [\"\", [Validators.required, Validators.email]],\n    // });\n  }\n  ngOnInit() {\n    // this.route.queryParams\n    //   .filter((params) => params.order)\n    //   .subscribe((params) => {\n    //     console.log(params); // { order: \"popular\" }\n\n    //     this.order = params.order;\n\n    //     console.log(this.order); // popular\n    //   });\n    // const queryParams = this.route.snapshot.queryParams;\n    // let ciphertext = queryParams.split(\"=\")[1];\n    // //queryParams.get(token).split(\",\");\n    // console.log(\"Query Params:\", ciphertext);\n    // console.log(\"Query Params:\", queryParams[\"token\"]);\n\n    // const keyExists = \"token\" in this.route.snapshot.queryParams;\n    // console.log(\"keyExists\", keyExists);\n    // if (keyExists) {\n    //   console.log(\"Value:fsgsdfasdf\");\n    //   const value = this.route.snapshot.queryParams[\"token\"];\n    //   console.log(\"Value:\", value);\n    // }\n\n    this.route.queryParams.subscribe((params) => {\n      console.log(\"params\", params[\"token\"]);\n      let ciphertext = params[\"token\"].split(\"=\")[1];\n      //let ciphertext = params[\"token\"];\n      let bytes = CryptoJS.AES.decrypt(ciphertext, \"my-secret-key@123\");\n      //console.log(\"params\", bytes);\n      let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      console.log(\"==>decryptedData\", decryptedData);\n      let res = decryptedData;\n      if (res) {\n        console.log(res);\n        this.tokenStorage.saveToken(\n          \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTVNARk1TLkNPTSIsImlhdCI6MTcxMzk2NjUxOSwiZXhwIjoxNzE0MDUyOTE5fQ.vcF9tiYdRmfHvPxRWZTqET50RZKGYufWGYhUbPZbbZuRKhoZMQud82mt4ITynF0O8NjvipkmVnAX12JDbBQF_Q\"\n        );\n        this.tokenStorage.saveUser(res);\n        this.route.navigate;\n        // this.route.navigate([\"/team/113/user/ganesh\"]);\n      } else {\n        console.log(\"res not found\");\n      }\n\n      //console.log(\"==>decryptedData\", res);\n\n      // var data = {\n      //   token:\n      //     \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTVNARk1TLkNPTSIsImlhdCI6MTcxMzk2NjUxOSwiZXhwIjoxNzE0MDUyOTE5fQ.vcF9tiYdRmfHvPxRWZTqET50RZKGYufWGYhUbPZbbZuRKhoZMQud82mt4ITynF0O8NjvipkmVnAX12JDbBQF_Q\",\n      //   type: \"Bearer\",\n      //   username: \"FMS@FMS.COM\",\n      //   userId: 11,\n      //   emId: 98,\n      //   userRoleId: 1,\n      //   technicianId: null,\n      // };\n    });\n\n    // console.log(\"queryParams\", this.route.snapshot.queryParams);\n    // let ciphertext = this.route.snapshot.queryParams.split(\"=\")[1];\n    // let bytes = CryptoJS.AES.decrypt(ciphertext, \"my-secret-key@123\");\n    // let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    // console.log(\"==>decryptedData\", decryptedData);\n    // let res = decryptedData;\n\n    // this.route.queryParams\n    //   .pipe(filter((queryParam) => queryParam instanceof NavigationEnd))\n    //   .subscribe(() => {\n    //     console.log(\"test-==============\", this.route);\n    //     console.log(\"this.route.root\", this.route.root);\n    //   });\n  }\n  //window.sessionStorage.setItem(TOKEN_KEY, token);\n}\n","<p>logintrythat works!</p>\n"],"mappings":"AAGA,OAAO,KAAKA,QAAQ,MAAM,WAAW;;;;AAIrC;AACA;AAOA,OAAM,MAAOC,qBAAqB;EAGhC;EACA;EACAC;EACE;EACA;EACQC,KAAqB,EACrBC,MAAc,EACdC,YAAiC,CAAC;EAAA,E;IAFlC,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IATtB,KAAAC,SAAS,GAAG,YAAY;IACxB,KAAAC,QAAQ,GAAG,WAAW;IAUpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EACAC,QAAQA,CAAA;IACN;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,IAAI,CAACL,KAAK,CAACM,WAAW,CAACC,SAAS,CAAEC,MAAM,IAAI;MAC1CC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC,OAAO,CAAC,CAAC;MACtC,IAAIG,UAAU,GAAGH,MAAM,CAAC,OAAO,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC9C;MACA,IAAIC,KAAK,GAAGhB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAACJ,UAAU,EAAE,mBAAmB,CAAC;MACjE;MACA,IAAIK,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAACM,QAAQ,CAACtB,QAAQ,CAACuB,GAAG,CAACC,IAAI,CAAC,CAAC;MACjEZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,aAAa,CAAC;MAC9C,IAAIM,GAAG,GAAGN,aAAa;MACvB,IAAIM,GAAG,EAAE;QACPb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;QAChB,IAAI,CAACpB,YAAY,CAACqB,SAAS,CACzB,wLAAwL,CACzL;QACD,IAAI,CAACrB,YAAY,CAACsB,QAAQ,CAACF,GAAG,CAAC;QAC/B,IAAI,CAACtB,KAAK,CAACyB,QAAQ;QACnB;OACD,MAAM;QACLhB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;;MAG9B;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;EACF;EAAC,QAAAgB,CAAA,G;qBAjGU5B,qBAAqB,EAAA6B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAE,MAAA,GAAAJ,EAAA,CAAAC,iBAAA,CAAAI,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAArBpC,qBAAqB;IAAAqC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCflCb,EAAA,CAAAe,cAAA,QAAG;QAAAf,EAAA,CAAAgB,MAAA,0BAAmB;QAAAhB,EAAA,CAAAiB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}