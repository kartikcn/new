{"ast":null,"code":"import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport * as i5 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction NzProgressComponent_ng_template_0_span_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzType\", ctx_r5.icon);\n  }\n}\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formatter_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", formatter_r9(ctx_r8.nzPercent), \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template, 2, 1, \"ng-container\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r7.formatter)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r7.nzPercent));\n  }\n}\nfunction NzProgressComponent_ng_template_0_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtemplate(1, NzProgressComponent_ng_template_0_span_0_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵtemplate(2, NzProgressComponent_ng_template_0_span_0_ng_template_2_Template, 1, 4, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r4.status === \"exception\" || ctx_r4.status === \"success\") && !ctx_r4.nzFormat)(\"ngIfElse\", _r6);\n  }\n}\nfunction NzProgressComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_Template, 4, 2, \"span\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.nzShowInfo);\n  }\n}\nfunction NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(4);\n    i0.ɵɵstyleProp(\"width\", ctx_r14.nzSuccessPercent, \"%\")(\"border-radius\", ctx_r14.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"height\", ctx_r14.strokeWidth, \"px\");\n  }\n}\nfunction NzProgressComponent_div_3_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14);\n    i0.ɵɵelement(2, \"div\", 15);\n    i0.ɵɵtemplate(3, NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template, 1, 6, \"div\", 16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r12.nzPercent, \"%\")(\"border-radius\", ctx_r12.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"background\", !ctx_r12.isGradient ? ctx_r12.nzStrokeColor : null)(\"background-image\", ctx_r12.isGradient ? ctx_r12.lineGradient : null)(\"height\", ctx_r12.strokeWidth, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.nzSuccessPercent || ctx_r12.nzSuccessPercent === 0);\n  }\n}\nfunction NzProgressComponent_div_3_ng_container_1_ng_template_2_Template(rf, ctx) {}\nfunction NzProgressComponent_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_div_1_Template, 4, 11, \"div\", 11);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_ng_container_1_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r10.isSteps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\nfunction NzProgressComponent_div_3_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 20);\n  }\n  if (rf & 2) {\n    const step_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", step_r17);\n  }\n}\nfunction NzProgressComponent_div_3_div_2_ng_template_2_Template(rf, ctx) {}\nfunction NzProgressComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_div_2_div_1_Template, 1, 1, \"div\", 19);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.steps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\nfunction NzProgressComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_Template, 3, 2, \"ng-container\", 2);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_Template, 3, 2, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.isSteps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isSteps);\n  }\n}\nfunction NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n  if (rf & 2) {\n    const i_r23 = ctx.$implicit;\n    i0.ɵɵattribute(\"offset\", i_r23.offset)(\"stop-color\", i_r23.color);\n  }\n}\nfunction NzProgressComponent_div_4__svg_defs_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\")(1, \"linearGradient\", 24);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template, 1, 2, \"stop\", 25);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"gradient-\" + ctx_r19.gradientId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r19.circleGradient);\n  }\n}\nfunction NzProgressComponent_div_4__svg_path_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 26);\n  }\n  if (rf & 2) {\n    const p_r24 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", p_r24.strokePathStyle);\n    i0.ɵɵattribute(\"d\", ctx_r20.pathString)(\"stroke-linecap\", ctx_r20.nzStrokeLinecap)(\"stroke\", p_r24.stroke)(\"stroke-width\", ctx_r20.nzPercent ? ctx_r20.strokeWidth : 0);\n  }\n}\nfunction NzProgressComponent_div_4_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n  }\n}\nfunction NzProgressComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 21);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2_Template, 3, 2, \"defs\", 2);\n    i0.ɵɵelement(3, \"path\", 22);\n    i0.ɵɵtemplate(4, NzProgressComponent_div_4__svg_path_4_Template, 1, 5, \"path\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, NzProgressComponent_div_4_ng_template_5_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r3.nzWidth, \"px\")(\"height\", ctx_r3.nzWidth, \"px\")(\"font-size\", ctx_r3.nzWidth * 0.15 + 6, \"px\");\n    i0.ɵɵclassProp(\"ant-progress-circle-gradient\", ctx_r3.isGradient);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isGradient);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r3.trailPathStyle);\n    i0.ɵɵattribute(\"stroke-width\", ctx_r3.strokeWidth)(\"d\", ctx_r3.pathString);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.progressCirclePath)(\"ngForTrackBy\", ctx_r3.trackByFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\nfunction stripPercentToNumber(percent) {\n  return +percent.replace('%', '');\n}\nconst sortGradient = gradients => {\n  let tempArr = [];\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\nconst handleCircleGradient = strokeColor => sortGradient(strokeColor).map(({\n  key,\n  value\n}) => ({\n  offset: `${key}%`,\n  color: value\n}));\nconst handleLinearGradient = strokeColor => {\n  const {\n    from = '#1890ff',\n    to = '#1890ff',\n    direction = 'to right',\n    ...rest\n  } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest).map(({\n      key,\n      value\n    }) => `${value} ${key}%`).join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nconst statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\nconst defaultFormatter = p => `${p}%`;\nclass NzProgressComponent {\n  get formatter() {\n    return this.nzFormat || defaultFormatter;\n  }\n  get status() {\n    return this.nzStatus || this.inferredStatus;\n  }\n  get strokeWidth() {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n  get isCircleStyle() {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n  constructor(cdr, nzConfigService, directionality) {\n    this.cdr = cdr;\n    this.nzConfigService = nzConfigService;\n    this.directionality = directionality;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.nzShowInfo = true;\n    this.nzWidth = 132;\n    this.nzStrokeColor = undefined;\n    this.nzSize = 'default';\n    this.nzPercent = 0;\n    this.nzStrokeWidth = undefined;\n    this.nzGapDegree = undefined;\n    this.nzType = 'line';\n    this.nzGapPosition = 'top';\n    this.nzStrokeLinecap = 'round';\n    this.nzSteps = 0;\n    this.steps = [];\n    /** Gradient style when `nzType` is `line`. */\n    this.lineGradient = null;\n    /** If user uses gradient color. */\n    this.isGradient = false;\n    /** If the linear progress is a step progress. */\n    this.isSteps = false;\n    /**\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\n     * define `<linearGradient>`.\n     */\n    this.gradientId = gradientIdSeed++;\n    /** Paths to rendered in the template. */\n    this.progressCirclePath = [];\n    this.trailPathStyle = null;\n    this.dir = 'ltr';\n    this.trackByFn = index => `${index}`;\n    this.cachedStatus = 'normal';\n    this.inferredStatus = 'normal';\n    this.destroy$ = new Subject();\n  }\n  ngOnChanges(changes) {\n    const {\n      nzSteps,\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent,\n      nzStrokeWidth\n    } = changes;\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if (isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100 || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n    if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n      this.updateIcon();\n    }\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n    if (nzPercent || nzSteps || nzStrokeWidth) {\n      this.isSteps = this.nzSteps > 0;\n      if (this.isSteps) {\n        this.getSteps();\n      }\n    }\n  }\n  ngOnInit() {\n    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.updateIcon();\n      this.setStrokeColor();\n      this.getCirclePaths();\n    });\n    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n    this.dir = this.directionality.value;\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  updateIcon() {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n  /**\n   * Calculate step render configs.\n   */\n  getSteps() {\n    const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n    const steps = [];\n    for (let i = 0; i < this.nzSteps; i++) {\n      let color;\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      steps.push(stepStyle);\n    }\n    this.steps = steps;\n  }\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  getCirclePaths() {\n    if (!this.isCircleStyle) {\n      return;\n    }\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent];\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n    // Calculate styles for each path.\n    this.progressCirclePath = values.map((value, index) => {\n      const isSuccessPercent = values.length === 2 && index === 0;\n      return {\n        stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n        strokePathStyle: {\n          stroke: !this.isGradient ? isSuccessPercent ? statusColorMap.get('success') : this.nzStrokeColor : null,\n          transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n          strokeDasharray: `${(value || 0) / 100 * (len - gapDegree)}px ${len}px`,\n          strokeDashoffset: `-${gapDegree / 2}px`\n        }\n      };\n    }).reverse();\n  }\n  setStrokeColor() {\n    const color = this.nzStrokeColor;\n    const isGradient = this.isGradient = !!color && typeof color !== 'string';\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n  static #_ = this.ɵfac = function NzProgressComponent_Factory(t) {\n    return new (t || NzProgressComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NzProgressComponent,\n    selectors: [[\"nz-progress\"]],\n    inputs: {\n      nzShowInfo: \"nzShowInfo\",\n      nzWidth: \"nzWidth\",\n      nzStrokeColor: \"nzStrokeColor\",\n      nzSize: \"nzSize\",\n      nzFormat: \"nzFormat\",\n      nzSuccessPercent: \"nzSuccessPercent\",\n      nzPercent: \"nzPercent\",\n      nzStrokeWidth: \"nzStrokeWidth\",\n      nzGapDegree: \"nzGapDegree\",\n      nzStatus: \"nzStatus\",\n      nzType: \"nzType\",\n      nzGapPosition: \"nzGapPosition\",\n      nzStrokeLinecap: \"nzStrokeLinecap\",\n      nzSteps: \"nzSteps\"\n    },\n    exportAs: [\"nzProgress\"],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 17,\n    consts: [[\"progressInfoTemplate\", \"\"], [3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"ant-progress-inner\", 3, \"width\", \"height\", \"fontSize\", \"ant-progress-circle-gradient\", 4, \"ngIf\"], [\"class\", \"ant-progress-text\", 4, \"ngIf\"], [1, \"ant-progress-text\"], [4, \"ngIf\", \"ngIfElse\"], [\"formatTemplate\", \"\"], [\"nz-icon\", \"\", 3, \"nzType\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"class\", \"ant-progress-steps-outer\", 4, \"ngIf\"], [\"class\", \"ant-progress-outer\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [1, \"ant-progress-outer\"], [1, \"ant-progress-inner\"], [1, \"ant-progress-bg\"], [\"class\", \"ant-progress-success-bg\", 3, \"width\", \"border-radius\", \"height\", 4, \"ngIf\"], [1, \"ant-progress-success-bg\"], [1, \"ant-progress-steps-outer\"], [\"class\", \"ant-progress-steps-item\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-progress-steps-item\", 3, \"ngStyle\"], [\"viewBox\", \"0 0 100 100\", 1, \"ant-progress-circle\"], [\"stroke\", \"#f3f3f3\", \"fill-opacity\", \"0\", 1, \"ant-progress-circle-trail\", 3, \"ngStyle\"], [\"class\", \"ant-progress-circle-path\", \"fill-opacity\", \"0\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"x1\", \"100%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"0%\", 3, \"id\"], [4, \"ngFor\", \"ngForOf\"], [\"fill-opacity\", \"0\", 1, \"ant-progress-circle-path\", 3, \"ngStyle\"]],\n    template: function NzProgressComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, NzProgressComponent_div_3_Template, 3, 2, \"div\", 2);\n        i0.ɵɵtemplate(4, NzProgressComponent_div_4_Template, 6, 15, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"ant-progress-line\", ctx.nzType === \"line\")(\"ant-progress-small\", ctx.nzSize === \"small\")(\"ant-progress-default\", ctx.nzSize === \"default\")(\"ant-progress-show-info\", ctx.nzShowInfo)(\"ant-progress-circle\", ctx.isCircleStyle)(\"ant-progress-steps\", ctx.isSteps)(\"ant-progress-rtl\", ctx.dir === \"rtl\");\n        i0.ɵɵproperty(\"ngClass\", \"ant-progress ant-progress-status-\" + ctx.status);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.nzType === \"line\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isCircleStyle);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.NgTemplateOutlet, i3.NgStyle, i4.NzIconDirective, i5.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzSize\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzPercent\", void 0);\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSteps\", void 0);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-progress',\n      exportAs: 'nzProgress',\n      preserveWhitespaces: false,\n      template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <span nz-icon [nzType]=\"icon\"></span>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.NzConfigService\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzShowInfo: [{\n      type: Input\n    }],\n    nzWidth: [{\n      type: Input\n    }],\n    nzStrokeColor: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzFormat: [{\n      type: Input\n    }],\n    nzSuccessPercent: [{\n      type: Input\n    }],\n    nzPercent: [{\n      type: Input\n    }],\n    nzStrokeWidth: [{\n      type: Input\n    }],\n    nzGapDegree: [{\n      type: Input\n    }],\n    nzStatus: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }],\n    nzGapPosition: [{\n      type: Input\n    }],\n    nzStrokeLinecap: [{\n      type: Input\n    }],\n    nzSteps: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzProgressModule {\n  static #_ = this.ɵfac = function NzProgressModule_Factory(t) {\n    return new (t || NzProgressModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NzProgressModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NzProgressComponent],\n      declarations: [NzProgressComponent],\n      imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzProgressComponent, NzProgressModule };","map":{"version":3,"names":["i2","BidiModule","i3","CommonModule","i0","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","NgModule","i5","NzOutletModule","i4","NzIconModule","__decorate","Subject","takeUntil","i1","WithConfig","isNotNil","InputNumber","NzProgressComponent_ng_template_0_span_0_ng_container_1_Template","rf","ctx","ɵɵelementContainerStart","ɵɵelement","ɵɵelementContainerEnd","ctx_r5","ɵɵnextContext","ɵɵadvance","ɵɵproperty","icon","NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template","ɵɵtext","formatter_r9","$implicit","ctx_r8","ɵɵtextInterpolate1","nzPercent","_c0","a0","NzProgressComponent_ng_template_0_span_0_ng_template_2_Template","ɵɵtemplate","ctx_r7","formatter","ɵɵpureFunction1","NzProgressComponent_ng_template_0_span_0_Template","ɵɵelementStart","ɵɵtemplateRefExtractor","ɵɵelementEnd","_r6","ɵɵreference","ctx_r4","status","nzFormat","NzProgressComponent_ng_template_0_Template","ctx_r1","nzShowInfo","NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template","ctx_r14","ɵɵstyleProp","nzSuccessPercent","nzStrokeLinecap","strokeWidth","NzProgressComponent_div_3_ng_container_1_div_1_Template","ctx_r12","isGradient","nzStrokeColor","lineGradient","NzProgressComponent_div_3_ng_container_1_ng_template_2_Template","NzProgressComponent_div_3_ng_container_1_Template","ctx_r10","_r0","isSteps","NzProgressComponent_div_3_div_2_div_1_Template","step_r17","NzProgressComponent_div_3_div_2_ng_template_2_Template","NzProgressComponent_div_3_div_2_Template","ctx_r11","steps","NzProgressComponent_div_3_Template","ctx_r2","NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template","ɵɵnamespaceSVG","i_r23","ɵɵattribute","offset","color","NzProgressComponent_div_4__svg_defs_2_Template","ctx_r19","gradientId","circleGradient","NzProgressComponent_div_4__svg_path_4_Template","p_r24","ctx_r20","strokePathStyle","pathString","stroke","NzProgressComponent_div_4_ng_template_5_Template","NzProgressComponent_div_4_Template","ctx_r3","nzWidth","ɵɵclassProp","trailPathStyle","progressCirclePath","trackByFn","stripPercentToNumber","percent","replace","sortGradient","gradients","tempArr","Object","keys","forEach","key","value","formatKey","isNaN","push","sort","a","b","handleCircleGradient","strokeColor","map","handleLinearGradient","from","to","direction","rest","length","sortedGradients","join","gradientIdSeed","NZ_CONFIG_MODULE_NAME","statusIconNameMap","Map","statusColorMap","defaultFormatter","p","NzProgressComponent","nzStatus","inferredStatus","nzStrokeWidth","nzType","nzSize","isCircleStyle","constructor","cdr","nzConfigService","directionality","_nzModuleName","undefined","nzGapDegree","nzGapPosition","nzSteps","dir","index","cachedStatus","destroy$","ngOnChanges","changes","fillAll","parseInt","toString","updateIcon","setStrokeColor","getCirclePaths","getSteps","ngOnInit","getConfigChangeEventForComponent","pipe","subscribe","change","detectChanges","ngOnDestroy","next","complete","ret","get","current","Math","floor","stepWidth","i","stepStyle","backgroundColor","width","height","values","radius","gapPosition","len","PI","gapDegree","beginPositionX","beginPositionY","endPositionX","endPositionY","strokeDasharray","strokeDashoffset","transition","isSuccessPercent","reverse","_","ɵfac","NzProgressComponent_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","NzConfigService","Directionality","_2","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","NzProgressComponent_Template","dependencies","NgClass","NgForOf","NgIf","NgTemplateOutlet","NgStyle","NzIconDirective","NzStringTemplateOutletDirective","encapsulation","changeDetection","prototype","ngDevMode","ɵsetClassMetadata","args","OnPush","None","selector","preserveWhitespaces","decorators","NzProgressModule","NzProgressModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["C:/Users/Manav Gupta/Downloads/fms/fms/frontend/fms_frontend/node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-progress.mjs"],"sourcesContent":["import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport * as i5 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __decorate } from 'tslib';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction stripPercentToNumber(percent) {\n    return +percent.replace('%', '');\n}\nconst sortGradient = (gradients) => {\n    let tempArr = [];\n    Object.keys(gradients).forEach(key => {\n        const value = gradients[key];\n        const formatKey = stripPercentToNumber(key);\n        if (!isNaN(formatKey)) {\n            tempArr.push({\n                key: formatKey,\n                value\n            });\n        }\n    });\n    tempArr = tempArr.sort((a, b) => a.key - b.key);\n    return tempArr;\n};\nconst handleCircleGradient = (strokeColor) => sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\nconst handleLinearGradient = (strokeColor) => {\n    const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n    if (Object.keys(rest).length !== 0) {\n        const sortedGradients = sortGradient(rest)\n            .map(({ key, value }) => `${value} ${key}%`)\n            .join(', ');\n        return `linear-gradient(${direction}, ${sortedGradients})`;\n    }\n    return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([\n    ['success', 'check'],\n    ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n    ['normal', '#108ee9'],\n    ['exception', '#ff5500'],\n    ['success', '#87d068']\n]);\nconst defaultFormatter = (p) => `${p}%`;\nclass NzProgressComponent {\n    get formatter() {\n        return this.nzFormat || defaultFormatter;\n    }\n    get status() {\n        return this.nzStatus || this.inferredStatus;\n    }\n    get strokeWidth() {\n        return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n    }\n    get isCircleStyle() {\n        return this.nzType === 'circle' || this.nzType === 'dashboard';\n    }\n    constructor(cdr, nzConfigService, directionality) {\n        this.cdr = cdr;\n        this.nzConfigService = nzConfigService;\n        this.directionality = directionality;\n        this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n        this.nzShowInfo = true;\n        this.nzWidth = 132;\n        this.nzStrokeColor = undefined;\n        this.nzSize = 'default';\n        this.nzPercent = 0;\n        this.nzStrokeWidth = undefined;\n        this.nzGapDegree = undefined;\n        this.nzType = 'line';\n        this.nzGapPosition = 'top';\n        this.nzStrokeLinecap = 'round';\n        this.nzSteps = 0;\n        this.steps = [];\n        /** Gradient style when `nzType` is `line`. */\n        this.lineGradient = null;\n        /** If user uses gradient color. */\n        this.isGradient = false;\n        /** If the linear progress is a step progress. */\n        this.isSteps = false;\n        /**\n         * Each progress whose `nzType` is circle or dashboard should have unique id to\n         * define `<linearGradient>`.\n         */\n        this.gradientId = gradientIdSeed++;\n        /** Paths to rendered in the template. */\n        this.progressCirclePath = [];\n        this.trailPathStyle = null;\n        this.dir = 'ltr';\n        this.trackByFn = (index) => `${index}`;\n        this.cachedStatus = 'normal';\n        this.inferredStatus = 'normal';\n        this.destroy$ = new Subject();\n    }\n    ngOnChanges(changes) {\n        const { nzSteps, nzGapPosition, nzStrokeLinecap, nzStrokeColor, nzGapDegree, nzType, nzStatus, nzPercent, nzSuccessPercent, nzStrokeWidth } = changes;\n        if (nzStatus) {\n            this.cachedStatus = this.nzStatus || this.cachedStatus;\n        }\n        if (nzPercent || nzSuccessPercent) {\n            const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n            if (fillAll) {\n                if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100) || this.nzSuccessPercent === undefined) {\n                    this.inferredStatus = 'success';\n                }\n            }\n            else {\n                this.inferredStatus = this.cachedStatus;\n            }\n        }\n        if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n            this.updateIcon();\n        }\n        if (nzStrokeColor) {\n            this.setStrokeColor();\n        }\n        if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n            this.getCirclePaths();\n        }\n        if (nzPercent || nzSteps || nzStrokeWidth) {\n            this.isSteps = this.nzSteps > 0;\n            if (this.isSteps) {\n                this.getSteps();\n            }\n        }\n    }\n    ngOnInit() {\n        this.nzConfigService\n            .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => {\n            this.updateIcon();\n            this.setStrokeColor();\n            this.getCirclePaths();\n        });\n        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    updateIcon() {\n        const ret = statusIconNameMap.get(this.status);\n        this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n    }\n    /**\n     * Calculate step render configs.\n     */\n    getSteps() {\n        const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n        const stepWidth = this.nzSize === 'small' ? 2 : 14;\n        const steps = [];\n        for (let i = 0; i < this.nzSteps; i++) {\n            let color;\n            if (i <= current - 1) {\n                color = this.nzStrokeColor;\n            }\n            const stepStyle = {\n                backgroundColor: `${color}`,\n                width: `${stepWidth}px`,\n                height: `${this.strokeWidth}px`\n            };\n            steps.push(stepStyle);\n        }\n        this.steps = steps;\n    }\n    /**\n     * Calculate paths when the type is circle or dashboard.\n     */\n    getCirclePaths() {\n        if (!this.isCircleStyle) {\n            return;\n        }\n        const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent];\n        // Calculate shared styles.\n        const radius = 50 - this.strokeWidth / 2;\n        const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n        const len = Math.PI * 2 * radius;\n        const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n        let beginPositionX = 0;\n        let beginPositionY = -radius;\n        let endPositionX = 0;\n        let endPositionY = radius * -2;\n        switch (gapPosition) {\n            case 'left':\n                beginPositionX = -radius;\n                beginPositionY = 0;\n                endPositionX = radius * 2;\n                endPositionY = 0;\n                break;\n            case 'right':\n                beginPositionX = radius;\n                beginPositionY = 0;\n                endPositionX = radius * -2;\n                endPositionY = 0;\n                break;\n            case 'bottom':\n                beginPositionY = radius;\n                endPositionY = radius * 2;\n                break;\n            default:\n        }\n        this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n        this.trailPathStyle = {\n            strokeDasharray: `${len - gapDegree}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n        };\n        // Calculate styles for each path.\n        this.progressCirclePath = values\n            .map((value, index) => {\n            const isSuccessPercent = values.length === 2 && index === 0;\n            return {\n                stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n                strokePathStyle: {\n                    stroke: !this.isGradient\n                        ? isSuccessPercent\n                            ? statusColorMap.get('success')\n                            : this.nzStrokeColor\n                        : null,\n                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n                    strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n                    strokeDashoffset: `-${gapDegree / 2}px`\n                }\n            };\n        })\n            .reverse();\n    }\n    setStrokeColor() {\n        const color = this.nzStrokeColor;\n        const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n        if (isGradient && !this.isCircleStyle) {\n            this.lineGradient = handleLinearGradient(color);\n        }\n        else if (isGradient && this.isCircleStyle) {\n            this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n        }\n        else {\n            this.lineGradient = null;\n            this.circleGradient = [];\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NzConfigService }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.3\", type: NzProgressComponent, selector: \"nz-progress\", inputs: { nzShowInfo: \"nzShowInfo\", nzWidth: \"nzWidth\", nzStrokeColor: \"nzStrokeColor\", nzSize: \"nzSize\", nzFormat: \"nzFormat\", nzSuccessPercent: \"nzSuccessPercent\", nzPercent: \"nzPercent\", nzStrokeWidth: \"nzStrokeWidth\", nzGapDegree: \"nzGapDegree\", nzStatus: \"nzStatus\", nzType: \"nzType\", nzGapPosition: \"nzGapPosition\", nzStrokeLinecap: \"nzStrokeLinecap\", nzSteps: \"nzSteps\" }, exportAs: [\"nzProgress\"], usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <span nz-icon [nzType]=\"icon\"></span>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i4.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }, { kind: \"directive\", type: i5.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzSize\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzPercent\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSteps\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressComponent, decorators: [{\n            type: Component,\n            args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    selector: 'nz-progress',\n                    exportAs: 'nzProgress',\n                    preserveWhitespaces: false,\n                    template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <span nz-icon [nzType]=\"icon\"></span>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.NzConfigService }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { nzShowInfo: [{\n                type: Input\n            }], nzWidth: [{\n                type: Input\n            }], nzStrokeColor: [{\n                type: Input\n            }], nzSize: [{\n                type: Input\n            }], nzFormat: [{\n                type: Input\n            }], nzSuccessPercent: [{\n                type: Input\n            }], nzPercent: [{\n                type: Input\n            }], nzStrokeWidth: [{\n                type: Input\n            }], nzGapDegree: [{\n                type: Input\n            }], nzStatus: [{\n                type: Input\n            }], nzType: [{\n                type: Input\n            }], nzGapPosition: [{\n                type: Input\n            }], nzStrokeLinecap: [{\n                type: Input\n            }], nzSteps: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzProgressModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressModule, declarations: [NzProgressComponent], imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule], exports: [NzProgressComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressModule, imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.3\", ngImport: i0, type: NzProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [NzProgressComponent],\n                    declarations: [NzProgressComponent],\n                    imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzProgressComponent, NzProgressModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}