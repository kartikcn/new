{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { Enums } from 'src/app/model/enums.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/parts.service\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-select/ng-select\";\nimport * as i6 from \"ng-zorro-antd/table\";\nimport * as i7 from \"ng-zorro-antd/input\";\nimport * as i8 from \"primeng/selectbutton\";\nimport * as i9 from \"../../../../../directive/numbers-only.directive\";\nimport * as i10 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddPartsComponent_tr_13_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵtext(1, \"Part Code is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddPartsComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtemplate(2, AddPartsComponent_tr_13_label_2_Template, 2, 0, \"label\", 16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.partsFormPanel.controls[\"partCode\"] == null ? null : ctx_r0.partsFormPanel.controls[\"partCode\"].errors) && !(ctx_r0.partsFormPanel.controls[\"partCode\"] == null ? null : ctx_r0.partsFormPanel.controls[\"partCode\"].errors.required));\n  }\n}\nexport let AddPartsComponent = /*#__PURE__*/(() => {\n  class AddPartsComponent {\n    constructor(formBuilder, partsService, enumsrv) {\n      this.formBuilder = formBuilder;\n      this.partsService = partsService;\n      this.enumsrv = enumsrv;\n      this.subscriptions = [];\n      this.enumMeasurment = [];\n      this.enumConsumable = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumPartsData = [];\n      this.newRecord = true;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.partsFormPanel = this.formBuilder.group({\n        partId: [null],\n        partCode: ['', [Validators.required]],\n        description: [null],\n        modelNo: [null],\n        qutMinHand: [null],\n        qutOnHand: [null, [Validators.required]],\n        consumable: [null, [Validators.required]],\n        qutOnOrder: [null],\n        unitOfMeasurement: [null, [Validators.required]],\n        ratePerUnit: [null]\n      });\n      this.subscriptions.push(this.partsFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const parts = {\n        partCode: this.partsFormPanel.controls.partCode.value,\n        description: this.partsFormPanel.controls.description.value,\n        partId: this.partsFormPanel.controls.partId.value,\n        modelNo: this.partsFormPanel.controls.modelNo.value,\n        qutMinHand: this.partsFormPanel.controls.qutMinHand.value,\n        qutOnHand: this.partsFormPanel.controls.qutOnHand.value,\n        consumable: this.partsFormPanel.controls.consumable.value,\n        qutOnOrder: this.partsFormPanel.controls.qutOnOrder.value,\n        unitOfMeasurement: this.partsFormPanel.controls.unitOfMeasurement.value,\n        ratePerUnit: this.partsFormPanel.controls.ratePerUnit.value\n      };\n      return parts;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.partsFormPanel.patchValue({\n          partCode: value.partCode,\n          description: value.description,\n          partId: value.partId,\n          modelNo: value.modelNo,\n          qutMinHand: value.qutMinHand,\n          qutOnHand: value.qutOnHand,\n          consumable: value.consumable,\n          qutOnOrder: value.qutOnOrder,\n          unitOfMeasurement: value.unitOfMeasurement,\n          ratePerUnit: value.ratePerUnit\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.partsFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.partsFormPanel.valid ? null : {\n        partsFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumPartsData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'parts'.toLocaleUpperCase());\n        this.enumConsumable = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'parts'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'consumable'.toLocaleUpperCase());\n        this.enumMeasurment = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'parts'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'unit_of_measurement'.toLocaleUpperCase());\n        this.enumMeasurment.unshift(new Enums(null, \"\", \"\", 'Make a selection'));\n      }, error => {});\n    }\n    static #_ = this.ɵfac = function AddPartsComponent_Factory(t) {\n      return new (t || AddPartsComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.PartsService), i0.ɵɵdirectiveInject(i3.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPartsComponent,\n      selectors: [[\"app-add-parts\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddPartsComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddPartsComponent),\n        multi: true\n      }])],\n      decls: 53,\n      vars: 6,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"partCode\", \"formControlName\", \"partCode\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"modelNo\", \"formControlName\", \"modelNo\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [\"type\", \"text\", \"name\", \"qutMinHand\", \"formControlName\", \"qutMinHand\", \"NumbersOnly\", \"\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"qutOnHand\", \"NumbersOnly\", \"\", \"formControlName\", \"qutOnHand\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"formControlName\", \"consumable\", \"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", 3, \"options\"], [\"type\", \"text\", \"name\", \"qutOnOrder\", \"NumbersOnly\", \"\", \"formControlName\", \"qutOnOrder\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"appendTo\", \"body\", \"name\", \"unitOfMeasurement\", \"formControlName\", \"unitOfMeasurement\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\"], [\"type\", \"text\", \"name\", \"ratePerUnit\", \"NumbersOnly\", \"\", \"formControlName\", \"ratePerUnit\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"colspan\", \"2\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red; margin-left: 5px;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\", \"margin-left\", \"5px\"]],\n      template: function AddPartsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Part Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\")(9, \"div\", 2)(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Model Number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(13, AddPartsComponent_tr_13_Template, 3, 1, \"tr\", 7);\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\")(16, \"div\", 2)(17, \"label\", 5);\n          i0.ɵɵtext(18, \"Minimum to Store\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"td\")(21, \"div\", 2)(22, \"label\", 3);\n          i0.ɵɵtext(23, \"Quantity Available\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"input\", 9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(25, \"tr\")(26, \"td\")(27, \"div\", 2)(28, \"label\", 3);\n          i0.ɵɵtext(29, \"Consumable\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(30, \"p-selectButton\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(31, \"td\")(32, \"div\", 2)(33, \"label\", 5);\n          i0.ɵɵtext(34, \"Quantity Reorder\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(35, \"input\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(36, \"tr\")(37, \"td\")(38, \"div\", 2)(39, \"label\", 3);\n          i0.ɵɵtext(40, \"Unit of Measurement\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(41, \"ng-select\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(42, \"td\")(43, \"div\", 2)(44, \"label\", 5);\n          i0.ɵɵtext(45, \"Rate Per Unit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(46, \"input\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(47, \"tr\")(48, \"td\", 14)(49, \"div\", 2)(50, \"label\", 5);\n          i0.ɵɵtext(51, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(52, \"textarea\", 15);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.partsFormPanel);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngIf\", (ctx.partsFormPanel.controls[\"partCode\"] == null ? null : ctx.partsFormPanel.controls[\"partCode\"].errors) && ((ctx.partsFormPanel.controls[\"partCode\"] == null ? null : ctx.partsFormPanel.controls[\"partCode\"].dirty) || (ctx.partsFormPanel.controls[\"partCode\"] == null ? null : ctx.partsFormPanel.controls[\"partCode\"].touched)));\n          i0.ɵɵadvance(17);\n          i0.ɵɵproperty(\"options\", ctx.enumConsumable);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.enumMeasurment);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i5.NgSelectComponent, i6.NzTableCellDirective, i6.NzTrDirective, i7.NzInputDirective, i8.SelectButton, i9.NumbersOnlyDirective, i10.TrimInputDirective]\n    });\n  }\n  return AddPartsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}