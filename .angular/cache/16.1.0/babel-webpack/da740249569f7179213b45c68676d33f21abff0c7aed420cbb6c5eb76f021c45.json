{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/tool-type.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddToolTypeComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 9);\n    i0.ɵɵtext(1, \"Tool Type is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddToolTypeComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtemplate(2, AddToolTypeComponent_tr_8_label_2_Template, 2, 0, \"label\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx_r0.toolTypeFormPanel.controls[\"toolType\"].errors) && !(ctx_r0.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx_r0.toolTypeFormPanel.controls[\"toolType\"].errors.required));\n  }\n}\nexport let AddToolTypeComponent = /*#__PURE__*/(() => {\n  class AddToolTypeComponent {\n    constructor(formBuilder, service) {\n      this.formBuilder = formBuilder;\n      this.service = service;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.presentToolType = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.toolTypeFormPanel = this.formBuilder.group({\n        toolTypeId: [null],\n        toolType: [null, [Validators.required]],\n        description: ['']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.toolTypeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const toolTypeDetails = {\n        toolTypeId: this.toolTypeFormPanel.controls.toolTypeId.value,\n        toolType: this.toolTypeFormPanel.controls.toolType.value,\n        description: this.toolTypeFormPanel.controls.description.value\n      };\n      return toolTypeDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.toolTypeFormPanel.patchValue({\n          toolTypeId: value.toolTypeId,\n          toolType: value.toolType,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.toolTypeFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.toolTypeFormPanel.valid ? null : {\n        toolTypeFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddToolTypeComponent_Factory(t) {\n      return new (t || AddToolTypeComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ToolTypeService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddToolTypeComponent,\n      selectors: [[\"app-add-tool-type\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddToolTypeComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddToolTypeComponent),\n        multi: true\n      }])],\n      decls: 15,\n      vars: 2,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"toolType\", \"formControlName\", \"toolType\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddToolTypeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Tool Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddToolTypeComponent_tr_8_Template, 4, 1, \"tr\", 5);\n          i0.ɵɵelementStart(9, \"tr\")(10, \"td\")(11, \"div\", 2)(12, \"label\", 6);\n          i0.ɵɵtext(13, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"textarea\", 7);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.toolTypeFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].errors) && ((ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].dirty) || (ctx.toolTypeFormPanel.controls[\"toolType\"] == null ? null : ctx.toolTypeFormPanel.controls[\"toolType\"].touched)));\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.TrimInputDirective]\n    });\n  }\n  return AddToolTypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}