{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/Helpdesk/trades/services/trades.services\";\nimport * as i3 from \"../../services/request-trade-services\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-select/ng-select\";\nimport * as i6 from \"../../../../../../../directive/numbers-only.directive\";\nimport * as i7 from \"../../../../../../../directive/directive/two-digit-decimal-number\";\nfunction AddRequestTradeComponent_label_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 20);\n    i0.ɵɵtext(1, \"Trade already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AddRequestTradeComponent = /*#__PURE__*/(() => {\n  class AddRequestTradeComponent {\n    constructor(formBuilder, tradeService, requestTradeService) {\n      this.formBuilder = formBuilder;\n      this.tradeService = tradeService;\n      this.requestTradeService = requestTradeService;\n      this.today = new Date();\n      this.subscriptions = [];\n      this.tradesData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.tradeExists = false;\n      this.isRequestor = false;\n      this.isApprover = false;\n      this.isTechnician = false;\n      this.isSupervisor = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.reqTradeFormPanel = this.formBuilder.group({\n        tradeId: [null, [Validators.required]],\n        requestTradeId: [null],\n        hoursRequired: [null, [Validators.required, Validators.min(1)]],\n        dateAssign: [null],\n        timeAssign: [null],\n        requestId: [null],\n        actualHoursStd: [null],\n        actualHoursDouble: [null],\n        actualHoursOvertime: [null],\n        totalHours: [null],\n        addedBy: [null]\n      });\n      this.subscriptions.push(this.reqTradeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadTrades();\n      if (this.isView) {\n        this.reqTradeFormPanel.disable();\n      }\n    }\n    get value() {\n      const requestTools = {\n        tradeId: this.reqTradeFormPanel.controls.tradeId.value,\n        requestTradeId: this.reqTradeFormPanel.controls.requestTradeId.value,\n        hoursRequired: this.reqTradeFormPanel.controls.hoursRequired.value,\n        requestId: this.reqTradeFormPanel.controls.requestId.value,\n        dateAssign: this.reqTradeFormPanel.controls.dateAssign.value,\n        timeAssign: this.reqTradeFormPanel.controls.timeAssign.value,\n        actualHoursStd: this.reqTradeFormPanel.controls.actualHoursStd.value,\n        actualHoursDouble: this.reqTradeFormPanel.controls.actualHoursDouble.value,\n        actualHoursOvertime: this.reqTradeFormPanel.controls.actualHoursOvertime.value,\n        addedBy: this.reqTradeFormPanel.controls.addedBy.value\n      };\n      return requestTools;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.reqTradeFormPanel.patchValue({\n          tradeId: value.tradeId,\n          requestTradeId: value.requestTradeId,\n          hoursRequired: value.hoursRequired,\n          dateAssign: this.formatDate(value.dateAssign),\n          timeAssign: this.convertToTime(value.timeAssign),\n          requestId: value.requestId,\n          actualHoursStd: value.actualHoursStd,\n          actualHoursDouble: value.actualHoursDouble,\n          actualHoursOvertime: value.actualHoursOvertime,\n          totalHours: parseFloat(value.actualHoursStd) + parseFloat(value.actualHoursDouble) + parseFloat(value.actualHoursOvertime),\n          addedBy: value.addedBy\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.reqTradeFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.reqTradeFormPanel.valid ? null : {\n        reqTradeFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    loadTrades() {\n      this.tradeService.getAllTrades().subscribe(res => {\n        if (res) {\n          this.tradesData = res;\n        } else {\n          this.tradesData = [];\n        }\n      });\n    }\n    formatDate(date) {\n      if (date != null) {\n        var dateCreated = new Date(date);\n        return dateCreated;\n      } else {\n        return null;\n      }\n    }\n    convertToTime(value) {\n      if (value != null) {\n        var currDate = new Date();\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        currDate.setHours(data[0]);\n        currDate.setMinutes(data[1]);\n        return currDate;\n      } else {\n        return null;\n      }\n    }\n    onChangeHours(event) {\n      let actualHoursStd = this.reqTradeFormPanel.controls.actualHoursStd.value;\n      let actualHoursDouble = this.reqTradeFormPanel.controls.actualHoursDouble.value;\n      let actualHoursOvertime = this.reqTradeFormPanel.controls.actualHoursOvertime.value;\n      let totalHours = 0;\n      totalHours = actualHoursStd ? totalHours + parseFloat(actualHoursStd) : totalHours;\n      totalHours = actualHoursDouble ? totalHours + parseFloat(actualHoursDouble) : totalHours;\n      totalHours = actualHoursOvertime ? totalHours + parseFloat(actualHoursOvertime) : totalHours;\n      setTimeout(() => {\n        this.reqTradeFormPanel.patchValue({\n          totalHours: totalHours\n        });\n      });\n    }\n    selectTrade(event) {\n      if (this.previousTrade != event.tradeId) {\n        let requestId = this.reqTradeFormPanel.controls.requestId.value;\n        let tradeId = event.tradeId;\n        this.requestTradeService.checkTradeExist(requestId, tradeId).subscribe(res => {\n          this.tradeExists = false;\n          if (res) {\n            this.tradeExists = true;\n          } else {\n            this.tradeExists = false;\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddRequestTradeComponent_Factory(t) {\n      return new (t || AddRequestTradeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TradesService), i0.ɵɵdirectiveInject(i3.RequestTradeService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRequestTradeComponent,\n      selectors: [[\"app-add-request-trade\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isView: \"isView\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRequestTradeComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRequestTradeComponent),\n        multi: true\n      }])],\n      decls: 49,\n      vars: 9,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\", \"input-container\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"name\", \"tradeId\", \"formControlName\", \"tradeId\", \"bindLabel\", \"tradeCode\", \"bindValue\", \"tradeId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [1, \"input-label-custom\"], [\"type\", \"text\", \"name\", \"hoursRequired\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"hoursRequired\", 1, \"form-control\", 3, \"readonly\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"actual-hours-container\", 3, \"hidden\"], [1, \"scheduler-border\", \"form-field-lable\"], [1, \"scheduler-border\"], [1, \"input-label-custom\", 2, \"margin-left\", \"-80px\", \"margin-top\", \"10px\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"actualHoursStd\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"actualHoursStd\", 1, \"form-control\", 2, \"width\", \"80%\", 3, \"input\"], [1, \"input-label-custom\", 2, \"margin-left\", \"-20px\"], [\"type\", \"text\", \"name\", \"actualHoursOvertime\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"actualHoursOvertime\", 1, \"form-control\", 2, \"width\", \"90%\", 3, \"input\"], [1, \"input-label-custom\", 2, \"margin-left\", \"-80px\"], [\"type\", \"text\", \"name\", \"actualHoursDouble\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"actualHoursDouble\", 1, \"form-control\", 2, \"width\", \"80%\", 3, \"input\"], [\"type\", \"text\", \"name\", \"totalHours\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"formControlName\", \"totalHours\", 1, \"form-control\", 2, \"width\", \"90%\", 3, \"readOnly\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddRequestTradeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"div\")(3, \"tr\")(4, \"td\", 2)(5, \"div\", 3)(6, \"label\", 4);\n          i0.ɵɵtext(7, \"Trade\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 5);\n          i0.ɵɵlistener(\"change\", function AddRequestTradeComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.selectTrade($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"td\", 2)(10, \"div\", 6)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Required Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"br\")(14, \"input\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\");\n          i0.ɵɵtemplate(17, AddRequestTradeComponent_label_17_Template, 2, 0, \"label\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"td\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 9)(20, \"fieldset\", 10)(21, \"legend\", 11);\n          i0.ɵɵtext(22, \"Actual Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"tr\")(24, \"td\")(25, \"div\", 12)(26, \"label\", 13);\n          i0.ɵɵtext(27, \"Standard Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"br\");\n          i0.ɵɵelementStart(29, \"input\", 14);\n          i0.ɵɵlistener(\"input\", function AddRequestTradeComponent_Template_input_input_29_listener($event) {\n            return ctx.onChangeHours($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(30, \"td\")(31, \"div\", 15)(32, \"label\", 13);\n          i0.ɵɵtext(33, \" Overtime Hours \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(34, \"br\");\n          i0.ɵɵelementStart(35, \"input\", 16);\n          i0.ɵɵlistener(\"input\", function AddRequestTradeComponent_Template_input_input_35_listener($event) {\n            return ctx.onChangeHours($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(36, \"tr\")(37, \"td\")(38, \"div\", 17)(39, \"label\", 13);\n          i0.ɵɵtext(40, \"Double Time Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(41, \"br\");\n          i0.ɵɵelementStart(42, \"input\", 18);\n          i0.ɵɵlistener(\"input\", function AddRequestTradeComponent_Template_input_input_42_listener($event) {\n            return ctx.onChangeHours($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(43, \"td\")(44, \"div\", 15)(45, \"label\", 13);\n          i0.ɵɵtext(46, \"Total Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(47, \"br\")(48, \"input\", 19);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.reqTradeFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.tradesData)(\"searchable\", true)(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", !ctx.isSupervisor && !ctx.isNew);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.tradeExists);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"hidden\", ctx.isNew);\n          i0.ɵɵadvance(29);\n          i0.ɵɵproperty(\"readOnly\", true);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.NgSelectComponent, i6.NumbersOnlyDirective, i7.TwoDigitDecimalNumberDirective],\n      styles: [\".actual-hours-container[_ngcontent-%COMP%]{width:97%}fieldset.scheduler-border[_ngcontent-%COMP%]{border:1px groove #ddd!important;padding:0 1.4em 1.4em!important;margin:30px 0 1.5em!important;box-shadow:0 0 #000}legend.scheduler-border[_ngcontent-%COMP%]{font-size:1em!important;text-align:left!important;width:auto;padding:0 10px;border-bottom:none;margin-top:-10px;background-color:#fff}\"]\n    });\n  }\n  return AddRequestTradeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}