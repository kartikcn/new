{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"src/app/ui/ppm-plan/services/ppm-plan-services\";\nimport * as i3 from \"src/app/services/breakpoint.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/dropdown\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/tooltip\";\nimport * as i9 from \"primeng/paginator\";\nfunction PpmPlansListComponent_ng_template_2_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 21);\n    i0.ɵɵlistener(\"onChange\", function PpmPlansListComponent_ng_template_2_ng_template_17_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const filter_r6 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r6($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r5)(\"options\", ctx_r4.enumPlanData)(\"showClear\", true);\n  }\n}\nfunction PpmPlansListComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 7)(2, \"div\", 8)(3, \"div\", 9)(4, \"p\", 10);\n    i0.ɵɵtext(5, \"Plan Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 11);\n    i0.ɵɵelement(7, \"p-sortIcon\", 12)(8, \"p-columnFilter\", 13);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"th\", 14)(10, \"div\", 8)(11, \"div\", 9)(12, \"p\", 10);\n    i0.ɵɵtext(13, \"Plan Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 11);\n    i0.ɵɵelement(15, \"p-sortIcon\", 15);\n    i0.ɵɵelementStart(16, \"p-columnFilter\", 16);\n    i0.ɵɵtemplate(17, PpmPlansListComponent_ng_template_2_ng_template_17_Template, 1, 3, \"ng-template\", 17);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(18, \"th\", 18)(19, \"div\", 8)(20, \"div\", 9)(21, \"p\", 10);\n    i0.ɵɵtext(22, \"Plan Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 11);\n    i0.ɵɵelement(24, \"p-sortIcon\", 19)(25, \"p-columnFilter\", 20);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction PpmPlansListComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 22)(1, \"td\", 23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 23);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const plan_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", plan_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r9.planName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r9.planName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumByById(plan_r9.planType));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r9.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r9.description);\n  }\n}\nfunction PpmPlansListComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 4);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let PpmPlansListComponent = /*#__PURE__*/(() => {\n  class PpmPlansListComponent {\n    constructor(enumsrv, ppmPlanService, bps) {\n      this.enumsrv = enumsrv;\n      this.ppmPlanService = ppmPlanService;\n      this.bps = bps;\n      this.enumList = [];\n      this.enumPlanData = [];\n      this.planData = [];\n      this.isHide = true;\n      this.loading = false;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.locTypeId = 0;\n      this.parentFun = new EventEmitter();\n      this.useTabletProtrait = false;\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"planId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n      this.filterCriteriaList = [];\n      this.planTypeData = '';\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      this.loadEnums();\n      // this.loadRecords();\n    }\n\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n      if (this.useTabletProtrait) {\n        this.rowCount = UtilConstant.ROW_COUNT_FIVE_LIMIT;\n      } else {\n        this.rowCount = UtilConstant.ROW_COUNT;\n      }\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumPlanData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plans'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'plan_type'.toLowerCase());\n        this.enumPlanData.forEach(t => t.enumValue.toLocaleLowerCase() === \"Location\".toLocaleLowerCase() ? this.locTypeId = t.enumKey : '');\n      }, error => {});\n    }\n    getEnumByById(enumKey) {\n      return enumKey ? this.enumPlanData.find(t => t.enumKey == enumKey) != null ? this.enumPlanData.find(t => t.enumKey == enumKey)?.enumValue : '' : '';\n    }\n    loadRecords(planType) {\n      this.loading = true;\n      this.planTypeData = planType;\n      //this.planData = [];\n      let filterCriteria = {\n        fieldName: \"planType\",\n        value: planType,\n        matchMode: \"equals\"\n      };\n      this.updateFilterCriteriaList(filterCriteria);\n      let data = {\n        paginationDTO: this.paginationObj,\n        filterCriteria: this.filterCriteriaList\n      };\n      this.ppmPlanService.getAllPlansPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          this.planData = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n          // if(planType == \"Location\"){\n          //   this.planData = content.filter((t:any) => t.planType === this.locTypeId)\n          // } else {\n          //   this.planData = content.filter((t:any) => t.planType !== this.locTypeId);\n          // }\n        } else {\n          this.planData = [];\n        }\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n      });\n    }\n    setPlanData(planData) {\n      this.planData = planData;\n    }\n    onRowSelect(event) {\n      this.parentFun.emit(event.data);\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadRecords(this.planTypeData);\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined) {\n            let filterCriteria = {\n              fieldName: field,\n              value: filterValue,\n              matchMode: matchMode\n            };\n            this.updateFilterCriteriaList(filterCriteria);\n          }\n        });\n        this.paginationObj.pageNo = 0;\n        this.loadRecords(this.planTypeData);\n      }\n      this.isFiltered = true;\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaList[index] = filterCriteria;\n        } else {\n          this.filterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function PpmPlansListComponent_Factory(t) {\n      return new (t || PpmPlansListComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.PpmPlanService), i0.ɵɵdirectiveInject(i3.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PpmPlansListComponent,\n      selectors: [[\"app-ppm-plans-list\"]],\n      inputs: {\n        planTypeData: \"planTypeData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 7,\n      vars: 11,\n      consts: [[\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", \"selectionMode\", \"single\", 3, \"value\", \"paginator\", \"rowHover\", \"scrollable\", \"onFilter\", \"onRowSelect\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"pSortableColumn\", \"planName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"planName\"], [\"type\", \"text\", \"field\", \"planName\", \"display\", \"menu\"], [\"pSortableColumn\", \"planType\"], [\"field\", \"planType\"], [\"field\", \"planType\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"description\"], [\"field\", \"description\"], [\"type\", \"text\", \"field\", \"description\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Status\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function PpmPlansListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-table\", 0, 1);\n          i0.ɵɵlistener(\"onFilter\", function PpmPlansListComponent_Template_p_table_onFilter_0_listener($event) {\n            return ctx.onInnerFilter($event);\n          })(\"onRowSelect\", function PpmPlansListComponent_Template_p_table_onRowSelect_0_listener($event) {\n            return ctx.onRowSelect($event);\n          });\n          i0.ɵɵtemplate(2, PpmPlansListComponent_ng_template_2_Template, 26, 0, \"ng-template\", 2);\n          i0.ɵɵtemplate(3, PpmPlansListComponent_ng_template_3_Template, 7, 6, \"ng-template\", 3);\n          i0.ɵɵtemplate(4, PpmPlansListComponent_ng_template_4_Template, 3, 1, \"ng-template\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 5)(6, \"p-paginator\", 6);\n          i0.ɵɵlistener(\"onPageChange\", function PpmPlansListComponent_Template_p_paginator_onPageChange_6_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"value\", ctx.planData)(\"paginator\", false)(\"rowHover\", false)(\"scrollable\", true)(\"rowHover\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n        }\n      },\n      dependencies: [i4.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.ColumnFilter, i6.Dropdown, i7.NgControlStatus, i7.NgModel, i8.MatTooltip, i9.Paginator],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return PpmPlansListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}