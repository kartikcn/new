{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/arrangement.service\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nexport let AddArrangementComponent = /*#__PURE__*/(() => {\n  class AddArrangementComponent {\n    constructor(formBuilder, arrangeSrv) {\n      this.formBuilder = formBuilder;\n      this.arrangeSrv = arrangeSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.isNew = false;\n      this.processList = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.arrangementFormPanel = this.formBuilder.group({\n        arrangementId: [null, [Validators.required]],\n        arrangementType: ['', [Validators.required]],\n        description: ['', [Validators.required]],\n        highlightColor: ['#a6a6a6', [Validators.required]]\n      });\n      this.subscriptions.push(this.arrangementFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    // checkArrangementTypeValidator(control: any) {\n    //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n    //       this.arrangementFormPanel.controls['arrangementType'].setErrors(null);\n    //       this.arrangementFormPanel.clearAsyncValidators();\n    //       this.arrangementFormPanel.updateValueAndValidity();\n    //       this.arrangeSrv.checkArrangementTypeExists(control.value).subscribe((res: any) => {\n    //         if (res && res.text == \"true\") {\n    //           this.arrangementFormPanel.controls['arrangementType'].setErrors({ 'incorrect': true });\n    //           this.arrangementFormPanel.updateValueAndValidity();\n    //           return { 'incorrect': true };\n    //         }\n    //         else {\n    //           return null;\n    //         }\n    //       });\n    //     }\n    // }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.arrangementFormPanel.controls).forEach(key => {\n        let field = this.arrangementFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        arrangementId: this.arrangementFormPanel.controls.arrangementId.value,\n        arrangementType: this.arrangementFormPanel.controls.arrangementType.value,\n        description: this.arrangementFormPanel.controls.description.value,\n        highlightColor: this.arrangementFormPanel.controls.highlightColor.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.arrangementFormPanel.patchValue({\n          arrangementId: value.arrangementId,\n          arrangementType: value.arrangementType,\n          description: value.description,\n          highlightColor: value.highlightColor ?? '#a6a6a6'\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.arrangementFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.arrangementFormPanel.valid ? null : {\n        arrangementFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddArrangementComponent_Factory(t) {\n      return new (t || AddArrangementComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.ArrangementService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddArrangementComponent,\n      selectors: [[\"app-add-arrangement\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddArrangementComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddArrangementComponent),\n        multi: true\n      }])],\n      decls: 20,\n      vars: 1,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"arrangementType\", \"formControlName\", \"arrangementType\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"colspan\", \"2\", 2, \"width\", \"100%\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\"]],\n      template: function AddArrangementComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Arrangement Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 6)(10, \"div\", 3)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"textarea\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 2)(16, \"div\", 3)(17, \"label\", 4);\n          i0.ɵɵtext(18, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.arrangementFormPanel);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i3.TrimInputDirective]\n    });\n  }\n  return AddArrangementComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}