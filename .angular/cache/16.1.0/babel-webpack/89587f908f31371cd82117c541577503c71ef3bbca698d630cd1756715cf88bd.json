{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport html2canvas from 'html2canvas';\nimport * as FileSaver from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../background-loc/services/bl.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../division-department/services/division.services\";\nimport * as i5 from \"../division-department/services/department.services\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"src/app/services/enum.service\";\nimport * as i8 from \"../booking/services/booking.services\";\nimport * as i9 from \"primeng/api\";\nimport * as i10 from \"ng-zorro-antd/table\";\nimport * as i11 from \"primeng/table\";\nimport * as i12 from \"primeng/calendar\";\nimport * as i13 from \"primeng/button\";\nimport * as i14 from \"primeng/dialog\";\nimport * as i15 from \"primeng/toast\";\nimport * as i16 from \"primeng/panel\";\nimport * as i17 from \"primeng/confirmdialog\";\nimport * as i18 from \"@ng-select/ng-select\";\nimport * as i19 from \"@angular/material/tooltip\";\nimport * as i20 from \"./widgets/space-allocation-room-list/space-allocation-room-list.component\";\nimport * as i21 from \"@swimlane/ngx-charts\";\nimport * as i22 from \"../view-room-report/widgets/add-room-report-table/add-room-report-table.component\";\nconst _c0 = [\"chartContainer\"];\nfunction SpaceAllocationStatisticsComponent_tr_28_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 29);\n    i0.ɵɵtext(1, \"Date To should be greater than Date From\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_tr_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 4);\n    i0.ɵɵtemplate(2, SpaceAllocationStatisticsComponent_tr_28_label_2_Template, 2, 0, \"label\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\", 4)(4, \"td\", 4)(5, \"td\", 4)(6, \"td\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.filterPanel.controls[\"dateTo\"] == null ? null : ctx_r0.filterPanel.controls[\"dateTo\"].errors) && (ctx_r0.filterPanel.controls[\"dateTo\"] == null ? null : ctx_r0.filterPanel.controls[\"dateTo\"].errors.incorrect));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_53_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function SpaceAllocationStatisticsComponent_div_53_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.exportGridToExcel());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"p-button\", 32);\n    i0.ɵɵlistener(\"click\", function SpaceAllocationStatisticsComponent_div_54_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.exportChartToPDF());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 48)(1, \"div\", 36)(2, \"div\", 37)(3, \"p\", 38);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 39);\n    i0.ɵɵelement(6, \"p-sortIcon\", 49)(7, \"p-columnFilter\", 50);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.secondParamName, \"\");\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 51)(1, \"div\", 36)(2, \"div\", 37)(3, \"p\", 38);\n    i0.ɵɵtext(4, \"Total Area (sq.ft)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 39);\n    i0.ɵɵelement(6, \"p-sortIcon\", 52);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 53)(1, \"div\", 36)(2, \"div\", 37)(3, \"p\", 38);\n    i0.ɵɵtext(4, \"Available Area (sq.ft)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 39);\n    i0.ɵɵelement(6, \"p-sortIcon\", 54);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 55)(1, \"div\", 36)(2, \"div\", 37)(3, \"p\", 38);\n    i0.ɵɵtext(4, \"Allocation (%)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 39);\n    i0.ɵɵelement(6, \"p-sortIcon\", 56);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 35)(2, \"div\", 36)(3, \"div\", 37)(4, \"p\", 38);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 39);\n    i0.ɵɵelement(7, \"p-sortIcon\", 40)(8, \"p-columnFilter\", 41);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(9, SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_9_Template, 8, 1, \"th\", 42);\n    i0.ɵɵtemplate(10, SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_10_Template, 7, 0, \"th\", 43);\n    i0.ɵɵelementStart(11, \"th\", 44)(12, \"div\", 36)(13, \"div\", 37)(14, \"p\", 38);\n    i0.ɵɵtext(15, \"Allocated Area (sq.ft)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 39);\n    i0.ɵɵelement(17, \"p-sortIcon\", 45);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(18, SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_18_Template, 7, 0, \"th\", 46);\n    i0.ɵɵtemplate(19, SpaceAllocationStatisticsComponent_div_55_ng_template_2_th_19_Template, 7, 0, \"th\", 47);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.firstParamName, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.showSecondParam);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r14.showOnlyAllocationArea);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r14.showOnlyAllocationArea);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r14.showOnlyAllocationArea);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.totalarea.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.availablearea.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.allocationpercentage.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_5_Template, 2, 1, \"td\", 60);\n    i0.ɵɵelementStart(6, \"td\", 61);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_8_Template, 2, 1, \"td\", 60);\n    i0.ɵɵtemplate(9, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_td_9_Template, 2, 1, \"td\", 60);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext().$implicit;\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r21.firstvalue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r21.secondvalue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r22.showOnlyAllocationArea);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r21.occupiedarea.toFixed(2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r22.showOnlyAllocationArea);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r22.showOnlyAllocationArea);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.totalarea.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.availablearea.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 61);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.allocationpercentage.toFixed(2));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_2_Template, 2, 1, \"td\", 60);\n    i0.ɵɵelementStart(3, \"td\", 61);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_5_Template, 2, 1, \"td\", 60);\n    i0.ɵɵtemplate(6, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_td_6_Template, 2, 1, \"td\", 60);\n  }\n  if (rf & 2) {\n    const room_r21 = i0.ɵɵnextContext().$implicit;\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(room_r21.firstvalue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r24.showOnlyAllocationArea);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r21.occupiedarea.toFixed(2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r24.showOnlyAllocationArea);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r24.showOnlyAllocationArea);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 57);\n    i0.ɵɵlistener(\"click\", function SpaceAllocationStatisticsComponent_div_55_ng_template_3_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r40);\n      const room_r21 = restoredCtx.$implicit;\n      const ctx_r39 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r39.getRoomData(room_r21));\n    });\n    i0.ɵɵtemplate(1, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_container_1_Template, 10, 6, \"ng-container\", 58);\n    i0.ɵɵtemplate(2, SpaceAllocationStatisticsComponent_div_55_ng_template_3_ng_template_2_Template, 7, 5, \"ng-template\", null, 59, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r23 = i0.ɵɵreference(3);\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.showSecondParam)(\"ngIfElse\", _r23);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_55_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nconst _c1 = function () {\n  return [5, 10, 25];\n};\nfunction SpaceAllocationStatisticsComponent_div_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-table\", 33);\n    i0.ɵɵtemplate(2, SpaceAllocationStatisticsComponent_div_55_ng_template_2_Template, 20, 5, \"ng-template\", 24);\n    i0.ɵɵtemplate(3, SpaceAllocationStatisticsComponent_div_55_ng_template_3_Template, 4, 2, \"ng-template\", 25);\n    i0.ɵɵtemplate(4, SpaceAllocationStatisticsComponent_div_55_ng_template_4_Template, 3, 1, \"ng-template\", 34);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r3.gridblfldata)(\"paginator\", true)(\"rows\", ctx_r3.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(7, _c1))(\"rowHover\", false)(\"scrollable\", true);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_56_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 65)(1, \"ngx-charts-bar-vertical-2d\", 66);\n    i0.ɵɵlistener(\"select\", function SpaceAllocationStatisticsComponent_div_56_div_2_Template_ngx_charts_bar_vertical_2d_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r46);\n      const ctx_r45 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r45.onSelectBarChart($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r43 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"view\", ctx_r43.view)(\"scheme\", ctx_r43.colorScheme)(\"results\", ctx_r43.barchartData)(\"gradient\", ctx_r43.gradient)(\"xAxis\", ctx_r43.showXAxis)(\"yAxis\", ctx_r43.showYAxis)(\"legend\", ctx_r43.showLegend)(\"showXAxisLabel\", ctx_r43.showXAxisLabel)(\"showYAxisLabel\", ctx_r43.showYAxisLabel)(\"xAxisLabel\", ctx_r43.xAxisLabel)(\"yAxisLabel\", ctx_r43.yAxisLabel)(\"showGridLines\", ctx_r43.showGridLines);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_56_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 67)(1, \"div\")(2, \"h1\");\n    i0.ɵɵtext(3, \"No data found\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_div_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", null, 62);\n    i0.ɵɵtemplate(2, SpaceAllocationStatisticsComponent_div_56_div_2_Template, 2, 12, \"div\", 63);\n    i0.ɵɵtemplate(3, SpaceAllocationStatisticsComponent_div_56_div_3_Template, 4, 0, \"div\", 64);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.barchartData.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r4.barchartData.length > 0));\n  }\n}\nfunction SpaceAllocationStatisticsComponent_ng_template_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 68);\n    i0.ɵɵtext(1, \"Room List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_ng_template_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-space-allocation-room-list\", 69);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r6.roomData);\n  }\n}\nfunction SpaceAllocationStatisticsComponent_ng_template_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 68);\n    i0.ɵɵtext(1, \"Room List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SpaceAllocationStatisticsComponent_ng_template_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-room-report-table\", 69);\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r8.allroomData);\n  }\n}\nconst _c2 = function () {\n  return {\n    width: \"75vw\"\n  };\n};\nconst _c3 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nclass roomfilter {\n  constructor(blId, flId, divId, depId, dateFrom, dateTo, compId, viewBy) {\n    this.blId = blId;\n    this.flId = flId;\n    this.divId = divId;\n    this.depId = depId;\n    this.dateFrom = dateFrom;\n    this.dateTo = dateTo;\n    this.compId = compId;\n    this.viewBy = viewBy;\n  }\n}\nexport let SpaceAllocationStatisticsComponent = /*#__PURE__*/(() => {\n  class SpaceAllocationStatisticsComponent {\n    constructor(blServ, authSrv, formBuilder, cdr, divisionservice, departmentservice, datePipe, enumsrv, bookingSrv, messageService) {\n      this.blServ = blServ;\n      this.authSrv = authSrv;\n      this.formBuilder = formBuilder;\n      this.cdr = cdr;\n      this.divisionservice = divisionservice;\n      this.departmentservice = departmentservice;\n      this.datePipe = datePipe;\n      this.enumsrv = enumsrv;\n      this.bookingSrv = bookingSrv;\n      this.messageService = messageService;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.departmentData = [];\n      this.alldepartmentData = [];\n      this.enumDivision = [];\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.showGrid = false;\n      this.showGridLines = true;\n      this.showAllocatedPopup = false;\n      this.showAllRoomsPopup = false;\n      this.gridblfldata = [];\n      this.firstParamName = '';\n      this.secondParamName = '';\n      this.showSecondParam = false;\n      this.roomData = [];\n      this.allroomData = [];\n      this.filter = new roomfilter(null, null, null, null, null, null, 0, null);\n      this.viewByData = [{\n        \"id\": 0,\n        \"lable\": 'Building',\n        \"value\": \"bl_id\"\n      }, {\n        \"id\": 1,\n        \"lable\": 'Floor',\n        \"value\": \"fl_id\"\n      }, {\n        \"id\": 2,\n        \"lable\": 'Division',\n        \"value\": \"div_id\"\n      }, {\n        \"id\": 3,\n        \"lable\": 'Department',\n        \"value\": \"dep_id\"\n      }];\n      this.displayTypeData = [{\n        \"id\": 0,\n        \"lable\": 'Grid',\n        \"value\": \"grid\"\n      }, {\n        \"id\": 1,\n        \"lable\": 'Bar Chart',\n        \"value\": \"bar_chart\"\n      }];\n      this.monthStart = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n      this.monthEnd = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);\n      this.view = [1200, 495];\n      this.showXAxis = true;\n      this.showXAxisLabel = true;\n      this.xAxisLabel = '';\n      this.barchartData = [];\n      this.showYAxis = true;\n      this.gradient = false;\n      this.showLegend = true;\n      this.showYAxisLabel = true;\n      this.yAxisLabel = 'Area (sq.ft)';\n      this.showbarchart = false;\n      this.colorScheme = {\n        domain: ['#5AA454', '#C7B42C']\n      };\n      this.chartImg = [];\n      this.grid_array = [];\n      this.showOnlyAllocationArea = false;\n      this.filterPanel = this.formBuilder.group({\n        divId: [null],\n        depId: [null],\n        dateFrom: [null, [Validators.required]],\n        dateTo: [null, [Validators.required]],\n        blId: [null],\n        flId: [null],\n        viewBy: [null, [Validators.required]],\n        displayType: [null]\n      });\n    }\n    ngOnInit() {\n      // this.compId = this.authSrv.getLoggedInUserCompId()\n      this.loadAllBuilding();\n      this.loadAllFloor();\n      this.loadAllDivisions();\n      this.loadAllDepartments();\n      this.loadCommonAreaEnums();\n      this.filterPanel.patchValue({\n        displayType: this.displayTypeData[0].value,\n        dateFrom: this.monthStart,\n        dateTo: this.monthEnd\n      });\n    }\n    loadAllDivisions() {\n      this.enumDivision = [];\n      this.divisionservice.getAllDivisions().subscribe(res => {\n        this.enumDivision = res.map(each => {\n          return {\n            ...each,\n            \"bindlabel\": each.divId\n          };\n        });\n        this.enumDivision.unshift({\n          divId: '',\n          bindlabel: 'Make a selection'\n        });\n      });\n    }\n    loadAllDepartments() {\n      this.alldepartmentData = [];\n      this.departmentservice.getAllDepartments().subscribe(res => {\n        this.alldepartmentData = res.map(each => {\n          return {\n            ...each,\n            \"bindlabel\": each.depId\n          };\n        });\n        this.alldepartmentData.unshift({\n          depId: '',\n          bindlabel: 'Make a selection'\n        });\n        this.departmentData = [...this.alldepartmentData];\n      });\n    }\n    onSelectDivision(event) {\n      if (event.divId != null && event.divId != '') {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            depId: null\n          });\n          this.loadDepartmentCode(event.divId);\n        }, 10);\n      } else {\n        this.departmentData = this.alldepartmentData;\n      }\n    }\n    loadDepartmentCode(divId) {\n      if (divId != null && divId != '') {\n        this.departmentData = [];\n        this.departmentData = this.alldepartmentData.filter(t => t.divId == divId);\n        this.departmentData.unshift({\n          depId: '',\n          bindlabel: 'Make a selection'\n        });\n      } else {\n        this.departmentData = [];\n        this.departmentData = this.alldepartmentData;\n      }\n    }\n    onSelectDepartment(event) {\n      if (event.depId != null && event.depId != '') {\n        this.filterPanel.patchValue({\n          divId: event.divId\n        });\n      } else {\n        this.filterPanel.patchValue({\n          divId: null\n        });\n      }\n    }\n    loadAllBuilding() {\n      this.blServ.getALLBuilding().subscribe(res => {\n        this.enumBL = res;\n        this.enumBL.unshift({\n          id: '',\n          blNameString: 'Make a selection'\n        });\n      });\n    }\n    loadAllFloor() {\n      this.blServ.getALLFloor().subscribe(res => {\n        this.enumAllFL = res;\n        this.enumAllFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n        this.enumFL = this.enumAllFL;\n      });\n    }\n    onSelectBlCode($event) {\n      if ($event.id != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null\n          });\n          this.loadFloorCode($event.id);\n        }, 10);\n      } else {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null\n          });\n        }, 10);\n        this.enumFL = this.enumAllFL;\n      }\n    }\n    loadFloorCode(bl_id) {\n      if (bl_id != null) {\n        this.enumFL = [];\n        this.enumFL = this.enumAllFL.filter(t => t.blId == bl_id);\n        this.enumFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.id != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {\n        this.enumFL.unshift({\n          id: '',\n          flNameString: 'Make a selection'\n        });\n      }\n    }\n    loadCommonAreaEnums() {\n      this.enumsrv.getEnums().subscribe(res => {\n        let resultCommonArea = res.filter(t => t.tableName.toLocaleUpperCase() === 'rm'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'common_area_type'.toLocaleUpperCase() && t.compId == this.compId && t.enumValue.toLocaleUpperCase() == 'None'.toLocaleUpperCase());\n        this.enumCommonAreaNoneType = resultCommonArea[0].id;\n      });\n    }\n    checkDates(control) {\n      if (control !== undefined && control != null) {\n        this.filterPanel.controls['dateTo'].setErrors(null);\n        this.filterPanel.clearAsyncValidators();\n        this.filterPanel.updateValueAndValidity();\n        let dateFrom = this.formatDate(this.filterPanel.controls.dateFrom.value);\n        let dateTo = this.formatDate(this.filterPanel.controls.dateTo.value);\n        if (dateFrom != null && dateTo != null) {\n          if (dateTo <= dateFrom) {\n            this.filterPanel.controls['dateTo'].setErrors({\n              'incorrect': true\n            });\n            this.filterPanel.updateValueAndValidity();\n            return {\n              'incorrect': true\n            };\n          } else {\n            return null;\n          }\n        } else {\n          this.filterPanel.controls['dateTo'].setErrors({\n            'isnull': true\n          });\n          this.filterPanel.updateValueAndValidity();\n          return null;\n        }\n      }\n      return null;\n    }\n    formatDate(date) {\n      if (date != null) {\n        var d = new Date(date);\n        return d;\n      } else {\n        return null;\n      }\n    }\n    onSearch() {\n      this.gridblfldata = [];\n      this.showGrid = false;\n      this.showbarchart = false;\n      this.firstParamName = '';\n      this.showSecondParam = false;\n      this.showOnlyAllocationArea = false;\n      this.secondParamName = '';\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      let divId = this.filterPanel.controls.divId.value;\n      let depId = this.filterPanel.controls.depId.value;\n      let viewBy = this.filterPanel.controls.viewBy.value;\n      let displayType = this.filterPanel.controls.displayType.value;\n      this.filter.blId = blId != null && blId != '' ? blId : null;\n      this.filter.flId = flId != null && flId != '' ? flId : null;\n      this.filter.divId = divId != null && divId != '' ? divId : null;\n      this.filter.depId = depId != null && depId != '' ? depId : null;\n      this.filter.viewBy = viewBy;\n      this.filter.dateFrom = this.datePipe.transform(this.filterPanel.controls.dateFrom.value, \"yyyy-MM-dd\");\n      this.filter.dateTo = this.datePipe.transform(this.filterPanel.controls.dateTo.value, \"yyyy-MM-dd\");\n      this.filter.compId = this.compId;\n      let data = {\n        compId: this.compId,\n        dateFrom: this.datePipe.transform(this.filterPanel.controls.dateFrom.value, \"yyyy-MM-dd\"),\n        dateTo: this.datePipe.transform(this.filterPanel.controls.dateTo.value, \"yyyy-MM-dd\"),\n        blId: blId,\n        flId: flId,\n        divId: divId,\n        depId: depId,\n        viewBy: viewBy\n      };\n      this.blServ.getspaceallocationstatictics(data).subscribe(res => {\n        if (res) {\n          if (displayType == 'grid') {\n            this.gridblfldata = res;\n            if (viewBy == 'bl_id') {\n              this.firstParamName = 'Building code';\n              this.showSecondParam = false;\n              this.showOnlyAllocationArea = false;\n              this.secondParamName = '';\n              if (blId != null && blId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.firstvalue == blId);\n              }\n            } else if (viewBy == 'fl_id') {\n              this.firstParamName = 'Building code';\n              this.showSecondParam = true;\n              this.showOnlyAllocationArea = false;\n              this.secondParamName = 'Floor Code';\n              if (blId != null && blId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.firstvalue == blId);\n              }\n              if (flId != null && flId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.secondvalue == flId);\n              }\n            } else if (viewBy == 'div_id') {\n              this.firstParamName = 'Division code';\n              this.showSecondParam = false;\n              this.showOnlyAllocationArea = true;\n              this.secondParamName = '';\n              if (divId != null && divId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.firstvalue == divId);\n              }\n            } else if (viewBy == 'dep_id') {\n              this.firstParamName = 'Division code';\n              this.showSecondParam = true;\n              this.showOnlyAllocationArea = true;\n              this.secondParamName = 'Department Code';\n              if (divId != null && divId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.firstvalue == divId);\n              }\n              if (depId != null && depId != '') {\n                this.gridblfldata = this.gridblfldata.filter(each => each.secondvalue == depId);\n              }\n            }\n            this.showGrid = true;\n          } else {\n            this.gridblfldata = res;\n            if (viewBy == 'bl_id' || viewBy == 'div_id') {\n              this.gridblfldata = this.gridblfldata.map(each => {\n                return {\n                  ...each,\n                  \"name\": each.firstvalue\n                };\n              });\n            } else {\n              this.gridblfldata = this.gridblfldata.map(each => {\n                return {\n                  ...each,\n                  \"name\": each.firstvalue + \"-\" + each.secondvalue\n                };\n              });\n            }\n            this.setChartData();\n            this.showbarchart = true;\n          }\n        }\n      });\n    }\n    changeViewBy(event) {\n      this.xAxisLabel = event.lable;\n    }\n    onSelectDisplayType(event) {}\n    getRoomData(room) {\n      this.showAllRoomsPopup = false;\n      this.showAllocatedPopup = false;\n      this.roomData = [];\n      let viewByValue = this.filterPanel.controls.viewBy.value;\n      if (viewByValue == 'bl_id') {\n        this.filter.blId = room.firstvalue;\n      } else if (viewByValue == 'fl_id') {\n        this.filter.blId = room.firstvalue;\n        this.filter.flId = room.secondvalue;\n      } else if (viewByValue == 'div_id') {\n        this.filter.divId = room.firstvalue;\n      } else if (viewByValue == 'dep_id') {\n        this.filter.divId = room.firstvalue;\n        this.filter.depId = room.secondvalue;\n      }\n      this.blServ.getspaceallocationstaticticsroomdata(this.filter).subscribe(res => {\n        if (res) {\n          this.roomData = res;\n          this.showAllocatedPopup = true;\n        }\n      });\n    }\n    onClear() {\n      this.gridblfldata = [];\n      this.firstParamName = '';\n      this.secondParamName = '';\n      this.showSecondParam = false;\n      this.showOnlyAllocationArea = false;\n      this.roomData = [];\n      this.allroomData = [];\n      this.showGrid = false;\n      this.showbarchart = false;\n      this.showAllocatedPopup = false;\n      this.showAllRoomsPopup = false;\n      this.chartImg = [];\n      this.filterPanel.patchValue({\n        divId: null,\n        depId: null,\n        dateFrom: this.monthStart,\n        dateTo: this.monthEnd,\n        blId: null,\n        flId: null,\n        viewBy: null,\n        displayType: this.displayTypeData[0].value\n      });\n      this.filter = {\n        blId: null,\n        flId: null,\n        divId: null,\n        depId: null,\n        dateFrom: null,\n        dateTo: null,\n        compId: null,\n        viewBy: null\n      };\n    }\n    setChartData() {\n      this.barchartData = [];\n      const barChartData = [];\n      Object.values(this.gridblfldata).forEach((each, index) => {\n        if (each.occupiedarea > 0) {\n          let series = [{\n            \"name\": \"Total Area\",\n            \"value\": each.totalarea\n          }, {\n            \"name\": \"Allocated Area\",\n            \"value\": each.occupiedarea\n          }];\n          let dataobj = {\n            name: each.name,\n            series: series\n          };\n          barChartData.push(dataobj);\n        }\n      });\n      if (barChartData.length < 5) {\n        let empty = '  ';\n        for (let i = 0; i < 5 - barChartData.length; i++) {\n          barChartData.push({\n            name: empty.repeat(i + 1),\n            series: [{\n              \"name\": \"Total Area\",\n              \"value\": 0\n            }, {\n              \"name\": \"Allocated Area\",\n              \"value\": 0\n            }]\n          });\n        }\n      }\n      this.barchartData = barChartData;\n      this.cdr.detectChanges();\n    }\n    onSelectBarChart(event) {\n      this.roomData = [];\n      this.allroomData = [];\n      this.showAllocatedPopup = false;\n      this.showAllRoomsPopup = false;\n      let viewByValue = this.filterPanel.controls.viewBy.value;\n      if (typeof event === \"object\" && event !== null) {\n        if (event.name == \"Total Area\") {\n          let data = {\n            id: '',\n            name: '',\n            blId: null,\n            flId: null\n          };\n          let parts = event.series.split(/-(.+)/);\n          if (viewByValue == \"bl_id\") {\n            data.blId = parts[0];\n          } else if (viewByValue == \"fl_id\") {\n            data.blId = parts[0];\n            data.flId = parts[1];\n          }\n          this.blServ.getRmList(data).subscribe(res => {\n            this.allroomData = res.filter(each => each.commonAreaType == this.enumCommonAreaNoneType);\n            this.showAllRoomsPopup = true;\n          });\n        } else if (event.name == \"Allocated Area\") {\n          let parts = event.series.split(/-(.+)/);\n          if (viewByValue == \"bl_id\") {\n            this.filter.blId = parts[0];\n          } else if (viewByValue == \"fl_id\") {\n            this.filter.blId = parts[0];\n            this.filter.flId = parts[1];\n          } else if (viewByValue == \"div_id\") {\n            this.filter.divId = parts[0];\n          } else if (viewByValue == \"dep_id\") {\n            this.filter.divId = parts[0];\n            this.filter.depId = parts[1];\n          }\n          this.blServ.getspaceallocationstaticticsroomdata(this.filter).subscribe(res => {\n            if (res) {\n              this.roomData = res;\n              this.showAllocatedPopup = true;\n            }\n          });\n        }\n      }\n    }\n    exportChartToPDF() {\n      const divElement = this.chartContainer.nativeElement;\n      html2canvas(divElement).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        this.chartImg = [];\n        this.chartImg.push(imgData);\n        this.printPDF();\n      });\n    }\n    printPDF() {\n      this.messageService.clear();\n      var reportDetails = {\n        chartImg: this.chartImg,\n        title: 'View By ' + this.getlabelfromviewbyvalue(this.filterPanel.controls.viewBy.value)\n      };\n      this.bookingSrv.printPdf(reportDetails).subscribe(res => {\n        if (res != null) {\n          this.messageService.add({\n            key: 'spaceallocationMsg',\n            severity: 'success',\n            summary: 'PDF Created',\n            detail: 'PDF created successfully'\n          });\n          var file = new Blob([res], {\n            type: 'application/pdf'\n          });\n          var fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        }\n      });\n    }\n    exportGridToExcel() {\n      this.getDestructuredData(this.gridblfldata);\n      let excelHeaders = [];\n      import(\"xlsx\").then(xlsx => {\n        const worksheet = xlsx.utils.json_to_sheet(this.grid_array);\n        worksheet['!cols'] = [];\n        let lengthObj = Object.keys(this.gridblfldata[0]).length;\n        for (let i = 0; i < lengthObj; i++) {\n          worksheet['!cols'].push({\n            wch: 20\n          });\n        }\n        if (this.showSecondParam && this.showOnlyAllocationArea) {\n          excelHeaders = [this.firstParamName, this.secondParamName, \"Allocated Area (sq.ft)\"];\n        } else if (this.showSecondParam && !this.showOnlyAllocationArea) {\n          excelHeaders = [this.firstParamName, this.secondParamName, \"Total Area (sq.ft)\", \"Allocated Area (sq.ft)\", \"Available Area (sq.ft)\", \"Allocation (%)\"];\n        } else if (!this.showSecondParam && this.showOnlyAllocationArea) {\n          excelHeaders = [this.firstParamName, \"Allocated Area (sq.ft)\"];\n        } else if (!this.showSecondParam && !this.showOnlyAllocationArea) {\n          excelHeaders = [this.firstParamName, \"Total Area (sq.ft)\", \"Allocated Area (sq.ft)\", \"Available Area (sq.ft)\", \"Allocation (%)\"];\n        }\n        const headers = excelHeaders.map((header, index) => ({\n          v: header,\n          position: String.fromCharCode(65 + index) + 1\n        }));\n        headers.forEach(header => {\n          worksheet[header.position] = {\n            v: header.v\n          };\n        });\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = xlsx.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"allocation\");\n      });\n    }\n    getDestructuredData(data) {\n      this.grid_array = data.map(item => {\n        if (this.showSecondParam && this.showOnlyAllocationArea) {\n          return {\n            [this.firstParamName]: item['firstvalue'],\n            [this.secondParamName]: item['secondvalue'],\n            \"Allocated Area (sq.ft)\": item['occupiedarea']\n          };\n        } else if (this.showSecondParam && !this.showOnlyAllocationArea) {\n          return {\n            [this.firstParamName]: item['firstvalue'],\n            [this.secondParamName]: item['secondvalue'],\n            \"Total Area (sq.ft)\": item['totalarea'],\n            \"Allocated Area (sq.ft)\": item['occupiedarea'],\n            \"Available Area (sq.ft)\": item['availablearea'],\n            \"Allocation (%)\": item['allocationpercentage']\n          };\n        } else if (!this.showSecondParam && this.showOnlyAllocationArea) {\n          return {\n            [this.firstParamName]: item['firstvalue'],\n            \"Allocated Area (sq.ft)\": item['occupiedarea']\n          };\n        } else if (!this.showSecondParam && !this.showOnlyAllocationArea) {\n          return {\n            [this.firstParamName]: item['firstvalue'],\n            \"Total Area (sq.ft)\": item['totalarea'],\n            \"Allocated Area (sq.ft)\": item['occupiedarea'],\n            \"Available Area (sq.ft)\": item['availablearea'],\n            \"Allocation (%)\": item['allocationpercentage']\n          };\n        } else {\n          return null;\n        }\n      });\n    }\n    saveAsExcelFile(buffer, fileName) {\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      let EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    getlabelfromviewbyvalue(value) {\n      let result = this.viewByData.filter(each => each.value == value);\n      return result[0].lable;\n    }\n    checkactive(event) {\n      event.entries = [];\n      event.value = null;\n    }\n    static #_ = this.ɵfac = function SpaceAllocationStatisticsComponent_Factory(t) {\n      return new (t || SpaceAllocationStatisticsComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.DivisionService), i0.ɵɵdirectiveInject(i5.DepartmentService), i0.ɵɵdirectiveInject(i6.DatePipe), i0.ɵɵdirectiveInject(i7.EnumService), i0.ɵɵdirectiveInject(i8.BookingService), i0.ɵɵdirectiveInject(i9.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SpaceAllocationStatisticsComponent,\n      selectors: [[\"app-space-allocation-statistics\"]],\n      viewQuery: function SpaceAllocationStatisticsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 65,\n      vars: 46,\n      consts: [[1, \"card\"], [\"header\", \"Room Summary\", 3, \"toggleable\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"p-fluid\", \"p-field\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateFrom\", \"inputId\", \"icon\", 2, \"height\", \"32px\", 3, \"showIcon\", \"readonlyInput\", \"ngModelChange\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateTo\", \"inputId\", \"icon\", 3, \"showIcon\", \"readonlyInput\", \"ngModelChange\"], [\"width\", \"20%\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"viewBy\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"displayType\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [4, \"ngIf\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"divId\", \"bindLabel\", \"bindlabel\", \"bindValue\", \"divId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"depId\", \"bindLabel\", \"bindlabel\", \"bindValue\", \"depId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", 2, \"width\", \"67px\", \"margin-left\", \"32%\", \"margin-top\", \"20px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", 2, \"width\", \"67px\", \"margin-left\", \"5px\", \"margin-top\", \"20px\", 3, \"click\"], [\"style\", \"width:30px; display:inline-flex;margin-top:20px;\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"styleClass\", \"dark-panel\", \"id\", \"preview\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"key\", \"spaceallocationMsg\", \"position\", \"top-center\"], [\"key\", \"spaceallocationGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;margin-left:5px;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\", \"margin-left\", \"5px\"], [2, \"width\", \"30px\", \"display\", \"inline-flex\", \"margin-top\", \"20px\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 2, \"margin-left\", \"5px\", 3, \"click\"], [\"icon\", \"pi pi-file-pdf\", \"matTooltip\", \"Generate PDF\", \"matTooltipPosition\", \"below\", \"styleClass\", \"p-button-raised p-button-danger\", 2, \"width\", \"30px\", \"margin-left\", \"5px\", 3, \"click\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"430px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\"], [\"pTemplate\", \"emptymessage\"], [\"pSortableColumn\", \"firstvalue\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"firstvalue\"], [\"type\", \"text\", \"field\", \"firstvalue\", \"display\", \"menu\"], [\"pSortableColumn\", \"secondvalue\", 4, \"ngIf\"], [\"pSortableColumn\", \"totalarea\", 4, \"ngIf\"], [\"pSortableColumn\", \"occupiedarea\"], [\"field\", \"occupiedarea\"], [\"pSortableColumn\", \"availablearea\", 4, \"ngIf\"], [\"pSortableColumn\", \"allocationpercentage\", 4, \"ngIf\"], [\"pSortableColumn\", \"secondvalue\"], [\"field\", \"secondParamValue\"], [\"type\", \"text\", \"field\", \"secondvalue\", \"display\", \"menu\"], [\"pSortableColumn\", \"totalarea\"], [\"field\", \"totalarea\"], [\"pSortableColumn\", \"availablearea\"], [\"field\", \"availablearea\"], [\"pSortableColumn\", \"allocationpercentage\"], [\"field\", \"allocationpercentage\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"style\", \"text-align: right;\", 4, \"ngIf\"], [2, \"text-align\", \"right\"], [\"chartContainer\", \"\"], [\"style\", \"overflow-x: auto;\", 4, \"ngIf\"], [\"style\", \"width:100%;height:450px; display:flex;justify-content: center;align-items: center;\", 4, \"ngIf\"], [2, \"overflow-x\", \"auto\"], [3, \"view\", \"scheme\", \"results\", \"gradient\", \"xAxis\", \"yAxis\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\", \"showGridLines\", \"select\"], [2, \"width\", \"100%\", \"height\", \"450px\", \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\"], [2, \"margin\", \"0px\"], [3, \"data\"]],\n      template: function SpaceAllocationStatisticsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"label\", 7);\n          i0.ɵɵtext(9, \"Date From\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"p-calendar\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function SpaceAllocationStatisticsComponent_Template_p_calendar_ngModelChange_10_listener($event) {\n            return ctx.checkDates($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(11, \"td\", 4)(12, \"div\", 5)(13, \"div\", 6)(14, \"label\", 7);\n          i0.ɵɵtext(15, \"Date To\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"p-calendar\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function SpaceAllocationStatisticsComponent_Template_p_calendar_ngModelChange_16_listener($event) {\n            return ctx.checkDates($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(17, \"td\", 10)(18, \"div\", 5)(19, \"label\", 7);\n          i0.ɵɵtext(20, \"View By\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"ng-select\", 11);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_21_listener($event) {\n            return ctx.changeViewBy($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(22, \"td\", 10)(23, \"div\", 5)(24, \"label\", 12);\n          i0.ɵɵtext(25, \"Display Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"ng-select\", 13);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_26_listener($event) {\n            return ctx.onSelectDisplayType($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(27, \"td\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(28, SpaceAllocationStatisticsComponent_tr_28_Template, 7, 1, \"tr\", 14);\n          i0.ɵɵelementStart(29, \"tr\")(30, \"td\", 4)(31, \"div\", 5)(32, \"label\", 12);\n          i0.ɵɵtext(33, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"ng-select\", 15);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_34_listener($event) {\n            return ctx.onSelectBlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"td\", 4)(36, \"div\", 5)(37, \"label\", 12);\n          i0.ɵɵtext(38, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"ng-select\", 16);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_39_listener($event) {\n            return ctx.onSelectFlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(40, \"td\", 4)(41, \"div\", 5)(42, \"label\", 12);\n          i0.ɵɵtext(43, \"Division \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"ng-select\", 17);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_44_listener($event) {\n            return ctx.onSelectDivision($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(45, \"td\", 4)(46, \"div\", 5)(47, \"label\", 12);\n          i0.ɵɵtext(48, \"Department \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"ng-select\", 18);\n          i0.ɵɵlistener(\"change\", function SpaceAllocationStatisticsComponent_Template_ng_select_change_49_listener($event) {\n            return ctx.onSelectDepartment($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(50, \"td\")(51, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function SpaceAllocationStatisticsComponent_Template_button_click_51_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(52, \"button\", 20);\n          i0.ɵɵlistener(\"click\", function SpaceAllocationStatisticsComponent_Template_button_click_52_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(53, SpaceAllocationStatisticsComponent_div_53_Template, 2, 0, \"div\", 21);\n          i0.ɵɵtemplate(54, SpaceAllocationStatisticsComponent_div_54_Template, 2, 0, \"div\", 21);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵtemplate(55, SpaceAllocationStatisticsComponent_div_55_Template, 5, 8, \"div\", 22);\n          i0.ɵɵtemplate(56, SpaceAllocationStatisticsComponent_div_56_Template, 4, 2, \"div\", 14);\n          i0.ɵɵelementStart(57, \"p-dialog\", 23);\n          i0.ɵɵlistener(\"visibleChange\", function SpaceAllocationStatisticsComponent_Template_p_dialog_visibleChange_57_listener($event) {\n            return ctx.showAllocatedPopup = $event;\n          });\n          i0.ɵɵtemplate(58, SpaceAllocationStatisticsComponent_ng_template_58_Template, 2, 0, \"ng-template\", 24);\n          i0.ɵɵtemplate(59, SpaceAllocationStatisticsComponent_ng_template_59_Template, 1, 1, \"ng-template\", 25);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(60, \"p-dialog\", 23);\n          i0.ɵɵlistener(\"visibleChange\", function SpaceAllocationStatisticsComponent_Template_p_dialog_visibleChange_60_listener($event) {\n            return ctx.showAllRoomsPopup = $event;\n          });\n          i0.ɵɵtemplate(61, SpaceAllocationStatisticsComponent_ng_template_61_Template, 2, 0, \"ng-template\", 24);\n          i0.ɵɵtemplate(62, SpaceAllocationStatisticsComponent_ng_template_62_Template, 1, 1, \"ng-template\", 25);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(63, \"p-toast\", 26)(64, \"p-confirmDialog\", 27);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"toggleable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"showIcon\", false)(\"readonlyInput\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"showIcon\", false)(\"readonlyInput\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx.viewByData);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"searchable\", false)(\"items\", ctx.displayTypeData);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.filterPanel.controls[\"dateTo\"] == null ? null : ctx.filterPanel.controls[\"dateTo\"].errors);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumDivision)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.departmentData)(\"searchable\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.showGrid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showbarchart && ctx.barchartData.length > 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showGrid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showbarchart);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(44, _c2));\n          i0.ɵɵproperty(\"visible\", ctx.showAllocatedPopup)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n          i0.ɵɵadvance(3);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(45, _c3));\n          i0.ɵɵproperty(\"visible\", ctx.showAllRoomsPopup)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i6.NgIf, i3.ɵNgNoValidate, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i10.NzTableCellDirective, i10.NzThMeasureDirective, i10.NzTrDirective, i9.PrimeTemplate, i11.Table, i11.SortableColumn, i11.SortIcon, i11.ColumnFilter, i12.Calendar, i13.ButtonDirective, i13.Button, i14.Dialog, i15.Toast, i16.Panel, i17.ConfirmDialog, i18.NgSelectComponent, i19.MatTooltip, i20.SpaceAllocationRoomListComponent, i21.BarVertical2DComponent, i22.AddRoomReportTableComponent],\n      styles: [\"[_nghost-%COMP%]     .p-dialog-mask{z-index:1000!important}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-header{padding:.7rem!important}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-content{padding:.25rem!important}[_nghost-%COMP%]     .dark-panel.p-dialog .p-dialog-header{border:5px!important}[_nghost-%COMP%]     .ngx-charts-outer{animation:chartFadeIn linear 0!important}[_nghost-%COMP%]     .ngx-charts .grid-panel.odd rect{fill:none!important}\"]\n    });\n  }\n  return SpaceAllocationStatisticsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}