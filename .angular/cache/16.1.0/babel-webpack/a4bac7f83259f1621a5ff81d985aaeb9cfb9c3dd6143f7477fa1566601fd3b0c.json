{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { SvgViewComponent } from '../svg-view/svg-view.component';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BuildingFilterInputDTO } from '../background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport { FloorFilterInputDTO } from '../background-loc/model/DTO/FloorFilterInputDTO.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../background-loc/services/bl.service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../svg-view/services/svg-view.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"primeng/api\";\nimport * as i7 from \"src/app/services/enum.service\";\nimport * as i8 from \"../employee/services/employee.service\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@ng-select/ng-select\";\nimport * as i11 from \"primeng/button\";\nimport * as i12 from \"primeng/toast\";\nimport * as i13 from \"primeng/confirmdialog\";\nimport * as i14 from \"../svg-view/svg-view.component\";\nimport * as i15 from \"../Helpdesk/work-teams/widgets/em-list/em-list.component\";\nfunction AssignEmployeeRoomComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"h1\");\n    i0.ɵɵtext(2, \"No Floorplan available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AssignEmployeeRoomComponent_div_21_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.selectedRoomsMessage, \" \");\n  }\n}\nfunction AssignEmployeeRoomComponent_div_21_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"app-svg-view\", 28);\n    i0.ɵɵlistener(\"onRoomClick\", function AssignEmployeeRoomComponent_div_21_div_14_Template_app_svg_view_onRoomClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.roomOnClickListener($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AssignEmployeeRoomComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 17)(2, \"div\", 18)(3, \"div\", 19)(4, \"app-em-list\", 20);\n    i0.ɵɵlistener(\"parentFun\", function AssignEmployeeRoomComponent_div_21_Template_app_em_list_parentFun_4_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.getData($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"div\", 21)(6, \"div\", 22)(7, \"div\")(8, \"div\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, AssignEmployeeRoomComponent_div_21_div_10_Template, 2, 1, \"div\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\")(12, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function AssignEmployeeRoomComponent_div_21_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onAssigntoRooms());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function AssignEmployeeRoomComponent_div_21_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onCancelSelection());\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(14, AssignEmployeeRoomComponent_div_21_div_14_Template, 2, 0, \"div\", 26);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r1.selectionMessage);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.selectedSvgElementId.length > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r1.selectedSvgElementId.length > 0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r1.selectedSvgElementId.length > 0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.viewSvg);\n  }\n}\nfunction AssignEmployeeRoomComponent_ngx_spinner_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 29)(1, \"p\", 30);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport let AssignEmployeeRoomComponent = /*#__PURE__*/(() => {\n  class AssignEmployeeRoomComponent {\n    constructor(blServ, authSrv, svgViewSrv, formBuilder, cdr, spinner, messageService, enumservice, employeeservice) {\n      this.blServ = blServ;\n      this.authSrv = authSrv;\n      this.svgViewSrv = svgViewSrv;\n      this.formBuilder = formBuilder;\n      this.cdr = cdr;\n      this.spinner = spinner;\n      this.messageService = messageService;\n      this.enumservice = enumservice;\n      this.employeeservice = employeeservice;\n      this.allBl = [];\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.rowCount = 5;\n      this.viewSvg = false;\n      this.fileString = '';\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.rmcatdata = [];\n      this.rmtypeData = [];\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.selectedSvgElementId = '';\n      this.allSVGRoomsData = [];\n      this.allowSave = false;\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n      this.selectedEmployeeId = '';\n      this.selectedEmployeeName = '';\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      this.limitRm = 0;\n      this.offsetRm = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.filterPanel = this.formBuilder.group({\n        blId: [null, [Validators.required]],\n        flId: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      // this.compId = this.authSrv.getLoggedInUserCompId();\n      // this.loadAllBuilding();\n      // this.loadAllFloor();\n      this.scrollToEndBl();\n      this.scrollToEndFl();\n      this.loadNoneCommonAreaEnum();\n    }\n    loadAllBuilding() {\n      this.blServ.getALLBuilding().subscribe(res => {\n        this.enumBL = res;\n        this.enumBL = res.map(i => {\n          i.name = i.id + ' - ' + i.name;\n          return i;\n        });\n        //this.enumBL.unshift(new BuildingFilterInput('', 'Make a selection', '', this.compId));\n      });\n    }\n\n    loadAllFloor() {\n      this.blServ.getALLFloor().subscribe(res => {\n        this.enumAllFL = res;\n        this.enumAllFL = res.map(i => {\n          i.name = i.blId + '-' + i.id + ' - ' + i.name;\n          return i;\n        });\n        //this.enumAllFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n        this.enumFL = this.enumAllFL;\n      });\n    }\n    loadNoneCommonAreaEnum() {\n      this.enumservice.getEnums().subscribe(res => {\n        let commonareaEnumList = res.filter(t => t.tableName.toLocaleUpperCase() === 'rm'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'common_area_type'.toLocaleUpperCase() && t.enumValue.toLocaleUpperCase() === 'None'.toLocaleUpperCase());\n        this.commonAreaTypeNoneEnumValue = commonareaEnumList[0].id;\n      });\n    }\n    onSelectBlCode($event) {\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          flId: null\n        });\n        this.loadFloorCode($event.id);\n      }, 10);\n      if ($event.id != null) {\n        this.loadFloorCode($event.id);\n      } else {\n        this.limitFl = 0;\n        this.offsetFl = 0;\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n        this.scrollToEndFl();\n      }\n    }\n    loadFloorCode(bl_id) {\n      if (bl_id != null) {\n        // this.enumFL = [];\n        // this.enumFL = this.enumAllFL.filter(t => t.blId == bl_id)\n        // this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n        this.limitFl = 0;\n        this.offsetFl = 0;\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: bl_id,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n        this.scrollToEndFl();\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.id != null) {\n        const blData = {\n          blId: event.blId,\n          blNameString: event.blNameString\n        };\n        this.updateBlList(blData);\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {\n        // this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n      }\n    }\n    onSearch() {\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n      this.selectedSvgElementId = '';\n      this.displayNoFloorPlanInfo = false;\n      this.allowSave = false;\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.viewSvg = false;\n      this.showSpinner = true;\n      this.spinner.show();\n      this.getAllRoomsOfSvg(blId, flId);\n      let flData = this.enumFL.filter(i => i.blId == blId && i.id == flId);\n      //@ts-ignore\n      if (flData[0].svgName != null) {\n        let data = {\n          id: flId,\n          blId: blId,\n          name: '',\n          compId: this.compId,\n          svgName: '',\n          flInfo: '',\n          units: ''\n        };\n        this.svgViewSrv.getSVGFile(data).subscribe(res => {\n          if (res.code != 409) {\n            setTimeout(() => {\n              this.fileString = res.fileContent;\n              this.viewSvg = true;\n              this.cdr.detectChanges();\n              this.spinner.hide();\n              this.showSpinner = false;\n              this.selectionMessage = \"Please select Employee\";\n            }, 1000);\n          } else {\n            this.spinner.hide();\n            this.showSpinner = false;\n            this.displayNoFloorPlanInfo = true;\n          }\n        });\n      } else {\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.displayNoFloorPlanInfo = true;\n      }\n    }\n    getAllRoomsOfSvg(blId, flId) {\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.allSVGRoomsData = [];\n      let data = {\n        id: '',\n        name: '',\n        blId: blId,\n        flId: flId,\n        svgElementId: '',\n        compId: this.compId\n      };\n      this.blServ.getRmList(data).subscribe(res => {\n        if (res) {\n          this.allSVGRoomsData = res.filter(each => each.svgElementId != null && each.commonAreaType == this.commonAreaTypeNoneEnumValue);\n          this.allSVGRoomsData.forEach(rm => {\n            let idObj = {\n              roomElementId: rm.svgElementId,\n              assetElementId: null\n            };\n            let colorObj = {\n              roomColor: \"#ff6666\",\n              assetColor: null\n            };\n            let contentData = {\n              blId: parseInt(blId),\n              flId: parseInt(flId),\n              rmId: rm.rmId,\n              label: [rm.rmId],\n              showLabel: true,\n              highlightRoom: true,\n              svgElementId: idObj,\n              color: colorObj,\n              rmCode: '',\n              zoomAtRoom: false\n            };\n            this.svgRoomData.content.push(contentData);\n          });\n          this.svgRoomData.blId = parseInt(blId);\n          this.svgRoomData.flId = parseInt(flId);\n          this.svgRoomData.locate = \"room\";\n        }\n      });\n    }\n    onClear() {\n      this.viewSvg = false;\n      this.showSpinner = false;\n      this.displayNoFloorPlanInfo = false;\n      this.selectedSvgElementId = '';\n      this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n      this.showrmtypetable = false;\n      this.selectedRmCat = '';\n      this.selectedRmType = '';\n      this.allSVGRoomsData = [];\n      this.allowSave = false;\n      this.filterPanel.patchValue({\n        blId: null,\n        flId: null\n      });\n      this.selectionMessage = '';\n      this.selectionHighlightColor = '';\n      this.selectedRoomsMessage = '';\n    }\n    getData(event) {\n      this.selectedEmployeeId = event.data.emId;\n      this.selectedEmployeeName = event.data.firstName;\n      this.allowSave = true;\n      this.selectionMessage = \"Please select a room assign to : \" + this.selectedEmployeeName;\n      this.employeeservice.getEmById(this.selectedEmployeeId).subscribe(res => {\n        if (res) {\n          this.selectedEmployee = res;\n        }\n      });\n    }\n    roomOnClickListener(elementN) {\n      if (this.allowSave) {\n        this.selectedRoomsMessage = '';\n        let svgelid = '';\n        if (elementN.startsWith(\"label\")) {\n          svgelid = elementN.substring(\"label_\".length);\n        } else {\n          svgelid = elementN;\n        }\n        this.selectedSvgElementId = svgelid;\n        this.svgRoomData.content.forEach(svgData => {\n          if (svgData.svgElementId.roomElementId == this.selectedSvgElementId) {\n            svgData.highlightRoom = true;\n            svgData.color.roomColor = \"#6666ff\";\n            this.selectedRoomsMessage = \"Selected Room : \" + svgData.rmId;\n          } else {\n            svgData.highlightRoom = true;\n            svgData.color.roomColor = \"#ff6666\";\n          }\n        });\n        this.cdr.detectChanges();\n        this.svgViewComp.loadByDetails();\n      }\n    }\n    onAssigntoRooms() {\n      this.messageService.clear();\n      const matchingObj = this.allSVGRoomsData.find(rm => rm.svgElementId == this.selectedSvgElementId);\n      let empData = this.selectedEmployee;\n      empData.employeeLocation.blId = matchingObj.blId;\n      empData.employeeLocation.flId = matchingObj.flId;\n      empData.employeeLocation.rmId = matchingObj.rmId;\n      this.employeeservice.saveEmployee(empData).subscribe(res => {\n        if (res.code == 200) {\n          this.messageService.add({\n            key: 'employeeroomMsg',\n            severity: 'success',\n            summary: 'Record updated',\n            detail: 'Employee updated successfully'\n          });\n          this.onSearch();\n        }\n      });\n    }\n    onCancelSelection() {\n      this.onSearch();\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blServ.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n      });\n    }\n    scrollToEndFl() {\n      this.offsetFl = this.limitFl;\n      this.limitFl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitFl;\n      this.filterCriteria.offset = this.offsetFl;\n      this.blServ.getALLFloorByScroll(this.filterCriteria).subscribe(res => {\n        this.enumFL = res;\n        this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    searchFl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"flName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndFl();\n    }\n    updateBlList(blData) {\n      this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n      this.enumBL = this.enumBL.filter(t => t.blId !== null);\n      this.enumBL.unshift(blData);\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateFlList(flData) {\n      this.enumFL = this.enumFL.filter(t => t.flId !== flData.flId);\n      this.enumFL = this.enumFL.filter(t => t.flId !== null);\n      this.enumFL.unshift(flData);\n      this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n    }\n    static #_ = this.ɵfac = function AssignEmployeeRoomComponent_Factory(t) {\n      return new (t || AssignEmployeeRoomComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.SvgViewService), i0.ɵɵdirectiveInject(i4.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.NgxSpinnerService), i0.ɵɵdirectiveInject(i6.MessageService), i0.ɵɵdirectiveInject(i7.EnumService), i0.ɵɵdirectiveInject(i8.EmployeeService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AssignEmployeeRoomComponent,\n      selectors: [[\"app-assign-employee-room\"]],\n      viewQuery: function AssignEmployeeRoomComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(SvgViewComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svgViewComp = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 25,\n      vars: 11,\n      consts: [[1, \"card\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\"], [2, \"margin\", \"5px 0 0 5px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"click\"], [\"class\", \"card no-file-found\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [\"key\", \"employeeroomMsg\", \"position\", \"top-center\"], [\"key\", \"employeeroomGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"card\", \"no-file-found\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"height\", \"600px\"], [2, \"width\", \"25%\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [3, \"parentFun\"], [2, \"width\", \"70%\", \"margin\", \"5px\", \"height\", \"550px\"], [2, \"height\", \"50px\", \"display\", \"flex\", \"justify-content\", \"space-between\"], [4, \"ngIf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Save\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"style\", \"height:500px;\", 4, \"ngIf\"], [2, \"height\", \"500px\"], [3, \"onRoomClick\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function AssignEmployeeRoomComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function AssignEmployeeRoomComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.onSelectBlCode($event);\n          })(\"scrollToEnd\", function AssignEmployeeRoomComponent_Template_ng_select_scrollToEnd_8_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function AssignEmployeeRoomComponent_Template_ng_select_search_8_listener($event) {\n            return ctx.searchBl($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"td\", 3)(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"ng-select\", 7);\n          i0.ɵɵlistener(\"change\", function AssignEmployeeRoomComponent_Template_ng_select_change_13_listener($event) {\n            return ctx.onSelectFlCode($event);\n          })(\"scrollToEnd\", function AssignEmployeeRoomComponent_Template_ng_select_scrollToEnd_13_listener() {\n            return ctx.scrollToEndFl();\n          })(\"search\", function AssignEmployeeRoomComponent_Template_ng_select_search_13_listener($event) {\n            return ctx.searchFl($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(14, \"td\", 3)(15, \"td\", 3);\n          i0.ɵɵelementStart(16, \"td\", 3)(17, \"div\", 8)(18, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function AssignEmployeeRoomComponent_Template_button_click_18_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function AssignEmployeeRoomComponent_Template_button_click_19_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵtemplate(20, AssignEmployeeRoomComponent_div_20_Template, 3, 0, \"div\", 11);\n          i0.ɵɵtemplate(21, AssignEmployeeRoomComponent_div_21_Template, 15, 5, \"div\", 12);\n          i0.ɵɵtemplate(22, AssignEmployeeRoomComponent_ngx_spinner_22_Template, 3, 1, \"ngx-spinner\", 13);\n          i0.ɵɵelement(23, \"p-toast\", 14)(24, \"p-confirmDialog\", 15);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.displayNoFloorPlanInfo);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.viewSvg);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i9.NgIf, i10.NgSelectComponent, i11.ButtonDirective, i12.Toast, i13.ConfirmDialog, i4.ɵNgNoValidate, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.NgxSpinnerComponent, i14.SvgViewComponent, i15.EmListComponent],\n      styles: [\".no-file-found[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:600px}[_nghost-%COMP%]     .p-datatable-scrollable-body{overflow-y:auto!important}[_nghost-%COMP%]     .p-datatable-scrollable-header-box{padding:0!important}\"]\n    });\n  }\n  return AssignEmployeeRoomComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}