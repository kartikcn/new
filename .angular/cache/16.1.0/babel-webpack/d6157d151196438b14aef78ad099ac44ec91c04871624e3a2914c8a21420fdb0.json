{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { CountryFilterInput } from '../../modal/countryFilterInput.model';\nimport { RegnFilterInput } from '../region-list/regnFilterInput.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../services/country.service\";\nimport * as i3 from \"../../services/regn.service\";\nimport * as i4 from \"../../services/state.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@ng-select/ng-select\";\nimport * as i7 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddStateFormComponent_tr_13_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"State Code already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddStateFormComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 11);\n    i0.ɵɵtemplate(2, AddStateFormComponent_tr_13_label_2_Template, 2, 0, \"label\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r0.stateFormPanel.controls[\"stateCode\"] == null ? null : ctx_r0.stateFormPanel.controls[\"stateCode\"].errors.required));\n  }\n}\nexport let AddStateFormComponent = /*#__PURE__*/(() => {\n  class AddStateFormComponent {\n    constructor(formBuilder, cntrySrv, regnSrv, stateSrv) {\n      this.formBuilder = formBuilder;\n      this.cntrySrv = cntrySrv;\n      this.regnSrv = regnSrv;\n      this.stateSrv = stateSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumCntry = [];\n      this.enumRegn = [];\n      this.enumAllRegn = [];\n      this.previousState = '';\n      this.previousRegn = 0;\n      this.previousCtry = 0;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.stateFormPanel = this.formBuilder.group({\n        stateId: [null],\n        stateCode: ['', [Validators.required]],\n        stateName: [''],\n        ctryId: ['', [Validators.required]],\n        regnId: ['', [Validators.required]]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.stateFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadCntry();\n      this.loadRegn();\n    }\n    loadCntry() {\n      this.cntrySrv.getALLCountry().subscribe(res => {\n        this.enumCntry = res;\n        this.enumCntry = res.map(i => {\n          i.name = i.ctryCode + ' - ' + i.name;\n          return i;\n        });\n        this.enumCntry.unshift(new CountryFilterInput('', 'Make a selection'));\n      });\n    }\n    loadRegn() {\n      this.regnSrv.getALLRegn().subscribe(res => {\n        this.enumAllRegn = res;\n        this.enumAllRegn = res.map(i => {\n          i.name = i.code + ' - ' + i.name;\n          return i;\n        });\n        this.enumAllRegn.unshift(new RegnFilterInput('', 'Make a selection', ''));\n        this.enumRegn = this.enumAllRegn;\n      });\n    }\n    onSelectCountry($event) {\n      setTimeout(() => {\n        this.stateFormPanel.patchValue({\n          regnId: null\n        });\n      }, 10);\n      if ($event.id != null && $event.id != \"\") {\n        this.loadRegionCode($event.id);\n      } else {\n        this.enumRegn = this.enumAllRegn;\n        //this.enumRegn.unshift(new RegnFilterInput('', 'Make a selection', ''));\n      }\n    }\n\n    loadRegionCode(ctry_id) {\n      if (ctry_id != null) {\n        this.enumRegn = [];\n        this.enumRegn = this.enumAllRegn.filter(t => t.cntryId == ctry_id).map(i => {\n          if (!i.name.includes(i.code + ' - ')) {\n            i.name = i.ctryCode + ' - ' + i.name;\n          }\n          return i;\n        });\n        this.enumRegn.unshift(new RegnFilterInput('', 'Make a selection', ''));\n      }\n    }\n    onSelectRegion($event) {\n      if ($event.id != null && $event.id != \"\") {\n        setTimeout(() => {\n          this.stateFormPanel.patchValue({\n            ctryId: $event.cntryId\n          });\n        }, 10);\n      } else {}\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const stateDetails = {\n        stateId: this.stateFormPanel.controls.stateId.value,\n        stateCode: this.stateFormPanel.controls.stateCode.value,\n        stateName: this.stateFormPanel.controls.stateName.value,\n        ctryId: this.stateFormPanel.controls.ctryId.value,\n        regnId: this.stateFormPanel.controls.regnId.value\n      };\n      return stateDetails;\n    }\n    set value(value) {\n      this.previousState = value.stateCode;\n      this.previousCtry = value.ctryId;\n      this.previousRegn = value.regnId;\n      setTimeout(() => {\n        this.stateFormPanel.patchValue({\n          stateId: value.stateId,\n          stateCode: value.stateCode,\n          stateName: value.stateName,\n          ctryId: value.ctryId,\n          regnId: value.regnId\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.stateFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.stateFormPanel.valid ? null : {\n        stateFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddStateFormComponent_Factory(t) {\n      return new (t || AddStateFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CountryService), i0.ɵɵdirectiveInject(i3.RegnService), i0.ɵɵdirectiveInject(i4.StateService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddStateFormComponent,\n      selectors: [[\"app-add-state-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddStateFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddStateFormComponent),\n        multi: true\n      }])],\n      decls: 26,\n      vars: 8,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"stateCode\", \"formControlName\", \"stateCode\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"stateName\", \"formControlName\", \"stateName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [\"appendTo\", \"body\", \"formControlName\", \"ctryId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"regnId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [2, \"width\", \"25%\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddStateFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"State Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"State Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(13, AddStateFormComponent_tr_13_Template, 3, 1, \"tr\", 8);\n          i0.ɵɵelement(14, \"tr\");\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\", 2)(17, \"div\", 3)(18, \"label\", 4);\n          i0.ɵɵtext(19, \"Country Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"ng-select\", 9);\n          i0.ɵɵlistener(\"change\", function AddStateFormComponent_Template_ng_select_change_20_listener($event) {\n            return ctx.onSelectCountry($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(21, \"td\", 2)(22, \"div\", 3)(23, \"label\", 4);\n          i0.ɵɵtext(24, \"Region Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"ng-select\", 10);\n          i0.ɵɵlistener(\"change\", function AddStateFormComponent_Template_ng_select_change_25_listener($event) {\n            return ctx.onSelectRegion($event);\n          });\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.stateFormPanel);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngIf\", (ctx.stateFormPanel.controls[\"stateCode\"] == null ? null : ctx.stateFormPanel.controls[\"stateCode\"].errors) && ctx.stateFormPanel.controls[\"stateCode\"].dirty);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumCntry)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRegn)(\"searchable\", true);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i6.NgSelectComponent, i7.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddStateFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}