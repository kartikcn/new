{"ast":null,"code":"import { forwardRef, EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { Enums } from 'src/app/model/enums.model';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { Craftsperson } from 'src/app/ui/Helpdesk/craftsperson/model/craftsperson.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/users.service\";\nimport * as i4 from \"src/app/services/auth.service\";\nimport * as i5 from \"src/app/ui/employee/services/employee.service\";\nimport * as i6 from \"src/app/ui/Helpdesk/craftsperson/services/craftsperson.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@ng-select/ng-select\";\nimport * as i9 from \"primeng/checkbox\";\nimport * as i10 from \"ng-zorro-antd/table\";\nimport * as i11 from \"ng-zorro-antd/form\";\nimport * as i12 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddUserComponent_form_0_tr_13_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵtext(1, \"User Name is already exists \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddUserComponent_form_0_tr_13_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵtext(1, \"Please enter valid Email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddUserComponent_form_0_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 15);\n    i0.ɵɵtemplate(2, AddUserComponent_form_0_tr_13_label_2_Template, 2, 0, \"label\", 16);\n    i0.ɵɵtemplate(3, AddUserComponent_form_0_tr_13_label_3_Template, 2, 0, \"label\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"td\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r3.userFormPanel.controls[\"userName\"] == null ? null : ctx_r3.userFormPanel.controls[\"userName\"].errors.required) && !(ctx_r3.userFormPanel.controls[\"userName\"] == null ? null : ctx_r3.userFormPanel.controls[\"userName\"].errors.email));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.userFormPanel.controls[\"userName\"] == null ? null : ctx_r3.userFormPanel.controls[\"userName\"].errors.email);\n  }\n}\nfunction AddUserComponent_form_0_div_22_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"input\", 20);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction AddUserComponent_form_0_div_22_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-select\", 21);\n    i0.ɵɵlistener(\"change\", function AddUserComponent_form_0_div_22_ng_template_4_Template_ng_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r11.onSelectEmploye($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r10.enumEmp)(\"searchable\", true);\n  }\n}\nfunction AddUserComponent_form_0_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"label\", 8);\n    i0.ɵɵtext(2, \"Employee Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AddUserComponent_form_0_div_22_ng_container_3_Template, 2, 0, \"ng-container\", 18);\n    i0.ɵɵtemplate(4, AddUserComponent_form_0_div_22_ng_template_4_Template, 1, 3, \"ng-template\", null, 19, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(5);\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.isCreateNewEmployee)(\"ngIfElse\", _r9);\n  }\n}\nfunction AddUserComponent_form_0_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 22)(2, \"p-checkbox\", 23);\n    i0.ɵɵlistener(\"onChange\", function AddUserComponent_form_0_div_30_Template_p_checkbox_onChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onCheckBoxChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 24);\n    i0.ɵɵtext(4, \"Create new employee\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"control-label\": a0\n  };\n};\nfunction AddUserComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 2)(1, \"table\", 3)(2, \"tr\")(3, \"td\", 4)(4, \"div\", 5)(5, \"label\", 6);\n    i0.ɵɵtext(6, \"User Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"td\", 4)(9, \"div\", 5)(10, \"label\", 8);\n    i0.ɵɵtext(11, \"User Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"ng-select\", 9);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(13, AddUserComponent_form_0_tr_13_Template, 5, 2, \"tr\", 10);\n    i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 4)(16, \"div\", 5)(17, \"label\", 8);\n    i0.ɵɵtext(18, \"User Role\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"ng-select\", 11);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(20, \"tr\")(21, \"td\", 4);\n    i0.ɵɵtemplate(22, AddUserComponent_form_0_div_22_Template, 6, 2, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"td\", 4)(24, \"div\", 5)(25, \"label\", 13);\n    i0.ɵɵtext(26, \"Technician Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(27, \"ng-select\", 14);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(28, \"tr\")(29, \"td\", 4);\n    i0.ɵɵtemplate(30, AddUserComponent_form_0_div_30_Template, 5, 0, \"div\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"tr\");\n    i0.ɵɵelement(32, \"td\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.userFormPanel);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx_r0.isNew));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"readonly\", ctx_r0.isNew == true ? null : true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.enumStatus)(\"searchable\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userFormPanel.controls[\"userName\"].errors && ctx_r0.userFormPanel.controls[\"userName\"].invalid);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.enumRole)(\"searchable\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isShow);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.technicianData)(\"searchable\", true);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isCreateNewEmployeeChkBox);\n  }\n}\nfunction AddUserComponent_ng_template_1_Template(rf, ctx) {}\nexport let AddUserComponent = /*#__PURE__*/(() => {\n  class AddUserComponent {\n    constructor(enumsrv, formBuilder, userSrv, authSrv, emSrv, technicianServ) {\n      this.enumsrv = enumsrv;\n      this.formBuilder = formBuilder;\n      this.userSrv = userSrv;\n      this.authSrv = authSrv;\n      this.emSrv = emSrv;\n      this.technicianServ = technicianServ;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumUsers = [];\n      this.enumStatus = [];\n      this.enumRole = [];\n      this.user_name_exists = false;\n      this.enumEmp = [];\n      this.isCreateNewEmployee = true;\n      this.isCreateNewEmployeeChkBox = false;\n      this.isShow = false;\n      this.isCompanyShow = false;\n      this.technicianData = [];\n      this.isProfile = false;\n      this.notifyParent = new EventEmitter();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      /// Start Of Building Form \n      this.userFormPanel = this.formBuilder.group({\n        userId: [null],\n        userName: ['', [Validators.required, this.checkUserExistsValidator(), Validators.email]],\n        userStatus: ['', [Validators.required]],\n        userRoleId: ['', [Validators.required]],\n        deviceId: [''],\n        ipAddress: [''],\n        emId: ['', [Validators.required]],\n        technicianId: ['']\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.userFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.user_name_exists = false;\n      this.loadEnums();\n      this.loadUserRoles();\n      // this.setComp();\n      const id = 0;\n      this.loadUnAssignedTechnician(id);\n      this.loadUnAssignEmployee(id);\n    }\n    setComp() {\n      // const compId = this.authSrv.getLoggedInUserCompId();\n      // if (compId == 1){\n      //   this.isCompanyShow = true;\n      //   this.loadCompany();\n      // }\n      // setTimeout(() => {\n      //   this.userFormPanel.patchValue({\n      //     compId: compId\n      //   });\n      // }, 0);\n    }\n    // loadCompany(){\n    //   this.compSrv.getAllCompany().subscribe((res:CompanyInput[])=>{\n    //     this.enumCompany = res;\n    //   })\n    // }\n    loadUserRoles() {\n      this.userSrv.getUserRole().subscribe(res => {\n        this.enumRole = res;\n      });\n    }\n    /// Start Of Form Validation Related Code\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.userFormPanel.controls).forEach(key => {\n        let field = this.userFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    /// Start Of Reference Data Initiation\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumUsers = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'fm_users'.toLocaleUpperCase());\n        this.enumStatus = this.enumUsers.filter(t => t.fieldName.toLocaleUpperCase() === 'user_status'.toLocaleUpperCase());\n        this.enumStatus.unshift(new Enums(null, \"\", \"\", 'Make a selection'));\n        this.populateUserStatus();\n      }, error => {\n        // this.loginError = error.errorDesc;\n      });\n    }\n    populateUserStatus() {\n      if (this.isNew) {\n        setTimeout(() => {\n          this.userFormPanel.patchValue({\n            userStatus: 1\n          });\n        }, 0);\n      }\n    }\n    checkUserExistsValidator() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n          this.userFormPanel.controls['userName'].setErrors(null);\n          this.userFormPanel.clearAsyncValidators();\n          this.userFormPanel.updateValueAndValidity();\n          this.userSrv.validateUserName(control.value).subscribe(res => {\n            if (res && res.text == \"true\") {\n              this.userFormPanel.controls['userName'].setErrors({\n                'incorrect': true\n              });\n              this.userFormPanel.updateValueAndValidity();\n              return {\n                'incorrect': true\n              };\n            } else {\n              return null;\n            }\n          });\n        }\n        return null;\n      };\n    }\n    /// Start Preparing Entered Data Model\n    get value() {\n      const records = {\n        userId: this.userFormPanel.controls.userId.value,\n        userName: this.userFormPanel.controls.userName.value,\n        userStatus: this.userFormPanel.controls.userStatus.value,\n        userRoleId: this.userFormPanel.controls.userRoleId.value,\n        deviceId: this.userFormPanel.controls.deviceId.value,\n        ipAddress: this.userFormPanel.controls.ipAddress.value,\n        emId: this.userFormPanel.controls.emId.value,\n        compId: this.authSrv.getLoggedInUserCompId(),\n        technicianId: this.userFormPanel.controls.technicianId.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.userFormPanel.patchValue({\n          userName: value.userName,\n          userId: value.userId,\n          userStatus: value.userStatus,\n          userRoleId: value.userRoleId,\n          deviceId: value.deviceId,\n          ipAddress: value.ipAddress,\n          emId: value.emId,\n          compId: value.compId,\n          technicianId: value.technicianId\n        });\n        this.isCreateEmp(value.emId);\n        this.loadUnAssignEmployee(value.emId ? value.emId : 0);\n        this.setComp();\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.userFormPanel.reset();\n        this.isCreateEmp(null);\n        this.loadUnAssignEmployee(0);\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.userFormPanel.valid ? null : {\n        userFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    onCheckBoxChange(event) {\n      this.isShow = event.checked ? true : false;\n      if (this.isShow) {\n        this.userFormPanel.patchValue({\n          \"emId\": \"0\"\n        });\n      } else {\n        this.userFormPanel.patchValue({\n          \"emId\": \"\"\n        });\n      }\n      this.notifyParentPanel(this.isShow, \"0\");\n    }\n    notifyParentPanel(isShow, em_id) {\n      let data = {\n        \"showEmpPanel\": isShow,\n        \"em_id\": em_id\n      };\n      this.notifyParent.emit(data);\n    }\n    onChangeEmp(isShow, em_id) {\n      this.notifyParentPanel(isShow, em_id);\n    }\n    isCreateEmp(em_id) {\n      if (em_id != null) {\n        this.isCreateNewEmployeeChkBox = false;\n      } else {\n        this.isCreateNewEmployeeChkBox = this.isCreateNewEmployee = true;\n      }\n    }\n    loadUnAssignEmployee(emId) {\n      this.emSrv.getAllUnAssignEmployees(emId).subscribe(res => {\n        this.enumEmp = res;\n        //   this.enumEmp =  this.enumEmp.map(i=>{i.name = i.emCode + \" - \"+ i.name; return i;});\n        this.enumEmp.unshift({\n          id: null,\n          name: 'Make a selection'\n        });\n      });\n    }\n    onSelectEmploye(event) {\n      if (event && event.id != null) {\n        this.onChangeEmp(true, event.id);\n        this.isCreateNewEmployeeChkBox = false;\n      } else {\n        this.isCreateNewEmployeeChkBox = true;\n        this.onChangeEmp(false, \"0\");\n      }\n    }\n    loadUnAssignedTechnician(technicianId) {\n      this.technicianServ.getUnAssignedTechnician(technicianId).subscribe(res => {\n        if (res) {\n          this.technicianData = res;\n          this.technicianData.unshift(new Craftsperson(null, \"Make a selection\", \"\", \"\", 0, 0, 0, \"\", 0, 0, 0, 0, 0, \"\"));\n        } else {\n          this.technicianData = [];\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AddUserComponent_Factory(t) {\n      return new (t || AddUserComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.UsersService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.EmployeeService), i0.ɵɵdirectiveInject(i6.CraftspersonService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddUserComponent,\n      selectors: [[\"app-add-user-items\"]],\n      inputs: {\n        isNew: \"isNew\",\n        isProfile: \"isProfile\"\n      },\n      outputs: {\n        notifyParent: \"notifyParent\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddUserComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddUserComponent),\n        multi: true\n      }])],\n      decls: 3,\n      vars: 2,\n      consts: [[\"nz-form\", \"\", 3, \"formGroup\", 4, \"ngIf\", \"ngIfElse\"], [\"profiletemplate\", \"\"], [\"nz-form\", \"\", 3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", 3, \"ngClass\"], [\"type\", \"text\", \"name\", \"userName\", \"formControlName\", \"userName\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"userStatus\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [4, \"ngIf\"], [\"appendTo\", \"body\", \"formControlName\", \"userRoleId\", \"bindLabel\", \"roleTitle\", \"bindValue\", \"userRoleId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"class\", \"input-label-custom \", 4, \"ngIf\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"technicianId\", \"bindLabel\", \"name\", \"bindValue\", \"cfId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"width\", \"calc(100% / 2)\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [4, \"ngIf\", \"ngIfElse\"], [\"elseTemplate\", \"\"], [\"type\", \"text\", \"name\", \"emId\", \"formControlName\", \"emId\", \"readonly\", \"true\", 1, \"form-control\"], [\"appendTo\", \"body\", \"formControlName\", \"emId\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [1, \"p-field-checkbox\"], [\"binary\", \"true\", 3, \"onChange\"], [1, \"checkbox-custom-label\", 2, \"margin-left\", \"2px\", \"font-style\", \"italic\"]],\n      template: function AddUserComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AddUserComponent_form_0_Template, 33, 17, \"form\", 0);\n          i0.ɵɵtemplate(1, AddUserComponent_ng_template_1_Template, 0, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isProfile == false)(\"ngIfElse\", _r1);\n        }\n      },\n      dependencies: [i7.NgClass, i7.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName, i8.NgSelectComponent, i9.Checkbox, i10.NzTableCellDirective, i10.NzTrDirective, i11.NzFormDirective, i12.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.ng-select.ng-select-single[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{border-radius:0!important}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card[_ngcontent-%COMP%]{padding:0;border:thin double rgb(181,155,90)}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}\"]\n    });\n  }\n  return AddUserComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}