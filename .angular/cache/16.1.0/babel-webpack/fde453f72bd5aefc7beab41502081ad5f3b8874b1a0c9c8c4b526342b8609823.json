{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { RmcatFilterInput } from '../../../rmcat/modal/rmcatFilterInput.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../services/rmcat.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nfunction AddRmtypeFormComponent_tr_14_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 14);\n    i0.ɵɵtext(1, \"Room Type is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRmtypeFormComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 12);\n    i0.ɵɵtemplate(2, AddRmtypeFormComponent_tr_14_label_2_Template, 2, 0, \"label\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"td\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.rmTypeFormPanel.controls[\"rmType\"] == null ? null : ctx_r0.rmTypeFormPanel.controls[\"rmType\"].errors) && !(ctx_r0.rmTypeFormPanel.controls[\"rmType\"] == null ? null : ctx_r0.rmTypeFormPanel.controls[\"rmType\"].errors.required));\n  }\n}\nexport let AddRmtypeFormComponent = /*#__PURE__*/(() => {\n  class AddRmtypeFormComponent {\n    constructor(formBuilder, rmcatSrv) {\n      this.formBuilder = formBuilder;\n      this.rmcatSrv = rmcatSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.enumRmcats = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.rmTypeFormPanel = this.formBuilder.group({\n        rmCat: ['', [Validators.required, this.checkUserExistsValidator()]],\n        rmType: ['', [Validators.required, this.checkUserExistsValidator()]],\n        rmTypeDesc: [''],\n        highlightColor: ['#a6a6a6']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.rmTypeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadRmcats();\n    }\n    loadRmcats() {\n      this.rmcatSrv.getALLRmcats().subscribe(res => {\n        this.enumRmcats = res;\n        this.enumRmcats = res.map(i => {\n          i.rmCatDesc = i.rmCat + ' - ' + i.rmCatDesc;\n          return i;\n        });\n        this.enumRmcats.unshift(new RmcatFilterInput('', 'Make a selection'));\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const flDetails = {\n        rmCat: this.rmTypeFormPanel.controls.rmCat.value,\n        rmType: this.rmTypeFormPanel.controls.rmType.value,\n        rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n        highlightColor: this.rmTypeFormPanel.controls.highlightColor.value\n      };\n      return flDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.rmTypeFormPanel.patchValue({\n          rmCat: value.rmCat,\n          rmType: value.rmType,\n          rmTypeDesc: value.rmTypeDesc,\n          highlightColor: value.highlightColor ?? '#a6a6a6'\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.rmTypeFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    checkUserExistsValidator() {\n      return control => {\n        if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n          this.rmTypeFormPanel.controls['rmType'].setErrors(null);\n          this.rmTypeFormPanel.clearAsyncValidators();\n          this.rmTypeFormPanel.updateValueAndValidity();\n          let rmStandard = this.rmTypeFormPanel.controls.rmCat.value;\n          let rmType = this.rmTypeFormPanel.controls.rmType.value;\n          this.rmcatSrv.validateRmType(rmType, rmStandard).subscribe(res => {\n            if (res && res.text == \"true\") {\n              this.rmTypeFormPanel.controls['rmType'].setErrors({\n                'incorrect': true\n              });\n              this.rmTypeFormPanel.updateValueAndValidity();\n              return {\n                'incorrect': true\n              };\n            } else {\n              return null;\n            }\n          });\n        }\n        return null;\n      };\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.rmTypeFormPanel.valid ? null : {\n        rmTypeFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddRmtypeFormComponent_Factory(t) {\n      return new (t || AddRmtypeFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.RmcatService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRmtypeFormComponent,\n      selectors: [[\"app-add-rmtype-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRmtypeFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRmtypeFormComponent),\n        multi: true\n      }])],\n      decls: 28,\n      vars: 8,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"rmCat\", \"bindLabel\", \"rmCatDesc\", \"bindValue\", \"rmCat\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"readonly\", \"searchable\"], [\"type\", \"text\", \"name\", \"rmType\", \"formControlName\", \"rmType\", \"maxlength\", \"32\", 1, \"form-control\", 3, \"readonly\", \"keydown.space\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [3, \"nzMaxCharacterCount\"], [\"name\", \"rmTypeDesc\", \"formControlName\", \"rmTypeDesc\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"64\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"], [2, \"width\", \"calc(100% / 2)\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddRmtypeFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Room Category\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"ng-select\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 3)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Room Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"input\", 6);\n          i0.ɵɵlistener(\"keydown.space\", function AddRmtypeFormComponent_Template_input_keydown_space_13_listener($event) {\n            return $event.preventDefault();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(14, AddRmtypeFormComponent_tr_14_Template, 4, 1, \"tr\", 7);\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\", 2)(17, \"div\", 3)(18, \"label\", 8);\n          i0.ɵɵtext(19, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"nz-textarea-count\", 9);\n          i0.ɵɵelement(21, \"textarea\", 10);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 2)(24, \"div\", 3)(25, \"label\", 4);\n          i0.ɵɵtext(26, \"Highlight Color \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 11);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.rmTypeFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRmcats)(\"readonly\", !ctx.isNew)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.rmTypeFormPanel.controls[\"rmType\"] == null ? null : ctx.rmTypeFormPanel.controls[\"rmType\"].errors) && ctx.rmTypeFormPanel.controls[\"rmType\"].dirty);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"nzMaxCharacterCount\", 64);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzTextareaCountComponent, i6.NzInputDirective]\n    });\n  }\n  return AddRmtypeFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}