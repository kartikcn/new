{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sla-request-parameters.service\";\nimport * as i2 from \"../../providers/add-sla-request-steps-provider\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/table\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/card\";\nimport * as i10 from \"primeng/confirmdialog\";\nfunction WrStatusCardsComponent_div_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 13);\n    i0.ɵɵlistener(\"click\", function WrStatusCardsComponent_div_1_ng_template_3_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const item_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.addSteps(item_r1.status.enumKey));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WrStatusCardsComponent_div_1_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 14)(1, \"td\", 15)(2, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function WrStatusCardsComponent_div_1_ng_template_7_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const step_r10 = restoredCtx.$implicit;\n      const item_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onEdit(step_r10, item_r1.status.enumKey));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\", 15)(4, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function WrStatusCardsComponent_div_1_ng_template_7_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const step_r10 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDelete(step_r10));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const step_r10 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"pSelectableRow\", step_r10);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r4.getStepTypeEnumById(step_r10.stepType));\n  }\n}\nfunction WrStatusCardsComponent_div_1_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nfunction WrStatusCardsComponent_div_1_ng_template_9_Template(rf, ctx) {}\nconst _c0 = function (a0) {\n  return {\n    \"readonly-panel\": a0\n  };\n};\nfunction WrStatusCardsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"p-card\", 6);\n    i0.ɵɵtemplate(3, WrStatusCardsComponent_div_1_ng_template_3_Template, 1, 0, \"ng-template\", 7);\n    i0.ɵɵelementStart(4, \"p\")(5, \"p-table\", 8, 9);\n    i0.ɵɵtemplate(7, WrStatusCardsComponent_div_1_ng_template_7_Template, 7, 2, \"ng-template\", 10);\n    i0.ɵɵtemplate(8, WrStatusCardsComponent_div_1_ng_template_8_Template, 3, 1, \"ng-template\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(9, WrStatusCardsComponent_div_1_ng_template_9_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"header\", item_r1.status.enumValue);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, item_r1.hide));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"value\", item_r1.steps);\n  }\n}\nexport let WrStatusCardsComponent = /*#__PURE__*/(() => {\n  class WrStatusCardsComponent {\n    constructor(slaReqSrv, addSlaRequestDialogueProvider, zone, messageService, confirmationService, enumsrv) {\n      this.slaReqSrv = slaReqSrv;\n      this.addSlaRequestDialogueProvider = addSlaRequestDialogueProvider;\n      this.zone = zone;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.enumsrv = enumsrv;\n      this.wrStatus = [];\n      this.slaStepsData = [];\n      this.stepsWithStatusData = [];\n      this.slaResponseParametersId = 0;\n      this.wrStepsData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumAutoIssue = [];\n      this.enumAutoApproval = [];\n      this.idForAutoIssueYes = 0;\n      this.idForAutoApprovalYes = 0;\n      this.enumWr = [];\n      this.enumWrSteps = [];\n      this.enumStepType = [];\n    }\n    ngOnInit() {\n      this.stepsWithStatusData = [];\n      this.loadEnums();\n    }\n    loadWrStatus() {\n      this.wrStatus = [];\n      this.stepsWithStatusData = [];\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.wrStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        // this.enumWrSteps = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase());\n        this.enumStepType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'step_type'.toLocaleUpperCase());\n        this.getCombinedData();\n      });\n    }\n    loadStepsBySlaResponseParamId(data) {\n      this.slaStepsData = [];\n      if (data) {\n        this.slaResponseParametersId = data.slaResponseParametersId;\n        this.slaReqSrv.getSlaStepsList(data.slaResponseParametersId).subscribe(res => {\n          this.slaStepsData = res;\n          this.loadWrStatus();\n        });\n      } else {\n        this.slaResponseParametersId = 0;\n        this.wrStatus = [];\n        this.slaStepsData = [];\n        this.getCombinedData();\n      }\n    }\n    getCombinedData() {\n      this.zone.run(() => {\n        this.stepsWithStatusData = [];\n        if (this.wrStatus.length > 0) {\n          const combinedArray = this.wrStatus.map(wrStatus => {\n            const stepsForStatus = this.slaStepsData.filter(step => step.wrStatus === wrStatus.enumKey);\n            const isHidden = this.shouldMakeReadOnly(wrStatus);\n            return {\n              status: wrStatus,\n              steps: stepsForStatus,\n              hide: isHidden\n            };\n          });\n          this.stepsWithStatusData = combinedArray;\n        }\n      });\n    }\n    getStepNameByStepId(stepId) {\n      return this.wrStepsData.find(t => t.stepId === stepId)?.step;\n    }\n    addSteps(status) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        wrStatus: status,\n        slaResponseParametersId: this.slaResponseParametersId,\n        isEdit: false,\n        newRecord: true\n      };\n      this.addSlaRequestDialogueProvider.openDialog(dialogConfig);\n      this.addSlaRequestDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result && result.slaRequestStepsId && result.slaRequestStepsId > 0) {\n          this.messageService.add({\n            key: 'saveStep',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadStepsBySlaResponseParamId(result);\n        } else if (result && result.text && result.text.length > 0) {\n          this.messageService.add({\n            key: 'saveStep',\n            severity: 'warn',\n            summary: 'Warning',\n            detail: 'SLA Steps already exists'\n          });\n        }\n      });\n    }\n    onEdit(step, status) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '700px';\n      dialogConfig.data = {\n        step: step,\n        wrStatus: status,\n        slaResponseParametersId: this.slaResponseParametersId,\n        isEdit: true,\n        newRecord: false\n      };\n      this.addSlaRequestDialogueProvider.openDialog(dialogConfig);\n      this.addSlaRequestDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result && result.slaRequestStepsId && result.slaRequestStepsId > 0) {\n          this.messageService.add({\n            key: 'saveStep',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadStepsBySlaResponseParamId(result);\n        } else if (result.text.length > 0) {\n          this.messageService.add({\n            key: 'saveStep',\n            severity: 'warn',\n            summary: 'Warning',\n            detail: 'SLA Steps already exists'\n          });\n        }\n      });\n    }\n    onDelete(slaRequestStep) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.delete(slaRequestStep);\n        },\n        key: \"mygrid\"\n      });\n    }\n    delete(slaRequestStep) {\n      this.slaReqSrv.deleteSlaRequestStep(slaRequestStep.slaRequestStepsId).subscribe(res => {\n        if (res.text === \"Record Deleted\") {\n          //this.messageService.add({ key: 'saveStep', severity: 'success', summary: 'Record deleted successfully', detail: 'Record deleted successfully' });\n          this.loadStepsBySlaResponseParamId(slaRequestStep);\n        }\n      });\n    }\n    shouldMakeReadOnly(wrStatus) {\n      if (this.slaResponseParameters.autoIssue === this.idForAutoIssueYes) {\n        if (wrStatus.enumValue === \"Requested\" || wrStatus.enumValue === \"Approved\" || wrStatus.enumValue === \"Rejected\") {\n          this.deleteSteps(wrStatus.wrStatusId);\n          return true;\n        } else {\n          return false;\n        }\n      } else if (this.slaResponseParameters.autoApproval === this.idForAutoApprovalYes && this.slaResponseParameters.autoIssue != this.idForAutoIssueYes) {\n        if (wrStatus.enumValue === \"Requested\" || wrStatus.enumValue === \"Rejected\") {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      return false;\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.wrStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        // this.enumClonedList = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase());\n        this.enumAutoIssue = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'auto_issue'.toLocaleUpperCase());\n        this.enumAutoIssue.forEach(t => {\n          if (t.enumValue === \"Yes\") {\n            this.idForAutoIssueYes = t.enumKey;\n          }\n        });\n        this.enumAutoApproval = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'auto_approval'.toLocaleUpperCase());\n        this.enumAutoApproval.forEach(t => {\n          if (t.enumValue === \"Yes\") {\n            this.idForAutoApprovalYes = t.enumKey;\n          }\n        });\n        //this.loadWrSteps();\n      }, error => {});\n    }\n    deleteSteps(wrStatusId) {\n      this.slaStepsData.forEach(t => {\n        if (t.wrStatus === wrStatusId) {\n          this.delete(t);\n        }\n      });\n    }\n    getStepTypeEnumById(enumKey) {\n      return this.enumStepType.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    static #_ = this.ɵfac = function WrStatusCardsComponent_Factory(t) {\n      return new (t || WrStatusCardsComponent)(i0.ɵɵdirectiveInject(i1.SLARequestServices), i0.ɵɵdirectiveInject(i2.AddSlaRequestDialogueProvider), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i4.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: WrStatusCardsComponent,\n      selectors: [[\"app-wr-status-cards\"]],\n      inputs: {\n        refresh: \"refresh\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 4,\n      vars: 1,\n      consts: [[\"id\", \"wrStatusCardComponent\", 1, \"p-d-flex\", \"p-flex-column\"], [\"class\", \"ng-value\", \"style\", \"margin-bottom:1%;\", 4, \"ngFor\", \"ngForOf\"], [\"key\", \"saveStep\", \"position\", \"top-right\"], [\"key\", \"mygrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"ng-value\", 2, \"margin-bottom\", \"1%\"], [1, \"p-mb-2\"], [\"styleClass\", \"p-card-shadow\", 3, \"header\", \"ngClass\"], [\"pTemplate\", \"header\"], [3, \"value\"], [\"dt1\", \"\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"pTemplate\", \"footer\"], [\"id\", \"add-btn\", \"icon\", \"pi pi-plus\", \"matTooltip\", \"Add\", \"matTooltipPosition\", \"above\", 1, \"pull-right\", \"m-3\", 3, \"click\"], [3, \"pSelectableRow\"], [2, \"width\", \"4rem\"], [\"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", \"icon\", \"pi pi-pencil\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-times\", \"type\", \"button\", 1, \"p-button-text\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"]],\n      template: function WrStatusCardsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, WrStatusCardsComponent_div_1_Template, 10, 5, \"div\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"p-toast\", 2)(3, \"p-confirmDialog\", 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.stepsWithStatusData);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgForOf, i3.PrimeTemplate, i6.Table, i6.SelectableRow, i7.ButtonDirective, i7.Button, i8.Toast, i9.Card, i10.ConfirmDialog],\n      styles: [\"[_nghost-%COMP%]     .p-card .p-card-title{font-size:1rem!important;font-weight:700!important}.p-card[_ngcontent-%COMP%]   .p-button[_ngcontent-%COMP%]{margin-top:8px;margin-right:0;padding-left:12px;padding-right:12px}.readonly-panel[_ngcontent-%COMP%]{opacity:.5;pointer-events:none}[_nghost-%COMP%]     #add-btn .p-button{background-color:#fff!important;border-radius:50%;border:2px solid #2196F3}[_nghost-%COMP%]     .pi.pi-plus{color:#2196f3}\"]\n    });\n  }\n  return WrStatusCardsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}