{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PositiveIntegerDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.POSITIVE_INTEGER_PATTERN = /^\\d+$/;\n  }\n  onInputChange(event) {\n    const inputElement = this.elementRef.nativeElement;\n    const inputValue = inputElement.value;\n    let sanitizedValue = inputValue.replace(/[^\\d]/g, '');\n    if (sanitizedValue !== '' && Number(sanitizedValue) === 0) {\n      sanitizedValue = '0'; // allow zero as a valid input\n    }\n\n    inputElement.value = sanitizedValue;\n    inputElement.dispatchEvent(new Event('input'));\n  }\n  static #_ = this.ɵfac = function PositiveIntegerDirective_Factory(t) {\n    return new (t || PositiveIntegerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: PositiveIntegerDirective,\n    selectors: [[\"\", \"appPositiveInteger\", \"\"]],\n    hostBindings: function PositiveIntegerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function PositiveIntegerDirective_input_HostBindingHandler($event) {\n          return ctx.onInputChange($event);\n        });\n      }\n    }\n  });\n}","map":{"version":3,"names":["PositiveIntegerDirective","constructor","elementRef","POSITIVE_INTEGER_PATTERN","onInputChange","event","inputElement","nativeElement","inputValue","value","sanitizedValue","replace","Number","dispatchEvent","Event","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","PositiveIntegerDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\directive\\directive\\positive-integer.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appPositiveInteger]'\n})\nexport class PositiveIntegerDirective {\n\n  private readonly POSITIVE_INTEGER_PATTERN = /^\\d+$/;\n\n  constructor(private elementRef: ElementRef) { }\n\n\n  @HostListener('input', ['$event'])\n  onInputChange(event: Event): void {\n    const inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    const inputValue = inputElement.value;\n    let sanitizedValue = inputValue.replace(/[^\\d]/g, '');\n    if (sanitizedValue !== '' && Number(sanitizedValue) === 0) {\n      sanitizedValue = '0'; // allow zero as a valid input\n    }\n    inputElement.value = sanitizedValue;\n    inputElement.dispatchEvent(new Event('input'));\n  }\n}"],"mappings":";AAKA,OAAM,MAAOA,wBAAwB;EAInCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFb,KAAAC,wBAAwB,GAAG,OAAO;EAEL;EAI9CC,aAAaA,CAACC,KAAY;IACxB,MAAMC,YAAY,GAAG,IAAI,CAACJ,UAAU,CAACK,aAAiC;IACtE,MAAMC,UAAU,GAAGF,YAAY,CAACG,KAAK;IACrC,IAAIC,cAAc,GAAGF,UAAU,CAACG,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IACrD,IAAID,cAAc,KAAK,EAAE,IAAIE,MAAM,CAACF,cAAc,CAAC,KAAK,CAAC,EAAE;MACzDA,cAAc,GAAG,GAAG,CAAC,CAAC;;;IAExBJ,YAAY,CAACG,KAAK,GAAGC,cAAc;IACnCJ,YAAY,CAACO,aAAa,CAAC,IAAIC,KAAK,CAAC,OAAO,CAAC,CAAC;EAChD;EAAC,QAAAC,CAAA,G;qBAjBUf,wBAAwB,EAAAgB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAxBnB,wBAAwB;IAAAoB,SAAA;IAAAC,YAAA,WAAAC,sCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAxBC,GAAA,CAAApB,aAAA,CAAAqB,MAAA,CAAqB;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}