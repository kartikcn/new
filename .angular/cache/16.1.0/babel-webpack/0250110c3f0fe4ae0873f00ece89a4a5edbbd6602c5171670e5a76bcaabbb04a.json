{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/Helpdesk/costtype/services/costtype.service\";\nimport * as i3 from \"../../services/request-other-cost-services\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-select/ng-select\";\nimport * as i6 from \"../../../../../../../directive/numbers-only.directive\";\nimport * as i7 from \"../../../../../../../directive/directive/two-digit-decimal-number\";\nimport * as i8 from \"ng-zorro-antd/table\";\nimport * as i9 from \"ng-zorro-antd/input\";\nfunction AddRequestOtherCostComponent_label_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 14);\n    i0.ɵɵtext(1, \"Cost Type already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AddRequestOtherCostComponent = /*#__PURE__*/(() => {\n  class AddRequestOtherCostComponent {\n    constructor(formBuilder, costTypeService, requestOtherCostService) {\n      this.formBuilder = formBuilder;\n      this.costTypeService = costTypeService;\n      this.requestOtherCostService = requestOtherCostService;\n      this.subscriptions = [];\n      this.costTypeData = [];\n      this.errorMsg = '';\n      this.costTypeExist = false;\n      this.New = false;\n      this.isView = false;\n      this.showActualCost = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.requestOtherCostForm = this.formBuilder.group({\n        requestOtherCostId: [null],\n        enteredBy: [null],\n        costTypeId: [null, [Validators.required]],\n        estimatedCost: [null, [Validators.required, Validators.min(1)]],\n        actualCost: [null],\n        requestId: [null],\n        dateEntered: [null],\n        timeEntered: [null],\n        description: [null]\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.requestOtherCostForm.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadCostType();\n      if (this.isView) {\n        this.requestOtherCostForm.disable();\n      }\n    }\n    loadCostType() {\n      this.costTypeService.getAllCostTypes().subscribe(res => {\n        if (res.status != 202) {\n          this.costTypeData = res;\n        } else {\n          this.costTypeData = [];\n        }\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const toolsDetails = {\n        requestOtherCostId: this.requestOtherCostForm.controls.requestOtherCostId.value,\n        enteredBy: this.requestOtherCostForm.controls.enteredBy.value,\n        costTypeId: this.requestOtherCostForm.controls.costTypeId.value,\n        estimatedCost: this.requestOtherCostForm.controls.estimatedCost.value,\n        actualCost: this.requestOtherCostForm.controls.actualCost.value,\n        requestId: this.requestOtherCostForm.controls.requestId.value,\n        dateEntered: this.requestOtherCostForm.controls.dateEntered.value,\n        timeEntered: this.requestOtherCostForm.controls.timeEntered.value,\n        description: this.requestOtherCostForm.controls.description.value\n      };\n      return toolsDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.requestOtherCostForm.patchValue({\n          requestOtherCostId: value.requestOtherCostId,\n          enteredBy: value.enteredBy,\n          costTypeId: value.costTypeId,\n          estimatedCost: value.estimatedCost,\n          actualCost: value.actualCost,\n          requestId: value.requestId,\n          dateEntered: value.dateEntered,\n          timeEntered: value.timeEntered,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    selectCostType(event) {\n      if (this.previousCostType != event.costTypeId) {\n        let requestId = this.requestOtherCostForm.controls.requestId.value;\n        this.requestOtherCostService.checkCostExist(requestId, event.costTypeId).subscribe(res => {\n          this.costTypeExist = false;\n          if (res) {\n            this.costTypeExist = true;\n          } else {\n            this.costTypeExist = false;\n          }\n        });\n      }\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.requestOtherCostForm.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.requestOtherCostForm.valid ? null : {\n        requestOtherCostForm: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddRequestOtherCostComponent_Factory(t) {\n      return new (t || AddRequestOtherCostComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.CostTypeService), i0.ɵɵdirectiveInject(i3.RequestOtherCostService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddRequestOtherCostComponent,\n      selectors: [[\"app-add-request-other-cost\"]],\n      inputs: {\n        New: \"New\",\n        isView: \"isView\",\n        showActualCost: \"showActualCost\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddRequestOtherCostComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddRequestOtherCostComponent),\n        multi: true\n      }])],\n      decls: 30,\n      vars: 7,\n      consts: [[\"autocomplete\", \"off\", 3, \"formGroup\"], [\"width\", \"100%\"], [\"colspan\", \"2\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"costTypeId\", \"bindLabel\", \"costType\", \"bindValue\", \"costTypeId\", \"placeholder\", \"Make a Selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [\"width\", \"50%\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"estimatedCost\", \"formControlName\", \"estimatedCost\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"16\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"actualCost\", \"formControlName\", \"actualCost\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"16\", 1, \"form-control\", 3, \"readonly\"], [\"colspan\", \"3\"], [3, \"nzMaxCharacterCount\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"512\", 1, \"form-control\", \"note-border\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddRequestOtherCostComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Cost Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"ng-select\", 5);\n          i0.ɵɵlistener(\"change\", function AddRequestOtherCostComponent_Template_ng_select_change_7_listener($event) {\n            return ctx.selectCostType($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\");\n          i0.ɵɵtemplate(10, AddRequestOtherCostComponent_label_10_Template, 2, 0, \"label\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"tr\")(13, \"td\", 7)(14, \"div\", 3)(15, \"label\", 4);\n          i0.ɵɵtext(16, \"Estimated Cost\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(18, \"td\", 7)(19, \"div\", 3)(20, \"label\", 9);\n          i0.ɵɵtext(21, \"Actual Cost\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"input\", 10);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(23, \"tr\")(24, \"td\", 11)(25, \"div\", 3)(26, \"label\", 9);\n          i0.ɵɵtext(27, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"nz-textarea-count\", 12);\n          i0.ɵɵelement(29, \"textarea\", 13);\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.requestOtherCostForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.costTypeData)(\"searchable\", true);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.costTypeExist);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"readonly\", !ctx.showActualCost);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"nzMaxCharacterCount\", 512);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i5.NgSelectComponent, i6.NumbersOnlyDirective, i7.TwoDigitDecimalNumberDirective, i8.NzTableCellDirective, i8.NzTrDirective, i9.NzTextareaCountComponent, i9.NzInputDirective]\n    });\n  }\n  return AddRequestOtherCostComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}