{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/dialog\";\nfunction CompleteByAlertComponent_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 5);\n    i0.ɵɵlistener(\"click\", function CompleteByAlertComponent_tr_1_Template_td_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const data_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onRowSelect(data_r3));\n    });\n    i0.ɵɵelementStart(2, \"span\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"td\", 7);\n    i0.ɵɵelementStart(5, \"td\", 8)(6, \"span\", 9);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const data_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", data_r3.bgColor);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(data_r3.requestCount);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(data_r3.label);\n  }\n}\nfunction CompleteByAlertComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1, \" Requests List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CompleteByAlertComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r2.displayData)(\"isEscalatedData\", ctx_r2.viewForEscalation);\n  }\n}\nconst _c0 = function () {\n  return {\n    \"max-width\": \"70vw\"\n  };\n};\nexport let CompleteByAlertComponent = /*#__PURE__*/(() => {\n  class CompleteByAlertComponent {\n    constructor(enumsrv) {\n      this.enumsrv = enumsrv;\n      this.requestCount = 5;\n      this.allRequestsData = [];\n      this.esctdResponseData = [];\n      this.esctdCompleteData = [];\n      this.esctdCompleteAndResponseData = [];\n      this.completeTodayData = [];\n      this.approvalRequiredData = [];\n      this.completeByThisWeekData = [];\n      this.alertsData = [];\n      this.isShowDialog = false;\n      this.displayData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumWr = [];\n      this.enumStatus = [];\n      this.viewForEscalation = true;\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.enumStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n      });\n    }\n    getEnumById(id) {\n      return this.enumStatus.find(t => t.id === id)?.enumValue;\n    }\n    createAlerts(data) {\n      this.esctdResponseData = [];\n      this.esctdCompleteData = [];\n      this.esctdCompleteAndResponseData = [];\n      this.completeTodayData = [];\n      this.completeByThisWeekData = [];\n      this.approvalRequiredData = data.filter(request => request.isApprover === '1' && this.getEnumById(request.status) !== \"Cancelled\");\n      const currentDate = new Date();\n      const onlyCurrDate = new Date().setHours(0, 0, 0, 0); // date with time 0\n      const oneWeekFromNow = new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000); //this week\n      data.forEach(item => {\n        const {\n          dateResponded,\n          escDateResponded,\n          dateCompleted,\n          escDateCompleted,\n          timeResponded,\n          timeCompleted,\n          escTimeResponded,\n          escTimeCompleted,\n          status\n        } = item;\n        const isEscalatedForResponse = dateResponded && new Date(dateResponded + 'T' + timeResponded).getTime() > new Date(escDateResponded + 'T' + escTimeResponded).getTime() || !dateResponded && currentDate.getTime() > new Date(escDateResponded + 'T' + escTimeResponded).getTime();\n        const isEscalatedForComplete = dateCompleted && new Date(dateCompleted + 'T' + timeCompleted).getTime() > new Date(escDateCompleted + 'T' + escTimeCompleted).getTime() || !dateCompleted && currentDate.getTime() > new Date(escDateCompleted + 'T' + escTimeCompleted).getTime();\n        const isCompleteByToday = dateCompleted === null && new Date(onlyCurrDate).getTime() === new Date(escDateCompleted + 'T' + \"00:00:00\").getTime();\n        const statusEnum = this.getEnumById(status);\n        const isCompleteByWeek = dateCompleted === null && new Date(oneWeekFromNow).getTime() >= new Date(escDateCompleted + 'T' + \"00:00:00\").getTime() && new Date(onlyCurrDate).getTime() <= new Date(escDateCompleted + 'T' + \"00:00:00\").getTime();\n        if (isEscalatedForResponse && statusEnum !== \"Cancelled\") {\n          this.esctdResponseData.push(item);\n        }\n        if (isEscalatedForComplete && statusEnum !== \"Cancelled\" && statusEnum !== \"Rejected\") {\n          this.esctdCompleteData.push(item);\n        }\n        if (isCompleteByToday && statusEnum !== \"Cancelled\" && statusEnum !== \"Rejected\") {\n          this.completeTodayData.push(item);\n        }\n        if (isCompleteByWeek && statusEnum !== \"Cancelled\" && statusEnum !== \"Rejected\") {\n          this.completeByThisWeekData.push(item);\n        }\n      });\n      this.setAlertData();\n    }\n    setAlertData() {\n      this.alertsData = [];\n      if (this.approvalRequiredData.length > 0) {\n        this.alertsData.push({\n          requestCount: this.approvalRequiredData.length,\n          label: \"Requests Need Approval\",\n          bgColor: '#82CAFF'\n        });\n      }\n      if (this.esctdResponseData.length > 0) {\n        this.alertsData.push({\n          requestCount: this.esctdResponseData.length,\n          label: \"Requests Escalated for  Response\",\n          bgColor: '#C34A2C'\n        });\n      }\n      if (this.esctdCompleteData.length > 0) {\n        this.alertsData.push({\n          requestCount: this.esctdCompleteData.length,\n          label: \"Requests Escalated for Completion\",\n          bgColor: '#F75D59'\n        });\n      }\n      if (this.completeTodayData.length > 0) {\n        this.alertsData.push({\n          requestCount: this.completeTodayData.length,\n          label: \"Requests Due for Completion Today\",\n          bgColor: '#FDBD01'\n        });\n      }\n      if (this.completeByThisWeekData.length > 0) {\n        this.alertsData.push({\n          requestCount: this.completeByThisWeekData.length,\n          label: \"Requests Due for Completion in a Week\",\n          bgColor: '#228B22'\n        });\n      }\n    }\n    onRowSelect(data) {\n      this.isShowDialog = false;\n      this.viewForEscalation = true;\n      switch (data.label) {\n        case \"Requests Need Approval\":\n          this.displayData = this.approvalRequiredData;\n          this.isShowDialog = true;\n          // this.viewForEscalation = false;\n          break;\n        case 'Requests Escalated for  Response':\n          this.displayData = this.esctdResponseData;\n          this.isShowDialog = true;\n          break;\n        case 'Requests Escalated for Completion':\n          this.displayData = this.esctdCompleteData;\n          this.isShowDialog = true;\n          break;\n        case \"Requests Escalated For Both Response and Completion\":\n          this.displayData = this.esctdCompleteAndResponseData;\n          this.isShowDialog = true;\n          break;\n        case \"Requests Due for Completion Today\":\n          this.displayData = this.completeTodayData;\n          this.isShowDialog = true;\n          break;\n        case \"Requests Due for Completion in a Week\":\n          this.displayData = this.completeByThisWeekData;\n          this.isShowDialog = true;\n          break;\n        default:\n          this.isShowDialog = false;\n          break;\n      }\n    }\n    static #_ = this.ɵfac = function CompleteByAlertComponent_Factory(t) {\n      return new (t || CompleteByAlertComponent)(i0.ɵɵdirectiveInject(i1.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CompleteByAlertComponent,\n      selectors: [[\"app-complete-by-alert\"]],\n      decls: 5,\n      vars: 9,\n      consts: [[\"width\", \"100%\"], [4, \"ngFor\", \"ngForOf\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"width\", \"8%\", 1, \"alert-box\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"alert-count\"], [\"width\", \"2%\"], [\"width\", \"80%\"], [1, \"alert-label\"], [3, \"data\", \"isEscalatedData\"]],\n      template: function CompleteByAlertComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0);\n          i0.ɵɵtemplate(1, CompleteByAlertComponent_tr_1_Template, 8, 4, \"tr\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"p-dialog\", 2);\n          i0.ɵɵlistener(\"visibleChange\", function CompleteByAlertComponent_Template_p_dialog_visibleChange_2_listener($event) {\n            return ctx.isShowDialog = $event;\n          });\n          i0.ɵɵtemplate(3, CompleteByAlertComponent_ng_template_3_Template, 2, 0, \"ng-template\", 3);\n          i0.ɵɵtemplate(4, CompleteByAlertComponent_ng_template_4_Template, 1, 2, \"ng-template\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.alertsData);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(8, _c0));\n          i0.ɵɵproperty(\"visible\", ctx.isShowDialog)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.AddTableComponent, i4.PrimeTemplate, i5.Dialog],\n      styles: [\".alert-box[_ngcontent-%COMP%]{padding:6px;border-radius:5px;border:1px solid white;text-align:center}.alert-label[_ngcontent-%COMP%]{font-weight:700}.alert-count[_ngcontent-%COMP%]{font-size:16px;color:#090909}\"]\n    });\n  }\n  return CompleteByAlertComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}