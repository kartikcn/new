{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let PositiveIntegerDirective = /*#__PURE__*/(() => {\n  class PositiveIntegerDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.POSITIVE_INTEGER_PATTERN = /^\\d+$/;\n    }\n    onInputChange(event) {\n      const inputElement = this.elementRef.nativeElement;\n      const inputValue = inputElement.value;\n      let sanitizedValue = inputValue.replace(/[^\\d]/g, '');\n      if (sanitizedValue !== '' && Number(sanitizedValue) === 0) {\n        sanitizedValue = '0'; // allow zero as a valid input\n      }\n\n      inputElement.value = sanitizedValue;\n      inputElement.dispatchEvent(new Event('input'));\n    }\n    static #_ = this.ɵfac = function PositiveIntegerDirective_Factory(t) {\n      return new (t || PositiveIntegerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: PositiveIntegerDirective,\n      selectors: [[\"\", \"appPositiveInteger\", \"\"]],\n      hostBindings: function PositiveIntegerDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function PositiveIntegerDirective_input_HostBindingHandler($event) {\n            return ctx.onInputChange($event);\n          });\n        }\n      }\n    });\n  }\n  return PositiveIntegerDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}