{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../craftsperson/services/craftsperson.service\";\nimport * as i4 from \"../../../team/services/team.service\";\nimport * as i5 from \"src/app/ui/employee/services/employee.service\";\nimport * as i6 from \"src/app/services/enum.service\";\nimport * as i7 from \"primeng/api\";\nimport * as i8 from \"../../services/sla-request-parameters.service\";\nimport * as i9 from \"@ng-select/ng-select\";\nimport * as i10 from \"@angular/material/legacy-card\";\nimport * as i11 from \"primeng/button\";\nimport * as i12 from \"primeng/toast\";\nimport * as i13 from \"primeng/confirmdialog\";\nimport * as i14 from \"primeng/selectbutton\";\nexport let AddSlaRequestStepsComponent = /*#__PURE__*/(() => {\n  class AddSlaRequestStepsComponent {\n    constructor(data, dialogRef, formBuilder, cfService, teamService, empServ, enumsrv, confirmationService, slaRequestService) {\n      this.data = data;\n      this.dialogRef = dialogRef;\n      this.formBuilder = formBuilder;\n      this.cfService = cfService;\n      this.teamService = teamService;\n      this.empServ = empServ;\n      this.enumsrv = enumsrv;\n      this.confirmationService = confirmationService;\n      this.slaRequestService = slaRequestService;\n      this.allStepsData = [];\n      this.stepsData = [];\n      this.techniciansData = [];\n      this.teamsData = [];\n      this.emData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumslaRequestSteps = [];\n      this.enumNotifyResponsable = [];\n      this.enumNotifyRequestor = [];\n      this.enumNotifySupervisor = [];\n      this.enumNotifyOthers = [];\n      this.enumIdNotifyResponsable = 0;\n      this.enumIdNotifyResponsableYes = 0;\n      this.enumIdNotifyResponsableNo = 0;\n      this.enumNotidyRequestorYes = 0;\n      this.enumNotidyRequestorNo = 0;\n      this.enumIdNotifyRequestor = 0;\n      this.enumIdNotifySupervisor = 0;\n      this.enumIdNotifyOthers = 0;\n      this.emailError = '';\n      this.enumWrStep = [];\n      this.enumWrStepType = [];\n      this.stepTypeData = [];\n      this.enumWr = [];\n      this.enumWrStatus = [];\n      this.makeReadOnly = false;\n      this.enumTeam = [];\n      this.enumTeamType = [];\n      this.employeeTypeId = 0;\n      this.allTeamsData = [];\n      this.approvalStepTypeId = 0;\n      this.isStepTypeApproval = false;\n      this.hideTechnician = false;\n      this.limitEm = 0;\n      this.offsetEm = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.slaStepsForm = this.formBuilder.group({\n        slaRequestStepsId: [],\n        stepId: [null],\n        teamId: [null, [Validators.required]],\n        emId: [null, [Validators.required]],\n        cfId: [null, [Validators.required]],\n        otherEmails: [null],\n        notifyResponsable: [],\n        notifyRequestor: [],\n        notifySupervisor: [],\n        notifyOthers: [],\n        stepType: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.hideTechnician = false;\n      this.loadEnums();\n      this.loadTeams();\n      this.loadStepTypes();\n      this.loadTechnicians();\n      this.scrollToEndEm();\n      if (this.data.isEdit && this.data.step) {\n        this.setData(this.data.step);\n        if (this.data.step.emId !== null) {\n          this.slaStepsForm.controls['teamId'].clearValidators();\n          this.slaStepsForm.controls['cfId'].clearValidators();\n          this.slaStepsForm.updateValueAndValidity();\n        } else if (this.data.step.cfId !== null) {\n          this.slaStepsForm.controls['teamId'].clearValidators();\n          this.slaStepsForm.controls['emId'].clearValidators();\n          this.slaStepsForm.updateValueAndValidity();\n        } else if (this.data.step.teamId !== null) {\n          this.slaStepsForm.controls['cfId'].clearValidators();\n          this.slaStepsForm.controls['emId'].clearValidators();\n          this.slaStepsForm.updateValueAndValidity();\n        }\n      }\n    }\n    loadTechnicians() {\n      this.cfService.getAllCraftsperson().subscribe(res => {\n        if (res.status != 202) {\n          this.techniciansData = res;\n        } else {\n          this.techniciansData = [];\n        }\n      });\n    }\n    loadTeams() {\n      this.teamService.getAllTeams().subscribe(res => {\n        if (res.status != 202) {\n          this.allTeamsData = res;\n          if (this.isStepTypeApproval) {\n            this.teamsData = this.allTeamsData.filter(t => t.teamType === this.employeeTypeId);\n          } else {\n            this.teamsData = this.allTeamsData;\n          }\n        } else {\n          this.teamsData = [];\n        }\n      });\n    }\n    loadEmployee() {\n      this.empServ.getAllEmployeeList().subscribe(res => {\n        if (res.status != 202) {\n          this.emData = res.map(i => {\n            i.name = i.emCode + (i.firstName ? ' - ' + i.firstName + ' ' + (i.lastName ? i.lastName : '') : i.lastName ? '-' + i.lastName : '');\n            return i;\n          });\n        } else {\n          this.emData = [];\n        }\n      });\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // enums wr_steps\n        // this.enumWrStep = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase());\n        this.enumWrStepType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'step_type'.toLocaleUpperCase());\n        this.enumWrStepType.map(item => {\n          if (item.enumValue === \"Approval\") {\n            this.approvalStepTypeId = item.enumKey;\n          }\n        });\n        // enums Wr \n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.enumWrStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        // this.enumslaRequestSteps = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_request_steps'.toLocaleUpperCase());\n        this.enumNotifyResponsable = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_request_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'notify_responsable'.toLocaleUpperCase());\n        this.enumNotifyResponsable.map(item => {\n          if (item.enumValue === \"No\") {\n            this.enumIdNotifyResponsable = item.enumKey;\n            this.enumIdNotifyResponsableNo = item.enumKey;\n          } else {\n            this.enumIdNotifyResponsableYes = item.enumKey;\n          }\n        });\n        this.enumNotifyRequestor = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_request_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'notify_requestor'.toLocaleUpperCase());\n        this.enumNotifyRequestor.map(item => {\n          if (item.enumValue === \"No\") {\n            this.enumIdNotifyRequestor = item.enumKey;\n            this.enumNotidyRequestorNo = item.enumKey;\n          } else {\n            this.enumNotidyRequestorYes = item.enumKey;\n          }\n        });\n        this.enumNotifySupervisor = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_request_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'notify_supervisor'.toLocaleUpperCase());\n        this.enumNotifySupervisor.map(item => {\n          if (item.enumValue === \"No\") {\n            this.enumIdNotifySupervisor = item.enumKey;\n          }\n        });\n        this.enumNotifyOthers = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_request_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'notify_others'.toLocaleUpperCase());\n        this.enumNotifyOthers.map(item => {\n          if (item.enumValue === \"No\") {\n            this.enumIdNotifyOthers = item.enumKey;\n          }\n        });\n        this.enumTeam = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'team'.toLocaleUpperCase());\n        this.enumTeamType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'team'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'team_type'.toLocaleUpperCase());\n        this.enumTeamType.map(item => {\n          if (item.enumValue === \"Employee\") {\n            this.employeeTypeId = item.enumKey;\n          }\n        });\n      }, error => {});\n    }\n    getEnumValueById(enumKey) {\n      return this.enumWrStatus.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    loadStepTypes() {\n      this.stepTypeData = [];\n      if (this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Requested'.toLocaleUpperCase()) {\n        this.enumWrStepType.map(t => {\n          if (t.enumValue.toLocaleUpperCase() === 'Approval'.toLocaleUpperCase() || t.enumValue.toLocaleUpperCase() === 'Notification'.toLocaleUpperCase()) {\n            this.stepTypeData.push(t);\n            this.setDefault();\n          }\n        });\n      } else if (this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Approved'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Rejected'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Cancelled'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Close'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'On Hold For Access'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'On Hold For Parts'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'On Hold For Labour'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'In Process'.toLocaleUpperCase() || this.getEnumValueById(this.data.wrStatus)?.toLocaleUpperCase() === 'Completed'.toLocaleUpperCase()) {\n        this.enumWrStepType.map(t => {\n          if (t.enumValue.toLocaleUpperCase() === 'Notification'.toLocaleUpperCase()) {\n            this.stepTypeData.push(t);\n            setTimeout(() => {\n              this.slaStepsForm.patchValue({\n                stepType: t.enumKey,\n                notifyResponsable: this.enumIdNotifyResponsableYes\n              });\n            }, 0);\n            this.makeReadOnly = true;\n          }\n        });\n      }\n    }\n    setDefault() {\n      setTimeout(() => {\n        this.slaStepsForm.patchValue({\n          notifyResponsable: this.enumIdNotifyResponsableYes\n        });\n      });\n    }\n    setData(value) {\n      if (value.stepType === this.approvalStepTypeId) {\n        this.isStepTypeApproval = true;\n        this.hideTechnician = true;\n      } else {\n        this.isStepTypeApproval = false;\n        this.hideTechnician = false;\n      }\n      setTimeout(() => {\n        if (value.emId) {\n          const emData = {\n            emId: value.em.emId,\n            emCode: value.em.emCode,\n            firstName: value.em.firstName\n          };\n          this.updateEmList(emData);\n        }\n        this.slaStepsForm.patchValue({\n          slaRequestStepsId: value.slaRequestStepsId,\n          stepId: value.stepId,\n          teamId: value.teamId,\n          cfId: value.cfId,\n          emId: value.emId,\n          otherEmails: value.otherEmails,\n          notifyResponsable: value.notifyResponsable,\n          notifyRequestor: value.notifyRequestor,\n          notifySupervisor: value.notifySupervisor,\n          notifyOthers: value.notifyOthers,\n          stepType: value.stepType\n        });\n      }, 10);\n    }\n    get value() {\n      const toolsDetails = {\n        stepId: this.slaStepsForm.controls.stepId.value,\n        teamId: this.slaStepsForm.controls.teamId.value,\n        cfId: this.slaStepsForm.controls.cfId.value,\n        emId: this.slaStepsForm.controls.emId.value,\n        otherEmails: this.slaStepsForm.controls.otherEmails.value,\n        notifyResponsable: this.slaStepsForm.controls.notifyResponsable.value,\n        notifyRequestor: this.slaStepsForm.controls.notifyRequestor.value,\n        notifySupervisor: this.slaStepsForm.controls.notifySupervisor.value,\n        notifyOthers: this.slaStepsForm.controls.notifyOthers.value,\n        stepType: this.slaStepsForm.controls.stepType.value\n      };\n      return toolsDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        if (value.emId != null) {}\n        this.slaStepsForm.patchValue({\n          slaRequestStepsId: value.slaRequestStepsId,\n          stepId: value.stepId,\n          teamId: value.teamId,\n          cfId: value.cfId,\n          emId: value.emId,\n          otherEmails: value.otherEmails,\n          notifyResponsable: value.notifyResponsable,\n          notifyRequestor: value.notifyRequestor,\n          notifySupervisor: value.notifySupervisor,\n          notifyOthers: value.notifyOthers,\n          stepType: value.stepType\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    save() {\n      if (this.slaStepsForm.valid) {\n        const slaRequestStepData = {\n          slaRequestStepsId: this.slaStepsForm.controls.slaRequestStepsId.value ? this.slaStepsForm.controls.slaRequestStepsId.value : 0,\n          stepId: this.slaStepsForm.controls.stepId.value,\n          teamId: this.slaStepsForm.controls.teamId.value,\n          cfId: this.slaStepsForm.controls.cfId.value,\n          emId: this.slaStepsForm.controls.emId.value,\n          otherEmails: this.slaStepsForm.controls.otherEmails.value,\n          notifyResponsable: this.slaStepsForm.controls.notifyResponsable.value,\n          notifyRequestor: this.slaStepsForm.controls.notifyRequestor.value,\n          notifySupervisor: this.slaStepsForm.controls.notifySupervisor.value,\n          notifyOthers: this.slaStepsForm.controls.notifyOthers.value,\n          slaResponseParametersId: this.data.slaResponseParametersId,\n          wrStatus: this.data.wrStatus,\n          stepType: this.slaStepsForm.controls.stepType.value\n        };\n        this.slaRequestService.saveSLASteps(slaRequestStepData).subscribe(res => {\n          if (res) {\n            this.dialogRef.close(res);\n          }\n        });\n      }\n    }\n    changeTeam(event) {\n      setTimeout(() => {\n        this.slaStepsForm.patchValue({\n          teamId: event.teamId,\n          cfId: null,\n          emId: null,\n          stepId: null\n        });\n      });\n      this.slaStepsForm.controls['teamId'].clearValidators();\n      this.slaStepsForm.controls['emId'].clearValidators();\n      this.slaStepsForm.controls['cfId'].clearValidators();\n      this.slaStepsForm.controls['stepId'].clearValidators();\n      this.slaStepsForm.updateValueAndValidity();\n    }\n    changeEmployee(event) {\n      setTimeout(() => {\n        this.slaStepsForm.patchValue({\n          teamId: null,\n          cfId: null,\n          emId: event.emId,\n          stepId: null\n        });\n      });\n      this.slaStepsForm.controls['teamId'].clearValidators();\n      this.slaStepsForm.controls['emId'].clearValidators();\n      this.slaStepsForm.controls['cfId'].clearValidators();\n      this.slaStepsForm.controls['stepId'].clearValidators();\n      this.slaStepsForm.updateValueAndValidity();\n    }\n    changeTechnician(event) {\n      setTimeout(() => {\n        this.slaStepsForm.patchValue({\n          teamId: null,\n          cfId: event.cfId,\n          emId: null,\n          stepId: null\n        });\n      });\n      this.slaStepsForm.controls['teamId'].clearValidators();\n      this.slaStepsForm.controls['emId'].clearValidators();\n      this.slaStepsForm.controls['cfId'].clearValidators();\n      this.slaStepsForm.controls['stepId'].clearValidators();\n      this.slaStepsForm.updateValueAndValidity();\n    }\n    changeOtherSteps(event) {\n      setTimeout(() => {\n        this.slaStepsForm.patchValue({\n          teamId: null,\n          cfId: null,\n          emId: null,\n          stepId: event.stepId\n        });\n      });\n      this.slaStepsForm.controls['teamId'].clearValidators();\n      this.slaStepsForm.controls['emId'].clearValidators();\n      this.slaStepsForm.controls['cfId'].clearValidators();\n      this.slaStepsForm.controls['stepId'].clearValidators();\n      this.slaStepsForm.updateValueAndValidity();\n    }\n    changeEmails(event) {\n      this.emailError = '';\n      if (event.target.value) {\n        const emails = event.target.value.split(',');\n        const invalidEmails = [];\n        for (let email of emails) {\n          email = email.trim();\n          if (email === '' || !/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email)) {\n            invalidEmails.push(email);\n          }\n        }\n        if (invalidEmails.length > 0) {\n          this.emailError = \"Enter valid email(s)\";\n        } else {\n          this.emailError = '';\n          setTimeout(() => {\n            this.slaStepsForm.patchValue({\n              teamId: null,\n              cfId: null,\n              emId: null\n            });\n          });\n        }\n      }\n    }\n    cancel() {\n      this.confirmationService.confirm({\n        message: UtilConstant.CANCEL_Msg,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.dialogRef.close();\n        },\n        key: \"positionDialog\"\n      });\n    }\n    changeNotifyResponsible(event) {\n      if (event.value === this.enumIdNotifyResponsableYes) {\n        setTimeout(() => {\n          this.slaStepsForm.patchValue({\n            notifyRequestor: this.enumNotidyRequestorYes\n          });\n        });\n      } else {\n        setTimeout(() => {\n          this.slaStepsForm.patchValue({\n            notifyRequestor: this.enumNotidyRequestorNo\n          });\n        });\n      }\n    }\n    selectStepType(event) {\n      this.hideTechnician = false;\n      if (event.enumKey) {\n        this.stepsData = this.allStepsData.filter(t => t.stepType === event.enumKey);\n        if (event.enumValue.toLocaleUpperCase() === 'Notification'.toLocaleUpperCase()) {\n          this.teamsData = this.allTeamsData;\n          this.makeReadOnly = true;\n          this.slaStepsForm.patchValue({\n            notifyResponsable: this.enumIdNotifyResponsableYes\n          });\n        } else if (event.enumValue.toLocaleUpperCase() === 'Approval'.toLocaleUpperCase()) {\n          this.slaStepsForm.patchValue({\n            teamId: null\n          });\n          this.slaStepsForm.updateValueAndValidity();\n          this.teamsData = this.allTeamsData.filter(t => t.teamType === this.employeeTypeId);\n          this.makeReadOnly = false;\n          this.hideTechnician = true;\n        } else {\n          this.makeReadOnly = false;\n          this.teamsData = this.allTeamsData;\n        }\n      } else {\n        this.stepsData = this.allStepsData;\n        this.teamsData = this.allTeamsData;\n        this.hideTechnician = false;\n      }\n    }\n    scrollToEndEm() {\n      this.offsetEm = this.limitEm;\n      this.limitEm += this.scrollLimit;\n      this.filterCriteria.limit = this.limitEm;\n      this.filterCriteria.offset = this.offsetEm;\n      this.empServ.getALLmployeeByScroll(this.filterCriteria).subscribe(res => {\n        this.emData = res;\n        this.emData.unshift({\n          emId: null,\n          firstName: 'Make a selection',\n          emCode: null\n        });\n      });\n    }\n    searchEm(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"firstName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndEm();\n    }\n    updateEmList(emData) {\n      this.emData = this.emData.filter(e => e.emId != emData.emId);\n      this.emData = this.emData.filter(e => e.emId != null);\n      this.emData.unshift(emData);\n      this.emData.unshift({\n        emId: null,\n        firstName: 'Make a selection',\n        emCode: null\n      });\n    }\n    static #_ = this.ɵfac = function AddSlaRequestStepsComponent_Factory(t) {\n      return new (t || AddSlaRequestStepsComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder), i0.ɵɵdirectiveInject(i3.CraftspersonService), i0.ɵɵdirectiveInject(i4.TeamService), i0.ɵɵdirectiveInject(i5.EmployeeService), i0.ɵɵdirectiveInject(i6.EnumService), i0.ɵɵdirectiveInject(i7.ConfirmationService), i0.ɵɵdirectiveInject(i8.SLARequestServices));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddSlaRequestStepsComponent,\n      selectors: [[\"app-add-sla-request-steps\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 47,\n      vars: 17,\n      consts: [[\"mat-dialog-title\", \"\", 1, \"mat-dialog-title-ext\"], [1, \"mat-typography\", \"mat-dialog-content-ext\"], [\"id\", \"addSlaSteps\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-5\", 2, \"border\", \"1px solid #cccdef\"], [\"width\", \"100%;\", 2, \"margin-top\", \"8px\"], [\"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"stepType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"width\", \"50%\", 2, \"display\", \"flex\", \"align-items\", \"center\"], [1, \"form-field-lable\"], [\"formControlName\", \"notifyResponsable\", \"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", 3, \"options\", \"disabled\", \"onChange\"], [1, \"col-7\", 2, \"border\", \"1px solid #cccdef\", \"position\", \"relative\"], [1, \"border-text\"], [\"width\", \"100%\", 2, \"margin-top\", \"8px\"], [\"appendTo\", \"body\", \"formControlName\", \"teamId\", \"bindLabel\", \"teamCode\", \"bindValue\", \"teamId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"emId\", \"bindLabel\", \"firstName\", \"bindValue\", \"emId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\"], [\"appendTo\", \"body\", \"formControlName\", \"cfId\", \"bindLabel\", \"name\", \"bindValue\", \"cfId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"readonly\", \"change\"], [\"align\", \"end\", 1, \"mat-dialog-actions-ext\"], [\"label\", \"Save\", 1, \"pull-right\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"button-primary\", \"button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"], [\"key\", \"positionDialog\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"key\", \"SLASteps\", \"position\", \"top-right\"]],\n      template: function AddSlaRequestStepsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Add Step\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"mat-card\")(4, \"mat-card-content\", 2)(5, \"form\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"table\", 6)(9, \"tr\")(10, \"td\", 7)(11, \"div\", 8)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Step Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ng-select\", 10);\n          i0.ɵɵlistener(\"change\", function AddSlaRequestStepsComponent_Template_ng_select_change_14_listener($event) {\n            return ctx.selectStepType($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\", 11)(17, \"div\", 8)(18, \"label\", 12);\n          i0.ɵɵtext(19, \"Notify Responsable\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"p-selectButton\", 13);\n          i0.ɵɵlistener(\"onChange\", function AddSlaRequestStepsComponent_Template_p_selectButton_onChange_20_listener($event) {\n            return ctx.changeNotifyResponsible($event);\n          });\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(21, \"div\", 14)(22, \"span\", 15);\n          i0.ɵɵtext(23, \"Responsible\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"table\", 16)(25, \"tr\")(26, \"td\", 7)(27, \"div\", 8)(28, \"label\", 12);\n          i0.ɵɵtext(29, \"Team\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"ng-select\", 17);\n          i0.ɵɵlistener(\"change\", function AddSlaRequestStepsComponent_Template_ng_select_change_30_listener($event) {\n            return ctx.changeTeam($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(31, \"td\", 7)(32, \"div\", 8)(33, \"label\", 12);\n          i0.ɵɵtext(34, \"Employee\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"ng-select\", 18);\n          i0.ɵɵlistener(\"change\", function AddSlaRequestStepsComponent_Template_ng_select_change_35_listener($event) {\n            return ctx.changeEmployee($event);\n          })(\"scrollToEnd\", function AddSlaRequestStepsComponent_Template_ng_select_scrollToEnd_35_listener() {\n            return ctx.scrollToEndEm();\n          })(\"search\", function AddSlaRequestStepsComponent_Template_ng_select_search_35_listener($event) {\n            return ctx.searchEm($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(36, \"tr\")(37, \"td\", 7)(38, \"div\", 8)(39, \"label\", 12);\n          i0.ɵɵtext(40, \"Technician\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"ng-select\", 19);\n          i0.ɵɵlistener(\"change\", function AddSlaRequestStepsComponent_Template_ng_select_change_41_listener($event) {\n            return ctx.changeTechnician($event);\n          });\n          i0.ɵɵelementEnd()()()()()()()()()()();\n          i0.ɵɵelementStart(42, \"mat-dialog-actions\", 20)(43, \"p-button\", 21);\n          i0.ɵɵlistener(\"click\", function AddSlaRequestStepsComponent_Template_p_button_click_43_listener() {\n            return ctx.save();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"button\", 22);\n          i0.ɵɵlistener(\"click\", function AddSlaRequestStepsComponent_Template_button_click_44_listener() {\n            return ctx.cancel();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(45, \"p-confirmDialog\", 23)(46, \"p-toast\", 24);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.slaStepsForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.stepTypeData)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"options\", ctx.enumNotifyResponsable)(\"disabled\", ctx.makeReadOnly);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.teamsData)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.emData)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.techniciansData)(\"searchable\", true)(\"readonly\", ctx.hideTechnician);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.slaStepsForm.valid);\n        }\n      },\n      dependencies: [i2.ɵNgNoValidate, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i9.NgSelectComponent, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i10.MatLegacyCard, i10.MatLegacyCardContent, i11.ButtonDirective, i11.Button, i12.Toast, i13.ConfirmDialog, i14.SelectButton],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;background-color:#fff!important}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}.btn-filter[_ngcontent-%COMP%]{margin-left:4px;margin-right:5px;width:50px;margin-top:17px}.btn-ggb-orange[_ngcontent-%COMP%]{width:90px!important}.btn-ggb-default-custom[_ngcontent-%COMP%]{margin:16px!important}.select-button[_ngcontent-%COMP%]{display:flex!important;align-items:center;justify-content:space-around}.no-avail-rooms[_ngcontent-%COMP%]{letter-spacing:normal;opacity:.4}.border-text[_ngcontent-%COMP%]{position:absolute;top:0%;left:50%;transform:translate(-50%,-50%);background-color:#fff;padding:5px;font-size:13px}\"]\n    });\n  }\n  return AddSlaRequestStepsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}