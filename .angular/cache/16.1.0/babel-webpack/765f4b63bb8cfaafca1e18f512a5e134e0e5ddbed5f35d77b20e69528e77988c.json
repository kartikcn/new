{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../background-loc/services/bl.service\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/table\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/panel\";\nimport * as i8 from \"primeng/confirmdialog\";\nimport * as i9 from \"primeng/paginator\";\nfunction MarkHotelComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\", 13);\n    i0.ɵɵtext(2, \"Select a Room\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function MarkHotelComponent_ng_template_4_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateforHotelable());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function MarkHotelComponent_ng_template_4_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateforUnHotelable());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"hidden\", !(ctx_r0.selectedScreens.length > 0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !(ctx_r0.selectedScreens.length > 0));\n  }\n}\nfunction MarkHotelComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 16);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 17)(4, \"div\", 18)(5, \"div\", 19)(6, \"p\", 20);\n    i0.ɵɵtext(7, \"Building Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 21);\n    i0.ɵɵelement(9, \"p-sortIcon\", 22)(10, \"p-columnFilter\", 23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 24)(12, \"div\", 18)(13, \"div\", 19)(14, \"p\", 20);\n    i0.ɵɵtext(15, \"Floor Code \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 21);\n    i0.ɵɵelement(17, \"p-sortIcon\", 25)(18, \"p-columnFilter\", 26);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"th\", 27)(20, \"div\", 18)(21, \"div\", 19)(22, \"p\", 20);\n    i0.ɵɵtext(23, \"Room Code \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 21);\n    i0.ɵɵelement(25, \"p-sortIcon\", 28)(26, \"p-columnFilter\", 29);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(27, \"th\", 30)(28, \"div\", 18)(29, \"div\", 19)(30, \"p\", 20);\n    i0.ɵɵtext(31, \"Room Name \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(32, \"div\", 21);\n    i0.ɵɵelement(33, \"p-sortIcon\", 31)(34, \"p-columnFilter\", 32);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(35, \"th\", 33)(36, \"div\", 18)(37, \"div\", 19)(38, \"p\", 20);\n    i0.ɵɵtext(39, \"Room Category \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"div\", 21);\n    i0.ɵɵelement(41, \"p-sortIcon\", 34)(42, \"p-columnFilter\", 35);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(43, \"th\", 36)(44, \"div\", 18)(45, \"div\", 19)(46, \"p\", 20);\n    i0.ɵɵtext(47, \"Room Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(48, \"div\", 21);\n    i0.ɵɵelement(49, \"p-sortIcon\", 37)(50, \"p-columnFilter\", 38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(51, \"th\", 39)(52, \"div\", 18)(53, \"div\", 19)(54, \"p\", 20);\n    i0.ɵɵtext(55, \"Hotelable \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(56, \"div\", 21);\n    i0.ɵɵelement(57, \"p-sortIcon\", 40)(58, \"p-columnFilter\", 41);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction MarkHotelComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 42)(1, \"td\", 16);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 43);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rm_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", rm_r7);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", rm_r7);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.blBlName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.flFlName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.rmCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.rmName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.rmcatRmCat);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r7.rmtypeRmType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumById(rm_r7.isHotelable));\n  }\n}\nfunction MarkHotelComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 9);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let MarkHotelComponent = /*#__PURE__*/(() => {\n  class MarkHotelComponent {\n    constructor(blSrv, enumsrv, confirmationService, messageService) {\n      this.blSrv = blSrv;\n      this.enumsrv = enumsrv;\n      this.confirmationService = confirmationService;\n      this.messageService = messageService;\n      this.rm_data = [];\n      this.rm_display_data = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.selectedScreens = [];\n      this.enumList = [];\n      this.enumRmData = [];\n      this.enumIsReservable = [];\n      this.enumIsHotelable = [];\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"rmId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n      this.filterCriteriaList = [];\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadRecords();\n    }\n    loadRecords() {\n      //this.rm_display_data=[];\n      let rdata = {\n        filterDto: {\n          paginationDTO: this.paginationObj,\n          filterCriteria: this.filterCriteriaList\n        }\n      };\n      this.blSrv.getPaginatedHotelRoom(rdata).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          this.rm_display_data = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n        }\n      });\n    }\n    updateforHotelable() {\n      this.confirmationService.confirm({\n        message: UtilConstant.MARK_RESERVE,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.markForHotelable();\n        },\n        key: \"rmGrid\"\n      });\n    }\n    markForHotelable() {\n      this.messageService.clear();\n      this.selectedScreens.map(eachVal => {\n        eachVal.isHotelable = this.enumIdIsHotelable;\n        this.blSrv.saveRoom(eachVal).subscribe(res => {});\n      });\n      this.messageService.add({\n        key: 'rmMessage',\n        severity: 'success',\n        summary: 'Records updated',\n        detail: 'The selected desks are now reservable'\n      });\n      this.selectedScreens = [];\n    }\n    updateforUnHotelable() {\n      this.confirmationService.confirm({\n        message: UtilConstant.MARK_NOT_RESERVE,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.markForUnhotelable();\n        },\n        key: \"rmGrid\"\n      });\n    }\n    markForUnhotelable() {\n      this.messageService.clear();\n      this.selectedScreens.map(eachVal => {\n        eachVal.isHotelable = this.enumIdIsUnHotelable;\n        this.blSrv.saveRoom(eachVal).subscribe(res => {});\n      });\n      this.messageService.add({\n        key: 'rmMessage',\n        severity: 'success',\n        summary: 'Records updated',\n        detail: 'The selected desks are no longer reservable'\n      });\n      this.selectedScreens = [];\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res.map(x => Object.assign({}, x));\n        this.enumRmData = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'rm'.toLocaleUpperCase());\n        this.enumIsReservable = this.enumRmData.filter(t => t.fieldName.toLocaleUpperCase() === 'is_reservable'.toLocaleUpperCase());\n        this.enumIsReservable.map(item => {\n          if (item.enumValue == 'Yes') {\n            this.enumIdIsReservable = item.enumKey;\n          } else if (item.enumValue == 'No') {\n            this.enumIdIsUnReservable = item.enumKey;\n          }\n        });\n        this.enumIsHotelable = this.enumRmData.filter(t => t.fieldName.toLocaleUpperCase() === 'is_hotelable'.toLocaleUpperCase());\n        this.enumIsHotelable.map(item => {\n          if (item.enumValue == 'Yes') {\n            this.enumIdIsHotelable = item.enumKey;\n          } else if (item.enumValue == 'No') {\n            this.enumIdIsUnHotelable = item.enumKey;\n          }\n        });\n      }, error => {});\n    }\n    getEnumById(id) {\n      return id ? this.enumIsHotelable.find(t => t.enumKey == id) != null ? this.enumIsHotelable.find(t => t.enumKey == id)?.enumValue : '' : '';\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadRecords();\n    }\n    onInnerFilter(event) {\n      setTimeout(() => {\n        if (this.isFiltered) {\n          Object.keys(event.filters).forEach(field => {\n            const filterValue = event.filters[field][0].value;\n            const matchMode = event.filters[field][0].matchMode;\n            if (filterValue !== undefined) {\n              let filterCriteria = {};\n              if (field == \"blBlName\") {\n                filterCriteria = {\n                  fieldName: \"bl.blName\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"flFlName\") {\n                filterCriteria = {\n                  fieldName: \"fl.flName\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"rmcatRmCat\") {\n                filterCriteria = {\n                  fieldName: \"rmcat.rmCat\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else if (field == \"rmtypeRmType\") {\n                filterCriteria = {\n                  fieldName: \"rmtype.rmType\",\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              } else {\n                filterCriteria = {\n                  fieldName: field,\n                  value: filterValue,\n                  matchMode: matchMode\n                };\n              }\n              this.updateFilterCriteriaList(filterCriteria);\n            }\n          });\n          this.paginationObj.pageNo = 0;\n          this.loadRecords();\n        }\n        this.isFiltered = true;\n      }, 0);\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.filterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.filterCriteriaList[index] = filterCriteria;\n        } else {\n          this.filterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function MarkHotelComponent_Factory(t) {\n      return new (t || MarkHotelComponent)(i0.ɵɵdirectiveInject(i1.BuildingService), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MarkHotelComponent,\n      selectors: [[\"app-mark-hotel\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 12,\n      vars: 11,\n      consts: [[1, \"card\", 2, \"height\", \"92vh\"], [\"header\", \"Manage Reservable Desks\"], [1, \"card\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", 3, \"value\", \"selection\", \"paginator\", \"rowHover\", \"scrollable\", \"selectionChange\", \"onFilter\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"key\", \"rmMessage\", \"position\", \"top-right\"], [\"key\", \"rmGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"d-flex\", \"flex-row\", \"justify-content-between\"], [2, \"font-size\", \"13px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Mark Reservable\", 1, \"p-button-primary\", \"p-button\", 2, \"margin-right\", \"1rem\", 3, \"hidden\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Mark Not Reservable\", 1, \"p-button-primary\", \"p-button\", 2, \"margin-right\", \"1rem\", 3, \"hidden\", \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"blBlName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"blBlName\"], [\"type\", \"text\", \"field\", \"blBlName\", \"display\", \"menu\"], [\"pSortableColumn\", \"flFlName\"], [\"field\", \"flFlName\"], [\"type\", \"text\", \"field\", \"flFlName\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmCode\"], [\"field\", \"rmCode\"], [\"type\", \"text\", \"field\", \"rmCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmName\"], [\"field\", \"rmName\"], [\"type\", \"text\", \"field\", \"rmName\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmcatRmCat\"], [\"field\", \"rmcatRmCat\"], [\"type\", \"text\", \"field\", \"rmcatRmCat\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmtypeRmType\"], [\"field\", \"rmtypeRmType\"], [\"type\", \"text\", \"field\", \"rmtypeRmType\", \"display\", \"menu\"], [\"pSortableColumn\", \"isHotelable\"], [\"field\", \"isHotelable\"], [\"type\", \"text\", \"field\", \"isHotelable\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [3, \"value\"]],\n      template: function MarkHotelComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"div\", 2)(3, \"p-table\", 3);\n          i0.ɵɵlistener(\"selectionChange\", function MarkHotelComponent_Template_p_table_selectionChange_3_listener($event) {\n            return ctx.selectedScreens = $event;\n          })(\"onFilter\", function MarkHotelComponent_Template_p_table_onFilter_3_listener($event) {\n            return ctx.onInnerFilter($event);\n          });\n          i0.ɵɵtemplate(4, MarkHotelComponent_ng_template_4_Template, 6, 2, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, MarkHotelComponent_ng_template_5_Template, 59, 0, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, MarkHotelComponent_ng_template_6_Template, 17, 9, \"ng-template\", 6);\n          i0.ɵɵtemplate(7, MarkHotelComponent_ng_template_7_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 8)(9, \"p-paginator\", 9);\n          i0.ɵɵlistener(\"onPageChange\", function MarkHotelComponent_Template_p_paginator_onPageChange_9_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelement(10, \"p-toast\", 10)(11, \"p-confirmDialog\", 11);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"value\", ctx.rm_display_data)(\"selection\", ctx.selectedScreens)(\"paginator\", false)(\"rowHover\", false)(\"scrollable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n        }\n      },\n      dependencies: [i3.PrimeTemplate, i4.Table, i4.SortableColumn, i4.SelectableRow, i4.SortIcon, i4.TableCheckbox, i4.TableHeaderCheckbox, i4.ColumnFilter, i5.ButtonDirective, i6.Toast, i7.Panel, i8.ConfirmDialog, i9.Paginator]\n    });\n  }\n  return MarkHotelComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}