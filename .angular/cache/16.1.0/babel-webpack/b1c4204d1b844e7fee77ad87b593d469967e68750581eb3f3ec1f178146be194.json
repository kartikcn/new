{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i8 from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, Input, Output, Optional, NgModule } from '@angular/core';\nimport * as i7 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, fromEvent, of } from 'rxjs';\nimport { takeUntil, distinctUntilChanged, withLatestFrom, map } from 'rxjs/operators';\nimport { isValid } from 'date-fns';\nimport { slideMotion } from 'ng-zorro-antd/core/animation';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { isNotNil, isNil, InputBoolean, getStatusClassNames } from 'ng-zorro-antd/core/util';\nimport * as i2 from 'ng-zorro-antd/i18n';\nimport { NzI18nModule } from 'ng-zorro-antd/i18n';\nimport * as i3$1 from '@angular/cdk/platform';\nimport * as i4$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i5$1 from 'ng-zorro-antd/core/form';\nimport { NzFormPatchModule } from 'ng-zorro-antd/core/form';\nimport * as i2$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i9 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i10 from 'ng-zorro-antd/core/overlay';\nimport { NzOverlayModule } from 'ng-zorro-antd/core/overlay';\nimport * as i11 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/core/transition-patch';\nimport { reqAnimFrame } from 'ng-zorro-antd/core/polyfill';\nimport * as i3 from 'ng-zorro-antd/button';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport * as i5 from 'ng-zorro-antd/core/wave';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst _c0 = [\"hourListElement\"];\nconst _c1 = [\"minuteListElement\"];\nconst _c2 = [\"secondListElement\"];\nconst _c3 = [\"use12HoursListElement\"];\nfunction NzTimePickerPanelComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.dateHelper.format(ctx_r0.time == null ? null : ctx_r0.time.value, ctx_r0.format) || \"\\xA0\");\n  }\n}\nfunction NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 10);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template_li_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const hour_r8 = i0.ɵɵnextContext().$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.selectHour(hour_r8));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const hour_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-picker-time-panel-cell-selected\", ctx_r9.isSelectedHour(hour_r8))(\"ant-picker-time-panel-cell-disabled\", hour_r8.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 5, hour_r8.index, \"2.0-0\"));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template, 4, 8, \"li\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const hour_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r7.nzHideDisabledOptions && hour_r8.disabled));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 6, 7);\n    i0.ɵɵtemplate(2, NzTimePickerPanelComponent_ul_2_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.hourRange)(\"ngForTrackBy\", ctx_r1.trackByFn);\n  }\n}\nfunction NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 10);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template_li_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const minute_r16 = i0.ɵɵnextContext().$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.selectMinute(minute_r16));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const minute_r16 = i0.ɵɵnextContext().$implicit;\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-picker-time-panel-cell-selected\", ctx_r17.isSelectedMinute(minute_r16))(\"ant-picker-time-panel-cell-disabled\", minute_r16.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 5, minute_r16.index, \"2.0-0\"));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template, 4, 8, \"li\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const minute_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r15.nzHideDisabledOptions && minute_r16.disabled));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 6, 12);\n    i0.ɵɵtemplate(2, NzTimePickerPanelComponent_ul_3_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.minuteRange)(\"ngForTrackBy\", ctx_r2.trackByFn);\n  }\n}\nfunction NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 10);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template_li_click_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const second_r24 = i0.ɵɵnextContext().$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26.selectSecond(second_r24));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const second_r24 = i0.ɵɵnextContext().$implicit;\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"ant-picker-time-panel-cell-selected\", ctx_r25.isSelectedSecond(second_r24))(\"ant-picker-time-panel-cell-disabled\", second_r24.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 5, second_r24.index, \"2.0-0\"));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template, 4, 8, \"li\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const second_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r23.nzHideDisabledOptions && second_r24.disabled));\n  }\n}\nfunction NzTimePickerPanelComponent_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 6, 13);\n    i0.ɵɵtemplate(2, NzTimePickerPanelComponent_ul_4_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.secondRange)(\"ngForTrackBy\", ctx_r3.trackByFn);\n  }\n}\nfunction NzTimePickerPanelComponent_ul_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 10);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_ul_5_ng_container_2_Template_li_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r34);\n      const range_r32 = restoredCtx.$implicit;\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r33.select12Hours(range_r32));\n    });\n    i0.ɵɵelementStart(2, \"div\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const range_r32 = ctx.$implicit;\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"ant-picker-time-panel-cell-selected\", ctx_r31.isSelected12Hours(range_r32));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(range_r32.value);\n  }\n}\nfunction NzTimePickerPanelComponent_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 6, 14);\n    i0.ɵɵtemplate(2, NzTimePickerPanelComponent_ul_5_ng_container_2_Template, 4, 3, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.use12HoursRange);\n  }\n}\nfunction NzTimePickerPanelComponent_div_6_div_1_ng_template_1_Template(rf, ctx) {}\nfunction NzTimePickerPanelComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtemplate(1, NzTimePickerPanelComponent_div_6_div_1_ng_template_1_Template, 0, 0, \"ng-template\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r35 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r35.nzAddOn);\n  }\n}\nfunction NzTimePickerPanelComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, NzTimePickerPanelComponent_div_6_div_1_Template, 2, 1, \"div\", 17);\n    i0.ɵɵelementStart(2, \"ul\", 18)(3, \"li\", 19)(4, \"a\", 20);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_div_6_Template_a_click_4_listener() {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.onClickNow());\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"nzI18n\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"li\", 21)(8, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function NzTimePickerPanelComponent_div_6_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r39.onClickOk());\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"nzI18n\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.nzAddOn);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.nzNowText || i0.ɵɵpipeBind1(6, 3, \"Calendar.lang.now\"), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.nzOkText || i0.ɵɵpipeBind1(10, 5, \"Calendar.lang.ok\"), \" \");\n  }\n}\nconst _c4 = [\"inputElement\"];\nfunction NzTimePickerComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const suffixIcon_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzType\", suffixIcon_r5);\n  }\n}\nfunction NzTimePickerComponent_nz_form_item_feedback_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-form-item-feedback-icon\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"status\", ctx_r2.status);\n  }\n}\nfunction NzTimePickerComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵlistener(\"click\", function NzTimePickerComponent_span_7_Template_span_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onClickClearBtn($event));\n    });\n    i0.ɵɵelement(1, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.nzClearText)(\"title\", ctx_r3.nzClearText);\n  }\n}\nfunction NzTimePickerComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13)(2, \"div\", 14)(3, \"nz-time-picker-panel\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.value = $event);\n    })(\"ngModelChange\", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onPanelValueChange($event));\n    })(\"closePanel\", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_closePanel_3_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.setCurrentValueAndClose());\n    });\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@slideMotion\", \"enter\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.nzPopupClassName)(\"format\", ctx_r4.nzFormat)(\"nzHourStep\", ctx_r4.nzHourStep)(\"nzMinuteStep\", ctx_r4.nzMinuteStep)(\"nzSecondStep\", ctx_r4.nzSecondStep)(\"nzDisabledHours\", ctx_r4.nzDisabledHours)(\"nzDisabledMinutes\", ctx_r4.nzDisabledMinutes)(\"nzDisabledSeconds\", ctx_r4.nzDisabledSeconds)(\"nzPlaceHolder\", ctx_r4.nzPlaceHolder || i0.ɵɵpipeBind1(4, 19, ctx_r4.i18nPlaceHolder$))(\"nzHideDisabledOptions\", ctx_r4.nzHideDisabledOptions)(\"nzUse12Hours\", ctx_r4.nzUse12Hours)(\"nzDefaultOpenValue\", ctx_r4.nzDefaultOpenValue)(\"nzAddOn\", ctx_r4.nzAddOn)(\"nzClearText\", ctx_r4.nzClearText)(\"nzNowText\", ctx_r4.nzNowText)(\"nzOkText\", ctx_r4.nzOkText)(\"nzAllowEmpty\", ctx_r4.nzAllowEmpty)(\"ngModel\", ctx_r4.value);\n  }\n}\nclass TimeHolder {\n  setMinutes(value, disabled) {\n    if (!disabled) {\n      this.initValue();\n      this.value.setMinutes(value);\n      this.update();\n    }\n    return this;\n  }\n  setHours(value, disabled) {\n    if (!disabled) {\n      this.initValue();\n      if (this._use12Hours) {\n        if (this.selected12Hours === 'PM' && value !== 12) {\n          this.value.setHours(value + 12);\n        } else if (this.selected12Hours === 'AM' && value === 12) {\n          this.value.setHours(0);\n        } else {\n          this.value.setHours(value);\n        }\n      } else {\n        this.value.setHours(value);\n      }\n      this.update();\n    }\n    return this;\n  }\n  setSeconds(value, disabled) {\n    if (!disabled) {\n      this.initValue();\n      this.value.setSeconds(value);\n      this.update();\n    }\n    return this;\n  }\n  setUse12Hours(value) {\n    this._use12Hours = value;\n    return this;\n  }\n  get changes() {\n    return this._changes.asObservable();\n  }\n  setValue(value, use12Hours) {\n    if (isNotNil(use12Hours)) {\n      this._use12Hours = use12Hours;\n    }\n    if (value !== this.value) {\n      this._value = value;\n      if (isNotNil(this.value)) {\n        if (this._use12Hours && isNotNil(this.hours)) {\n          this.selected12Hours = this.hours >= 12 ? 'PM' : 'AM';\n        }\n      } else {\n        this._clear();\n      }\n    }\n    return this;\n  }\n  initValue() {\n    if (isNil(this.value)) {\n      this.setValue(new Date(), this._use12Hours);\n    }\n  }\n  clear() {\n    this._clear();\n    this.update();\n  }\n  get isEmpty() {\n    return !(isNotNil(this.hours) || isNotNil(this.minutes) || isNotNil(this.seconds));\n  }\n  _clear() {\n    this._value = undefined;\n    this.selected12Hours = undefined;\n  }\n  update() {\n    if (this.isEmpty) {\n      this._value = undefined;\n    } else {\n      if (isNotNil(this.hours)) {\n        this.value.setHours(this.hours);\n      }\n      if (isNotNil(this.minutes)) {\n        this.value.setMinutes(this.minutes);\n      }\n      if (isNotNil(this.seconds)) {\n        this.value.setSeconds(this.seconds);\n      }\n      if (this._use12Hours) {\n        if (this.selected12Hours === 'PM' && this.hours < 12) {\n          this.value.setHours(this.hours + 12);\n        }\n        if (this.selected12Hours === 'AM' && this.hours >= 12) {\n          this.value.setHours(this.hours - 12);\n        }\n      }\n    }\n    this.changed();\n  }\n  changed() {\n    this._changes.next(this.value);\n  }\n  /**\n   * @description\n   * UI view hours\n   * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]\n   */\n  get viewHours() {\n    return this._use12Hours && isNotNil(this.hours) ? this.calculateViewHour(this.hours) : this.hours;\n  }\n  setSelected12Hours(value) {\n    if (value.toUpperCase() !== this.selected12Hours) {\n      this.selected12Hours = value.toUpperCase();\n      this.update();\n    }\n  }\n  get value() {\n    return this._value || this._defaultOpenValue;\n  }\n  get hours() {\n    return this.value?.getHours();\n  }\n  get minutes() {\n    return this.value?.getMinutes();\n  }\n  get seconds() {\n    return this.value?.getSeconds();\n  }\n  setDefaultOpenValue(value) {\n    this._defaultOpenValue = value;\n    return this;\n  }\n  constructor() {\n    this.selected12Hours = undefined;\n    this._use12Hours = false;\n    this._changes = new Subject();\n  }\n  calculateViewHour(value) {\n    const selected12Hours = this.selected12Hours;\n    if (selected12Hours === 'PM' && value > 12) {\n      return value - 12;\n    }\n    if (selected12Hours === 'AM' && value === 0) {\n      return 12;\n    }\n    return value;\n  }\n}\nfunction makeRange(length, step = 1, start = 0) {\n  return new Array(Math.ceil(length / step)).fill(0).map((_, i) => (i + start) * step);\n}\nlet NzTimePickerPanelComponent = /*#__PURE__*/(() => {\n  class NzTimePickerPanelComponent {\n    set nzAllowEmpty(value) {\n      if (isNotNil(value)) {\n        this._allowEmpty = value;\n      }\n    }\n    get nzAllowEmpty() {\n      return this._allowEmpty;\n    }\n    set nzDisabledHours(value) {\n      this._disabledHours = value;\n      if (this._disabledHours) {\n        this.buildHours();\n      }\n    }\n    get nzDisabledHours() {\n      return this._disabledHours;\n    }\n    set nzDisabledMinutes(value) {\n      if (isNotNil(value)) {\n        this._disabledMinutes = value;\n        this.buildMinutes();\n      }\n    }\n    get nzDisabledMinutes() {\n      return this._disabledMinutes;\n    }\n    set nzDisabledSeconds(value) {\n      if (isNotNil(value)) {\n        this._disabledSeconds = value;\n        this.buildSeconds();\n      }\n    }\n    get nzDisabledSeconds() {\n      return this._disabledSeconds;\n    }\n    set format(value) {\n      if (isNotNil(value)) {\n        this._format = value;\n        this.enabledColumns = 0;\n        const charSet = new Set(value);\n        this.hourEnabled = charSet.has('H') || charSet.has('h');\n        this.minuteEnabled = charSet.has('m');\n        this.secondEnabled = charSet.has('s');\n        if (this.hourEnabled) {\n          this.enabledColumns++;\n        }\n        if (this.minuteEnabled) {\n          this.enabledColumns++;\n        }\n        if (this.secondEnabled) {\n          this.enabledColumns++;\n        }\n        if (this.nzUse12Hours) {\n          this.build12Hours();\n        }\n      }\n    }\n    get format() {\n      return this._format;\n    }\n    set nzHourStep(value) {\n      if (isNotNil(value)) {\n        this._nzHourStep = value;\n        this.buildHours();\n      }\n    }\n    get nzHourStep() {\n      return this._nzHourStep;\n    }\n    set nzMinuteStep(value) {\n      if (isNotNil(value)) {\n        this._nzMinuteStep = value;\n        this.buildMinutes();\n      }\n    }\n    get nzMinuteStep() {\n      return this._nzMinuteStep;\n    }\n    set nzSecondStep(value) {\n      if (isNotNil(value)) {\n        this._nzSecondStep = value;\n        this.buildSeconds();\n      }\n    }\n    get nzSecondStep() {\n      return this._nzSecondStep;\n    }\n    trackByFn(index) {\n      return index;\n    }\n    buildHours() {\n      let hourRanges = 24;\n      let disabledHours = this.nzDisabledHours?.();\n      let startIndex = 0;\n      if (this.nzUse12Hours) {\n        hourRanges = 12;\n        if (disabledHours) {\n          if (this.time.selected12Hours === 'PM') {\n            /**\n             * Filter and transform hours which greater or equal to 12\n             * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]\n             */\n            disabledHours = disabledHours.filter(i => i >= 12).map(i => i > 12 ? i - 12 : i);\n          } else {\n            /**\n             * Filter and transform hours which less than 12\n             * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]\n             */\n            disabledHours = disabledHours.filter(i => i < 12 || i === 24).map(i => i === 24 || i === 0 ? 12 : i);\n          }\n        }\n        startIndex = 1;\n      }\n      this.hourRange = makeRange(hourRanges, this.nzHourStep, startIndex).map(r => ({\n        index: r,\n        disabled: !!disabledHours && disabledHours.indexOf(r) !== -1\n      }));\n      if (this.nzUse12Hours && this.hourRange[this.hourRange.length - 1].index === 12) {\n        const temp = [...this.hourRange];\n        temp.unshift(temp[temp.length - 1]);\n        temp.splice(temp.length - 1, 1);\n        this.hourRange = temp;\n      }\n    }\n    buildMinutes() {\n      this.minuteRange = makeRange(60, this.nzMinuteStep).map(r => ({\n        index: r,\n        disabled: !!this.nzDisabledMinutes && this.nzDisabledMinutes(this.time.hours).indexOf(r) !== -1\n      }));\n    }\n    buildSeconds() {\n      this.secondRange = makeRange(60, this.nzSecondStep).map(r => ({\n        index: r,\n        disabled: !!this.nzDisabledSeconds && this.nzDisabledSeconds(this.time.hours, this.time.minutes).indexOf(r) !== -1\n      }));\n    }\n    build12Hours() {\n      const isUpperFormat = this._format.includes('A');\n      this.use12HoursRange = [{\n        index: 0,\n        value: isUpperFormat ? 'AM' : 'am'\n      }, {\n        index: 1,\n        value: isUpperFormat ? 'PM' : 'pm'\n      }];\n    }\n    buildTimes() {\n      this.buildHours();\n      this.buildMinutes();\n      this.buildSeconds();\n      this.build12Hours();\n    }\n    scrollToTime(delay = 0) {\n      if (this.hourEnabled && this.hourListElement) {\n        this.scrollToSelected(this.hourListElement.nativeElement, this.time.viewHours, delay, 'hour');\n      }\n      if (this.minuteEnabled && this.minuteListElement) {\n        this.scrollToSelected(this.minuteListElement.nativeElement, this.time.minutes, delay, 'minute');\n      }\n      if (this.secondEnabled && this.secondListElement) {\n        this.scrollToSelected(this.secondListElement.nativeElement, this.time.seconds, delay, 'second');\n      }\n      if (this.nzUse12Hours && this.use12HoursListElement) {\n        const selectedHours = this.time.selected12Hours;\n        const index = selectedHours === 'AM' ? 0 : 1;\n        this.scrollToSelected(this.use12HoursListElement.nativeElement, index, delay, '12-hour');\n      }\n    }\n    selectHour(hour) {\n      this.time.setHours(hour.index, hour.disabled);\n      if (this._disabledMinutes) {\n        this.buildMinutes();\n      }\n      if (this._disabledSeconds || this._disabledMinutes) {\n        this.buildSeconds();\n      }\n    }\n    selectMinute(minute) {\n      this.time.setMinutes(minute.index, minute.disabled);\n      if (this._disabledSeconds) {\n        this.buildSeconds();\n      }\n    }\n    selectSecond(second) {\n      this.time.setSeconds(second.index, second.disabled);\n    }\n    select12Hours(value) {\n      this.time.setSelected12Hours(value.value);\n      if (this._disabledHours) {\n        this.buildHours();\n      }\n      if (this._disabledMinutes) {\n        this.buildMinutes();\n      }\n      if (this._disabledSeconds) {\n        this.buildSeconds();\n      }\n    }\n    scrollToSelected(instance, index, duration = 0, unit) {\n      if (!instance) {\n        return;\n      }\n      const transIndex = this.translateIndex(index, unit);\n      const currentOption = instance.children[transIndex] || instance.children[0];\n      this.scrollTo(instance, currentOption.offsetTop, duration);\n    }\n    translateIndex(index, unit) {\n      if (unit === 'hour') {\n        return this.calcIndex(this.nzDisabledHours?.(), this.hourRange.map(item => item.index).indexOf(index));\n      } else if (unit === 'minute') {\n        return this.calcIndex(this.nzDisabledMinutes?.(this.time.hours), this.minuteRange.map(item => item.index).indexOf(index));\n      } else if (unit === 'second') {\n        // second\n        return this.calcIndex(this.nzDisabledSeconds?.(this.time.hours, this.time.minutes), this.secondRange.map(item => item.index).indexOf(index));\n      } else {\n        // 12-hour\n        return this.calcIndex([], this.use12HoursRange.map(item => item.index).indexOf(index));\n      }\n    }\n    scrollTo(element, to, duration) {\n      if (duration <= 0) {\n        element.scrollTop = to;\n        return;\n      }\n      const difference = to - element.scrollTop;\n      const perTick = difference / duration * 10;\n      this.ngZone.runOutsideAngular(() => {\n        reqAnimFrame(() => {\n          element.scrollTop = element.scrollTop + perTick;\n          if (element.scrollTop === to) {\n            return;\n          }\n          this.scrollTo(element, to, duration - 10);\n        });\n      });\n    }\n    calcIndex(array, index) {\n      if (array?.length && this.nzHideDisabledOptions) {\n        return index - array.reduce((pre, value) => pre + (value < index ? 1 : 0), 0);\n      } else {\n        return index;\n      }\n    }\n    changed() {\n      if (this.onChange) {\n        this.onChange(this.time.value);\n      }\n    }\n    touched() {\n      if (this.onTouch) {\n        this.onTouch();\n      }\n    }\n    timeDisabled(value) {\n      const hour = value.getHours();\n      const minute = value.getMinutes();\n      const second = value.getSeconds();\n      return (this.nzDisabledHours?.().indexOf(hour) ?? -1) > -1 || (this.nzDisabledMinutes?.(hour).indexOf(minute) ?? -1) > -1 || (this.nzDisabledSeconds?.(hour, minute).indexOf(second) ?? -1) > -1;\n    }\n    onClickNow() {\n      const now = new Date();\n      if (this.timeDisabled(now)) {\n        return;\n      }\n      this.time.setValue(now);\n      this.changed();\n      this.closePanel.emit();\n    }\n    onClickOk() {\n      this.time.setValue(this.time.value, this.nzUse12Hours);\n      this.changed();\n      this.closePanel.emit();\n    }\n    isSelectedHour(hour) {\n      return hour.index === this.time.viewHours;\n    }\n    isSelectedMinute(minute) {\n      return minute.index === this.time.minutes;\n    }\n    isSelectedSecond(second) {\n      return second.index === this.time.seconds;\n    }\n    isSelected12Hours(value) {\n      return value.value.toUpperCase() === this.time.selected12Hours;\n    }\n    constructor(ngZone, cdr, dateHelper, elementRef) {\n      this.ngZone = ngZone;\n      this.cdr = cdr;\n      this.dateHelper = dateHelper;\n      this.elementRef = elementRef;\n      this._nzHourStep = 1;\n      this._nzMinuteStep = 1;\n      this._nzSecondStep = 1;\n      this.unsubscribe$ = new Subject();\n      this._format = 'HH:mm:ss';\n      this._disabledHours = () => [];\n      this._disabledMinutes = () => [];\n      this._disabledSeconds = () => [];\n      this._allowEmpty = true;\n      this.time = new TimeHolder();\n      this.hourEnabled = true;\n      this.minuteEnabled = true;\n      this.secondEnabled = true;\n      this.firstScrolled = false;\n      this.enabledColumns = 3;\n      this.nzInDatePicker = false; // If inside a date-picker, more diff works need to be done\n      this.nzHideDisabledOptions = false;\n      this.nzUse12Hours = false;\n      this.closePanel = new EventEmitter();\n    }\n    ngOnInit() {\n      this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {\n        this.changed();\n        this.touched();\n        this.scrollToTime(120);\n      });\n      this.buildTimes();\n      this.ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.scrollToTime();\n          this.firstScrolled = true;\n        });\n        fromEvent(this.elementRef.nativeElement, 'mousedown').pipe(takeUntil(this.unsubscribe$)).subscribe(event => {\n          event.preventDefault();\n        });\n      });\n    }\n    ngOnDestroy() {\n      this.unsubscribe$.next();\n      this.unsubscribe$.complete();\n    }\n    ngOnChanges(changes) {\n      const {\n        nzUse12Hours,\n        nzDefaultOpenValue\n      } = changes;\n      if (!nzUse12Hours?.previousValue && nzUse12Hours?.currentValue) {\n        this.build12Hours();\n        this.enabledColumns++;\n      }\n      if (nzDefaultOpenValue?.currentValue) {\n        this.time.setDefaultOpenValue(this.nzDefaultOpenValue || new Date());\n      }\n    }\n    writeValue(value) {\n      this.time.setValue(value, this.nzUse12Hours);\n      this.buildTimes();\n      if (value && this.firstScrolled) {\n        this.scrollToTime(120);\n      }\n      // Mark this component to be checked manually with internal properties changing (see: https://github.com/angular/angular/issues/10816)\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouch = fn;\n    }\n    static #_ = this.ɵfac = function NzTimePickerPanelComponent_Factory(t) {\n      return new (t || NzTimePickerPanelComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DateHelperService), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTimePickerPanelComponent,\n      selectors: [[\"nz-time-picker-panel\"]],\n      viewQuery: function NzTimePickerPanelComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n          i0.ɵɵviewQuery(_c3, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hourListElement = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.minuteListElement = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.secondListElement = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.use12HoursListElement = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-picker-time-panel\"],\n      hostVars: 12,\n      hostBindings: function NzTimePickerPanelComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-picker-time-panel-column-0\", ctx.enabledColumns === 0 && !ctx.nzInDatePicker)(\"ant-picker-time-panel-column-1\", ctx.enabledColumns === 1 && !ctx.nzInDatePicker)(\"ant-picker-time-panel-column-2\", ctx.enabledColumns === 2 && !ctx.nzInDatePicker)(\"ant-picker-time-panel-column-3\", ctx.enabledColumns === 3 && !ctx.nzInDatePicker)(\"ant-picker-time-panel-narrow\", ctx.enabledColumns < 3)(\"ant-picker-time-panel-placement-bottomLeft\", !ctx.nzInDatePicker);\n        }\n      },\n      inputs: {\n        nzInDatePicker: \"nzInDatePicker\",\n        nzAddOn: \"nzAddOn\",\n        nzHideDisabledOptions: \"nzHideDisabledOptions\",\n        nzClearText: \"nzClearText\",\n        nzNowText: \"nzNowText\",\n        nzOkText: \"nzOkText\",\n        nzPlaceHolder: \"nzPlaceHolder\",\n        nzUse12Hours: \"nzUse12Hours\",\n        nzDefaultOpenValue: \"nzDefaultOpenValue\",\n        nzAllowEmpty: \"nzAllowEmpty\",\n        nzDisabledHours: \"nzDisabledHours\",\n        nzDisabledMinutes: \"nzDisabledMinutes\",\n        nzDisabledSeconds: \"nzDisabledSeconds\",\n        format: \"format\",\n        nzHourStep: \"nzHourStep\",\n        nzMinuteStep: \"nzMinuteStep\",\n        nzSecondStep: \"nzSecondStep\"\n      },\n      outputs: {\n        closePanel: \"closePanel\"\n      },\n      exportAs: [\"nzTimePickerPanel\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NzTimePickerPanelComponent,\n        multi: true\n      }]), i0.ɵɵNgOnChangesFeature],\n      decls: 7,\n      vars: 6,\n      consts: [[\"class\", \"ant-picker-header\", 4, \"ngIf\"], [1, \"ant-picker-content\"], [\"class\", \"ant-picker-time-panel-column\", \"style\", \"position: relative;\", 4, \"ngIf\"], [\"class\", \"ant-picker-footer\", 4, \"ngIf\"], [1, \"ant-picker-header\"], [1, \"ant-picker-header-view\"], [1, \"ant-picker-time-panel-column\", 2, \"position\", \"relative\"], [\"hourListElement\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"ant-picker-time-panel-cell\", 3, \"ant-picker-time-panel-cell-selected\", \"ant-picker-time-panel-cell-disabled\", \"click\", 4, \"ngIf\"], [1, \"ant-picker-time-panel-cell\", 3, \"click\"], [1, \"ant-picker-time-panel-cell-inner\"], [\"minuteListElement\", \"\"], [\"secondListElement\", \"\"], [\"use12HoursListElement\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"ant-picker-footer\"], [\"class\", \"ant-picker-footer-extra\", 4, \"ngIf\"], [1, \"ant-picker-ranges\"], [1, \"ant-picker-now\"], [3, \"click\"], [1, \"ant-picker-ok\"], [\"nz-button\", \"\", \"type\", \"button\", \"nzSize\", \"small\", \"nzType\", \"primary\", 3, \"click\"], [1, \"ant-picker-footer-extra\"], [3, \"ngTemplateOutlet\"]],\n      template: function NzTimePickerPanelComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, NzTimePickerPanelComponent_div_0_Template, 3, 1, \"div\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵtemplate(2, NzTimePickerPanelComponent_ul_2_Template, 3, 2, \"ul\", 2);\n          i0.ɵɵtemplate(3, NzTimePickerPanelComponent_ul_3_Template, 3, 2, \"ul\", 2);\n          i0.ɵɵtemplate(4, NzTimePickerPanelComponent_ul_4_Template, 3, 2, \"ul\", 2);\n          i0.ɵɵtemplate(5, NzTimePickerPanelComponent_ul_5_Template, 3, 1, \"ul\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, NzTimePickerPanelComponent_div_6_Template, 11, 7, \"div\", 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.nzInDatePicker);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.hourEnabled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.minuteEnabled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.secondEnabled);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.nzUse12Hours);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.nzInDatePicker);\n        }\n      },\n      dependencies: [i2$1.NgForOf, i2$1.NgIf, i2$1.NgTemplateOutlet, i3.NzButtonComponent, i4.ɵNzTransitionPatchDirective, i5.NzWaveDirective, i2$1.DecimalPipe, i2.NzI18nPipe],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  __decorate([InputBoolean()], NzTimePickerPanelComponent.prototype, \"nzUse12Hours\", void 0);\n  return NzTimePickerPanelComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst NZ_CONFIG_MODULE_NAME = 'timePicker';\nlet NzTimePickerComponent = /*#__PURE__*/(() => {\n  class NzTimePickerComponent {\n    emitValue(value) {\n      this.setValue(value, true);\n      if (this._onChange) {\n        this._onChange(this.value);\n      }\n      if (this._onTouched) {\n        this._onTouched();\n      }\n    }\n    setValue(value, syncPreValue = false) {\n      if (syncPreValue) {\n        this.preValue = isValid(value) ? new Date(value) : null;\n      }\n      this.value = isValid(value) ? new Date(value) : null;\n      this.inputValue = this.dateHelper.format(value, this.nzFormat);\n      this.cdr.markForCheck();\n    }\n    open() {\n      if (this.nzDisabled || this.nzOpen) {\n        return;\n      }\n      this.focus();\n      this.nzOpen = true;\n      this.nzOpenChange.emit(this.nzOpen);\n    }\n    close() {\n      this.nzOpen = false;\n      this.cdr.markForCheck();\n      this.nzOpenChange.emit(this.nzOpen);\n    }\n    updateAutoFocus() {\n      if (this.isInit && !this.nzDisabled) {\n        if (this.nzAutoFocus) {\n          this.renderer.setAttribute(this.inputRef.nativeElement, 'autofocus', 'autofocus');\n        } else {\n          this.renderer.removeAttribute(this.inputRef.nativeElement, 'autofocus');\n        }\n      }\n    }\n    onClickClearBtn(event) {\n      event.stopPropagation();\n      this.emitValue(null);\n    }\n    onClickOutside(event) {\n      if (!this.element.nativeElement.contains(event.target)) {\n        this.setCurrentValueAndClose();\n      }\n    }\n    onFocus(value) {\n      this.focused = value;\n      if (!value) {\n        if (this.checkTimeValid(this.value)) {\n          this.setCurrentValueAndClose();\n        } else {\n          this.setValue(this.preValue);\n          this.close();\n        }\n      }\n    }\n    focus() {\n      if (this.inputRef.nativeElement) {\n        this.inputRef.nativeElement.focus();\n      }\n    }\n    blur() {\n      if (this.inputRef.nativeElement) {\n        this.inputRef.nativeElement.blur();\n      }\n    }\n    onKeyupEsc() {\n      this.setValue(this.preValue);\n    }\n    onKeyupEnter() {\n      if (this.nzOpen && isValid(this.value)) {\n        this.setCurrentValueAndClose();\n      } else if (!this.nzOpen) {\n        this.open();\n      }\n    }\n    onInputChange(str) {\n      if (!this.platform.TRIDENT && document.activeElement === this.inputRef.nativeElement) {\n        this.open();\n        this.parseTimeString(str);\n      }\n    }\n    onPanelValueChange(value) {\n      this.setValue(value);\n      this.focus();\n    }\n    setCurrentValueAndClose() {\n      this.emitValue(this.value);\n      this.close();\n    }\n    constructor(nzConfigService, i18n, element, renderer, cdr, dateHelper, platform, directionality, nzFormStatusService, nzFormNoStatusService) {\n      this.nzConfigService = nzConfigService;\n      this.i18n = i18n;\n      this.element = element;\n      this.renderer = renderer;\n      this.cdr = cdr;\n      this.dateHelper = dateHelper;\n      this.platform = platform;\n      this.directionality = directionality;\n      this.nzFormStatusService = nzFormStatusService;\n      this.nzFormNoStatusService = nzFormNoStatusService;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.destroy$ = new Subject();\n      this.isNzDisableFirstChange = true;\n      this.isInit = false;\n      this.focused = false;\n      this.inputValue = '';\n      this.value = null;\n      this.preValue = null;\n      this.i18nPlaceHolder$ = of(undefined);\n      this.overlayPositions = [{\n        offsetY: 3,\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        offsetY: -3,\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }, {\n        offsetY: 3,\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }, {\n        offsetY: -3,\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n      }];\n      this.dir = 'ltr';\n      // status\n      this.prefixCls = 'ant-picker';\n      this.statusCls = {};\n      this.status = '';\n      this.hasFeedback = false;\n      this.nzId = null;\n      this.nzSize = null;\n      this.nzStatus = '';\n      this.nzHourStep = 1;\n      this.nzMinuteStep = 1;\n      this.nzSecondStep = 1;\n      this.nzClearText = 'clear';\n      this.nzNowText = '';\n      this.nzOkText = '';\n      this.nzPopupClassName = '';\n      this.nzPlaceHolder = '';\n      this.nzFormat = 'HH:mm:ss';\n      this.nzOpen = false;\n      this.nzUse12Hours = false;\n      this.nzSuffixIcon = 'clock-circle';\n      this.nzOpenChange = new EventEmitter();\n      this.nzHideDisabledOptions = false;\n      this.nzAllowEmpty = true;\n      this.nzDisabled = false;\n      this.nzAutoFocus = false;\n      this.nzBackdrop = false;\n      this.nzBorderless = false;\n      this.nzInputReadOnly = false;\n    }\n    ngOnInit() {\n      this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {\n        return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;\n      }), withLatestFrom(this.nzFormNoStatusService ? this.nzFormNoStatusService.noFormStatus : of(false)), map(([{\n        status,\n        hasFeedback\n      }, noStatus]) => ({\n        status: noStatus ? '' : status,\n        hasFeedback\n      })), takeUntil(this.destroy$)).subscribe(({\n        status,\n        hasFeedback\n      }) => {\n        this.setStatusStyles(status, hasFeedback);\n      });\n      this.inputSize = Math.max(8, this.nzFormat.length) + 2;\n      this.origin = new CdkOverlayOrigin(this.element);\n      this.i18nPlaceHolder$ = this.i18n.localeChange.pipe(map(nzLocale => nzLocale.TimePicker.placeholder));\n      this.dir = this.directionality.value;\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n      });\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    ngOnChanges(changes) {\n      const {\n        nzUse12Hours,\n        nzFormat,\n        nzDisabled,\n        nzAutoFocus,\n        nzStatus\n      } = changes;\n      if (nzUse12Hours && !nzUse12Hours.previousValue && nzUse12Hours.currentValue && !nzFormat) {\n        this.nzFormat = 'h:mm:ss a';\n      }\n      if (nzDisabled) {\n        const value = nzDisabled.currentValue;\n        const input = this.inputRef.nativeElement;\n        if (value) {\n          this.renderer.setAttribute(input, 'disabled', '');\n        } else {\n          this.renderer.removeAttribute(input, 'disabled');\n        }\n      }\n      if (nzAutoFocus) {\n        this.updateAutoFocus();\n      }\n      if (nzStatus) {\n        this.setStatusStyles(this.nzStatus, this.hasFeedback);\n      }\n    }\n    parseTimeString(str) {\n      const value = this.dateHelper.parseTime(str, this.nzFormat) || null;\n      if (isValid(value)) {\n        this.value = value;\n        this.cdr.markForCheck();\n      }\n    }\n    ngAfterViewInit() {\n      this.isInit = true;\n      this.updateAutoFocus();\n    }\n    writeValue(time) {\n      let result;\n      if (time instanceof Date) {\n        result = time;\n      } else if (isNil(time)) {\n        result = null;\n      } else {\n        warn('Non-Date type is not recommended for time-picker, use \"Date\" type.');\n        result = new Date(time);\n      }\n      this.setValue(result, true);\n    }\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;\n      this.isNzDisableFirstChange = false;\n      this.cdr.markForCheck();\n    }\n    checkTimeValid(value) {\n      if (!value) {\n        return true;\n      }\n      const disabledHours = this.nzDisabledHours?.();\n      const disabledMinutes = this.nzDisabledMinutes?.(value.getHours());\n      const disabledSeconds = this.nzDisabledSeconds?.(value.getHours(), value.getMinutes());\n      return !(disabledHours?.includes(value.getHours()) || disabledMinutes?.includes(value.getMinutes()) || disabledSeconds?.includes(value.getSeconds()));\n    }\n    setStatusStyles(status, hasFeedback) {\n      // set inner status\n      this.status = status;\n      this.hasFeedback = hasFeedback;\n      this.cdr.markForCheck();\n      // render status if nzStatus is set\n      this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);\n      Object.keys(this.statusCls).forEach(status => {\n        if (this.statusCls[status]) {\n          this.renderer.addClass(this.element.nativeElement, status);\n        } else {\n          this.renderer.removeClass(this.element.nativeElement, status);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function NzTimePickerComponent_Factory(t) {\n      return new (t || NzTimePickerComponent)(i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i2.NzI18nService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.DateHelperService), i0.ɵɵdirectiveInject(i3$1.Platform), i0.ɵɵdirectiveInject(i4$1.Directionality, 8), i0.ɵɵdirectiveInject(i5$1.NzFormStatusService, 8), i0.ɵɵdirectiveInject(i5$1.NzFormNoStatusService, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzTimePickerComponent,\n      selectors: [[\"nz-time-picker\"]],\n      viewQuery: function NzTimePickerComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c4, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);\n        }\n      },\n      hostAttrs: [1, \"ant-picker\"],\n      hostVars: 12,\n      hostBindings: function NzTimePickerComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function NzTimePickerComponent_click_HostBindingHandler() {\n            return ctx.open();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"ant-picker-large\", ctx.nzSize === \"large\")(\"ant-picker-small\", ctx.nzSize === \"small\")(\"ant-picker-disabled\", ctx.nzDisabled)(\"ant-picker-focused\", ctx.focused)(\"ant-picker-rtl\", ctx.dir === \"rtl\")(\"ant-picker-borderless\", ctx.nzBorderless);\n        }\n      },\n      inputs: {\n        nzId: \"nzId\",\n        nzSize: \"nzSize\",\n        nzStatus: \"nzStatus\",\n        nzHourStep: \"nzHourStep\",\n        nzMinuteStep: \"nzMinuteStep\",\n        nzSecondStep: \"nzSecondStep\",\n        nzClearText: \"nzClearText\",\n        nzNowText: \"nzNowText\",\n        nzOkText: \"nzOkText\",\n        nzPopupClassName: \"nzPopupClassName\",\n        nzPlaceHolder: \"nzPlaceHolder\",\n        nzAddOn: \"nzAddOn\",\n        nzDefaultOpenValue: \"nzDefaultOpenValue\",\n        nzDisabledHours: \"nzDisabledHours\",\n        nzDisabledMinutes: \"nzDisabledMinutes\",\n        nzDisabledSeconds: \"nzDisabledSeconds\",\n        nzFormat: \"nzFormat\",\n        nzOpen: \"nzOpen\",\n        nzUse12Hours: \"nzUse12Hours\",\n        nzSuffixIcon: \"nzSuffixIcon\",\n        nzHideDisabledOptions: \"nzHideDisabledOptions\",\n        nzAllowEmpty: \"nzAllowEmpty\",\n        nzDisabled: \"nzDisabled\",\n        nzAutoFocus: \"nzAutoFocus\",\n        nzBackdrop: \"nzBackdrop\",\n        nzBorderless: \"nzBorderless\",\n        nzInputReadOnly: \"nzInputReadOnly\"\n      },\n      outputs: {\n        nzOpenChange: \"nzOpenChange\"\n      },\n      exportAs: [\"nzTimePicker\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NzTimePickerComponent,\n        multi: true\n      }]), i0.ɵɵNgOnChangesFeature],\n      decls: 9,\n      vars: 16,\n      consts: [[1, \"ant-picker-input\"], [\"type\", \"text\", \"autocomplete\", \"off\", 3, \"size\", \"placeholder\", \"ngModel\", \"disabled\", \"readOnly\", \"ngModelChange\", \"focus\", \"blur\", \"keyup.enter\", \"keyup.escape\"], [\"inputElement\", \"\"], [1, \"ant-picker-suffix\"], [4, \"nzStringTemplateOutlet\"], [3, \"status\", 4, \"ngIf\"], [\"class\", \"ant-picker-clear\", 3, \"click\", 4, \"ngIf\"], [\"cdkConnectedOverlay\", \"\", \"nzConnectedOverlay\", \"\", 3, \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayTransformOriginOn\", \"detach\", \"overlayOutsideClick\"], [\"nz-icon\", \"\", 3, \"nzType\"], [3, \"status\"], [1, \"ant-picker-clear\", 3, \"click\"], [\"nz-icon\", \"\", \"nzType\", \"close-circle\", \"nzTheme\", \"fill\"], [1, \"ant-picker-dropdown\", 2, \"position\", \"relative\"], [1, \"ant-picker-panel-container\"], [\"tabindex\", \"-1\", 1, \"ant-picker-panel\"], [3, \"ngClass\", \"format\", \"nzHourStep\", \"nzMinuteStep\", \"nzSecondStep\", \"nzDisabledHours\", \"nzDisabledMinutes\", \"nzDisabledSeconds\", \"nzPlaceHolder\", \"nzHideDisabledOptions\", \"nzUse12Hours\", \"nzDefaultOpenValue\", \"nzAddOn\", \"nzClearText\", \"nzNowText\", \"nzOkText\", \"nzAllowEmpty\", \"ngModel\", \"ngModelChange\", \"closePanel\"]],\n      template: function NzTimePickerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1, 2);\n          i0.ɵɵlistener(\"ngModelChange\", function NzTimePickerComponent_Template_input_ngModelChange_1_listener($event) {\n            return ctx.inputValue = $event;\n          })(\"focus\", function NzTimePickerComponent_Template_input_focus_1_listener() {\n            return ctx.onFocus(true);\n          })(\"blur\", function NzTimePickerComponent_Template_input_blur_1_listener() {\n            return ctx.onFocus(false);\n          })(\"keyup.enter\", function NzTimePickerComponent_Template_input_keyup_enter_1_listener() {\n            return ctx.onKeyupEnter();\n          })(\"keyup.escape\", function NzTimePickerComponent_Template_input_keyup_escape_1_listener() {\n            return ctx.onKeyupEsc();\n          })(\"ngModelChange\", function NzTimePickerComponent_Template_input_ngModelChange_1_listener($event) {\n            return ctx.onInputChange($event);\n          });\n          i0.ɵɵpipe(3, \"async\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"span\", 3);\n          i0.ɵɵtemplate(5, NzTimePickerComponent_ng_container_5_Template, 2, 1, \"ng-container\", 4);\n          i0.ɵɵtemplate(6, NzTimePickerComponent_nz_form_item_feedback_icon_6_Template, 1, 1, \"nz-form-item-feedback-icon\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(7, NzTimePickerComponent_span_7_Template, 2, 2, \"span\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, NzTimePickerComponent_ng_template_8_Template, 5, 21, \"ng-template\", 7);\n          i0.ɵɵlistener(\"detach\", function NzTimePickerComponent_Template_ng_template_detach_8_listener() {\n            return ctx.close();\n          })(\"overlayOutsideClick\", function NzTimePickerComponent_Template_ng_template_overlayOutsideClick_8_listener($event) {\n            return ctx.onClickOutside($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"size\", ctx.inputSize)(\"placeholder\", ctx.nzPlaceHolder || i0.ɵɵpipeBind1(3, 14, ctx.i18nPlaceHolder$))(\"ngModel\", ctx.inputValue)(\"disabled\", ctx.nzDisabled)(\"readOnly\", ctx.nzInputReadOnly);\n          i0.ɵɵattribute(\"id\", ctx.nzId);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.nzSuffixIcon);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasFeedback && !!ctx.status);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.nzAllowEmpty && !ctx.nzDisabled && ctx.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"cdkConnectedOverlayHasBackdrop\", ctx.nzBackdrop)(\"cdkConnectedOverlayPositions\", ctx.overlayPositions)(\"cdkConnectedOverlayOrigin\", ctx.origin)(\"cdkConnectedOverlayOpen\", ctx.nzOpen)(\"cdkConnectedOverlayTransformOriginOn\", \".ant-picker-dropdown\");\n        }\n      },\n      dependencies: [i2$1.NgClass, i2$1.NgIf, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgModel, i8.CdkConnectedOverlay, i9.NzIconDirective, i10.NzConnectedOverlayDirective, i11.NzStringTemplateOutletDirective, i4.ɵNzTransitionPatchDirective, i5$1.NzFormItemFeedbackIconComponent, NzTimePickerPanelComponent, i2$1.AsyncPipe],\n      encapsulation: 2,\n      data: {\n        animation: [slideMotion]\n      },\n      changeDetection: 0\n    });\n  }\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzHourStep\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzMinuteStep\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzSecondStep\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzClearText\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzNowText\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzOkText\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzPopupClassName\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzFormat\", void 0);\n  __decorate([WithConfig(), InputBoolean()], NzTimePickerComponent.prototype, \"nzUse12Hours\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzSuffixIcon\", void 0);\n  __decorate([InputBoolean()], NzTimePickerComponent.prototype, \"nzHideDisabledOptions\", void 0);\n  __decorate([WithConfig(), InputBoolean()], NzTimePickerComponent.prototype, \"nzAllowEmpty\", void 0);\n  __decorate([InputBoolean()], NzTimePickerComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean()], NzTimePickerComponent.prototype, \"nzAutoFocus\", void 0);\n  __decorate([WithConfig()], NzTimePickerComponent.prototype, \"nzBackdrop\", void 0);\n  __decorate([InputBoolean()], NzTimePickerComponent.prototype, \"nzBorderless\", void 0);\n  __decorate([InputBoolean()], NzTimePickerComponent.prototype, \"nzInputReadOnly\", void 0);\n  return NzTimePickerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTimePickerModule = /*#__PURE__*/(() => {\n  class NzTimePickerModule {\n    static #_ = this.ɵfac = function NzTimePickerModule_Factory(t) {\n      return new (t || NzTimePickerModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzTimePickerModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [BidiModule, CommonModule, FormsModule, NzI18nModule, OverlayModule, NzIconModule, NzOverlayModule, NzOutletModule, NzButtonModule, NzFormPatchModule]\n    });\n  }\n  return NzTimePickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTimePickerComponent, NzTimePickerModule, NzTimePickerPanelComponent };\n//# sourceMappingURL=ng-zorro-antd-time-picker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}