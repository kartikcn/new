{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BuildingFilterInputDTO } from '../background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport { FloorFilterInputDTO } from '../background-loc/model/DTO/FloorFilterInputDTO.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../background-loc/services/bl.service\";\nimport * as i5 from \"../ppm-schedule/services/plan-schedule-services\";\nimport * as i6 from \"../Helpdesk/work-request/service/add-work-request.services\";\nimport * as i7 from \"ngx-spinner\";\nimport * as i8 from \"@ng-select/ng-select\";\nimport * as i9 from \"primeng/api\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/dialog\";\nimport * as i12 from \"primeng/panel\";\nimport * as i13 from \"primeng/checkbox\";\nimport * as i14 from \"primeng/selectbutton\";\nimport * as i15 from \"./widgets/pm-planner-req-details-table/pm-planner-req-details-table.component\";\nimport * as i16 from \"../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nfunction PmPlannerComponent_div_19_div_27_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 44)(2, \"span\", 45);\n    i0.ɵɵlistener(\"click\", function PmPlannerComponent_div_19_div_27_div_5_div_1_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const key_r8 = i0.ɵɵnextContext().$implicit;\n      const i_r6 = i0.ɵɵnextContext().index;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClickRowCard(key_r8, null, ctx_r12.titleStringList[i_r6]));\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const key_r8 = i0.ɵɵnextContext().$implicit;\n    const plan_r5 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Total Requests: \", ctx_r9.getProperty(key_r8, plan_r5).count, \"\");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction PmPlannerComponent_div_19_div_27_div_5_ng_template_2_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵlistener(\"click\", function PmPlannerComponent_div_19_div_27_div_5_ng_template_2_div_0_div_2_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const subItem_r20 = restoredCtx.$implicit;\n      const key_r8 = i0.ɵɵnextContext(3).$implicit;\n      const i_r6 = i0.ɵɵnextContext().index;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onClickRowCard(key_r8, subItem_r20, ctx_r21.titleStringList[i_r6]));\n    });\n    i0.ɵɵelementStart(1, \"span\", 50);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 50);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const subItem_r20 = ctx.$implicit;\n    const key_r8 = i0.ɵɵnextContext(3).$implicit;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, subItem_r20.availableCount > subItem_r20.count ? \"#99ff99\" : subItem_r20.count > subItem_r20.availableCount ? \"#ff9999\" : \"\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", subItem_r20.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", subItem_r20.count, \" \", key_r8 === \"part\" ? subItem_r20.units : \"hours\", \"\");\n  }\n}\nfunction PmPlannerComponent_div_19_div_27_div_5_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-panel\", 47);\n    i0.ɵɵtemplate(2, PmPlannerComponent_div_19_div_27_div_5_ng_template_2_div_0_div_2_Template, 5, 6, \"div\", 48);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const key_r8 = i0.ɵɵnextContext(2).$implicit;\n    const plan_r5 = i0.ɵɵnextContext().$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"header\", ctx_r18.getDisplayKey(key_r8))(\"toggleable\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r18.getProperty(key_r8, plan_r5));\n  }\n}\nfunction PmPlannerComponent_div_19_div_27_div_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, PmPlannerComponent_div_19_div_27_div_5_ng_template_2_div_0_Template, 3, 3, \"div\", 46);\n  }\n  if (rf & 2) {\n    const key_r8 = i0.ɵɵnextContext().$implicit;\n    const plan_r5 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.getProperty(key_r8, plan_r5).length > 0);\n  }\n}\nfunction PmPlannerComponent_div_19_div_27_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, PmPlannerComponent_div_19_div_27_div_5_div_1_Template, 4, 1, \"div\", 42);\n    i0.ɵɵtemplate(2, PmPlannerComponent_div_19_div_27_div_5_ng_template_2_Template, 1, 1, \"ng-template\", null, 43, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const key_r8 = ctx.$implicit;\n    const _r10 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", key_r8 == \"request\")(\"ngIfElse\", _r10);\n  }\n}\nfunction PmPlannerComponent_div_19_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 37)(1, \"div\", 38)(2, \"p\", 39);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 40);\n    i0.ɵɵtemplate(5, PmPlannerComponent_div_19_div_27_div_5_Template, 4, 2, \"div\", 41);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.titleStringList[i_r6]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.keyPmPlannerList);\n  }\n}\nfunction PmPlannerComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17)(2, \"div\", 18)(3, \"div\", 19)(4, \"p-selectButton\", 20);\n    i0.ɵɵlistener(\"ngModelChange\", function PmPlannerComponent_div_19_Template_p_selectButton_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.viewByValue = $event);\n    })(\"onChange\", function PmPlannerComponent_div_19_Template_p_selectButton_onChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r32.onViewByChange($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 21)(6, \"div\", 22)(7, \"div\", 23)(8, \"p-checkbox\", 24);\n    i0.ɵɵlistener(\"ngModelChange\", function PmPlannerComponent_div_19_Template_p_checkbox_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.selectedDisplayParameters = $event);\n    })(\"onChange\", function PmPlannerComponent_div_19_Template_p_checkbox_onChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r34.checkboxSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"label\", 25);\n    i0.ɵɵtext(10, \"Trade\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 23)(12, \"p-checkbox\", 26);\n    i0.ɵɵlistener(\"ngModelChange\", function PmPlannerComponent_div_19_Template_p_checkbox_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35.selectedDisplayParameters = $event);\n    })(\"onChange\", function PmPlannerComponent_div_19_Template_p_checkbox_onChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.checkboxSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"label\", 27);\n    i0.ɵɵtext(14, \"Tool\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 23)(16, \"p-checkbox\", 28);\n    i0.ɵɵlistener(\"ngModelChange\", function PmPlannerComponent_div_19_Template_p_checkbox_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.selectedDisplayParameters = $event);\n    })(\"onChange\", function PmPlannerComponent_div_19_Template_p_checkbox_onChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r38.checkboxSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"label\", 29);\n    i0.ɵɵtext(18, \"Part\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\")(20, \"p-checkbox\", 30);\n    i0.ɵɵlistener(\"ngModelChange\", function PmPlannerComponent_div_19_Template_p_checkbox_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r39.selectedDisplayParameters = $event);\n    })(\"onChange\", function PmPlannerComponent_div_19_Template_p_checkbox_onChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r40 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r40.checkboxSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"label\", 31);\n    i0.ɵɵtext(22, \"Technician\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(23, \"div\", 32)(24, \"div\")(25, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function PmPlannerComponent_div_19_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r41.onPrevious());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"div\", 34);\n    i0.ɵɵtemplate(27, PmPlannerComponent_div_19_div_27_Template, 6, 2, \"div\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\")(29, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function PmPlannerComponent_div_19_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r42.onNext());\n    });\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"options\", ctx_r0.viewByData)(\"ngModel\", ctx_r0.viewByValue)(\"multiple\", false);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedDisplayParameters);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedDisplayParameters);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedDisplayParameters);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedDisplayParameters);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.pmplannerData);\n  }\n}\nfunction PmPlannerComponent_ng_template_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-pm-planner-req-details-table\", 51);\n    i0.ɵɵlistener(\"reloadPmPlanner\", function PmPlannerComponent_ng_template_21_Template_app_pm_planner_req_details_table_reloadPmPlanner_0_listener($event) {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.reloadComponent($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r1.popUpTableData)(\"rowCardDetails\", ctx_r1.selectedRowCard);\n  }\n}\nfunction PmPlannerComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 52);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r2.myRequestsData);\n  }\n}\nfunction PmPlannerComponent_ngx_spinner_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 53)(1, \"p\", 54);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nexport let PmPlannerComponent = /*#__PURE__*/(() => {\n  class PmPlannerComponent {\n    constructor(formBuilder, authSrv, datePipe, blServ, planscheduleSrv, wrServ, spinner, cdr) {\n      this.formBuilder = formBuilder;\n      this.authSrv = authSrv;\n      this.datePipe = datePipe;\n      this.blServ = blServ;\n      this.planscheduleSrv = planscheduleSrv;\n      this.wrServ = wrServ;\n      this.spinner = spinner;\n      this.cdr = cdr;\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.showCardGrid = false;\n      this.viewByData = [{\n        \"id\": 0,\n        \"label\": 'Daily',\n        \"value\": \"daily\"\n      }, {\n        \"id\": 1,\n        \"label\": 'Weekly',\n        \"value\": \"weekly\"\n      }, {\n        \"id\": 2,\n        \"label\": 'Monthly',\n        \"value\": \"monthly\"\n      }];\n      this.firstListTitle = \"firstList\";\n      this.secondListTitle = \"secondList\";\n      this.thirdListTitle = \"thirdList\";\n      this.fourthListTitle = \"fourthList\";\n      this.titleStringList = [];\n      this.currentDate = new Date();\n      this.pmplannerData = [];\n      this.keyPmPlannerList = [];\n      this.monthStart = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n      this.monthEnd = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);\n      this.viewByValue = 'daily';\n      this.selectedDisplayParameters = [];\n      this.selectedRowCardTableName = '';\n      this.showRequestPopUpGrid = false;\n      this.showOtherPopUpGrid = false;\n      this.popUpTableData = [];\n      this.myRequestsData = [];\n      this.showSpinner = false;\n      this.selectedDateTitle = '';\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.selectedBl = {};\n      this.selectedFl = {};\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.filterPanel = this.formBuilder.group({\n        blId: [null],\n        flId: [null]\n      });\n    }\n    ngOnInit() {\n      this.currentDate.setHours(0, 0, 0, 0);\n      this.filterPanel.patchValue({\n        dateFrom: this.monthStart,\n        dateTo: this.monthEnd\n      });\n    }\n    onSelectBlCode($event) {\n      this.filterPanel.patchValue({\n        flId: null\n      });\n      if ($event.blId != null) {\n        this.selectedBl = $event;\n        this.selectedFl = {};\n      } else {\n        this.selectedBl = {};\n        this.selectedFl = {};\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.flId != null) {\n        this.selectedFl = event;\n        const blData = {\n          blId: event.blId,\n          blNameString: event.blNameString\n        };\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {}\n    }\n    getProperty(key, data) {\n      return data[key];\n    }\n    onViewByChange(event) {\n      this.showCardGrid = false;\n      this.onSearch();\n    }\n    onSearch() {\n      this.pmplannerData = [];\n      this.showCardGrid = true;\n      let viewByValue = this.viewByValue;\n      this.keyPmPlannerList = ['request', 'trade', 'tool', 'part', 'technician'];\n      this.selectedDisplayParameters = ['trade', 'tool', 'part', 'technician'];\n      this.showSpinner = true;\n      this.spinner.show();\n      let dateStart = '';\n      let dateEnd = '';\n      if (viewByValue == 'daily') {\n        dateStart = this.datePipe.transform(this.currentDate, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(this.calculateNextDate(this.currentDate, 3), \"yyyy-MM-dd\");\n      } else if (viewByValue == 'weekly') {\n        let datestartvalue = this.getWeekFirstAndLastDateforDate(this.currentDate).firstDate;\n        let dateendvalue = this.calculateNextDate(datestartvalue, 27);\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      } else if (viewByValue == 'monthly') {\n        let datestartvalue = this.getMonthFirstAndLastDateforDate(this.currentDate).firstDate;\n        let dateendvalue = this.getMonthFirstAndLastDateforDate(this.calculateNextMonth(this.currentDate, 3)).lastDate;\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      }\n      this.pmplannerFilter = {\n        blId: this.filterPanel.controls.blId.value,\n        flId: this.filterPanel.controls.flId.value,\n        rmId: null,\n        eqId: null,\n        dateRequestedFrom: dateStart,\n        dateRequestedTo: dateEnd,\n        viewByValue: viewByValue\n      };\n      this.planscheduleSrv.getPmPlannerData(this.pmplannerFilter).subscribe(res => {\n        this.pmplannerData = res;\n        if (viewByValue == 'daily') {\n          this.firstListTitle = this.datePipe.transform(this.currentDate, \"dd MMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextDate(this.currentDate, 1), \"dd MMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextDate(this.currentDate, 2), \"dd MMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextDate(this.currentDate, 3), \"dd MMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'weekly') {\n          let secondTitleDate = this.calculateNextDate(this.currentDate, 7);\n          let thirdTitleDate = this.calculateNextDate(this.currentDate, 14);\n          let fourthTitleDate = this.calculateNextDate(this.currentDate, 21);\n          this.firstListTitle = `${this.getWeekFirstAndLastDateforDate(this.currentDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(this.currentDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(this.currentDate).firstDate, \"dd MMM yyyy\")})`;\n          this.secondListTitle = `${this.getWeekFirstAndLastDateforDate(secondTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(secondTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(secondTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.thirdListTitle = `${this.getWeekFirstAndLastDateforDate(thirdTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(thirdTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(thirdTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.fourthListTitle = `${this.getWeekFirstAndLastDateforDate(fourthTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(fourthTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(fourthTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'monthly') {\n          this.firstListTitle = this.datePipe.transform(this.currentDate, \"MMMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextMonth(this.currentDate, 1), \"MMMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextMonth(this.currentDate, 2), \"MMMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextMonth(this.currentDate, 3), \"MMMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        }\n        this.spinner.hide();\n        this.showSpinner = false;\n      });\n    }\n    onNext() {\n      this.pmplannerData = [];\n      let viewByValue = this.viewByValue;\n      let dateStart = '';\n      let dateEnd = '';\n      this.showSpinner = true;\n      this.spinner.show();\n      let previousFirstDate;\n      if (viewByValue == 'daily') {\n        previousFirstDate = this.getDateFromDateString(this.firstListTitle);\n        dateStart = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 4), \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 7), \"yyyy-MM-dd\");\n      } else if (viewByValue == 'weekly') {\n        previousFirstDate = this.getDateFromWeekString(this.firstListTitle);\n        let datestartvalue = this.calculateNextDate(previousFirstDate, 28);\n        let dateendvalue = this.calculateNextDate(datestartvalue, 27);\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      } else if (viewByValue == 'monthly') {\n        previousFirstDate = this.getDateFromMonthString(this.firstListTitle);\n        let datestartvalue = this.getMonthFirstAndLastDateforDate(this.calculateNextMonth(previousFirstDate, 4)).firstDate;\n        let dateendvalue = this.getMonthFirstAndLastDateforDate(this.calculateNextMonth(previousFirstDate, 7)).lastDate;\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      }\n      this.pmplannerFilter = {\n        blId: this.filterPanel.controls.blId.value,\n        flId: this.filterPanel.controls.flId.value,\n        rmId: null,\n        eqId: null,\n        dateRequestedFrom: dateStart,\n        dateRequestedTo: dateEnd,\n        viewByValue: viewByValue\n      };\n      this.planscheduleSrv.getPmPlannerData(this.pmplannerFilter).subscribe(res => {\n        this.pmplannerData = res;\n        if (viewByValue == 'daily') {\n          this.firstListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 4), \"dd MMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 5), \"dd MMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 6), \"dd MMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, 7), \"dd MMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'weekly') {\n          let firstTitleDate = this.calculateNextDate(previousFirstDate, 28);\n          let secondTitleDate = this.calculateNextDate(previousFirstDate, 35);\n          let thirdTitleDate = this.calculateNextDate(previousFirstDate, 42);\n          let fourthTitleDate = this.calculateNextDate(previousFirstDate, 49);\n          this.firstListTitle = `${this.getWeekFirstAndLastDateforDate(firstTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(firstTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(firstTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.secondListTitle = `${this.getWeekFirstAndLastDateforDate(secondTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(secondTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(secondTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.thirdListTitle = `${this.getWeekFirstAndLastDateforDate(thirdTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(thirdTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(thirdTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.fourthListTitle = `${this.getWeekFirstAndLastDateforDate(fourthTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(fourthTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(fourthTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'monthly') {\n          this.firstListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, 4), \"MMMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, 5), \"MMMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, 6), \"MMMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, 7), \"MMMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        }\n        this.spinner.hide();\n        this.showSpinner = false;\n      });\n    }\n    onPrevious() {\n      this.pmplannerData = [];\n      let viewByValue = this.viewByValue;\n      let dateStart = '';\n      let dateEnd = '';\n      this.showSpinner = true;\n      this.spinner.show();\n      let previousFirstDate;\n      if (viewByValue == 'daily') {\n        previousFirstDate = this.getDateFromDateString(this.firstListTitle);\n        dateStart = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -4), \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -1), \"yyyy-MM-dd\");\n      } else if (viewByValue == 'weekly') {\n        previousFirstDate = this.getDateFromWeekString(this.firstListTitle);\n        let datestartvalue = this.calculateNextDate(previousFirstDate, -28);\n        let dateendvalue = this.calculateNextDate(previousFirstDate, -1);\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      } else if (viewByValue == 'monthly') {\n        previousFirstDate = this.getDateFromMonthString(this.firstListTitle);\n        let datestartvalue = this.getMonthFirstAndLastDateforDate(this.calculateNextMonth(previousFirstDate, -4)).firstDate;\n        let dateendvalue = this.getMonthFirstAndLastDateforDate(this.calculateNextMonth(previousFirstDate, -1)).lastDate;\n        dateStart = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      }\n      this.pmplannerFilter = {\n        blId: this.filterPanel.controls.blId.value,\n        flId: this.filterPanel.controls.flId.value,\n        rmId: null,\n        eqId: null,\n        dateRequestedFrom: dateStart,\n        dateRequestedTo: dateEnd,\n        viewByValue: viewByValue\n      };\n      this.planscheduleSrv.getPmPlannerData(this.pmplannerFilter).subscribe(res => {\n        this.pmplannerData = res;\n        if (viewByValue == 'daily') {\n          this.firstListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -4), \"dd MMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -3), \"dd MMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -2), \"dd MMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextDate(previousFirstDate, -1), \"dd MMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'weekly') {\n          let firstTitleDate = this.calculateNextDate(previousFirstDate, -28);\n          let secondTitleDate = this.calculateNextDate(previousFirstDate, -21);\n          let thirdTitleDate = this.calculateNextDate(previousFirstDate, -14);\n          let fourthTitleDate = this.calculateNextDate(previousFirstDate, -7);\n          this.firstListTitle = `${this.getWeekFirstAndLastDateforDate(firstTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(firstTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(firstTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.secondListTitle = `${this.getWeekFirstAndLastDateforDate(secondTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(secondTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(secondTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.thirdListTitle = `${this.getWeekFirstAndLastDateforDate(thirdTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(thirdTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(thirdTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.fourthListTitle = `${this.getWeekFirstAndLastDateforDate(fourthTitleDate).lastDate.getFullYear()}: Week - ${this.getWeekNumber(fourthTitleDate).toString()} (${this.datePipe.transform(this.getWeekFirstAndLastDateforDate(fourthTitleDate).firstDate, \"dd MMM yyyy\")})`;\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        } else if (viewByValue == 'monthly') {\n          this.firstListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, -4), \"MMMM yyyy\");\n          this.secondListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, -3), \"MMMM yyyy\");\n          this.thirdListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, -2), \"MMMM yyyy\");\n          this.fourthListTitle = this.datePipe.transform(this.calculateNextMonth(previousFirstDate, -1), \"MMMM yyyy\");\n          this.titleStringList = [this.firstListTitle, this.secondListTitle, this.thirdListTitle, this.fourthListTitle];\n        }\n        this.spinner.hide();\n        this.showSpinner = false;\n      });\n    }\n    loadForPmPlannerDataCurrentSelection() {\n      this.showCardGrid = false;\n      this.cdr.detectChanges();\n      this.showSpinner = true;\n      this.spinner.show();\n      this.planscheduleSrv.getPmPlannerData(this.pmplannerFilter).subscribe(res => {\n        this.pmplannerData = res;\n        this.showCardGrid = true;\n        this.cdr.detectChanges();\n        this.showOtherPopUpGrid = false;\n        this.cdr.detectChanges();\n        this.popUpTableData = [];\n        this.planscheduleSrv.getPmPlannerRequestDetails(this.pmplannerRoomFilter).subscribe(res => {\n          setTimeout(() => {\n            this.popUpTableData = res;\n            this.showOtherPopUpGrid = true;\n            this.cdr.detectChanges();\n            this.spinner.hide();\n            this.showSpinner = false;\n          }, 1000);\n        });\n      });\n    }\n    onClear() {\n      this.showCardGrid = false;\n      this.filterPanel.patchValue({\n        dateFrom: this.monthStart,\n        dateTo: this.monthEnd,\n        blId: null,\n        flId: null\n      });\n      this.titleStringList = [];\n      this.viewByValue = 'daily';\n      this.pmplannerData = [];\n      this.showSpinner = false;\n      this.selectedDisplayParameters = [];\n      this.selectedRowCardTableName = '';\n      this.selectedRowCard = {};\n      this.showRequestPopUpGrid = false;\n      this.showOtherPopUpGrid = false;\n      this.popUpTableData = [];\n      this.myRequestsData = [];\n      this.pmplannerFilter = {};\n      this.pmplannerRoomFilter = {};\n      this.selectedDateTitle = '';\n      this.selectedBl = {};\n      this.selectedFl = {};\n    }\n    checkboxSelected(event) {\n      this.keyPmPlannerList = [];\n      this.keyPmPlannerList.unshift('request');\n      event.checked.forEach(key => {\n        this.keyPmPlannerList.push(key);\n      });\n    }\n    onClickRowCard(key, item, title) {\n      this.showRequestPopUpGrid = false;\n      this.showOtherPopUpGrid = false;\n      this.popUpTableData = [];\n      this.myRequestsData = [];\n      this.selectedRowCardTableName = `${this.getDisplayKey(key)} Details`;\n      this.selectedRowCard = {\n        key: key,\n        rowDetails: item\n      };\n      let dateStart;\n      let dateEnd;\n      this.selectedDateTitle = title;\n      if (this.viewByValue == 'daily') {\n        dateStart = this.getDateFromDateString(title);\n        dateEnd = new Date(dateStart);\n      } else if (this.viewByValue == 'weekly') {\n        let dateResult = this.getWeekFirstAndLastDateforDate(this.getDateFromWeekString(title));\n        dateStart = dateResult.firstDate;\n        dateEnd = dateResult.lastDate;\n      } else if (this.viewByValue == 'monthly') {\n        let dateResult = this.getMonthFirstAndLastDateforDate(this.getDateFromMonthString(title));\n        dateStart = dateResult.firstDate;\n        dateEnd = dateResult.lastDate;\n      } else {\n        dateStart = new Date();\n        dateEnd = new Date();\n      }\n      if (key != 'request') {\n        let tableName = '';\n        if (key == 'trade') {\n          tableName = 'request_trade';\n        } else if (key == 'part') {\n          tableName = 'request_parts';\n        } else if (key == 'tool') {\n          tableName = 'request_tools';\n        } else if (key == 'technician') {\n          tableName = 'request_technician';\n        }\n        this.pmplannerRoomFilter = {\n          blId: this.filterPanel.controls.blId.value,\n          flId: this.filterPanel.controls.flId.value,\n          fromDate: this.datePipe.transform(dateStart, \"yyyy-MM-dd\"),\n          toDate: this.datePipe.transform(dateEnd, \"yyyy-MM-dd\"),\n          tableName: tableName,\n          fieldName: item.id\n        };\n        this.planscheduleSrv.getPmPlannerRequestDetails(this.pmplannerRoomFilter).subscribe(res => {\n          this.popUpTableData = res;\n          this.showOtherPopUpGrid = true;\n        });\n      } else {\n        let filterData = {\n          blId: this.filterPanel.controls.blId.value,\n          flId: this.filterPanel.controls.flId.value,\n          dateRequestedFrom: this.datePipe.transform(dateStart, \"yyyy-MM-dd\"),\n          dateRequestedTo: this.datePipe.transform(dateEnd, \"yyyy-MM-dd\"),\n          showRequestType: \"pmPlanner\"\n        };\n        this.wrServ.getAllWrByFilter(filterData).subscribe(res => {\n          this.myRequestsData = res;\n          this.showRequestPopUpGrid = true;\n        });\n      }\n    }\n    calculateNextDate(currentDate, daysToAdd) {\n      let nextDate = new Date(currentDate);\n      nextDate.setDate(nextDate.getDate() + daysToAdd);\n      return nextDate;\n    }\n    calculateNextMonth(currentDate, monthsToAdd) {\n      let date = new Date(currentDate);\n      date.setMonth(date.getMonth() + monthsToAdd);\n      return date;\n    }\n    getWeekNumber(date) {\n      let currentDate = new Date(date);\n      currentDate.setHours(0, 0, 0, 0);\n      currentDate.setDate(currentDate.getDate() + 4 - (currentDate.getDay() || 7));\n      let yearStart = new Date(currentDate.getFullYear(), 0, 1);\n      let weekNumber = Math.ceil(((currentDate - yearStart) / 86400000 + 1) / 7);\n      return weekNumber;\n    }\n    getWeekFirstAndLastDateforDate(date) {\n      const result = {\n        firstDate: new Date(date),\n        lastDate: new Date(date)\n      };\n      result.firstDate.setDate(date.getDate() - date.getDay() + (date.getDay() == 0 ? -6 : 1));\n      result.firstDate.setHours(0, 0, 0, 0);\n      result.lastDate.setDate(date.getDate() - date.getDay() + (date.getDay() == 0 ? 0 : 7));\n      result.lastDate.setHours(23, 59, 59, 999);\n      return result;\n    }\n    getMonthFirstAndLastDateforDate(date) {\n      const result = {\n        firstDate: new Date(date),\n        lastDate: new Date(date)\n      };\n      result.firstDate.setDate(1);\n      result.firstDate.setHours(0, 0, 0, 0);\n      result.lastDate.setMonth(date.getMonth() + 1, 0);\n      result.lastDate.setHours(23, 59, 59, 999);\n      return result;\n    }\n    getMonthNumber(month) {\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      return months.indexOf(month);\n    }\n    getDateFromDateString(date) {\n      const dateString = date;\n      const dateParts = dateString.split(' ');\n      const year = parseInt(dateParts[2], 10);\n      const month = new Date(Date.parse(dateParts[1] + ' 1, 2023')).getMonth();\n      const day = parseInt(dateParts[0], 10);\n      const dateObject = new Date(year, month, day);\n      dateObject.setHours(0, 0, 0, 0);\n      return dateObject;\n    }\n    getDateFromWeekString(weekString) {\n      const parts = weekString.split(':');\n      const yearString = parts[0].trim();\n      const weekPart = parts[1].trim();\n      const year = parseInt(yearString, 10);\n      const weekMatch = weekPart.match(/\\d+/);\n      const weekNumber = weekMatch ? parseInt(weekMatch[0], 10) : 1;\n      const startOfWeekDay = 1;\n      const date = new Date(year, 0, 1);\n      const daysToMonday = (7 - (date.getDay() - startOfWeekDay)) % 7;\n      date.setDate(date.getDate() + daysToMonday);\n      const daysToAdd = (weekNumber - 1) * 7;\n      date.setDate(date.getDate() + daysToAdd);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n    getDateFromMonthString(monthString) {\n      const dateParts = monthString.split(' ');\n      const month = dateParts[0];\n      const year = parseInt(dateParts[1], 10);\n      const dateObject = new Date(year, this.getMonthNumber(month), 1);\n      dateObject.setHours(0, 0, 0, 0);\n      return dateObject;\n    }\n    getDisplayKey(key) {\n      let displayKey = \"\";\n      if (key == \"request\") {\n        displayKey = \"Request\";\n      } else if (key == \"trade\") {\n        displayKey = \"Trade\";\n      } else if (key == \"tool\") {\n        displayKey = \"Tool\";\n      } else if (key == \"part\") {\n        displayKey = \"Part\";\n      } else if (key == \"technician\") {\n        displayKey = \"Technician\";\n      }\n      return displayKey;\n    }\n    reloadComponent(reload) {\n      if (reload) {\n        this.loadForPmPlannerDataCurrentSelection();\n      }\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blServ.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.updateBlList(this.selectedBl);\n      });\n    }\n    scrollToEndFl() {\n      this.offsetFl = this.limitFl;\n      this.limitFl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitFl;\n      this.filterCriteria.offset = this.offsetFl;\n      this.blServ.getALLFloorByScroll(this.filterCriteria).subscribe(res => {\n        this.enumFL = res;\n        this.updateFlList(this.selectedFl);\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    searchFl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"flName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndFl();\n    }\n    updateBlList(blData) {\n      if (blData.blId) {\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateFlList(flData) {\n      if (flData.flId) {\n        this.enumFL = this.enumFL.filter(t => t.flId !== flData.flId);\n        this.enumFL = this.enumFL.filter(t => t.flId !== null);\n        this.enumFL.unshift(flData);\n      }\n      this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndBl();\n    }\n    onOpenFl() {\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      if (this.selectedBl.blId) {\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: this.selectedBl.blId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndFl();\n    }\n    static #_ = this.ɵfac = function PmPlannerComponent_Factory(t) {\n      return new (t || PmPlannerComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.DatePipe), i0.ɵɵdirectiveInject(i4.BuildingService), i0.ɵɵdirectiveInject(i5.PlanScheduleService), i0.ɵɵdirectiveInject(i6.AddWorkRequestService), i0.ɵɵdirectiveInject(i7.NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PmPlannerComponent,\n      selectors: [[\"app-pm-planner\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 25,\n      vars: 28,\n      consts: [[1, \"card\", \"filter-container\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\", \"open\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"flId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"scrollToEnd\", \"search\", \"open\"], [2, \"width\", \"40%\"], [2, \"margin-top\", \"16px\", \"margin-right\", \"10px\", \"display\", \"flex\", \"justify-content\", \"flex-end\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"click\"], [\"class\", \"card pmplanner-container\", 4, \"ngIf\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"header\", \"visibleChange\"], [\"pTemplate\", \"body\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [1, \"card\", \"pmplanner-container\"], [2, \"margin\", \"0px 5px 0px 5px\"], [2, \"height\", \"50px\", \"display\", \"flex\", \"align-items\", \"center\", \"justify-content\", \"space-between\"], [2, \"margin-left\", \"5px\"], [\"optionLabel\", \"label\", \"optionValue\", \"value\", 3, \"options\", \"ngModel\", \"multiple\", \"ngModelChange\", \"onChange\"], [2, \"margin-right\", \"5px\"], [2, \"display\", \"flex\"], [2, \"margin-right\", \"10px\"], [\"name\", \"group1\", \"value\", \"trade\", \"inputId\", \"trade\", 1, \"select-box\", 3, \"ngModel\", \"ngModelChange\", \"onChange\"], [\"for\", \"trade\", 1, \"select-label\"], [\"name\", \"group1\", \"value\", \"tool\", \"inputId\", \"tool\", 1, \"select-box\", 3, \"ngModel\", \"ngModelChange\", \"onChange\"], [\"for\", \"tool\", 1, \"select-label\"], [\"name\", \"group1\", \"value\", \"part\", \"inputId\", \"part\", 1, \"select-box\", 3, \"ngModel\", \"ngModelChange\", \"onChange\"], [\"for\", \"part\", 1, \"select-label\"], [\"name\", \"group1\", \"value\", \"technician\", \"inputId\", \"technician\", 1, \"select-box\", 3, \"ngModel\", \"ngModelChange\", \"onChange\"], [\"for\", \"technician\", 1, \"select-label\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\", \"justify-content\", \"space-between\", \"width\", \"100%\", \"height\", \"74vh\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-chevron-left\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"width\", \"30px\", 3, \"click\"], [1, \"pm-planner-details-conatiner\"], [\"class\", \"plan-collection-container\", 4, \"ngFor\", \"ngForOf\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-chevron-right\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"width\", \"30px\", 3, \"click\"], [1, \"plan-collection-container\"], [1, \"pmplanner-date-header-container\"], [1, \"card-text\"], [1, \"card\", \"example-container\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\", \"ngIfElse\"], [\"otherItems\", \"\"], [1, \"card\", \"hover-pointer\", \"zoom-on-hover\", \"request-card\"], [1, \"request-content-title\", 3, \"click\"], [4, \"ngIf\"], [3, \"header\", \"toggleable\"], [\"class\", \"card hover-pointer zoom-on-hover internal-card\", 3, \"ngStyle\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"hover-pointer\", \"zoom-on-hover\", \"internal-card\", 3, \"ngStyle\", \"click\"], [1, \"card-content-title\"], [3, \"data\", \"rowCardDetails\", \"reloadPmPlanner\"], [\"isEscalatedData\", \"false\", 3, \"data\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function PmPlannerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"ng-select\", 6);\n          i0.ɵɵlistener(\"change\", function PmPlannerComponent_Template_ng_select_change_8_listener($event) {\n            return ctx.onSelectBlCode($event);\n          })(\"scrollToEnd\", function PmPlannerComponent_Template_ng_select_scrollToEnd_8_listener() {\n            return ctx.scrollToEndBl();\n          })(\"search\", function PmPlannerComponent_Template_ng_select_search_8_listener($event) {\n            return ctx.searchBl($event);\n          })(\"open\", function PmPlannerComponent_Template_ng_select_open_8_listener() {\n            return ctx.onOpenBl();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"td\", 3)(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"ng-select\", 7);\n          i0.ɵɵlistener(\"change\", function PmPlannerComponent_Template_ng_select_change_13_listener($event) {\n            return ctx.onSelectFlCode($event);\n          })(\"scrollToEnd\", function PmPlannerComponent_Template_ng_select_scrollToEnd_13_listener() {\n            return ctx.scrollToEndFl();\n          })(\"search\", function PmPlannerComponent_Template_ng_select_search_13_listener($event) {\n            return ctx.searchFl($event);\n          })(\"open\", function PmPlannerComponent_Template_ng_select_open_13_listener() {\n            return ctx.onOpenFl();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(14, \"td\", 8);\n          i0.ɵɵelementStart(15, \"td\", 3)(16, \"div\", 9)(17, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function PmPlannerComponent_Template_button_click_17_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function PmPlannerComponent_Template_button_click_18_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵtemplate(19, PmPlannerComponent_div_19_Template, 30, 8, \"div\", 12);\n          i0.ɵɵelementStart(20, \"p-dialog\", 13);\n          i0.ɵɵlistener(\"visibleChange\", function PmPlannerComponent_Template_p_dialog_visibleChange_20_listener($event) {\n            return ctx.showOtherPopUpGrid = $event;\n          });\n          i0.ɵɵtemplate(21, PmPlannerComponent_ng_template_21_Template, 1, 2, \"ng-template\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"p-dialog\", 13);\n          i0.ɵɵlistener(\"visibleChange\", function PmPlannerComponent_Template_p_dialog_visibleChange_22_listener($event) {\n            return ctx.showRequestPopUpGrid = $event;\n          });\n          i0.ɵɵtemplate(23, PmPlannerComponent_ng_template_23_Template, 1, 1, \"ng-template\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(24, PmPlannerComponent_ngx_spinner_24_Template, 3, 1, \"ngx-spinner\", 15);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.showCardGrid);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(26, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.showOtherPopUpGrid)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false)(\"header\", ctx.selectedRowCardTableName);\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(27, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.showRequestPopUpGrid)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false)(\"header\", ctx.selectedRowCardTableName);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i3.NgStyle, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i8.NgSelectComponent, i9.PrimeTemplate, i10.ButtonDirective, i11.Dialog, i12.Panel, i13.Checkbox, i14.SelectButton, i1.NgModel, i15.PmPlannerReqDetailsTableComponent, i16.AddTableComponent, i7.NgxSpinnerComponent],\n      styles: [\".example-container[_ngcontent-%COMP%]{height:-moz-fit-content;height:fit-content;max-height:63vh;overflow-y:auto;margin-top:5px;padding-left:5px;padding-right:5px}.card-header[_ngcontent-%COMP%]{font-weight:500;padding:5px 5px 5px 0;font-size:14px}.card-content-title[_ngcontent-%COMP%]{font-weight:400;font-size:11px}.table-header[_ngcontent-%COMP%]{font-weight:500;font-size:12px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:lightgray;border-radius:2px}[_ngcontent-%COMP%]::-webkit-scrollbar{width:2px;height:0px}.select-box[_ngcontent-%COMP%]{margin-right:5px}.select-label[_ngcontent-%COMP%]{font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif;font-weight:400}.pmplanner-date-header-container[_ngcontent-%COMP%]{height:30px;display:flex;justify-content:center;align-items:center;background-color:#c0dbf0}  .dark-panel.p-dialog .p-dialog-header{border-radius:5px 5px 0 0/5px 5px 0px 0px;padding:10px 10px 10px 20px}  .p-dialog-content{overflow:visible}  .p-dialog .p-dialog-content{padding:10px}.hover-pointer[_ngcontent-%COMP%]{cursor:pointer;transition:background-color .2s,color .2s,border-color .2s,box-shadow .2s}.hover-pointer[_ngcontent-%COMP%]:hover{background-color:#c0dbf0;transform:scale(1)}.zoom-on-hover[_ngcontent-%COMP%]{transition:transform .3s}.zoom-on-hover[_ngcontent-%COMP%]:hover{padding-left:4px;border-radius:2px;transform:scale(1.05);cursor:pointer}.internal-card[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between;padding-left:2px;padding-right:2px;margin-bottom:4px;height:25px}  .p-panel .p-panel-header{border-bottom:none}  .p-panel .p-panel-content{padding:0 10px}.request-content-title[_ngcontent-%COMP%]{font-weight:400;font-size:12px;padding-left:12px}.request-card[_ngcontent-%COMP%]{display:flex;justify-content:center;height:30px;margin-top:5px}.filter-container[_ngcontent-%COMP%]{height:11vh}.pmplanner-container[_ngcontent-%COMP%]{height:79vh}.plan-collection-container[_ngcontent-%COMP%]{width:18.5vw;height:68vh;margin:0 5px 5px;overflow-y:auto}.pm-planner-details-conatiner[_ngcontent-%COMP%]{display:flex;height:100%}@media screen and (min-width: 600px) and (max-width: 959px){.filter-container[_ngcontent-%COMP%]{height:8vh}.pm-planner-details-conatiner[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto auto;grid-gap:5px}.plan-collection-container[_ngcontent-%COMP%]{width:28vw;height:35vh;margin:0 5px 5px;overflow-y:auto}}@media screen and (min-width: 960px) and (max-width: 1439px){.plan-collection-container[_ngcontent-%COMP%]{width:18vw;height:68vh;margin:0 5px 5px;overflow-y:auto}[_nghost-%COMP%]     .p-dialog-mask{top:-5vh}}\"]\n    });\n  }\n  return PmPlannerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}