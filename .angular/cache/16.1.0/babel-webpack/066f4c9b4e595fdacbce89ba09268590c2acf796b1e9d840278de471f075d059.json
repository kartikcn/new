{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as FileSaver from 'file-saver';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/ui/Helpdesk/trades/services/trades.services\";\nimport * as i5 from \"src/app/ui/Helpdesk/parts/services/parts.service\";\nimport * as i6 from \"src/app/ui/Helpdesk/tools/services/tools.services\";\nimport * as i7 from \"src/app/ui/Helpdesk/craftsperson/services/craftsperson.service\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"src/app/ui/Helpdesk/work-request-details/widgets/request-trades/providers/request-trade.provider\";\nimport * as i10 from \"src/app/ui/Helpdesk/work-request-details/widgets/request-tools/provider/request-tool\";\nimport * as i11 from \"src/app/ui/Helpdesk/work-request-details/widgets/request-parts/providers/request-parts.provider\";\nimport * as i12 from \"src/app/ui/Helpdesk/work-request-details/widgets/request-technician/provider/request-technician\";\nimport * as i13 from \"primeng/api\";\nimport * as i14 from \"src/app/ui/ppm-schedule/services/plan-schedule-services\";\nimport * as i15 from \"src/app/services/breakpoint.service\";\nimport * as i16 from \"@angular/material/legacy-card\";\nimport * as i17 from \"primeng/table\";\nimport * as i18 from \"primeng/button\";\nimport * as i19 from \"primeng/dialog\";\nimport * as i20 from \"primeng/dropdown\";\nimport * as i21 from \"primeng/toast\";\nimport * as i22 from \"primeng/confirmdialog\";\nimport * as i23 from \"@angular/material/tooltip\";\nimport * as i24 from \"../../../common-components/trade-details/modal/trade-details.component\";\nimport * as i25 from \"../../../common-components/part-details/modal/part-details.component\";\nimport * as i26 from \"../../../Helpdesk/tools/widgets/add-tools/add-tools.component\";\nimport * as i27 from \"../../../Helpdesk/craftsperson/widgets/add-craftsperson-form/add-craftsperson-form.component\";\nfunction PmPlannerReqDetailsTableComponent_ng_template_6_ng_template_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 34);\n    i0.ɵɵlistener(\"onChange\", function PmPlannerReqDetailsTableComponent_ng_template_6_ng_template_25_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const filter_r9 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r9($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r8)(\"options\", ctx_r7.enumStatusData)(\"showClear\", true);\n  }\n}\nfunction PmPlannerReqDetailsTableComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 14);\n    i0.ɵɵelementStart(2, \"th\", 15)(3, \"div\", 16)(4, \"div\", 17)(5, \"p\", 18);\n    i0.ɵɵtext(6, \"Request Id\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 19);\n    i0.ɵɵelement(8, \"p-sortIcon\", 20)(9, \"p-columnFilter\", 21);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 22)(11, \"div\", 16)(12, \"div\", 17)(13, \"p\", 18);\n    i0.ɵɵtext(14, \"Date To Perform\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 19);\n    i0.ɵɵelement(16, \"p-sortIcon\", 23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"th\", 24)(18, \"div\", 16)(19, \"div\", 17)(20, \"p\", 18);\n    i0.ɵɵtext(21, \"Status\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(22, \"div\", 19);\n    i0.ɵɵelement(23, \"p-sortIcon\", 25);\n    i0.ɵɵelementStart(24, \"p-columnFilter\", 26);\n    i0.ɵɵtemplate(25, PmPlannerReqDetailsTableComponent_ng_template_6_ng_template_25_Template, 1, 3, \"ng-template\", 27);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(26, \"th\", 28)(27, \"div\", 16)(28, \"div\", 17)(29, \"p\", 18);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 19);\n    i0.ɵɵelement(32, \"p-sortIcon\", 29)(33, \"p-columnFilter\", 30);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(34, \"th\", 31)(35, \"div\", 16)(36, \"div\", 17)(37, \"p\", 18);\n    i0.ɵɵtext(38);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 19);\n    i0.ɵɵelement(40, \"p-sortIcon\", 32)(41, \"p-columnFilter\", 33);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(30);\n    i0.ɵɵtextInterpolate(ctx_r0.displayKey);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(ctx_r0.rowCardDetails.key == \"part\" ? \"Required Quantity\" : \"Required Hours\");\n  }\n}\nfunction PmPlannerReqDetailsTableComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 35)(1, \"td\", 14)(2, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function PmPlannerReqDetailsTableComponent_ng_template_7_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const rm_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onEditName(rm_r12));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function PmPlannerReqDetailsTableComponent_ng_template_7_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const rm_r12 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onClickName(rm_r12));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\")(5, \"div\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\")(13, \"div\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"td\", 38);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rm_r12 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", rm_r12);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", rm_r12.requestId, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 6, rm_r12.dateToPerform, \"dd MMM yyyy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.getEnumByid(rm_r12.status));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", rm_r12.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rm_r12.count);\n  }\n}\nfunction PmPlannerReqDetailsTableComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 7);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    width: a0\n  };\n};\nfunction PmPlannerReqDetailsTableComponent_p_dialog_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 39);\n    i0.ɵɵlistener(\"visibleChange\", function PmPlannerReqDetailsTableComponent_p_dialog_9_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.showTradeDetails = $event);\n    });\n    i0.ɵɵelement(1, \"app-trade-details\", 40);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(6, _c0, ctx_r3.tradeDetailsDialogWidth));\n    i0.ɵɵproperty(\"visible\", ctx_r3.showTradeDetails)(\"modal\", true)(\"draggable\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedTrade\", ctx_r3.selectedTrade);\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"35vw\"\n  };\n};\nfunction PmPlannerReqDetailsTableComponent_p_dialog_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 41);\n    i0.ɵɵlistener(\"visibleChange\", function PmPlannerReqDetailsTableComponent_p_dialog_10_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.showPartDetails = $event);\n    });\n    i0.ɵɵelement(1, \"app-part-details\", 42);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c1));\n    i0.ɵɵproperty(\"visible\", ctx_r4.showPartDetails)(\"modal\", true)(\"draggable\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"selectedPart\", ctx_r4.selectedPart);\n  }\n}\nfunction PmPlannerReqDetailsTableComponent_p_dialog_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 43);\n    i0.ɵɵlistener(\"visibleChange\", function PmPlannerReqDetailsTableComponent_p_dialog_11_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.showToolDetails = $event);\n    });\n    i0.ɵɵelementStart(1, \"form\", 44)(2, \"mat-card\")(3, \"mat-card-content\", 45);\n    i0.ɵɵelement(4, \"app-add-tools\", 46);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(6, _c0, ctx_r5.toolDetailsDialogWidth));\n    i0.ɵɵproperty(\"visible\", ctx_r5.showToolDetails)(\"modal\", true)(\"draggable\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r5.frmToolsDetail);\n  }\n}\nconst _c2 = function () {\n  return {\n    width: \"40vw\"\n  };\n};\nfunction PmPlannerReqDetailsTableComponent_p_dialog_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 47);\n    i0.ɵɵlistener(\"visibleChange\", function PmPlannerReqDetailsTableComponent_p_dialog_12_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.showTechnicianDetails = $event);\n    });\n    i0.ɵɵelementStart(1, \"form\", 44)(2, \"mat-card\")(3, \"mat-card-content\", 45);\n    i0.ɵɵelement(4, \"app-add-craftsperson-form\", 48);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c2));\n    i0.ɵɵproperty(\"visible\", ctx_r6.showTechnicianDetails)(\"modal\", true)(\"draggable\", false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r6.frmCfDetail);\n  }\n}\nconst _c3 = function () {\n  return [5, 10, 25];\n};\nexport let PmPlannerReqDetailsTableComponent = /*#__PURE__*/(() => {\n  class PmPlannerReqDetailsTableComponent {\n    constructor(cdr, enumsrv, datePipe, router, tradeService, partsService, toolsService, craftspersonService, formBuilder, requestTradeDialogueProvider, requestToolsDialogueProvider, requestPartsDialogueProvider, requestTechnicianDialogueProvider, messageService, planscheduleSrv, bps) {\n      this.cdr = cdr;\n      this.enumsrv = enumsrv;\n      this.datePipe = datePipe;\n      this.router = router;\n      this.tradeService = tradeService;\n      this.partsService = partsService;\n      this.toolsService = toolsService;\n      this.craftspersonService = craftspersonService;\n      this.formBuilder = formBuilder;\n      this.requestTradeDialogueProvider = requestTradeDialogueProvider;\n      this.requestToolsDialogueProvider = requestToolsDialogueProvider;\n      this.requestPartsDialogueProvider = requestPartsDialogueProvider;\n      this.requestTechnicianDialogueProvider = requestTechnicianDialogueProvider;\n      this.messageService = messageService;\n      this.planscheduleSrv = planscheduleSrv;\n      this.bps = bps;\n      this.reloadPmPlanner = new EventEmitter();\n      this.displayKey = '';\n      this.rq_data = [];\n      this.rq_array = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.enumStatusData = [];\n      this.displayRequestList = false;\n      this.showTradeDetails = false;\n      this.tradeList = [];\n      this.showPartDetails = false;\n      this.partsList = [];\n      this.showToolDetails = false;\n      this.toolsList = [];\n      this.showTechnicianDetails = false;\n      this.technicianList = [];\n      this.tradeDetailsDialogWidth = '40vw';\n      this.toolDetailsDialogWidth = '35vw';\n      this.useTabletProtrait = false;\n      this.frmToolsDetail = this.formBuilder.group({\n        toolsFormPanel: []\n      });\n      this.frmCfDetail = this.formBuilder.group({\n        cfFormPanel: []\n      });\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      this.loadAllEnums();\n      this.rq_data = this.data;\n      this.cdr.detectChanges();\n      this.loadTrades();\n      this.loadParts();\n      this.loadTools();\n      this.loadAllTechnician();\n      this.getDisplayKey();\n    }\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n      this.updateTradeDetailsDialog();\n    }\n    loadAllEnums() {\n      this.enumsrv.getEnums().subscribe(res => {\n        if (res) {\n          this.enumStatusData = res.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        }\n      });\n    }\n    getEnumByid(id) {\n      return this.enumStatusData.find(t => t.enumKey === id)?.enumValue;\n    }\n    loadTrades() {\n      this.tradeService.getAllTrades().subscribe(res => {\n        this.tradeList = res;\n      });\n    }\n    loadParts() {\n      this.partsService.getAllParts().subscribe(res => {\n        this.partsList = res;\n      });\n    }\n    loadTools() {\n      this.toolsService.getAllTools().subscribe(res => {\n        this.toolsList = res;\n      });\n    }\n    loadAllTechnician() {\n      this.craftspersonService.getAllCraftsperson().subscribe(res => {\n        this.technicianList = res;\n      });\n    }\n    getDisplayKey() {\n      if (this.rowCardDetails.key == \"request\") {\n        this.displayKey = \"Request\";\n      } else if (this.rowCardDetails.key == \"trade\") {\n        this.displayKey = \"Trade\";\n      } else if (this.rowCardDetails.key == \"tool\") {\n        this.displayKey = \"Tool\";\n      } else if (this.rowCardDetails.key == \"part\") {\n        this.displayKey = \"Part\";\n      } else if (this.rowCardDetails.key == \"technician\") {\n        this.displayKey = \"Technician\";\n      }\n    }\n    exportExcel() {\n      this.getDestructuredData(this.rq_data);\n      var excelHeaders = [];\n      import(\"xlsx\").then(xlsx => {\n        const worksheet = xlsx.utils.json_to_sheet(this.rq_array);\n        worksheet['!cols'] = [{\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }];\n        excelHeaders = [\"Request Id\", \"Date To Perform\", \"Status\", this.displayKey, this.rowCardDetails.key == 'part' ? 'Required Quantity' : 'Required Hours'];\n        const headers = excelHeaders.map((header, index) => ({\n          v: header,\n          position: String.fromCharCode(65 + index) + 1\n        }));\n        headers.forEach(header => {\n          worksheet[header.position] = {\n            v: header.v\n          };\n        });\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = xlsx.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"request\");\n      });\n    }\n    getDestructuredData(data) {\n      this.rq_array = data.map(item => {\n        let countString = this.rowCardDetails.key == 'part' ? 'Required Quantity' : 'Required Hours';\n        let label = this.displayKey;\n        let obj = {\n          \"Request Id\": item['requestId'],\n          \"Date To Perform\": this.datePipe.transform(item['dateToPerform'], \"dd MMM yyyy\"),\n          \"Status\": this.getEnumByid(item['status'])\n        };\n        obj[label] = item['name'];\n        obj[countString] = item['count'];\n        return obj;\n      });\n    }\n    saveAsExcelFile(buffer, fileName) {\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      let EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    onClickRequest(requestId) {\n      const url = this.router.serializeUrl(this.router.createUrlTree([\"/work-request-details\"], {\n        queryParams: {\n          requestId: requestId,\n          index: 0,\n          action: \"details\",\n          status: '',\n          viewDetails: true,\n          isNavigationFromReport: true\n        }\n      }));\n      window.open(url, '_blank');\n    }\n    onClickName(name) {\n      this.showToolDetails = false;\n      if (this.rowCardDetails.key == 'tool') {\n        this.onClickTool(name.id);\n      } else if (this.rowCardDetails.key == 'trade') {\n        this.onClickTrade(name.id);\n      } else if (this.rowCardDetails.key == 'part') {\n        this.onClickPart(name.id);\n      } else if (this.rowCardDetails.key == 'technician') {\n        this.onClickTechnician(parseInt(name.id));\n      }\n    }\n    onEditName(rm) {\n      let wrId = rm.requestId;\n      let filterData = {\n        wrId: wrId,\n        partId: null,\n        toolId: null,\n        tradeId: null,\n        technicianId: null\n      };\n      if (this.rowCardDetails.key == \"trade\") {\n        filterData.tradeId = rm.id;\n      } else if (this.rowCardDetails.key == \"tool\") {\n        filterData.toolId = rm.id;\n      } else if (this.rowCardDetails.key == \"part\") {\n        filterData.partId = rm.id;\n      } else if (this.rowCardDetails.key == \"technician\") {\n        filterData.technicianId = rm.id;\n      }\n      this.planscheduleSrv.getPlannerRequestSelectionInfo(filterData).subscribe(res => {\n        if (res) {\n          let isRequestor = res.request.isRequestor === \"1\" ? true : false;\n          let isApprover = res.request.isApprover === \"1\" ? true : false;\n          let isTechnician = res.request.isTechnician === \"1\" ? true : false;\n          let isSupervisor = res.request.isSupervisor === \"1\" ? true : false;\n          if (this.rowCardDetails.key == \"trade\") {\n            this.onEditTradeDialog(wrId, isRequestor, isApprover, isTechnician, isSupervisor, res.trade.requestTradeId);\n          } else if (this.rowCardDetails.key == \"tool\") {\n            this.onEditToolDialog(wrId, isRequestor, isApprover, isTechnician, isSupervisor, res.tool.reqToolId);\n          } else if (this.rowCardDetails.key == \"part\") {\n            this.onEditPartDialog(wrId, isRequestor, isApprover, isTechnician, isSupervisor, res.part.requestPartId);\n          } else if (this.rowCardDetails.key == \"technician\") {\n            this.onEditTechnicianDialog(wrId, isRequestor, isApprover, isTechnician, isSupervisor, res.technician.requestTechnicianId);\n          }\n        }\n      });\n    }\n    onEditTradeDialog(requestId, isRequestor, isApprover, isTechnician, isSupervisor, requestTradeId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '400px';\n      dialogConfig.data = {\n        requestId: requestId,\n        requestTradeId: requestTradeId,\n        isEdit: true,\n        newRecord: false,\n        isView: false,\n        userChecks: {\n          isRequestor: isRequestor,\n          isApprover: isApprover,\n          isSupervisor: isSupervisor,\n          isTechnician: isTechnician\n        }\n      };\n      this.requestTradeDialogueProvider.openDialog(dialogConfig);\n      this.requestTradeDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"deleted\") {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"not able to delete\") {\n          this.messageService.add({\n            key: 'pmReqWarning',\n            severity: 'warn',\n            summary: 'Can not delete the record',\n            detail: 'The part is associated with other records. Please change the part before deleting the record.'\n          });\n        }\n      });\n    }\n    onEditToolDialog(requestId, isRequestor, isApprover, isTechnician, isSupervisor, requestToolId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '400px';\n      dialogConfig.data = {\n        requestId: requestId,\n        reqToolId: requestToolId,\n        isEdit: true,\n        newRecord: false,\n        isView: false,\n        userChecks: {\n          isRequestor: isRequestor,\n          isApprover: isApprover,\n          isSupervisor: isSupervisor,\n          isTechnician: isTechnician\n        }\n      };\n      this.requestToolsDialogueProvider.openDialog(dialogConfig);\n      this.requestToolsDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"deleted\") {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"not able to delete\") {\n          this.messageService.add({\n            key: 'pmReqWarning',\n            severity: 'warn',\n            summary: 'Can not delete the record',\n            detail: 'The tool is associated with other records. Please change the tool before deleting the record.'\n          });\n        }\n      });\n    }\n    onEditPartDialog(requestId, isRequestor, isApprover, isTechnician, isSupervisor, requestPartId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '400px';\n      dialogConfig.data = {\n        requestId: requestId,\n        requestPartId: requestPartId,\n        isEdit: true,\n        newRecord: false,\n        isView: false,\n        userChecks: {\n          isRequestor: isRequestor,\n          isApprover: isApprover,\n          isSupervisor: isSupervisor,\n          isTechnician: isTechnician\n        }\n      };\n      this.requestPartsDialogueProvider.openDialog(dialogConfig);\n      this.requestPartsDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"deleted\") {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"not able to delete\") {\n          this.messageService.add({\n            key: 'pmReqWarning',\n            severity: 'warn',\n            summary: 'Can not delete the record',\n            detail: 'The part is associated with other records. Please change the part before deleting the record.'\n          });\n        }\n      });\n    }\n    onEditTechnicianDialog(requestId, isRequestor, isApprover, isTechnician, isSupervisor, requestTechnicianId) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '400px';\n      dialogConfig.data = {\n        requestId: requestId,\n        requestTechId: requestTechnicianId,\n        isEdit: true,\n        newRecord: false,\n        isView: false,\n        userChecks: {\n          isRequestor: isRequestor,\n          isApprover: isApprover,\n          isSupervisor: isSupervisor,\n          isTechnician: isTechnician\n        }\n      };\n      this.requestTechnicianDialogueProvider.openDialog(dialogConfig);\n      this.requestTechnicianDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result === true) {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"deleted\") {\n          this.messageService.add({\n            key: 'pmReqSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.reloadPmPlanner.emit(true);\n        } else if (result == \"not able to delete\") {\n          this.messageService.add({\n            key: 'pmReqWarning',\n            severity: 'warn',\n            summary: 'Can not delete the record',\n            detail: 'The part is associated with other records. Please change the part before deleting the record.'\n          });\n        }\n      });\n    }\n    onClickTool(toolId) {\n      let selectedTool = this.toolsList.find(t => t.toolsId === parseInt(toolId));\n      setTimeout(() => {\n        this.frmToolsDetail.patchValue({\n          toolsFormPanel: selectedTool\n        });\n      }, 0);\n      this.showToolDetails = true;\n    }\n    onClickTrade(tradeId) {\n      this.selectedTrade = this.tradeList.find(t => t.tradeId === parseInt(tradeId));\n      this.showTradeDetails = true;\n    }\n    onClickPart(partId) {\n      this.selectedPart = this.partsList.find(t => t.partId === parseInt(partId));\n      this.showPartDetails = true;\n    }\n    onClickTechnician(cfId) {\n      let selectedTechnician = this.technicianList.find(t => t.cfId === parseInt(cfId));\n      setTimeout(() => {\n        this.frmCfDetail.patchValue({\n          cfFormPanel: selectedTechnician\n        });\n      }, 0);\n      this.showTechnicianDetails = true;\n    }\n    getAvailableCountText() {\n      let key = this.rowCardDetails.key;\n      let rowDetails = this.rowCardDetails.rowDetails;\n      let resultText = '';\n      if (key == 'part') {\n        resultText = `Available Quantity: ${rowDetails.availableCount} ${rowDetails.units}`;\n      } else {\n        resultText = `Available Hours: ${rowDetails.availableCount} hours`;\n      }\n      return resultText;\n    }\n    updateTradeDetailsDialog() {\n      if (this.useTabletProtrait) {\n        this.tradeDetailsDialogWidth = '60vw';\n        this.toolDetailsDialogWidth = '50vw';\n      } else {\n        this.tradeDetailsDialogWidth = '40vw';\n        this.toolDetailsDialogWidth = '35vw';\n      }\n      if (this.showTradeDetails) {\n        this.showTradeDetails = false;\n        setTimeout(() => {\n          this.showTradeDetails = true;\n          this.cdr.detectChanges();\n        }, 100);\n      }\n      if (this.showToolDetails) {\n        this.showToolDetails = false;\n        setTimeout(() => {\n          this.showToolDetails = true;\n          this.cdr.detectChanges();\n        }, 100);\n      }\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    static #_ = this.ɵfac = function PmPlannerReqDetailsTableComponent_Factory(t) {\n      return new (t || PmPlannerReqDetailsTableComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.DatePipe), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.TradesService), i0.ɵɵdirectiveInject(i5.PartsService), i0.ɵɵdirectiveInject(i6.ToolsService), i0.ɵɵdirectiveInject(i7.CraftspersonService), i0.ɵɵdirectiveInject(i8.FormBuilder), i0.ɵɵdirectiveInject(i9.RequestTradeDialogueProvider), i0.ɵɵdirectiveInject(i10.RequestToolsDialogueProvider), i0.ɵɵdirectiveInject(i11.RequestPartsDialogueProvider), i0.ɵɵdirectiveInject(i12.RequestTechnicianDialogueProvider), i0.ɵɵdirectiveInject(i13.MessageService), i0.ɵɵdirectiveInject(i14.PlanScheduleService), i0.ɵɵdirectiveInject(i15.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PmPlannerReqDetailsTableComponent,\n      selectors: [[\"app-pm-planner-req-details-table\"]],\n      inputs: {\n        data: \"data\",\n        rowCardDetails: \"rowCardDetails\"\n      },\n      outputs: {\n        reloadPmPlanner: \"reloadPmPlanner\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 16,\n      vars: 15,\n      consts: [[1, \"card\"], [2, \"margin\", \"10px\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 3, \"disabled\", \"click\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"400px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\", \"totalRecords\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"id\", \"Trade Details\", \"id\", \"first\", 3, \"visible\", \"style\", \"modal\", \"draggable\", \"visibleChange\", 4, \"ngIf\"], [\"header\", \"Part Details\", \"id\", \"second\", 3, \"visible\", \"style\", \"modal\", \"draggable\", \"visibleChange\", 4, \"ngIf\"], [\"header\", \"Tool Details\", \"id\", \"third\", 3, \"visible\", \"style\", \"modal\", \"draggable\", \"visibleChange\", 4, \"ngIf\"], [\"header\", \"Technician Details\", \"id\", \"fourth\", 3, \"visible\", \"style\", \"modal\", \"draggable\", \"visibleChange\", 4, \"ngIf\"], [\"key\", \"pmReqSave\", \"position\", \"top-right\"], [\"key\", \"pmReqWarning\", \"position\", \"top-center\"], [\"key\", \"pmReqGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [2, \"width\", \"6rem\"], [\"pSortableColumn\", \"requestId\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"requestId\"], [\"type\", \"text\", \"field\", \"requestId\", \"display\", \"menu\"], [\"pSortableColumn\", \"dateToPerform\"], [\"field\", \"dateToPerform\"], [\"pSortableColumn\", \"status\"], [\"field\", \"status\"], [\"field\", \"status\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"name\"], [\"field\", \"name\"], [\"type\", \"text\", \"field\", \"name\", \"display\", \"menu\"], [\"pSortableColumn\", \"count\"], [\"field\", \"count\"], [\"type\", \"text\", \"field\", \"count\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Status\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-eye\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [2, \"text-align\", \"end\"], [\"id\", \"Trade Details\", \"id\", \"first\", 3, \"visible\", \"modal\", \"draggable\", \"visibleChange\"], [3, \"selectedTrade\"], [\"header\", \"Part Details\", \"id\", \"second\", 3, \"visible\", \"modal\", \"draggable\", \"visibleChange\"], [3, \"selectedPart\"], [\"header\", \"Tool Details\", \"id\", \"third\", 3, \"visible\", \"modal\", \"draggable\", \"visibleChange\"], [1, \"disabled-form\", 3, \"formGroup\"], [\"id\", \"tool\"], [\"formControlName\", \"toolsFormPanel\"], [\"header\", \"Technician Details\", \"id\", \"fourth\", 3, \"visible\", \"modal\", \"draggable\", \"visibleChange\"], [\"formControlName\", \"cfFormPanel\"]],\n      template: function PmPlannerReqDetailsTableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function PmPlannerReqDetailsTableComponent_Template_button_click_4_listener() {\n            return ctx.exportExcel();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"p-table\", 3);\n          i0.ɵɵtemplate(6, PmPlannerReqDetailsTableComponent_ng_template_6_Template, 42, 2, \"ng-template\", 4);\n          i0.ɵɵtemplate(7, PmPlannerReqDetailsTableComponent_ng_template_7_Template, 17, 9, \"ng-template\", 5);\n          i0.ɵɵtemplate(8, PmPlannerReqDetailsTableComponent_ng_template_8_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, PmPlannerReqDetailsTableComponent_p_dialog_9_Template, 2, 8, \"p-dialog\", 7);\n          i0.ɵɵtemplate(10, PmPlannerReqDetailsTableComponent_p_dialog_10_Template, 2, 7, \"p-dialog\", 8);\n          i0.ɵɵtemplate(11, PmPlannerReqDetailsTableComponent_p_dialog_11_Template, 5, 8, \"p-dialog\", 9);\n          i0.ɵɵtemplate(12, PmPlannerReqDetailsTableComponent_p_dialog_12_Template, 5, 7, \"p-dialog\", 10);\n          i0.ɵɵelement(13, \"p-toast\", 11)(14, \"p-toast\", 12)(15, \"p-confirmDialog\", 13);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.getAvailableCountText());\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.rq_data.length == 0);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"value\", ctx.rq_data)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(14, _c3))(\"rowHover\", false)(\"scrollable\", true)(\"totalRecords\", ctx.rq_data.length);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.showTradeDetails);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showPartDetails);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showToolDetails);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showTechnicianDetails);\n        }\n      },\n      dependencies: [i2.NgIf, i8.ɵNgNoValidate, i8.NgControlStatus, i8.NgControlStatusGroup, i8.FormGroupDirective, i8.FormControlName, i8.NgModel, i16.MatLegacyCard, i16.MatLegacyCardContent, i13.PrimeTemplate, i17.Table, i17.SortableColumn, i17.SelectableRow, i17.SortIcon, i17.ColumnFilter, i18.ButtonDirective, i19.Dialog, i20.Dropdown, i21.Toast, i22.ConfirmDialog, i23.MatTooltip, i24.TradeDetailsComponent, i25.PartDetailsComponent, i26.AddToolsComponent, i27.AddCraftspersonFormComponent, i2.DatePipe],\n      styles: [\".info-button[_ngcontent-%COMP%]{width:16.5px!important;height:16.5px!important}.disabled-form[_ngcontent-%COMP%]{opacity:.8;pointer-events:none}  .dark-panel.p-dialog .p-dialog-header{border-radius:5px 5px 0 0/5px 5px 0px 0px;padding:10px 10px 10px 20px;background:none}  .p-dialog-content{overflow:visible}  .p-dialog .p-dialog-content{padding:10px}  .cdk-overlay-container{z-index:1110}@media screen and (min-width: 960px) and (max-width: 1439px){[_nghost-%COMP%]     .p-dialog-mask{top:-5vh}}\"]\n    });\n  }\n  return PmPlannerReqDetailsTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}