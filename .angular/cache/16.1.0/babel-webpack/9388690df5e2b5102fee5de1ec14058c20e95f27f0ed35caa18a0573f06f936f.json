{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/trades.services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"../../../../../directive/numbers-only.directive\";\nimport * as i7 from \"../../../../../directive/directive/upper-case.directive\";\nimport * as i8 from \"../../../../../directive/directive/two-digit-decimal-number\";\nimport * as i9 from \"../../../../../directive/directive/trim-input.directive\";\nfunction AddTradesFormComponent_tr_8_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 15);\n    i0.ɵɵtext(1, \"Trade Code is already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddTradesFormComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵtemplate(2, AddTradesFormComponent_tr_8_label_2_Template, 2, 0, \"label\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.tradeFormPanel.controls[\"tradeId\"] == null ? null : ctx_r0.tradeFormPanel.controls[\"tradeId\"].errors) && !(ctx_r0.tradeFormPanel.controls[\"tradeId\"] == null ? null : ctx_r0.tradeFormPanel.controls[\"tradeId\"].errors.required));\n  }\n}\nexport let AddTradesFormComponent = /*#__PURE__*/(() => {\n  class AddTradesFormComponent {\n    constructor(formBuilder, tradesService) {\n      this.formBuilder = formBuilder;\n      this.tradesService = tradesService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.tradeFormPanel = this.formBuilder.group({\n        tradeId: [null],\n        tradeCode: [null, [Validators.required]],\n        rateHourly: ['', [Validators.required, Validators.min(0)]],\n        rateDouble: ['', [Validators.required, Validators.min(0)]],\n        rateOver: ['', [Validators.required, Validators.min(0)]],\n        stdHoursAvail: ['', [Validators.required, Validators.min(0)]],\n        description: ['']\n      });\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.tradeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {}\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const trade = {\n        tradeId: this.tradeFormPanel.controls.tradeId.value,\n        tradeCode: this.tradeFormPanel.controls.tradeCode.value,\n        rateHourly: this.tradeFormPanel.controls.rateHourly.value,\n        rateDouble: this.tradeFormPanel.controls.rateDouble.value,\n        rateOver: this.tradeFormPanel.controls.rateOver.value,\n        stdHoursAvail: this.tradeFormPanel.controls.stdHoursAvail.value,\n        description: this.tradeFormPanel.controls.description.value\n      };\n      return trade;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.tradeFormPanel.patchValue({\n          tradeId: value.tradeId,\n          tradeCode: value.tradeCode,\n          rateHourly: value.rateHourly,\n          rateDouble: value.rateDouble,\n          rateOver: value.rateOver,\n          stdHoursAvail: value.stdHoursAvail,\n          description: value.description\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.tradeFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.tradeFormPanel.valid ? null : {\n        tradeFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddTradesFormComponent_Factory(t) {\n      return new (t || AddTradesFormComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.TradesService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddTradesFormComponent,\n      selectors: [[\"app-add-trades-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddTradesFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddTradesFormComponent),\n        multi: true\n      }])],\n      decls: 37,\n      vars: 2,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"tradeCode\", \"formControlName\", \"tradeCode\", \"uppercase\", \"\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [\"colspan\", \"2\"], [1, \"form-field-lable\"], [\"name\", \"description\", \"formControlName\", \"description\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"256\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"rateHourly\", \"formControlName\", \"rateHourly\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"8\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"rateOver\", \"formControlName\", \"rateOver\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"8\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"rateDouble\", \"formControlName\", \"rateDouble\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"8\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"stdHoursAvail\", \"formControlName\", \"stdHoursAvail\", \"TwoDigitDecimalNumber\", \"\", \"maxlength\", \"8\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddTradesFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Trade Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(8, AddTradesFormComponent_tr_8_Template, 3, 1, \"tr\", 6);\n          i0.ɵɵelementStart(9, \"tr\")(10, \"td\", 7)(11, \"div\", 3)(12, \"label\", 8);\n          i0.ɵɵtext(13, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"textarea\", 9);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\", 2)(17, \"div\", 3)(18, \"label\", 4);\n          i0.ɵɵtext(19, \"Hourly Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"input\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"td\", 2)(22, \"div\", 3)(23, \"label\", 4);\n          i0.ɵɵtext(24, \"Overtime Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"input\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(26, \"tr\")(27, \"td\", 2)(28, \"div\", 3)(29, \"label\", 4);\n          i0.ɵɵtext(30, \"Doubletime Rate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(31, \"input\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(32, \"td\", 2)(33, \"div\", 3)(34, \"label\", 4);\n          i0.ɵɵtext(35, \"Standard Available Time (Hours/Day)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(36, \"input\", 13);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.tradeFormPanel);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.tradeFormPanel.controls[\"tradeId\"] == null ? null : ctx.tradeFormPanel.controls[\"tradeId\"].errors) && ((ctx.tradeFormPanel.controls[\"tradeId\"] == null ? null : ctx.tradeFormPanel.controls[\"tradeId\"].dirty) || (ctx.tradeFormPanel.controls[\"tradeId\"] == null ? null : ctx.tradeFormPanel.controls[\"tradeId\"].touched)));\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.NumbersOnlyDirective, i7.UppercaseDirective, i8.TwoDigitDecimalNumberDirective, i9.TrimInputDirective]\n    });\n  }\n  return AddTradesFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}