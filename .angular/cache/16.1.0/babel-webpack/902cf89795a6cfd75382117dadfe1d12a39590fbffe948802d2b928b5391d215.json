{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nexport class StateService {\n  constructor(cntryService, cntryDetailService) {\n    this.cntryService = cntryService;\n    this.cntryDetailService = cntryDetailService;\n  }\n  getStateList(data) {\n    return this.cntryService.search('state', 'search', data);\n  }\n  getStateById(id) {\n    return this.cntryService.getSingleById('state', 'getState', id);\n  }\n  getALLState() {\n    return this.cntryService.getAll(\"state\", \"list\");\n  }\n  saveState(state) {\n    return this.cntryDetailService.add('state', 'saveState', state);\n  }\n  validateState(state) {\n    return this.cntryService.add('state', 'check', state);\n  }\n  static #_ = this.ɵfac = function StateService_Factory(t) {\n    return new (t || StateService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StateService,\n    factory: StateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["StateService","constructor","cntryService","cntryDetailService","getStateList","data","search","getStateById","id","getSingleById","getALLState","getAll","saveState","state","add","validateState","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\location\\services\\state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataService } from '../../../services/data.service';\nimport { StateList } from '../model/state-list.model';\nimport { StateFilterInput } from '../widgets/state-list/stateFilterInput.model';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n\n  constructor(\n    private cntryService: DataService<any>,\n    private cntryDetailService: DataService<StateList>\n    \n  ) { }\n\n  public getStateList(data: any){//StateFilterInput\n    return this.cntryService.search('state', 'search', data);\n  }\n  public getStateById(id:any){\n    return this.cntryService.getSingleById('state', 'getState',id);\n  }\n\n  public getALLState() {\n    return this.cntryService.getAll(\"state\", \"list\");\n  }\n  public saveState(state: any): Observable<any> { //any need to replace StateList\n    return this.cntryDetailService.add('state', 'saveState', state);\n  }\n\n  public validateState(state: any) {\n    return this.cntryService.add('state', 'check', state);\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,YAAY;EAEvBC,YACUC,YAA8B,EAC9BC,kBAA0C;IAD1C,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,kBAAkB,GAAlBA,kBAAkB;EAExB;EAEGC,YAAYA,CAACC,IAAS;IAC3B,OAAO,IAAI,CAACH,YAAY,CAACI,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAED,IAAI,CAAC;EAC1D;EACOE,YAAYA,CAACC,EAAM;IACxB,OAAO,IAAI,CAACN,YAAY,CAACO,aAAa,CAAC,OAAO,EAAE,UAAU,EAACD,EAAE,CAAC;EAChE;EAEOE,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACR,YAAY,CAACS,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;EAClD;EACOC,SAASA,CAACC,KAAU;IACzB,OAAO,IAAI,CAACV,kBAAkB,CAACW,GAAG,CAAC,OAAO,EAAE,WAAW,EAAED,KAAK,CAAC;EACjE;EAEOE,aAAaA,CAACF,KAAU;IAC7B,OAAO,IAAI,CAACX,YAAY,CAACY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAED,KAAK,CAAC;EACvD;EAAC,QAAAG,CAAA,G;qBAxBUhB,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrB,YAAY;IAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}