{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { forkJoin, of } from 'rxjs';\nimport { WrStatusCardsComponent } from '../wr-status-cards/wr-status-cards.component';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/sla-request-parameters.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"src/app/services/auth.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"src/app/services/enum.service\";\nimport * as i8 from \"src/app/services/breakpoint.service\";\nimport * as i9 from \"@angular/material/dialog\";\nimport * as i10 from \"primeng/button\";\nimport * as i11 from \"primeng/dialog\";\nimport * as i12 from \"primeng/toast\";\nimport * as i13 from \"primeng/panel\";\nimport * as i14 from \"primeng/confirmdialog\";\nimport * as i15 from \"primeng/tabview\";\nimport * as i16 from \"../add-sla-request/add-sla-request.component\";\nimport * as i17 from \"../add-sla-response/add-sla-response.component\";\nimport * as i18 from \"primeng/autocomplete\";\nimport * as i19 from \"../wr-status-cards/wr-status-cards.component\";\nconst _c0 = [\"tabview\"];\nfunction AddEditSlaComponent_div_0_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵelement(1, \"app-add-sla-request\", 38);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r6.frmSLATab);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isNew\", ctx_r6.isNew);\n  }\n}\nconst _c1 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nfunction AddEditSlaComponent_div_0_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 39);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_0_ng_template_7_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.clickBack());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_0_ng_template_7_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.saveAllSlaData());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r7.frmSLATab.controls.slaRequestPanel.valid || !ctx_r7.frmSLATab.controls.slaResponsePanel.valid);\n  }\n}\nfunction AddEditSlaComponent_div_0_p_tabPanel_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-tabPanel\", 41, 42);\n  }\n  if (rf & 2) {\n    const item_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"header\", item_r13.priority)(\"selected\", i_r14 === ctx_r9.activeTabIndex);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"readonly-panel\": a0\n  };\n};\nfunction AddEditSlaComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"div\", 21)(3, \"p-panel\", 22);\n    i0.ɵɵtemplate(4, AddEditSlaComponent_div_0_ng_template_4_Template, 2, 2, \"ng-template\", 23);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 24)(6, \"p-panel\", 25);\n    i0.ɵɵtemplate(7, AddEditSlaComponent_div_0_ng_template_7_Template, 2, 4, \"ng-template\", 26);\n    i0.ɵɵelementStart(8, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_0_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.addPriority());\n    });\n    i0.ɵɵtext(9, \"Add Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p-tabView\", 28, 29);\n    i0.ɵɵlistener(\"onChange\", function AddEditSlaComponent_div_0_Template_p_tabView_onChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onTabChange($event));\n    })(\"activeIndexChange\", function AddEditSlaComponent_div_0_Template_p_tabView_activeIndexChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.activeTabIndex = $event);\n    })(\"dblclick\", function AddEditSlaComponent_div_0_Template_p_tabView_dblclick_10_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.slaRequestParametersId > 0 && ctx_r20.frmSLATab.controls.slaRequestPanel.valid && !ctx_r20.isDefaultSla && ctx_r20.onEditPriorityName($event));\n    });\n    i0.ɵɵtemplate(12, AddEditSlaComponent_div_0_p_tabPanel_12_Template, 2, 2, \"p-tabPanel\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 31)(14, \"div\", 32)(15, \"mat-dialog-content\", 33)(16, \"form\", 2)(17, \"app-add-sla-response\", 34);\n    i0.ɵɵlistener(\"notifyAutoApprove\", function AddEditSlaComponent_div_0_Template_app_add_sla_response_notifyAutoApprove_17_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onChangeAutoApprove($event));\n    })(\"notifyAutoIssue\", function AddEditSlaComponent_div_0_Template_app_add_sla_response_notifyAutoIssue_17_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onChangeAutoIssue($event));\n    });\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(18, \"div\", 35)(19, \"p-panel\", 36)(20, \"div\", 37);\n    i0.ɵɵelement(21, \"app-wr-status-cards\");\n    i0.ɵɵelementEnd()()()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c2, ctx_r0.isDefaultSla));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isDefaultSla || !(ctx_r0.slaRequestParametersId > 0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"activeIndex\", ctx_r0.activeTabIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.slaResponseParameters);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c2, ctx_r0.slaRequestParametersId > 0 ? false : true));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.frmSLATab);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isNew\", ctx_r0.isNew)(\"enableAutoApprove\", ctx_r0.enableAutoApprove);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c2, ctx_r0.slaResponseParametersId > 0 ? false : true));\n  }\n}\nfunction AddEditSlaComponent_div_1_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 39);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_1_ng_template_4_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27.clickBack());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 40);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_1_ng_template_4_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.saveAllSlaData());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r23.frmSLATab.controls.slaRequestPanel.valid || !ctx_r23.frmSLATab.controls.slaResponsePanel.valid);\n  }\n}\nfunction AddEditSlaComponent_div_1_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵelement(1, \"app-add-sla-request\", 38);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r24.frmSLATab);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isNew\", ctx_r24.isNew);\n  }\n}\nfunction AddEditSlaComponent_div_1_p_tabPanel_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-tabPanel\", 41, 42);\n  }\n  if (rf & 2) {\n    const item_r30 = ctx.$implicit;\n    const i_r31 = ctx.index;\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"header\", item_r30.priority)(\"selected\", i_r31 === ctx_r26.activeTabIndex);\n  }\n}\nfunction AddEditSlaComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"div\", 43)(3, \"p-panel\", 22);\n    i0.ɵɵtemplate(4, AddEditSlaComponent_div_1_ng_template_4_Template, 2, 4, \"ng-template\", 26);\n    i0.ɵɵtemplate(5, AddEditSlaComponent_div_1_ng_template_5_Template, 2, 2, \"ng-template\", 23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(6, \"div\", 20)(7, \"div\")(8, \"p-panel\", 25)(9, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_div_1_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.addPriority());\n    });\n    i0.ɵɵtext(10, \"Add Priority\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p-tabView\", 28, 29);\n    i0.ɵɵlistener(\"onChange\", function AddEditSlaComponent_div_1_Template_p_tabView_onChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35.onTabChange($event));\n    })(\"activeIndexChange\", function AddEditSlaComponent_div_1_Template_p_tabView_activeIndexChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.activeTabIndex = $event);\n    })(\"dblclick\", function AddEditSlaComponent_div_1_Template_p_tabView_dblclick_11_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.slaRequestParametersId > 0 && ctx_r37.frmSLATab.controls.slaRequestPanel.valid && !ctx_r37.isDefaultSla && ctx_r37.onEditPriorityName($event));\n    });\n    i0.ɵɵtemplate(13, AddEditSlaComponent_div_1_p_tabPanel_13_Template, 2, 2, \"p-tabPanel\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 31)(15, \"div\")(16, \"mat-dialog-content\", 33)(17, \"form\", 2)(18, \"app-add-sla-response\", 34);\n    i0.ɵɵlistener(\"notifyAutoApprove\", function AddEditSlaComponent_div_1_Template_app_add_sla_response_notifyAutoApprove_18_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r38.onChangeAutoApprove($event));\n    })(\"notifyAutoIssue\", function AddEditSlaComponent_div_1_Template_app_add_sla_response_notifyAutoIssue_18_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r39.onChangeAutoIssue($event));\n    });\n    i0.ɵɵelementEnd()()()()()()()();\n    i0.ɵɵelementStart(19, \"div\", 20)(20, \"div\", 43)(21, \"p-panel\", 36)(22, \"div\", 44);\n    i0.ɵɵelement(23, \"app-wr-status-cards\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c2, ctx_r1.isDefaultSla));\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.isDefaultSla || !(ctx_r1.slaRequestParametersId > 0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"activeIndex\", ctx_r1.activeTabIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.slaResponseParameters);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c2, ctx_r1.slaRequestParametersId > 0 ? false : true));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.frmSLATab);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isNew\", ctx_r1.isNew)(\"enableAutoApprove\", ctx_r1.enableAutoApprove);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c2, ctx_r1.slaResponseParametersId > 0 ? false : true));\n  }\n}\nfunction AddEditSlaComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"label\", 45);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.priorityExistErrror, \" \");\n  }\n}\nfunction AddEditSlaComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"div\", 47)(2, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_ng_template_13_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r41);\n      const ctx_r40 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r40.savePriority());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_ng_template_13_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r41);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r42.cancelPriority());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.priorityForm.valid || ctx_r3.priorityExistErrror.length > 0);\n  }\n}\nfunction AddEditSlaComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 50)(1, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_ng_template_18_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r44);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.onClickWarningTeamOrTechnician());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AddEditSlaComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 50)(1, \"button\", 52);\n    i0.ɵɵlistener(\"click\", function AddEditSlaComponent_ng_template_23_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r46);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r45.onClickApprovalWaring());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c3 = function () {\n  return {\n    width: \"25vw\"\n  };\n};\nconst _c4 = function () {\n  return {\n    width: \"20vw\"\n  };\n};\nexport let AddEditSlaComponent = /*#__PURE__*/(() => {\n  class AddEditSlaComponent {\n    constructor(formBuilder, service, messageService, datePipe, authSrv, route, router, enumsrv, confirmationService, bps) {\n      this.formBuilder = formBuilder;\n      this.service = service;\n      this.messageService = messageService;\n      this.datePipe = datePipe;\n      this.authSrv = authSrv;\n      this.route = route;\n      this.router = router;\n      this.enumsrv = enumsrv;\n      this.confirmationService = confirmationService;\n      this.bps = bps;\n      this.subscriptions = [];\n      this.isNew = true;\n      this.isEdit = true;\n      this.title = 'Add';\n      this.slaRequestParametersId = 0;\n      this.slaResponseParametersId = 0;\n      this.slaResponseParameters = [];\n      this.updateResponseParameters = [];\n      this.slaRequest = [];\n      this.tab_name_clicked = 'SLA';\n      this.isReadOnly = true;\n      this.displayCancelScreen = false;\n      this.activeTabIndex = 0;\n      this.enumPriority = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumIsDefault = [];\n      this.enumAutoIssue = [];\n      this.enumAutoApproval = [];\n      this.idForIsDefaultNo = 0;\n      this.idForIsDefaultYes = 0;\n      this.idForAutoIssueNo = 0;\n      this.idForAutoApprovalNo = 0;\n      this.idForAutoApprovalYes = 0;\n      this.editPriority = false;\n      this.priorityHeading = '';\n      this.priorityExistErrror = '';\n      this.refresh = false;\n      this.enumNotifyRequestor = [];\n      this.idForNotifyRequestorNo = 0;\n      this.technicianTeamWarning = false;\n      this.isDefaultSla = false;\n      this.enableAutoApprove = false;\n      this.notifyAutoApprove = new EventEmitter();\n      this.notifyAutoIssue = new EventEmitter();\n      this.enumWr = [];\n      this.enumStatus = [];\n      this.approvalStepWarning = false;\n      this.enumSlaSteps = [];\n      this.enumStepType = [];\n      this.useTabletProtrait = false;\n      this.frmSLATab = this.formBuilder.group({\n        slaRequestPanel: [],\n        slaResponsePanel: []\n      });\n      this.priorityForm = this.formBuilder.group({\n        priority: [null, [Validators.required]]\n      });\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      this.initialLoadValues();\n    }\n    initialLoadValues() {\n      this.route.queryParams.subscribe(params => {\n        if (params) {\n          this.slaRequest = params.slaRequest;\n          this.params = params;\n          this.slaRequestParametersId = parseInt(params.slaRequestParametersId);\n          this.isDefaultSla = params.isDefaultSla === \"true\";\n        }\n      });\n      this.loadEnums();\n      this.getAllResponseParams();\n    }\n    notify() {\n      let previousSlaRequest = this.frmSLATab.controls.slaRequestPanel.value;\n      let previousSlaResponse = this.frmSLATab.controls.slaResponsePanel.value;\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n      this.initialLoadValues();\n      setTimeout(() => {\n        this.frmSLATab.patchValue({\n          slaRequestPanel: previousSlaRequest,\n          slaResponsePanel: previousSlaResponse\n        });\n      }, 10);\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumSlaSteps = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase());\n        this.enumStepType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr_steps'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'step_type'.toLocaleUpperCase());\n        this.enumStepType.forEach(t => {\n          if (t.enumValue === \"Approval\") {\n            this.idForApprovalStepType = t.enumKey;\n          }\n        });\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.enumStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        this.enumStatus.forEach(t => {\n          if (t.enumValue === \"Approved\") {\n            this.idForApproved = t.enumKey;\n          }\n          if (t.enumValue === \"Requested\") {\n            this.idForRequested = t.enumKey;\n          }\n          if (t.enumValue === \"Rejected\") {\n            this.idForRejected = t.enumKey;\n          }\n        });\n        // this.enumClonedList = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase());\n        this.enumIsDefault = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'is_default'.toLocaleUpperCase());\n        this.enumIsDefault.forEach(t => {\n          if (t.enumValue === \"No\") {\n            this.idForIsDefaultNo = t.enumKey;\n          } else {\n            this.idForIsDefaultYes = t.enumKey;\n          }\n        });\n        this.enumAutoIssue = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'auto_issue'.toLocaleUpperCase());\n        this.enumAutoIssue.forEach(t => {\n          if (t.enumValue === \"No\") {\n            this.idForAutoIssueNo = t.enumKey;\n          }\n        });\n        this.enumAutoApproval = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'auto_approval'.toLocaleUpperCase());\n        this.enumAutoApproval.forEach(t => {\n          if (t.enumValue === \"No\") {\n            this.idForAutoApprovalNo = t.enumKey;\n          } else {\n            this.idForAutoApprovalYes = t.enumKey;\n          }\n        });\n        this.enumNotifyRequestor = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'sla_response_parameters'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'notify_requestor'.toLocaleUpperCase());\n        this.enumNotifyRequestor.forEach(t => {\n          if (t.enumValue === \"No\") {\n            this.idForNotifyRequestorNo = t.enumKey;\n          }\n        });\n        this.setData();\n      }, error => {});\n    }\n    setData() {\n      const calls = [];\n      if (this.slaRequestParametersId != 0) {\n        calls.push(this.service.getSLARequestById(this.slaRequestParametersId));\n      } else {\n        calls.push(of(null));\n      }\n      forkJoin(...calls).subscribe(results => {\n        if (results[0] == null) {\n          var slaData = {\n            slaRequestParametersId: null,\n            probTypeId: null,\n            problemTypeString: null,\n            eqStd: null,\n            eqId: null,\n            siteId: null,\n            blId: null,\n            flId: null,\n            rmId: null,\n            compId: 1\n          };\n          this.slaResponseParameters = [];\n          this.slaResponseParameters.push({\n            priority: \"Routine Work\"\n          });\n          this.setResponseNull('Routine Work');\n          setTimeout(() => {\n            this.frmSLATab.patchValue({\n              slaRequestPanel: slaData\n            });\n          }, 0);\n        } else {\n          this.slaRequestParametersId = results[0].slaRequestParametersId;\n          this.slaResponseParameters = results[0].slaResponseParameters;\n          this.updateResponseParameters = [...results[0].slaResponseParameters];\n          this.slaResponseParameters = this.slaResponseParameters.sort((a, b) => a.slaResponseParametersId - b.slaResponseParametersId);\n          if (this.slaResponseParameters.length != 0) {\n            this.slaResponseParametersId = results[0].slaResponseParameters[this.activeTabIndex].slaResponseParametersId;\n            this.enableAutoApprove = true;\n            setTimeout(() => {\n              this.frmSLATab.patchValue({\n                slaRequestPanel: results[0],\n                slaResponsePanel: this.slaResponseParameters[this.activeTabIndex]\n              });\n              this.wrStatusCardspanel.slaResponseParameters = this.slaResponseParameters[this.activeTabIndex];\n              this.wrStatusCardspanel.loadStepsBySlaResponseParamId(this.slaResponseParameters[this.activeTabIndex]);\n            }, 0);\n          } else {\n            this.slaRequestParametersId = results[0].slaRequestParametersId;\n            this.slaResponseParametersId = 0;\n            this.enableAutoApprove = false;\n            this.updateResponseParameters = [];\n            setTimeout(() => {\n              this.frmSLATab.patchValue({\n                slaRequestPanel: results[0]\n              });\n              this.slaResponseParameters.push({\n                priority: \"Routine Work\"\n              });\n              this.setResponseNull(\"Routine Work\");\n            }, 0);\n          }\n        }\n      });\n    }\n    saveSlaRequest() {\n      if (this.frmSLATab.controls.slaRequestPanel.valid && !this.isDefaultSla) {\n        const data = this.frmSLATab.controls.slaRequestPanel.value;\n        data.slaRequestParametersId = this.slaRequestParametersId;\n        data.isActive = \"Yes\";\n        this.service.saveSLARequest(data).subscribe(res => {\n          this.messageService.clear();\n          if (res.slaRequestParametersId > 0) {\n            this.slaRequestParametersId = res.slaRequestParametersId;\n            this.saveSlaResponse();\n          } else if (res.text === \"SLA already exists\") {\n            this.messageService.add({\n              key: 'SLArequest',\n              severity: 'warn',\n              summary: 'Warning',\n              detail: 'SLA Request already exists'\n            });\n          }\n        }, error => {});\n      } else {\n        this.saveSlaResponse();\n      }\n    }\n    getIdByStatus(value) {\n      return this.enumIsDefault.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    getAutoIssueId(value) {\n      return this.enumAutoIssue.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    getAutoApproval(value) {\n      return this.enumAutoApproval.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    getIdNotifyRequestor(value) {\n      return this.enumNotifyRequestor.find(t => t.enumValue.toLocaleUpperCase() === value.toLocaleUpperCase())?.enumKey;\n    }\n    updateAllOtherPriorities(id) {\n      if (id !== null) {\n        const filterData = this.updateResponseParameters.filter(eachRecord => eachRecord.slaResponseParametersId !== id);\n        if (filterData.length > 0) {\n          const newFilterData = filterData.map(each => {\n            return {\n              ...each,\n              isDefault: this.getIdByStatus('No')\n            };\n          });\n          if (newFilterData.length > 0) {\n            this.service.updateAllOtherPriorities(newFilterData).subscribe(resp => {\n              console.log(resp);\n            });\n          }\n        }\n      } else {\n        if (this.updateResponseParameters.length > 0) {\n          const AllData = this.updateResponseParameters.map(each => {\n            return {\n              ...each,\n              isDefault: this.getIdByStatus('No')\n            };\n          });\n          if (AllData.length > 0) {\n            this.service.updateAllOtherPriorities(AllData).subscribe(resp => {\n              console.log(resp);\n            });\n          }\n        }\n      }\n    }\n    saveSlaResponse() {\n      if (this.frmSLATab.controls.slaResponsePanel.valid) {\n        const slaProp = this.frmSLATab.controls.slaResponsePanel.value;\n        slaProp.slaRequestParametersId = this.slaRequestParametersId;\n        slaProp.slaResponseParametersId = this.slaResponseParameters[this.activeTabIndex].slaResponseParametersId;\n        if (slaProp.autoIssue === true && (!slaProp.teamId || slaProp.teamId === null || slaProp.teamId === 0) && (!slaProp.technicianId || slaProp.technicianId === '')) {\n          this.technicianTeamWarning = true;\n        } else {\n          this.technicianTeamWarning = false;\n          if (slaProp.slaResponseParametersId && slaProp.slaResponseParametersId > 0 && slaProp.slaResponseParametersId !== null) {\n            this.service.getSlaStepsList(slaProp.slaResponseParametersId).subscribe(res => {\n              let stepsList = [];\n              stepsList = [...res];\n              const approvalStepList = stepsList.filter(eachRecord => eachRecord.wrStatus === this.idForRequested && eachRecord.stepType === this.idForApprovalStepType);\n              const approvedRequestedRejectedList = stepsList.filter(eachRecord => eachRecord.wrStatus === this.idForApproved || eachRecord.wrStatus === this.idForRequested || eachRecord.wrStatus === this.idForRejected);\n              const requestedRejectedList = stepsList.filter(eachRecord => eachRecord.wrStatus === this.idForRejected || eachRecord.wrStatus === this.idForRequested);\n              let wrStatus = '';\n              if (approvalStepList.length === 0 && slaProp.autoIssue === false && slaProp.autoApproval === false) {\n                this.approvalStepWarning = true;\n              } else {\n                this.approvalStepWarning = false;\n                if (slaProp.autoIssue === true && approvedRequestedRejectedList.length > 0) {\n                  wrStatus = 'Requested, Approved, Rejected';\n                  this.confirmation(wrStatus, slaProp);\n                } else if (slaProp.autoApproval === true && requestedRejectedList.length > 0) {\n                  wrStatus = 'Requested, Rejected';\n                  this.confirmation(wrStatus, slaProp);\n                } else {\n                  this.slaResponseSaveApi(slaProp);\n                }\n              }\n            });\n          } else {\n            this.slaResponseSaveApi(slaProp);\n          }\n        }\n      }\n    }\n    confirmation(wrStatus, slaProp) {\n      this.confirmationService.confirm({\n        message: `Steps will be removed from ${wrStatus} Status. Do you want to continue?`,\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.slaResponseSaveApi(slaProp);\n        },\n        key: \"autoIssueApproveWarining\"\n      });\n    }\n    slaResponseSaveApi(slaProp) {\n      const slaRequestData = this.frmSLATab.controls.slaRequestPanel.value;\n      slaProp.priority = this.slaResponseParameters[this.activeTabIndex]['priority'];\n      slaProp.timeToResponse = parseFloat(slaProp.timeToResponse);\n      slaProp.timeToComplete = parseFloat(slaProp.timeToComplete);\n      slaProp.workingDays = this.setWorkingsDaysValue(slaProp);\n      slaProp.dayStartTime = this.convertToTime(slaProp.dayStartTime);\n      slaProp.dayEndTime = this.convertToTime(slaProp.dayEndTime);\n      slaProp.isDefault = slaProp.isDefault === true ? 'Yes' : 'No';\n      slaProp.notifyRequestor = slaProp.notifyRequestor === true ? \"Yes\" : \"No\";\n      slaProp.canWorkOnHoliday = slaProp.canWorkOnHoliday === true ? 1 : 0;\n      slaProp.autoIssue = slaProp.autoIssue === true ? 'Yes' : 'No';\n      slaProp.autoApproval = slaProp.autoApproval === true ? 'Yes' : 'No';\n      if ('Yes' === slaProp.isDefault) {\n        this.updateAllOtherPriorities(slaProp.slaResponseParametersId);\n      }\n      this.service.saveSLAResponse(slaProp).subscribe(res => {\n        this.messageService.clear();\n        if (res.status != 202) {\n          this.slaResponseParametersId = res.slaResponseParametersId;\n          this.enableAutoApprove = true;\n          this.getAllResponseParams();\n          if (slaRequestData.slaRequestParametersId === 0) {\n            this.messageService.add({\n              key: 'SLArequest',\n              severity: 'success',\n              summary: 'SLA Request saved successfully',\n              detail: 'Record saved successfully'\n            });\n          }\n          if (slaProp.slaResponseParametersId > 0) {\n            this.messageService.add({\n              key: 'SLAresponse',\n              severity: 'success',\n              summary: 'SLA Response saved successfully',\n              detail: 'Record saved successfully'\n            });\n          }\n          this.setData();\n        } else {\n          this.enableAutoApprove = true;\n        }\n      }, error => {});\n    }\n    setWorkingsDaysValue(slaProp) {\n      var workingDay = '';\n      if (!slaProp.sun) workingDay = '0,';else workingDay = '1,';\n      if (!slaProp.mon) workingDay += '0,';else workingDay += '1,';\n      if (!slaProp.tue) workingDay += '0,';else workingDay += '1,';\n      if (!slaProp.wed) workingDay += '0,';else workingDay += '1,';\n      if (!slaProp.thus) workingDay += '0,';else workingDay += '1,';\n      if (!slaProp.fri) workingDay += '0,';else workingDay += '1,';\n      if (!slaProp.sat) workingDay += '0';else workingDay += '1';\n      return workingDay;\n    }\n    convertToTime(value) {\n      if (value != null) {\n        return this.datePipe.transform(value, \"HH:mm:ss\");\n      } else {\n        return '';\n      }\n    }\n    onTabChange(event) {\n      this.frmSLATab.controls.slaResponsePanel.reset();\n      const selectedRecord = this.slaResponseParameters[event.index];\n      this.activeTabIndex = event.index;\n      if (selectedRecord.slaResponseParametersId && selectedRecord.slaRequestParametersId) {\n        this.slaResponseParametersId = selectedRecord.slaRequestParametersId;\n        setTimeout(() => {\n          this.frmSLATab.patchValue({\n            slaResponsePanel: selectedRecord\n          });\n          this.wrStatusCardspanel.slaResponseParameters = selectedRecord;\n          this.wrStatusCardspanel.loadStepsBySlaResponseParamId(selectedRecord);\n        }, 0);\n      } else {\n        this.slaResponseParametersId = 0;\n        this.frmSLATab.controls.slaResponsePanel.reset();\n        this.setResponseNull(selectedRecord.priority);\n        this.wrStatusCardspanel.loadStepsBySlaResponseParamId(null);\n      }\n    }\n    addPriority() {\n      this.priorityHeading = 'Add Priority';\n      this.priorityForm.reset();\n      this.priorityExistErrror = '';\n      this.displayCancelScreen = true;\n      this.editPriority = false;\n    }\n    savePriority() {\n      const priorityToShow = this.priorityForm.controls.priority.value;\n      if (this.editPriority) {\n        this.slaResponseParameters[this.activeTabIndex]['priority'] = priorityToShow;\n        this.priorityForm.patchValue({\n          priority: priorityToShow\n        });\n      } else {\n        this.slaResponseParameters.push({\n          priority: priorityToShow\n        });\n        setTimeout(() => {\n          this.slaResponseParametersId = 0;\n          this.activeTabIndex = this.tabview.tabs.length - 1;\n          this.setResponseNull(priorityToShow);\n          this.wrStatusCardspanel.loadStepsBySlaResponseParamId(null);\n        }, 0);\n        this.priorityForm.patchValue({\n          priority: priorityToShow\n        });\n      }\n      this.displayCancelScreen = false;\n      this.priorityForm.reset();\n      this.enableAutoApprove = false;\n      this.saveAllSlaData();\n    }\n    cancelPriority() {\n      this.displayCancelScreen = false;\n    }\n    clickBack() {\n      const prevUrl = this.authSrv.getPreviousUrl();\n      this.authSrv.setPreviousUrl(\"\");\n      this.router.navigate([prevUrl]);\n    }\n    setResponseNull(priority) {\n      const data = {\n        slaRequestParametersId: this.slaRequestParametersId,\n        slaResponseParametersId: null,\n        priority: priority,\n        timeToResponseDays: 1,\n        timeToResponseHours: 0,\n        timeToCompleteDays: 2,\n        timeToCompleteHours: 0,\n        completeType: null,\n        respondType: null,\n        workingDays: \"0,1,1,1,1,1,0\",\n        dayStartTime: \"09:00:00\",\n        dayEndTime: \"18:00:00\",\n        canWorkOnHoliday: 0,\n        isDefault: priority === 'Routine Work' ? this.idForIsDefaultYes : this.idForIsDefaultNo,\n        autoIssue: this.idForAutoIssueNo,\n        autoApproval: this.idForAutoApprovalYes,\n        notifyRequestor: this.idForNotifyRequestorNo\n      };\n      setTimeout(() => {\n        this.frmSLATab.patchValue({\n          slaResponsePanel: data\n        });\n      }, 0);\n    }\n    onChangePriority(term) {\n      this.filteredPriorities = this.enumPriority.filter(rec => rec.toLowerCase().includes(term.query.toLowerCase()));\n      this.filteredPriorities = this.filteredPriorities.filter((value, index, self) => {\n        return self.indexOf(value) === index;\n      });\n    }\n    getAllResponseParams() {\n      this.service.getAllSLAResponses().subscribe(res => {\n        this.enumPriority = res.map(t => {\n          return t.priority;\n        });\n      });\n    }\n    checkPriorityExists(event) {\n      this.priorityExistErrror = '';\n      console.log(event.target.value);\n      let isPriorityExists = this.slaResponseParameters.filter(rec => {\n        if (rec.priority.toLocaleUpperCase() === event.target.value.toLocaleUpperCase()) {\n          return rec;\n        }\n      });\n      if (isPriorityExists.length > 0) {\n        this.priorityExistErrror = \"Priority already exists.\";\n      }\n    }\n    onEditPriorityName(event) {\n      this.priorityHeading = \"Edit Priority\";\n      this.displayCancelScreen = true;\n      this.priorityExistErrror = '';\n      this.editPriority = true;\n      this.priorityForm.patchValue({\n        priority: this.slaResponseParameters[this.activeTabIndex]['priority']\n      });\n    }\n    saveAllSlaData() {\n      if (this.frmSLATab.controls.slaRequestPanel.valid) {\n        this.saveSlaRequest();\n      }\n    }\n    onClickWarningTeamOrTechnician() {\n      this.technicianTeamWarning = false;\n    }\n    onChangeAutoApprove(event) {\n      const updatedSlaResponseForAutoApproval = {\n        ...this.slaResponseParameters[this.activeTabIndex],\n        autoApproval: event.checked ? this.getAutoApproval('Yes') : this.getAutoApproval('No'),\n        autoIssue: this.frmSLATab.controls.slaResponsePanel.value.autoIssue === true ? this.getAutoIssueId('Yes') : this.getAutoIssueId('No')\n      };\n      this.wrStatusCardspanel.slaResponseParameters = updatedSlaResponseForAutoApproval;\n      this.wrStatusCardspanel.loadStepsBySlaResponseParamId(updatedSlaResponseForAutoApproval);\n    }\n    onChangeAutoIssue(event) {\n      const updatedSlaResponseForAutoIssue = {\n        ...this.slaResponseParameters[this.activeTabIndex],\n        autoIssue: event.checked ? this.getAutoIssueId('Yes') : this.getAutoIssueId('No'),\n        autoApproval: this.frmSLATab.controls.slaResponsePanel.value.autoApproval === true ? this.getAutoApproval('Yes') : this.getAutoApproval('No')\n      };\n      this.wrStatusCardspanel.slaResponseParameters = updatedSlaResponseForAutoIssue;\n      this.wrStatusCardspanel.loadStepsBySlaResponseParamId(updatedSlaResponseForAutoIssue);\n    }\n    onClickApprovalWaring() {\n      this.approvalStepWarning = false;\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    static #_ = this.ɵfac = function AddEditSlaComponent_Factory(t) {\n      return new (t || AddEditSlaComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.SLARequestServices), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.DatePipe), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.ActivatedRoute), i0.ɵɵdirectiveInject(i6.Router), i0.ɵɵdirectiveInject(i7.EnumService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i8.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditSlaComponent,\n      selectors: [[\"app-add-edit-sla\"]],\n      viewQuery: function AddEditSlaComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(WrStatusCardsComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabview = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrStatusCardspanel = _t.first);\n        }\n      },\n      outputs: {\n        notifyAutoApprove: \"notifyAutoApprove\",\n        notifyAutoIssue: \"notifyAutoIssue\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 27,\n      vars: 36,\n      consts: [[\"class\", \"card\", \"style\", \"height: 92vh !important;\", 4, \"ngIf\"], [3, \"header\", \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [1, \"p-fluid\"], [\"appendTo\", \"body\", \"emptyMessage\", \"Add new Category\", \"placeholder\", \"Type to Search\", \"formControlName\", \"priority\", 3, \"ngModel\", \"forceSelection\", \"suggestions\", \"minLength\", \"maxlength\", \"ngModelChange\", \"completeMethod\", \"onBlur\"], [4, \"ngIf\"], [\"pTemplate\", \"caption\"], [\"header\", \"Warning\", \"id\", \"custom-content\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"closable\", \"visibleChange\"], [2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\", \"padding\", \"10px\"], [2, \"font-size\", \"14px\", \"font-weight\", \"400\", \"padding-top\", \"12px\"], [\"pTemplate\", \"footer\", \"style\", \"padding-bottom: 10px; padding-right: 10px;\"], [2, \"font-size\", \"14px\", \"font-weight\", \"400\", \"padding\", \"0px\"], [\"key\", \"autoIssueApproveWarining\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"key\", \"SLArequest\", \"position\", \"top-right\"], [\"key\", \"SLAresponse\", \"position\", \"top-right\"], [1, \"card\", 2, \"height\", \"92vh !important\"], [1, \"row\"], [1, \"col-sm-3\", \"col-md-3\", \"col-xm-3\", \"col-lg-3\", 2, \"padding-right\", \"0px\", 3, \"ngClass\"], [\"header\", \"SLA Request\", \"id\", \"header\"], [\"pTemplate\", \"body\"], [1, \"col-sm-9\", \"col-md-9\", \"col-xm-9\", \"col-lg-9\", 2, \"padding-left\", \"0px\"], [\"header\", \"SLA Response\"], [\"pTemplate\", \"icons\"], [\"pButton\", \"\", 1, \"pull-right\", 2, \"margin-left\", \"10px\", \"z-index\", \"999\", 3, \"disabled\", \"click\"], [1, \"tab-container\", 3, \"activeIndex\", \"onChange\", \"activeIndexChange\", \"dblclick\"], [\"tabview\", \"\"], [\"class\", \"tab-item\", 3, \"header\", \"selected\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", 3, \"ngClass\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-6\", \"col-lg-6\"], [1, \"mat-typography\", \"mat-dialog-content-ext\"], [\"formControlName\", \"slaResponsePanel\", 3, \"isNew\", \"enableAutoApprove\", \"notifyAutoApprove\", \"notifyAutoIssue\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-6\", \"col-lg-6\", 3, \"ngClass\"], [\"header\", \"SLA Steps\"], [\"id\", \"wrStatusCard\", 2, \"height\", \"450px\", \"overflow\", \"auto\"], [\"formControlName\", \"slaRequestPanel\", 3, \"isNew\"], [\"label\", \"Back\", \"icon\", \"pi pi-arrow-circle-left\", \"styleClass\", \"p-button-secondary\", 1, \"mr10\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Save\", 1, \"pull-right\", 3, \"disabled\", \"click\"], [1, \"tab-item\", 3, \"header\", \"selected\"], [\"data\", \"\"], [3, \"ngClass\"], [\"id\", \"wrStatusCard\", 2, \"height\", \"300px\", \"overflow\", \"auto\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [1, \"d-flex\", \"flex-row\"], [2, \"display\", \"flex\", \"padding-left\", \"6px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 1, \"p-button-primary\", \"p-button-sm\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Cancel\", 1, \"p-button-primary\", \"p-button-sm\", 2, \"margin-left\", \"8px\", 3, \"click\"], [2, \"display\", \"flex\", \"justify-content\", \"center\", \"align-items\", \"center\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Ok\", 1, \"pull-right\", \"p-button-primary\", \"p-button-sm\", \"custom-btn\", 2, \"width\", \"34%\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Ok\", 1, \"pull-right\", \"p-button-primary\", \"p-button-sm\", 2, \"width\", \"34%\", 3, \"click\"]],\n      template: function AddEditSlaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AddEditSlaComponent_div_0_Template, 22, 15, \"div\", 0);\n          i0.ɵɵtemplate(1, AddEditSlaComponent_div_1_Template, 24, 15, \"div\", 0);\n          i0.ɵɵelementStart(2, \"p-dialog\", 1);\n          i0.ɵɵlistener(\"visibleChange\", function AddEditSlaComponent_Template_p_dialog_visibleChange_2_listener($event) {\n            return ctx.displayCancelScreen = $event;\n          });\n          i0.ɵɵelementStart(3, \"form\", 2)(4, \"table\", 3)(5, \"tr\")(6, \"td\", 4)(7, \"div\", 5)(8, \"label\", 6);\n          i0.ɵɵtext(9, \"Priority\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"span\", 7)(11, \"p-autoComplete\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function AddEditSlaComponent_Template_p_autoComplete_ngModelChange_11_listener($event) {\n            return ctx.selectedPriority = $event;\n          })(\"completeMethod\", function AddEditSlaComponent_Template_p_autoComplete_completeMethod_11_listener($event) {\n            return ctx.onChangePriority($event);\n          })(\"onBlur\", function AddEditSlaComponent_Template_p_autoComplete_onBlur_11_listener($event) {\n            return ctx.checkPriorityExists($event);\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(12, AddEditSlaComponent_tr_12_Template, 4, 1, \"tr\", 9);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(13, AddEditSlaComponent_ng_template_13_Template, 4, 1, \"ng-template\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"p-dialog\", 11);\n          i0.ɵɵlistener(\"visibleChange\", function AddEditSlaComponent_Template_p_dialog_visibleChange_14_listener($event) {\n            return ctx.technicianTeamWarning = $event;\n          });\n          i0.ɵɵelementStart(15, \"div\", 12)(16, \"p\", 13);\n          i0.ɵɵtext(17, \" Please select Team or Technician \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(18, AddEditSlaComponent_ng_template_18_Template, 2, 0, \"ng-template\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"p-dialog\", 11);\n          i0.ɵɵlistener(\"visibleChange\", function AddEditSlaComponent_Template_p_dialog_visibleChange_19_listener($event) {\n            return ctx.approvalStepWarning = $event;\n          });\n          i0.ɵɵelementStart(20, \"div\", 12)(21, \"p\", 15);\n          i0.ɵɵtext(22, \" Please add an approval step to continue \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(23, AddEditSlaComponent_ng_template_23_Template, 2, 0, \"ng-template\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"p-confirmDialog\", 16)(25, \"p-toast\", 17)(26, \"p-toast\", 18);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(33, _c3));\n          i0.ɵɵproperty(\"header\", ctx.priorityHeading)(\"visible\", ctx.displayCancelScreen)(\"modal\", true)(\"maximizable\", false)(\"draggable\", false)(\"resizable\", false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.priorityForm);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedPriority)(\"forceSelection\", false)(\"suggestions\", ctx.filteredPriorities)(\"minLength\", 1)(\"maxlength\", 16);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.priorityExistErrror.length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(34, _c4));\n          i0.ɵɵproperty(\"visible\", ctx.technicianTeamWarning)(\"modal\", true)(\"maximizable\", false)(\"draggable\", false)(\"resizable\", false)(\"closable\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(35, _c4));\n          i0.ɵɵproperty(\"visible\", ctx.approvalStepWarning)(\"modal\", true)(\"maximizable\", false)(\"draggable\", false)(\"resizable\", false)(\"closable\", false);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i9.MatDialogContent, i3.PrimeTemplate, i10.ButtonDirective, i10.Button, i11.Dialog, i12.Toast, i13.Panel, i14.ConfirmDialog, i15.TabView, i15.TabPanel, i16.AddSlaRequestComponent, i17.AddSlaResponseComponent, i18.AutoComplete, i19.WrStatusCardsComponent],\n      styles: [\".mat-dialog-title-ext[_ngcontent-%COMP%]{background-color:#879cc9;padding-left:10px;font-weight:400;margin-bottom:0}.mat-dialog-content-ext[_ngcontent-%COMP%]{margin:0;padding:10px}.mat-dialog-actions-ext[_ngcontent-%COMP%]{border-top:none;padding:3px;min-height:36px!important;margin-bottom:5px;margin-right:15px}.action-buttons[_ngcontent-%COMP%]{height:30px;width:70px}.margin-left-20[_ngcontent-%COMP%]{margin-left:20px}.margin-5[_ngcontent-%COMP%]{margin:5px!important}.mat-card[_ngcontent-%COMP%]{border-radius:0}.mat-expansion-panel[_ngcontent-%COMP%]{background-color:#879cc9}.mat-expansion-panel-header-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px}.mat-card-title[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;font-size:13px;margin:0!important}.mat-card-header-text[_ngcontent-%COMP%]{margin:0!important}.mat-card-header[_ngcontent-%COMP%]{padding:5px!important;margin-left:-15px}.mat-card-content[_ngcontent-%COMP%], .mat-expansion-panel-content[_ngcontent-%COMP%]{background-color:#fff!important}.mat-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%]{line-height:inherit!important}.btn-filter[_ngcontent-%COMP%]{margin-left:4px;margin-right:5px;width:50px;margin-top:17px}.btn-ggb-orange[_ngcontent-%COMP%]{width:90px!important}.btn-ggb-default-custom[_ngcontent-%COMP%]{margin:16px!important}.readonly-panel[_ngcontent-%COMP%]{opacity:.5;pointer-events:none}[_nghost-%COMP%]     .p-dialog .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header .p-dialog-content{align-items:center;background-color:#f9fcfc;display:flex;padding:10px}[_nghost-%COMP%]     .p-confirm-dialog .p-dialog-header{align-items:center;background-color:#f9fcfc}.save-btn[_ngcontent-%COMP%]{margin-top:10px}.hide-btn[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]     #header .p-panel-title{padding-top:9px!important;padding-bottom:9px!important}[_nghost-%COMP%]     #header .p-panel .p-panel-content{border:none}[_nghost-%COMP%]     #custom-btn .p-dialog .p-dialog-footer button{margin:0;width:35%}  #custom-content .p-dialog .p-dialog-content{padding:0}\"]\n    });\n  }\n  return AddEditSlaComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}