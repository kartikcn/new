{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../team/services/team.service\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"primeng/table\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/toast\";\nimport * as i7 from \"primeng/confirmdialog\";\nimport * as i8 from \"@angular/material/tooltip\";\nfunction AssignTeamsComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"div\", 10)(2, \"h4\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\")(5, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function AssignTeamsComponent_ng_template_3_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onAssign());\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Available Teams For \", ctx_r1.selectedPerson, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !(ctx_r1.selectedScreens.length > 0));\n  }\n}\nfunction AssignTeamsComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 12);\n    i0.ɵɵelement(2, \"p-tableHeaderCheckbox\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\", 13)(4, \"div\", 14)(5, \"div\", 15)(6, \"p\", 16);\n    i0.ɵɵtext(7, \"Team Code\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 17);\n    i0.ɵɵelement(9, \"p-sortIcon\", 18)(10, \"p-columnFilter\", 19);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 20)(12, \"div\", 14)(13, \"div\", 15)(14, \"p\", 16);\n    i0.ɵɵtext(15, \"Team Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 17);\n    i0.ɵɵelement(17, \"p-sortIcon\", 21)(18, \"p-columnFilter\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(19, \"th\", 23)(20, \"div\", 14)(21, \"div\", 15)(22, \"p\", 16);\n    i0.ɵɵtext(23, \"Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 17);\n    i0.ɵɵelement(25, \"p-sortIcon\", 24)(26, \"p-columnFilter\", 25);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction AssignTeamsComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 26)(1, \"td\", 12);\n    i0.ɵɵelement(2, \"p-tableCheckbox\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 28);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const team_r7 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", team_r7);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", team_r7);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(team_r7.teamCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.getEnumValueById(team_r7.teamType));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", team_r7.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", team_r7.description, \"\");\n  }\n}\nfunction AssignTeamsComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let AssignTeamsComponent = /*#__PURE__*/(() => {\n  class AssignTeamsComponent {\n    constructor(teamService, messageService, enumsrv) {\n      this.teamService = teamService;\n      this.messageService = messageService;\n      this.enumsrv = enumsrv;\n      this.assignSgPanels = new EventEmitter();\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.teamsData = [];\n      this.selectedScreens = [];\n      this.enumTeamType = [];\n      this.enumClonedList = [];\n      this.selectedPerson = '';\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    loadEnums() {\n      this.enumClonedList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumClonedList = res.map(x => Object.assign({}, x));\n        this.enumTeamType = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'team'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'team_type'.toLocaleUpperCase());\n      });\n    }\n    getEnumValueById(id) {\n      return id ? this.enumTeamType.find(t => t.enumKey == id)?.enumValue : '';\n    }\n    loadRecords(data) {\n      this.teamsData = [];\n      this.selectedScreens = [];\n      this.cfId = data.cfId;\n      this.emId = data.emId;\n      this.teamService.getUnAssignedTeams(data).subscribe(res => {\n        this.teamsData = res;\n      });\n    }\n    onAssign() {\n      let selectedTeamsList = [];\n      this.selectedScreens.map(team => {\n        const data = {\n          workTeamId: 0,\n          teamId: team.teamId,\n          cfId: this.cfId,\n          emId: this.emId\n        };\n        selectedTeamsList.push(data);\n      });\n      this.teamService.saveWorkTeams(selectedTeamsList).subscribe(res => {\n        this.messageService.clear();\n        if (res.code === 200) {\n          this.messageService.add({\n            key: 'UsgGrid',\n            severity: 'success',\n            summary: 'Record(s) Assigned successfully',\n            detail: 'Record(s) Assigned successfully'\n          });\n          this.refreshPanel();\n        }\n      });\n    }\n    refreshPanel() {\n      this.assignSgPanels.emit(true);\n    }\n    static #_ = this.ɵfac = function AssignTeamsComponent_Factory(t) {\n      return new (t || AssignTeamsComponent)(i0.ɵɵdirectiveInject(i1.TeamService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i3.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AssignTeamsComponent,\n      selectors: [[\"app-assign-teams\"]],\n      outputs: {\n        assignSgPanels: \"assignSgPanels\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 9,\n      vars: 9,\n      consts: [[1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"dataKey\", \"teamId\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"400px\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"selection\", \"rowsPerPageOptions\", \"rowHover\", \"scrollable\", \"selectionChange\"], [\"dt1\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"UsgGrid\", \"position\", \"top-right\"], [\"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [1, \"d-flex\", \"flex-row\"], [2, \"flex\", \"auto\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Assign\", \"icon\", \"pi pi-plus\", 1, \"p-button-primary\", \"p-button-sm\", \"p-mr-2\", 3, \"disabled\", \"click\"], [2, \"width\", \"4rem\"], [\"pSortableColumn\", \"teamCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"teamCode\"], [\"type\", \"text\", \"field\", \"teamCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"teamType\"], [\"field\", \"teamType\"], [\"type\", \"text\", \"field\", \"teamType\", \"display\", \"menu\"], [\"pSortableColumn\", \"description\"], [\"field\", \"description\"], [\"type\", \"text\", \"field\", \"description\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [3, \"value\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function AssignTeamsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-table\", 1, 2);\n          i0.ɵɵlistener(\"selectionChange\", function AssignTeamsComponent_Template_p_table_selectionChange_1_listener($event) {\n            return ctx.selectedScreens = $event;\n          });\n          i0.ɵɵtemplate(3, AssignTeamsComponent_ng_template_3_Template, 6, 2, \"ng-template\", 3);\n          i0.ɵɵtemplate(4, AssignTeamsComponent_ng_template_4_Template, 27, 0, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, AssignTeamsComponent_ng_template_5_Template, 9, 6, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, AssignTeamsComponent_ng_template_6_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(7, \"p-toast\", 7)(8, \"p-confirmDialog\", 8);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"value\", ctx.teamsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"selection\", ctx.selectedScreens)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c0))(\"rowHover\", false)(\"scrollable\", true);\n        }\n      },\n      dependencies: [i2.PrimeTemplate, i4.Table, i4.SortableColumn, i4.SelectableRow, i4.SortIcon, i4.TableCheckbox, i4.TableHeaderCheckbox, i4.ColumnFilter, i5.ButtonDirective, i6.Toast, i7.ConfirmDialog, i8.MatTooltip],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\"]\n    });\n  }\n  return AssignTeamsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}