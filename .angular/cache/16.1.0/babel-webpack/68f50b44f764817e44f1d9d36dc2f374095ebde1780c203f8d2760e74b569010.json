{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"../../services/connector.services\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"../../../../../directive/numbers-only.directive\";\nexport let AddConnectorComponent = /*#__PURE__*/(() => {\n  class AddConnectorComponent {\n    constructor(formBuilder, enumsrv, connectorService) {\n      this.formBuilder = formBuilder;\n      this.enumsrv = enumsrv;\n      this.connectorService = connectorService;\n      this.subscriptions = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumType = [];\n      this.enumFormat = [];\n      this.enumSeperator = [];\n      this.tablesList = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.connectorFormPanel = this.formBuilder.group({\n        connectorId: [null],\n        connectorName: [null, [Validators.required]],\n        tableName: [null, [Validators.required]],\n        connectorType: [null, [Validators.required]],\n        fileFormat: [null, [Validators.required]],\n        seperator: [null, [Validators.required]],\n        rowsToSkip: [null, [Validators.required]],\n        connectionPath: [''],\n        preProcess: [null],\n        postProcess: []\n      });\n      this.subscriptions.push(this.connectorFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadTables();\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'conncetor'.toLocaleUpperCase());\n        this.enumType = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'connector_type'.toLocaleUpperCase());\n        this.enumType.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumFormat = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'file_format'.toLocaleUpperCase());\n        this.enumFormat.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumSeperator = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'seperator'.toLocaleUpperCase());\n        this.enumSeperator.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      }, error => {});\n    }\n    loadTables() {\n      this.connectorService.getAllTabes().subscribe(res => {\n        this.tablesList = res;\n      });\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    get value() {\n      const eqDetails = {\n        connectorId: this.connectorFormPanel.controls.connectorId.value,\n        connectorName: this.connectorFormPanel.controls.connectorName.value,\n        tableName: this.connectorFormPanel.controls.tableName.value,\n        connectorType: this.connectorFormPanel.controls.connectorType.value,\n        fileFormat: this.connectorFormPanel.controls.fileFormat.value,\n        seperator: this.connectorFormPanel.controls.seperator.value,\n        rowsToSkip: this.connectorFormPanel.controls.rowsToSkip.value,\n        connectionPath: this.connectorFormPanel.controls.connectionPath.value,\n        preProcess: this.connectorFormPanel.controls.preProcess.value,\n        postProcess: this.connectorFormPanel.controls.postProcess.value\n      };\n      return eqDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.connectorFormPanel.patchValue({\n          connectorId: value.connectorId,\n          connectorName: value.connectorName,\n          tableName: value.tableName,\n          connectorType: value.connectorType,\n          fileFormat: value.fileFormat,\n          seperator: value.seperator,\n          rowsToSkip: value.rowsToSkip,\n          connectionPath: value.connectionPath,\n          preProcess: value.preProcess,\n          postProcess: value.postProcess\n        });\n      });\n      this.onChangeFormat(value.fileFormat);\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.connectorFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.connectorFormPanel.valid ? null : {\n        connectorFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    onChangeFormat(enumValue) {\n      if (enumValue == \"Excel\") {\n        this.connectorFormPanel.controls.seperator.setValue(\"None\");\n        this.connectorFormPanel.controls.seperator.disable();\n      } else {\n        this.connectorFormPanel.controls.seperator.enable();\n      }\n    }\n    static #_ = this.ɵfac = function AddConnectorComponent_Factory(t) {\n      return new (t || AddConnectorComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.ConnectorService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddConnectorComponent,\n      selectors: [[\"app-add-connector\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddConnectorComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddConnectorComponent),\n        multi: true\n      }])],\n      decls: 53,\n      vars: 13,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"connectorName\", \"formControlName\", \"connectorName\", \"maxlength\", \"128\", 1, \"form-control\"], [2, \"width\", \"50%\"], [\"appendTo\", \"body\", \"formControlName\", \"tableName\", \"bindLabel\", \"tableName\", \"bindValue\", \"tableName\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"connectorType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"fileFormat\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"seperator\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"rowsToSkip\", \"formControlName\", \"rowsToSkip\", \"maxlength\", \"64\", 1, \"form-control\"], [\"colspan\", \"2\"], [\"type\", \"text\", \"name\", \"connectionPath\", \"formControlName\", \"connectionPath\", \"maxlength\", \"1024\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"preProcess\", \"formControlName\", \"preProcess\", \"maxlength\", \"512\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"postProcess\", \"formControlName\", \"postProcess\", \"maxlength\", \"512\", 1, \"form-control\"]],\n      template: function AddConnectorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Connector Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"td\", 6)(9, \"div\", 3)(10, \"label\", 4);\n          i0.ɵɵtext(11, \"Table Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"ng-select\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 6)(15, \"div\", 3)(16, \"label\", 4);\n          i0.ɵɵtext(17, \"Connector Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"ng-select\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"td\", 6)(20, \"div\", 3)(21, \"label\", 4);\n          i0.ɵɵtext(22, \"File Format\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"ng-select\", 9);\n          i0.ɵɵlistener(\"change\", function AddConnectorComponent_Template_ng_select_change_23_listener($event) {\n            return ctx.onChangeFormat($event.enumValue);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(24, \"tr\")(25, \"td\", 6)(26, \"div\", 3)(27, \"label\", 4);\n          i0.ɵɵtext(28, \"Seperator\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(29, \"ng-select\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(30, \"td\", 2)(31, \"div\", 3)(32, \"label\", 4);\n          i0.ɵɵtext(33, \"Rows to Skip\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(34, \"input\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(35, \"tr\")(36, \"td\", 12)(37, \"div\", 3)(38, \"label\", 4);\n          i0.ɵɵtext(39, \"Connection Path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(40, \"input\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(41, \"tr\")(42, \"td\", 12)(43, \"div\", 3)(44, \"label\", 14);\n          i0.ɵɵtext(45, \"Pre process\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(46, \"input\", 15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(47, \"tr\")(48, \"td\", 12)(49, \"div\", 3)(50, \"label\", 14);\n          i0.ɵɵtext(51, \"Post process\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(52, \"input\", 16);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.connectorFormPanel);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.tablesList)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumType)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFormat)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumSeperator)(\"searchable\", true);\n        }\n      },\n      dependencies: [i4.NgSelectComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i5.NumbersOnlyDirective]\n    });\n  }\n  return AddConnectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}