{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../service/inventory.service\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/button\";\nimport * as i6 from \"primeng/dialog\";\nimport * as i7 from \"primeng/dropdown\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"../../../../../directive/numbers-only.directive\";\nimport * as i10 from \"../../../../../directive/directive/trim-input.directive\";\nconst _c0 = function () {\n  return {\n    \"margin-left\": \".5em\"\n  };\n};\nfunction AddEditItemComponent_ng_template_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function AddEditItemComponent_ng_template_33_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"p-button\", 17);\n    i0.ɵɵlistener(\"click\", function AddEditItemComponent_ng_template_33_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.formItem.invalid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(3, _c0));\n  }\n}\nconst _c1 = function () {\n  return {\n    minHeight: \"35vh\",\n    width: \"40vw\"\n  };\n};\nconst _c2 = function () {\n  return {\n    \"1199px\": \"40vw\",\n    \"767px\": \"50vw\",\n    \"575px\": \"70vw\"\n  };\n};\nexport let AddEditItemComponent = /*#__PURE__*/(() => {\n  class AddEditItemComponent {\n    constructor(fb, inventorySrv, enumSrv, messageService) {\n      this.fb = fb;\n      this.inventorySrv = inventorySrv;\n      this.enumSrv = enumSrv;\n      this.messageService = messageService;\n      this.parentFun = new EventEmitter();\n      this.showDialogue = true;\n      this.subscriptions = [];\n      this.unitEnums = [];\n      this.title = 'Add';\n      this.isNew = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.formItem = fb.group({\n        itemId: [0],\n        name: [null, Validators.required],\n        stock: [0, Validators.required],\n        unit: ['Nos', Validators.required],\n        minStockReq: [0, Validators.required],\n        rate: [0, Validators.required]\n      });\n      this.subscriptions.push(this.formItem.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.isNew = this.itemData.isNew;\n      this.loadItemById(this.itemData.itemId);\n      this.loadEnums();\n      if (!this.isNew) this.title = 'Edit';\n    }\n    loadItemById(id) {\n      if (id != 0) {\n        this.inventorySrv.getItemByItemId(id).subscribe(res => {\n          if (res && !res.code) {\n            this.formItem.patchValue({\n              itemId: res.itemId,\n              name: res.name,\n              minStockReq: res.minStockReq,\n              rate: res.rate,\n              stock: res.stock,\n              unit: res.unit\n            });\n          }\n        });\n      }\n    }\n    loadEnums() {\n      this.enumSrv.getEnums().subscribe(res => {\n        if (res) {\n          this.unitEnums = res.filter(t => t.tableName.toLocaleUpperCase() === 'item'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'unit'.toLocaleUpperCase());\n        }\n      });\n    }\n    get value() {\n      const item = {\n        itemId: this.formItem.controls.itemId.value,\n        name: this.formItem.controls.name.value,\n        minStockReq: this.formItem.controls.minStockReq.value,\n        rate: this.formItem.controls.rate.value,\n        stock: this.formItem.controls.stock.value,\n        unit: this.formItem.controls.unit.value\n      };\n      return item;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.formItem.patchValue({\n          itemId: value.itemId,\n          name: value.name,\n          minStockReq: value.minStockReq,\n          rate: value.rate,\n          stock: value.stock,\n          unit: value.unit\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    saveRecords() {\n      this.messageService.clear();\n      if (this.formItem.valid) {\n        let item = {\n          name: this.formItem.controls.name.value,\n          minStockReq: this.formItem.controls.minStockReq.value,\n          rate: this.formItem.controls.rate.value,\n          stock: this.formItem.controls.stock.value,\n          unit: this.formItem.controls.unit.value\n        };\n        if (!this.isNew) {\n          item.itemId = this.formItem.controls.itemId.value;\n        }\n        this.inventorySrv.saveItem(item).subscribe(res => {\n          if (res.code == 200) {\n            this.parentFun.emit(res);\n            this.formItem.reset();\n          } else {\n            this.messageService.add({\n              key: 'save',\n              severity: 'error',\n              summary: 'error',\n              detail: res.text\n            });\n          }\n        });\n      }\n    }\n    onCancel() {\n      this.parentFun.emit('true');\n      this.formItem.reset();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.formItem.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddEditItemComponent_Factory(t) {\n      return new (t || AddEditItemComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.InventoryService), i0.ɵɵdirectiveInject(i3.EnumService), i0.ɵɵdirectiveInject(i4.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditItemComponent,\n      selectors: [[\"app-add-edit-item\"]],\n      inputs: {\n        itemData: \"itemData\"\n      },\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 35,\n      vars: 13,\n      consts: [[1, \"card\", \"flex\", \"justify-content-center\"], [\"header\", \"\", 3, \"visible\", \"modal\", \"maximizable\", \"breakpoints\", \"visibleChange\", \"onHide\"], [1, \"container-fluid\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-12\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"name\", \"formControlName\", \"name\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"col-sm-12\", \"col-md-6\", \"col-xl-6\"], [\"type\", \"number\", \"name\", \"stock\", \"formControlName\", \"stock\", \"appTrimInput\", \"\", \"NumbersOnly\", \"\", 1, \"form-control\", 3, \"allowDecimals\"], [\"appendTo\", \"body\", \"formControlName\", \"unit\", \"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", 3, \"options\"], [\"type\", \"number\", \"name\", \"minStockReq\", \"formControlName\", \"minStockReq\", \"appTrimInput\", \"\", \"NumbersOnly\", \"\", 1, \"form-control\", 3, \"allowDecimals\"], [\"type\", \"number\", \"name\", \"rate\", \"formControlName\", \"rate\", \"NumbersOnly\", \"\", 1, \"form-control\"], [\"pTemplate\", \"footer\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Save\", \"icon\", \"pi pi-check\", 3, \"disabled\", \"click\"], [\"label\", \"Cancel\", \"icon\", \"pi pi-times\", \"styleClass\", \"p-button-secondary\", 3, \"click\"]],\n      template: function AddEditItemComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-dialog\", 1);\n          i0.ɵɵlistener(\"visibleChange\", function AddEditItemComponent_Template_p_dialog_visibleChange_1_listener($event) {\n            return ctx.showDialogue = $event;\n          })(\"onHide\", function AddEditItemComponent_Template_p_dialog_onHide_1_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵelementStart(2, \"p-header\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"form\", 3)(6, \"div\", 4)(7, \"div\", 5)(8, \"div\", 6)(9, \"label\", 7);\n          i0.ɵɵtext(10, \"Item Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 6)(14, \"label\", 7);\n          i0.ɵɵtext(15, \"Stock\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 9)(18, \"div\", 6)(19, \"label\", 7);\n          i0.ɵɵtext(20, \"Unit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\");\n          i0.ɵɵelement(22, \"p-dropdown\", 11);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(23, \"div\", 9)(24, \"div\", 6)(25, \"label\", 7);\n          i0.ɵɵtext(26, \"Minimum Stock Required\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 9)(29, \"div\", 6)(30, \"label\", 7);\n          i0.ɵɵtext(31, \"Cost Per Unit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(32, \"input\", 13);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(33, AddEditItemComponent_ng_template_33_Template, 2, 4, \"ng-template\", 14);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(34, \"p-toast\", 15);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(11, _c1));\n          i0.ɵɵproperty(\"visible\", ctx.showDialogue)(\"modal\", true)(\"maximizable\", true)(\"breakpoints\", i0.ɵɵpureFunction0(12, _c2));\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.title, \" Inventory Item \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.formItem);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"allowDecimals\", false);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"options\", ctx.unitEnums);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"allowDecimals\", false);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.Header, i4.PrimeTemplate, i5.ButtonDirective, i5.Button, i6.Dialog, i7.Dropdown, i8.Toast, i9.NumbersOnlyDirective, i10.TrimInputDirective],\n      styles: [\".form-field-lable[_ngcontent-%COMP%]{font-size:11px;margin-bottom:0;font-weight:500}.form-control[_ngcontent-%COMP%]{margin-top:-3px;padding-left:5px}[_ngcontent-%COMP%]::placeholder{color:#555;opacity:1}[_ngcontent-%COMP%]:-ms-input-placeholder{color:#555}[_ngcontent-%COMP%]::-ms-input-placeholder{color:#555}.blue-border[_ngcontent-%COMP%]{border-color:#879cc9!important;height:24px!important;margin-top:2px!important}[_nghost-%COMP%]  p-dropdown .p-dropdown{height:24px;align-items:center;justify-content:center}p-dropdown[_ngcontent-%COMP%]{display:grid;width:100%}[_nghost-%COMP%]     .p-dialog .p-dialog-header{background-color:#879cc9;color:#000;padding-left:10px;font-weight:400;margin-bottom:0;height:10px!important}[_nghost-%COMP%]  .p-dropdown-items-wrapper{max-height:20vh!important}\"]\n    });\n  }\n  return AddEditItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}