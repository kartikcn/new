{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/data.service\";\nexport class ConnectorService {\n  constructor(connectorService) {\n    this.connectorService = connectorService;\n  }\n  getAllTabes() {\n    return this.connectorService.getAll('connector', 'getAllTables');\n  }\n  getAllColumns() {\n    return this.connectorService.getAll('connector', 'getAllColumns');\n  }\n  getAllConnectors() {\n    return this.connectorService.getAll('connector', 'getAll');\n  }\n  getConnectorById(id) {\n    return this.connectorService.getSingleById(\"connector\", \"getById\", id);\n  }\n  saveConnector(data) {\n    return this.connectorService.add(\"connector\", \"save\", data);\n  }\n  getAllByConnectorId(connectorId) {\n    return this.connectorService.getAllById(\"connectorFlds\", \"getByConnectorId\", connectorId);\n  }\n  getConnectorFldsById(id) {\n    return this.connectorService.getSingleById(\"connectorFlds\", \"getById\", id);\n  }\n  saveConnectorFlds(data) {\n    return this.connectorService.add(\"connectorFlds\", \"save\", data);\n  }\n  getAllLogsByConnectorId(connectorId) {\n    return this.connectorService.getAllById(\"connectorLog\", \"getByConnectorId\", connectorId);\n  }\n  execute(data) {\n    return this.connectorService.add(\"connector\", \"execute\", data);\n  }\n  static #_ = this.ɵfac = function ConnectorService_Factory(t) {\n    return new (t || ConnectorService)(i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectorService,\n    factory: ConnectorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ConnectorService","constructor","connectorService","getAllTabes","getAll","getAllColumns","getAllConnectors","getConnectorById","id","getSingleById","saveConnector","data","add","getAllByConnectorId","connectorId","getAllById","getConnectorFldsById","saveConnectorFlds","getAllLogsByConnectorId","execute","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\connectors\\connector\\services\\connector.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataService } from 'src/app/services/data.service';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectorService {\n\n  constructor(\n    private connectorService: DataService<any>,\n\n  ) { }\n\n\n  public getAllTabes() {\n    return this.connectorService.getAll('connector', 'getAllTables');\n  }\n\n  public getAllColumns() {\n    return this.connectorService.getAll('connector', 'getAllColumns');\n  }\n\n  public getAllConnectors() {\n    return this.connectorService.getAll('connector', 'getAll');\n  }\n\n  public getConnectorById(id: any) {\n    return this.connectorService.getSingleById(\"connector\", \"getById\", id);\n  }\n\n  public saveConnector(data:any) {\n    return this.connectorService.add(\"connector\",\"save\",data);\n  }\n\n  public getAllByConnectorId(connectorId:any) {\n    return this.connectorService.getAllById(\"connectorFlds\",\"getByConnectorId\",connectorId);\n  }\n\n  public getConnectorFldsById(id:any) {\n    return this.connectorService.getSingleById(\"connectorFlds\",\"getById\",id);\n  }\n\n  public saveConnectorFlds(data:any) {\n    return this.connectorService.add(\"connectorFlds\",\"save\",data);\n  }\n\n  public getAllLogsByConnectorId(connectorId:any) {\n    return this.connectorService.getAllById(\"connectorLog\",\"getByConnectorId\",connectorId);\n  }\n\n  public execute(data:any) {\n    return this.connectorService.add(\"connector\",\"execute\",data);\n  }\n\n\n}\n"],"mappings":";;AASA,OAAM,MAAOA,gBAAgB;EAE3BC,YACUC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;EAEtB;EAGGC,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACD,gBAAgB,CAACE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC;EAClE;EAEOC,aAAaA,CAAA;IAClB,OAAO,IAAI,CAACH,gBAAgB,CAACE,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC;EACnE;EAEOE,gBAAgBA,CAAA;IACrB,OAAO,IAAI,CAACJ,gBAAgB,CAACE,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC;EAC5D;EAEOG,gBAAgBA,CAACC,EAAO;IAC7B,OAAO,IAAI,CAACN,gBAAgB,CAACO,aAAa,CAAC,WAAW,EAAE,SAAS,EAAED,EAAE,CAAC;EACxE;EAEOE,aAAaA,CAACC,IAAQ;IAC3B,OAAO,IAAI,CAACT,gBAAgB,CAACU,GAAG,CAAC,WAAW,EAAC,MAAM,EAACD,IAAI,CAAC;EAC3D;EAEOE,mBAAmBA,CAACC,WAAe;IACxC,OAAO,IAAI,CAACZ,gBAAgB,CAACa,UAAU,CAAC,eAAe,EAAC,kBAAkB,EAACD,WAAW,CAAC;EACzF;EAEOE,oBAAoBA,CAACR,EAAM;IAChC,OAAO,IAAI,CAACN,gBAAgB,CAACO,aAAa,CAAC,eAAe,EAAC,SAAS,EAACD,EAAE,CAAC;EAC1E;EAEOS,iBAAiBA,CAACN,IAAQ;IAC/B,OAAO,IAAI,CAACT,gBAAgB,CAACU,GAAG,CAAC,eAAe,EAAC,MAAM,EAACD,IAAI,CAAC;EAC/D;EAEOO,uBAAuBA,CAACJ,WAAe;IAC5C,OAAO,IAAI,CAACZ,gBAAgB,CAACa,UAAU,CAAC,cAAc,EAAC,kBAAkB,EAACD,WAAW,CAAC;EACxF;EAEOK,OAAOA,CAACR,IAAQ;IACrB,OAAO,IAAI,CAACT,gBAAgB,CAACU,GAAG,CAAC,WAAW,EAAC,SAAS,EAACD,IAAI,CAAC;EAC9D;EAAC,QAAAS,CAAA,G;qBA9CUpB,gBAAgB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBzB,gBAAgB;IAAA0B,OAAA,EAAhB1B,gBAAgB,CAAA2B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}