{"ast":null,"code":"import { Enums } from 'src/app/model/enums.model';\nimport { BuildingFilterInput } from 'src/app/ui/background-loc/model/DTO/blFilterInput.model';\nimport { FLFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/flFilterInput.model';\nimport { RMFilterInputDTO } from 'src/app/ui/background-loc/model/DTO/rmFilterInput.model';\nimport { BookingIdFilterInput } from 'src/app/ui/edit-booking/model/bookingIdFilterInput.model';\nimport { UserFilterInput } from 'src/app/ui/user/modal/usersFilterInput.model';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport * as FileSaver from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/users.service\";\nimport * as i3 from \"src/app/ui/edit-booking/provider/edit-booking-provider\";\nimport * as i4 from \"ngx-spinner\";\nimport * as i5 from \"../../../services/booking.services\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"src/app/ui/rm-config/rm-config/services/rm-config.service\";\nimport * as i8 from \"src/app/services/enum.service\";\nimport * as i9 from \"src/app/services/auth.service\";\nimport * as i10 from \"../../../provider/booking-details-view\";\nimport * as i11 from \"primeng/api\";\nimport * as i12 from \"primeng/table\";\nimport * as i13 from \"primeng/calendar\";\nimport * as i14 from \"primeng/button\";\nimport * as i15 from \"primeng/panel\";\nimport * as i16 from \"@ng-select/ng-select\";\nimport * as i17 from \"@angular/material/tooltip\";\nfunction BookingReportComponent_tr_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 3)(2, \"label\", 28);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMsg);\n  }\n}\nfunction BookingReportComponent_ng_template_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 29)(2, \"div\", 30);\n    i0.ɵɵtext(3, \" Type\");\n    i0.ɵɵelement(4, \"p-sortIcon\", 31)(5, \"p-columnFilter\", 32);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"th\", 33)(7, \"div\", 30);\n    i0.ɵɵtext(8, \" Meeting Id \");\n    i0.ɵɵelement(9, \"p-sortIcon\", 34)(10, \"p-columnFilter\", 35);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"th\", 36);\n    i0.ɵɵtext(12, \" Building\");\n    i0.ɵɵelement(13, \"p-sortIcon\", 37)(14, \"p-columnFilter\", 38);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\", 39);\n    i0.ɵɵtext(16, \" Floor\");\n    i0.ɵɵelement(17, \"p-sortIcon\", 40)(18, \"p-columnFilter\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"th\", 42);\n    i0.ɵɵtext(20, \" Room\");\n    i0.ɵɵelement(21, \"p-sortIcon\", 43)(22, \"p-columnFilter\", 44);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"th\", 45);\n    i0.ɵɵtext(24, \" Date\");\n    i0.ɵɵelement(25, \"p-sortIcon\", 46)(26, \"p-columnFilter\", 47);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"th\", 48);\n    i0.ɵɵtext(28, \" From Time\");\n    i0.ɵɵelement(29, \"p-sortIcon\", 49)(30, \"p-columnFilter\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"th\", 51);\n    i0.ɵɵtext(32, \" To Time\");\n    i0.ɵɵelement(33, \"p-sortIcon\", 52)(34, \"p-columnFilter\", 53);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"th\", 54)(36, \"div\", 30);\n    i0.ɵɵtext(37, \" Status \");\n    i0.ɵɵelement(38, \"p-sortIcon\", 55)(39, \"p-columnFilter\", 56);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"th\", 57)(41, \"div\", 30);\n    i0.ɵɵtext(42, \" Meeting Name \");\n    i0.ɵɵelement(43, \"p-sortIcon\", 58)(44, \"p-columnFilter\", 59);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(45, \"th\", 60)(46, \"div\", 30);\n    i0.ɵɵtext(47, \" Requested By \");\n    i0.ɵɵelement(48, \"p-sortIcon\", 61)(49, \"p-columnFilter\", 62);\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction BookingReportComponent_ng_template_60_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 63)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"td\", 64);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"td\");\n    i0.ɵɵtext(23);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const bookingReport_r5 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", bookingReport_r5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.bookingType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.blId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.flId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.rmId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(13, 13, bookingReport_r5.dateStart, \"dd MMM yyyy\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.convertToDisplayTime(bookingReport_r5.timeStart));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.convertToDisplayTime(bookingReport_r5.timeEnd));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.getEnumById(bookingReport_r5.status));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", bookingReport_r5.meetingName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", bookingReport_r5.meetingName, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(bookingReport_r5.requestedBy);\n  }\n}\nfunction BookingReportComponent_ng_template_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 9);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nconst _c1 = function () {\n  return {\n    \"width\": \"1600px\"\n  };\n};\nexport let BookingReportComponent = /*#__PURE__*/(() => {\n  class BookingReportComponent {\n    constructor(formBuilder, userSrv, bookingProvider, spinner, bookingSrv, datePipe, rmConfigSrv, enumsrv, authSrv, bookingDetailsView) {\n      this.formBuilder = formBuilder;\n      this.userSrv = userSrv;\n      this.bookingProvider = bookingProvider;\n      this.spinner = spinner;\n      this.bookingSrv = bookingSrv;\n      this.datePipe = datePipe;\n      this.rmConfigSrv = rmConfigSrv;\n      this.enumsrv = enumsrv;\n      this.authSrv = authSrv;\n      this.bookingDetailsView = bookingDetailsView;\n      this.enumRequestedBy = [];\n      this.enumReservationIds = [];\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.allRmDdata = [];\n      this.rm_data = [];\n      this.enumAllFL = [];\n      this.enumBL = [];\n      this.enumStatusData = [];\n      this.reservationData = [];\n      this.enumFL = [];\n      this.errorMsg = '';\n      this.isErr = false;\n      this.presentDate = new Date();\n      this.firstDate = new Date(this.presentDate.getFullYear(), this.presentDate.getMonth(), 1, 0);\n      this.lastDate = new Date(this.presentDate.getFullYear(), this.presentDate.getMonth() + 1, 0);\n      this.allBl = [];\n      this.reqitems = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumStatusList = [];\n      this.enumeStatus = [];\n      this.displayStatusData = [];\n      this.reserveDataList = [];\n      this.reservationInputDTOList = [];\n      this.req_array = [];\n      this.upDateAll = false;\n      this.filterPanel = this.formBuilder.group({\n        requestedBy: [null],\n        id: [null],\n        blId: [null],\n        flId: [null],\n        rmId: [null],\n        dateStart: [null, [this.checkDateValidation()]],\n        dateEnd: [null, [this.checkDateValidation()]],\n        status: [null]\n      });\n    }\n    ngOnInit() {\n      this.spinner.hide();\n      this.compId = this.authSrv.getLoggedInUserCompId();\n      this.loadEnums();\n      this.loadEnumRequestedBy();\n      this.setStartAndEndDates();\n      this.loadFilterPanelData();\n      this.loadEnumId();\n      this.loadStatus();\n      this.loggedInUser = this.authSrv.getLoggedInUserId();\n    }\n    loadEnumRequestedBy() {\n      this.userSrv.getALLUsers().subscribe(res => {\n        this.enumRequestedBy = res;\n        this.enumRequestedBy = res.map(i => {\n          i.name = i.id + ' - ' + i.name;\n          return i;\n        });\n        this.enumRequestedBy.unshift(new UserFilterInput('', 'Make a selection', '', null));\n      });\n    }\n    onSelectBlCode($event) {\n      if ($event.blId != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null,\n            rmId: null\n          });\n          this.loadFloorCode($event.blId);\n        }, 10);\n      } else {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            flId: null,\n            rmId: null\n          });\n        }, 10);\n        this.enumFL = this.enumAllFL;\n        this.rm_data = this.allRmDdata;\n      }\n    }\n    onRowSelect(event) {\n      if (event != null && event.data != null) {\n        this.openBookingDetails(event.data);\n      }\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumeStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'reserve'.toLocaleUpperCase());\n        this.enumStatusList = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'reserve'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        this.loadReservationData();\n      }, error => {});\n    }\n    getEnumById(id) {\n      return this.enumStatusList.find(t => t.id === id)?.enumValue;\n    }\n    openBookingDetails(res) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = false;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '850px';\n      dialogConfig.minHeight = '300px';\n      res.status = this.getEnumById(res.status);\n      dialogConfig.data = {\n        roomDetails: res\n      };\n      this.bookingDetailsView.openDialog(dialogConfig);\n      this.bookingDetailsView.onDialogueClosed.subscribe(result => {\n        () => {};\n      });\n    }\n    loadFloorCode(bl_id) {\n      if (bl_id != null) {\n        this.enumFL = [];\n        this.enumFL = this.enumAllFL.filter(t => t.blId == bl_id);\n        this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n        this.rm_data = this.allRmDdata.filter(t => t.blId == bl_id);\n        this.rm_data.unshift(new RMFilterInputDTO('', 'Make a selection', '', '', this.compId));\n      }\n    }\n    onSelectRmCode(event) {\n      if (event.rmId != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId,\n            flId: event.flId\n          });\n        }, 10);\n      }\n    }\n    onClear() {\n      this.filterPanel.patchValue({\n        requestedBy: null,\n        id: null,\n        blId: null,\n        flId: null,\n        rmId: null,\n        dateStart: null,\n        dateEnd: null,\n        status: null\n      });\n      this.reservationData = [];\n    }\n    onSearch() {\n      this.spinner.show();\n      var requestedBy = this.filterPanel.controls.requestedBy.value;\n      var id = this.filterPanel.controls.id.value;\n      var blId = this.filterPanel.controls.blId.value;\n      var flId = this.filterPanel.controls.flId.value;\n      var rmId = this.filterPanel.controls.rmId.value;\n      var dateStart = this.setFromateDate(this.filterPanel.controls.dateStart.value);\n      var dateEnd = this.setFromateDate(this.filterPanel.controls.dateEnd.value);\n      var status = this.filterPanel.controls.status.value;\n      var filterValueData = {\n        'requestedBy': requestedBy,\n        'id': id,\n        'blId': blId,\n        'flId': flId,\n        'rmId': rmId,\n        'dateStart': dateStart,\n        'dateEnd': dateEnd,\n        'compId': this.compId,\n        'status': status\n      };\n      this.reservationData = [];\n      this.bookingSrv.SearchBookingsByFilter(filterValueData).subscribe(res => {\n        this.spinner.hide();\n        this.reservationData = res;\n      });\n    }\n    setFromateDate(date) {\n      if (date != null) {\n        var date = new Date(date);\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return this.datePipe.transform(date, \"yyyy-MM-dd HH:mm:ss\");\n      } else {\n        return null;\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.flId != null) {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId,\n            rmId: null\n          });\n          this.loadRmCode(event.flId, event.blId);\n        }, 10);\n      } else {\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            rmId: null\n          });\n        }, 10);\n        this.rm_data = this.allRmDdata;\n        this.enumFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n      }\n    }\n    loadRmCode(flId, blId) {\n      if (flId != null) {\n        this.rm_data = [];\n        this.rm_data = this.allRmDdata.filter(t => t.blId == blId);\n        this.rm_data = this.rm_data.filter(t => t.flId == flId);\n        this.rm_data.unshift(new RMFilterInputDTO('', 'Make a selection', '', '', this.compId));\n      }\n    }\n    checkDateValidation() {\n      return control => {\n        if (control.value !== undefined && control.value != null) {\n          this.filterPanel.controls['dateStart'].setErrors(null);\n          this.filterPanel.controls['dateEnd'].setErrors(null);\n          this.filterPanel.clearAsyncValidators();\n          this.filterPanel.updateValueAndValidity();\n          var dateFrom = new Date(this.filterPanel.controls['dateStart'].value);\n          var dateTo = new Date(this.filterPanel.controls['dateEnd'].value);\n          if (dateFrom.getTime() > dateTo.getTime() && this.filterPanel.controls['dateEnd'].value != null) {\n            this.isErr = true;\n            this.filterPanel.controls['dateStart'].setErrors({\n              'incorrect': true\n            });\n            this.filterPanel.updateValueAndValidity();\n            this.errorMsg = 'From date should be less than To date.';\n            return {\n              'incorrect': true\n            };\n          } else {\n            this.isErr = false;\n            return null;\n          }\n        }\n        return null;\n      };\n    }\n    convertToDisplayTime(value) {\n      if (value != null) {\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        return time;\n      } else {\n        return '';\n      }\n    }\n    setStartAndEndDates() {\n      this.filterPanel.patchValue({\n        dateStart: this.firstDate,\n        dateEnd: this.lastDate\n      });\n    }\n    loadReservationData() {\n      this.onSearch();\n    }\n    loadStatus() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        this.enumStatusData = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'reserve'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n        this.enumStatusData.unshift(new Enums(0, \"\", \"\", 'Make a selection'));\n      });\n    }\n    loadFilterPanelData() {\n      this.rmConfigSrv.getAllFilterData().subscribe(res => {\n        this.allBl = res.blList;\n        this.enumBL = res.blList;\n        this.enumBL = res.blList.map(i => {\n          i.name = i.blId + (i.blName ? ' - ' + i.blName : \"\");\n          return i;\n        });\n        this.enumBL.unshift(new BuildingFilterInput('', 'Make a selection', '', this.compId));\n        this.enumAllFL = res.flList;\n        this.enumAllFL = res.flList.map(i => {\n          i.name = i.blId + '-' + i.flId + (i.flName ? ' - ' + i.flName : '');\n          return i;\n        });\n        this.enumAllFL.unshift(new FLFilterInputDTO('', 'Make a selection', '', this.compId));\n        this.enumFL = this.enumAllFL;\n        this.allRmDdata = res.rmList;\n        this.allRmDdata = res.rmList.map(i => {\n          i.name = i.blId + '-' + i.flId + ' - ' + i.rmId + (i.rmName ? ' - ' + i.rmName : '');\n          return i;\n        });\n        this.allRmDdata.unshift(new RMFilterInputDTO('', 'Make a selection', '', '', this.compId));\n        this.rm_data = this.allRmDdata;\n      });\n    }\n    loadEnumId() {\n      this.bookingSrv.getAllBookingIds().subscribe(res => {\n        this.enumReservationIds = res;\n        this.enumReservationIds = res.map(i => {\n          i.name = i.id + ' - ' + i.name;\n          return i;\n        });\n        this.enumReservationIds.unshift(new BookingIdFilterInput(0, 'Make a selection'));\n      });\n    }\n    exportExcel() {\n      this.getDestructuredData(this.reservationData);\n      var excelHeaders = [\"Type\", \"Meeting Id\", \"Building\", \"Floor\", \"Room\", \"Date\", \"From Time\", \"To Time\", \"Status\", \"Meeting Name\", \"Requested By\"];\n      let options = {\n        header: excelHeaders\n      };\n      import(\"xlsx\").then(xlsx => {\n        const worksheet = xlsx.utils.json_to_sheet(this.req_array);\n        worksheet['!cols'] = [{\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }, {\n          wch: 20\n        }];\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = xlsx.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"booking\");\n      });\n    }\n    getDestructuredData(req_data) {\n      this.req_array = req_data.map(item => {\n        return {\n          \"Type\": item['bookingType'],\n          \"Meeting Id \": item['id'],\n          \"Building\": item['blId'],\n          \"Floor\": item['flId'],\n          \"Room\": item['rmId'],\n          \"Date\": item['dateStart'],\n          \"From Time\": item['timeStart'],\n          \"To Time\": item['timeEnd'],\n          \"status\": this.getEnumById(item['status']),\n          \"Meeting Name\": item['meetingName'],\n          \"Requested By\": item['requestedBy']\n        };\n      });\n    }\n    saveAsExcelFile(buffer, fileName) {\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      let EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    static #_ = this.ɵfac = function BookingReportComponent_Factory(t) {\n      return new (t || BookingReportComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.EditBookingDialogueProvider), i0.ɵɵdirectiveInject(i4.NgxSpinnerService), i0.ɵɵdirectiveInject(i5.BookingService), i0.ɵɵdirectiveInject(i6.DatePipe), i0.ɵɵdirectiveInject(i7.RmConfigService), i0.ɵɵdirectiveInject(i8.EnumService), i0.ɵɵdirectiveInject(i9.AuthService), i0.ɵɵdirectiveInject(i10.BookingDetailsViewDialogueProvider));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: BookingReportComponent,\n      selectors: [[\"app-booking-report\"]],\n      decls: 62,\n      vars: 33,\n      consts: [[1, \"card\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"requestedBy\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"id\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"name\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"name\", \"bindValue\", \"flId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"rmId\", \"bindLabel\", \"name\", \"bindValue\", \"rmId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [1, \"p-fluid\"], [1, \"p-field\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateStart\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"dateFormat\", \"dd M yy\", \"name\", \"date\", \"formControlName\", \"dateEnd\", \"inputId\", \"icon\", 3, \"showIcon\"], [\"appendTo\", \"body\", \"formControlName\", \"status\", \"bindLabel\", \"enumValue\", \"bindValue\", \"id\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", \"p-button-sm\", \"pull\", \"right\", 2, \"width\", \"60px\", \"margin-left\", \"5px\", 3, \"click\"], [4, \"ngIf\"], [\"header\", \" \"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 3, \"click\"], [1, \"card\", 2, \"margin-top\", \"35px\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"styleClass\", \"p-datatable-customers p-datatable-gridlines\", \"scrollHeight\", \"450px\", \"selectionMode\", \"single\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"tableStyle\", \"scrollable\", \"rowHover\", \"onRowSelect\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [\"pSortableColumn\", \"bookingType\"], [1, \"p-d-flex\", \"p-jc-between\", \"p-ai-center\"], [\"field\", \"bookingType\"], [\"type\", \"text\", \"field\", \"bookingType\", \"display\", \"menu\"], [\"pSortableColumn\", \"id\"], [\"field\", \"id\"], [\"type\", \"numeric\", \"field\", \"id\", \"display\", \"menu\"], [\"pSortableColumn\", \"blId\"], [\"field\", \"blId\"], [\"type\", \"text\", \"field\", \"blId\", \"display\", \"menu\"], [\"pSortableColumn\", \"flId\"], [\"field\", \"flId\"], [\"type\", \"text\", \"field\", \"flId\", \"display\", \"menu\"], [\"pSortableColumn\", \"rmId\"], [\"field\", \"rmId\"], [\"type\", \"text\", \"field\", \"rmId\", \"display\", \"menu\"], [\"pSortableColumn\", \"dateStart\"], [\"field\", \"dateStart\"], [\"type\", \"text\", \"field\", \"dateStart\", \"display\", \"menu\"], [\"pSortableColumn\", \"timeStart\"], [\"field\", \"timeStart\"], [\"type\", \"text\", \"field\", \"timeStart\", \"display\", \"menu\"], [\"pSortableColumn\", \"timeEnd\"], [\"field\", \"timeEnd\"], [\"type\", \"text\", \"field\", \"timeEnd\", \"display\", \"menu\"], [\"pSortableColumn\", \"status\"], [\"field\", \"status\"], [\"type\", \"text\", \"field\", \"status\", \"display\", \"menu\"], [\"pSortableColumn\", \"meetingName\"], [\"field\", \"meetingName\"], [\"type\", \"text\", \"field\", \"meetingName\", \"display\", \"menu\"], [\"pSortableColumn\", \"requestedBy\"], [\"field\", \"requestedBy\"], [\"type\", \"text\", \"field\", \"requestedBy\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"matTooltipPosition\", \"top\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function BookingReportComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"table\", 2)(3, \"tr\")(4, \"td\", 3)(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Requested By \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"ng-select\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"td\", 3)(10, \"div\", 4)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Meeting Id\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"ng-select\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"td\", 3)(15, \"div\", 4)(16, \"label\", 5);\n          i0.ɵɵtext(17, \"Building \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"ng-select\", 8);\n          i0.ɵɵlistener(\"change\", function BookingReportComponent_Template_ng_select_change_18_listener($event) {\n            return ctx.onSelectBlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(19, \"td\", 3)(20, \"div\", 4)(21, \"label\", 5);\n          i0.ɵɵtext(22, \"Floor\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"ng-select\", 9);\n          i0.ɵɵlistener(\"change\", function BookingReportComponent_Template_ng_select_change_23_listener($event) {\n            return ctx.onSelectFlCode($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"td\", 3)(25, \"div\", 4)(26, \"label\", 5);\n          i0.ɵɵtext(27, \"Room\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"ng-select\", 10);\n          i0.ɵɵlistener(\"change\", function BookingReportComponent_Template_ng_select_change_28_listener($event) {\n            return ctx.onSelectRmCode($event);\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(29, \"tr\")(30, \"td\", 3)(31, \"div\", 4)(32, \"div\", 11)(33, \"div\", 12)(34, \"label\", 13);\n          i0.ɵɵtext(35, \"From Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(36, \"p-calendar\", 14);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(37, \"td\", 3)(38, \"div\", 4)(39, \"div\", 11)(40, \"div\", 12)(41, \"label\", 13);\n          i0.ɵɵtext(42, \"To Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(43, \"p-calendar\", 15);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(44, \"td\", 3)(45, \"div\", 4)(46, \"label\", 5);\n          i0.ɵɵtext(47, \"Status \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(48, \"ng-select\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(49, \"td\", 3)(50, \"button\", 17);\n          i0.ɵɵlistener(\"click\", function BookingReportComponent_Template_button_click_50_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"button\", 18);\n          i0.ɵɵlistener(\"click\", function BookingReportComponent_Template_button_click_51_listener() {\n            return ctx.onClear();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(52, BookingReportComponent_tr_52_Template, 4, 1, \"tr\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(53, \"p-panel\", 20)(54, \"div\")(55, \"button\", 21);\n          i0.ɵɵlistener(\"click\", function BookingReportComponent_Template_button_click_55_listener() {\n            return ctx.exportExcel();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(56, \"div\", 22)(57, \"p-table\", 23, 24);\n          i0.ɵɵlistener(\"onRowSelect\", function BookingReportComponent_Template_p_table_onRowSelect_57_listener($event) {\n            return ctx.onRowSelect($event);\n          });\n          i0.ɵɵtemplate(59, BookingReportComponent_ng_template_59_Template, 50, 0, \"ng-template\", 25);\n          i0.ɵɵtemplate(60, BookingReportComponent_ng_template_60_Template, 24, 16, \"ng-template\", 26);\n          i0.ɵɵtemplate(61, BookingReportComponent_ng_template_61_Template, 3, 1, \"ng-template\", 27);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRequestedBy)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumReservationIds)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumBL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFL)(\"searchable\", true);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.rm_data)(\"searchable\", true);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"showIcon\", false);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumStatusData)(\"searchable\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.filterPanel.valid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isErr);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"value\", ctx.reservationData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(31, _c0))(\"tableStyle\", i0.ɵɵpureFunction0(32, _c1))(\"scrollable\", true)(\"rowHover\", true);\n        }\n      },\n      dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i11.PrimeTemplate, i12.Table, i12.SortableColumn, i12.SelectableRow, i12.SortIcon, i12.ColumnFilter, i13.Calendar, i14.ButtonDirective, i15.Panel, i16.NgSelectComponent, i17.MatTooltip, i6.DatePipe]\n    });\n  }\n  return BookingReportComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}