{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../services/data.service\";\nexport class CraftspersonService {\n  constructor(service, cfService) {\n    this.service = service;\n    this.cfService = cfService;\n  }\n  getAllCraftsperson() {\n    return this.service.getAll('craftsperson', 'getAllCraftsperson');\n  }\n  getAllCraftspersonPaginated(data) {\n    return this.service.search('craftsperson', 'getAllCraftspersonPaginated', data);\n  }\n  getCraftspersonById(id) {\n    return this.service.getSingleById(\"craftsperson\", \"getCraftspersonByCfId\", id);\n  }\n  saveCraftsperson(cf) {\n    return this.cfService.add('craftsperson', 'saveCraftsperson', cf);\n  }\n  deleteById(cfId) {\n    return this.cfService.getSingleById(\"craftsperson\", \"deleteByCfId\", cfId);\n  }\n  checkCFExistsByName(name) {\n    return this.cfService.getSingleById(\"craftsperson\", \"checkByName\", name);\n  }\n  checkCFExistsByEmail(email) {\n    return this.cfService.getSingleById(\"craftsperson\", \"checkByEmail\", email);\n  }\n  getUnAssignedTechnician(technicianId) {\n    return this.cfService.getAllById('craftsperson', 'getAllUnAssign', technicianId);\n  }\n  getAllCraftspersonByTradeId(tradeId) {\n    return this.cfService.getAllById('craftsperson', 'getAllTechnicians', tradeId);\n  }\n  static #_ = this.ɵfac = function CraftspersonService_Factory(t) {\n    return new (t || CraftspersonService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CraftspersonService,\n    factory: CraftspersonService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CraftspersonService","constructor","service","cfService","getAllCraftsperson","getAll","getAllCraftspersonPaginated","data","search","getCraftspersonById","id","getSingleById","saveCraftsperson","cf","add","deleteById","cfId","checkCFExistsByName","name","checkCFExistsByEmail","email","getUnAssignedTechnician","technicianId","getAllById","getAllCraftspersonByTradeId","tradeId","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/Helpdesk/craftsperson/services/craftsperson.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataService } from '../../../../services/data.service';\nimport { Craftsperson } from '../model/craftsperson.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CraftspersonService {\n\n    constructor(\n        private service: DataService<any>,\n        private cfService: DataService<Craftsperson>\n\n    ) { }\n\n    public getAllCraftsperson() {\n        return this.service.getAll('craftsperson', 'getAllCraftsperson');\n    }\n\n    public getAllCraftspersonPaginated(data:any) {\n        return this.service.search('craftsperson', 'getAllCraftspersonPaginated',data);\n    }\n\n    public getCraftspersonById(id: any) {\n        return this.service.getSingleById(\"craftsperson\", \"getCraftspersonByCfId\", id);\n    }\n\n    public saveCraftsperson(cf: Craftsperson): Observable<Craftsperson> {\n        return this.cfService.add('craftsperson', 'saveCraftsperson', cf);\n    }\n\n    public deleteById(cfId: any) {\n        return this.cfService.getSingleById(\"craftsperson\", \"deleteByCfId\", cfId);\n    }\n\n    public checkCFExistsByName(name: any) {\n        return this.cfService.getSingleById(\"craftsperson\", \"checkByName\", name);\n    }\n\n    public checkCFExistsByEmail(email: any) {\n        return this.cfService.getSingleById(\"craftsperson\", \"checkByEmail\", email);\n    }\n\n    public getUnAssignedTechnician(technicianId: any) {\n        return this.cfService.getAllById('craftsperson', 'getAllUnAssign', technicianId);\n    }\n\n    public getAllCraftspersonByTradeId(tradeId:any) {\n        return this.cfService.getAllById('craftsperson', 'getAllTechnicians', tradeId);\n    }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,mBAAmB;EAE5BC,YACYC,OAAyB,EACzBC,SAAoC;IADpC,KAAAD,OAAO,GAAPA,OAAO;IACP,KAAAC,SAAS,GAATA,SAAS;EAEjB;EAEGC,kBAAkBA,CAAA;IACrB,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CAAC,cAAc,EAAE,oBAAoB,CAAC;EACpE;EAEOC,2BAA2BA,CAACC,IAAQ;IACvC,OAAO,IAAI,CAACL,OAAO,CAACM,MAAM,CAAC,cAAc,EAAE,6BAA6B,EAACD,IAAI,CAAC;EAClF;EAEOE,mBAAmBA,CAACC,EAAO;IAC9B,OAAO,IAAI,CAACR,OAAO,CAACS,aAAa,CAAC,cAAc,EAAE,uBAAuB,EAAED,EAAE,CAAC;EAClF;EAEOE,gBAAgBA,CAACC,EAAgB;IACpC,OAAO,IAAI,CAACV,SAAS,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,EAAED,EAAE,CAAC;EACrE;EAEOE,UAAUA,CAACC,IAAS;IACvB,OAAO,IAAI,CAACb,SAAS,CAACQ,aAAa,CAAC,cAAc,EAAE,cAAc,EAAEK,IAAI,CAAC;EAC7E;EAEOC,mBAAmBA,CAACC,IAAS;IAChC,OAAO,IAAI,CAACf,SAAS,CAACQ,aAAa,CAAC,cAAc,EAAE,aAAa,EAAEO,IAAI,CAAC;EAC5E;EAEOC,oBAAoBA,CAACC,KAAU;IAClC,OAAO,IAAI,CAACjB,SAAS,CAACQ,aAAa,CAAC,cAAc,EAAE,cAAc,EAAES,KAAK,CAAC;EAC9E;EAEOC,uBAAuBA,CAACC,YAAiB;IAC5C,OAAO,IAAI,CAACnB,SAAS,CAACoB,UAAU,CAAC,cAAc,EAAE,gBAAgB,EAAED,YAAY,CAAC;EACpF;EAEOE,2BAA2BA,CAACC,OAAW;IAC1C,OAAO,IAAI,CAACtB,SAAS,CAACoB,UAAU,CAAC,cAAc,EAAE,mBAAmB,EAAEE,OAAO,CAAC;EAClF;EAAC,QAAAC,CAAA,G;qBA1CQ1B,mBAAmB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB/B,mBAAmB;IAAAgC,OAAA,EAAnBhC,mBAAmB,CAAAiC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}