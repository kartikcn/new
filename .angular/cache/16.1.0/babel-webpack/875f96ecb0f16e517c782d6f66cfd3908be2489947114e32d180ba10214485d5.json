{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, RendererStyleFlags2, Injectable, Inject, NgModule } from '@angular/core';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nvar MatCssPalettePrefix;\n(function (MatCssPalettePrefix) {\n  MatCssPalettePrefix[\"Primary\"] = \"--palette-primary-\";\n  MatCssPalettePrefix[\"Accent\"] = \"--palette-accent-\";\n  MatCssPalettePrefix[\"Warn\"] = \"--palette-warn-\";\n})(MatCssPalettePrefix || (MatCssPalettePrefix = {}));\nvar MaterialCssVariables;\n(function (MaterialCssVariables) {\n  MaterialCssVariables[\"Primary50\"] = \"--palette-primary-50\";\n  MaterialCssVariables[\"Primary100\"] = \"--palette-primary-100\";\n  MaterialCssVariables[\"Primary200\"] = \"--palette-primary-200\";\n  MaterialCssVariables[\"Primary300\"] = \"--palette-primary-300\";\n  MaterialCssVariables[\"Primary400\"] = \"--palette-primary-400\";\n  MaterialCssVariables[\"Primary500\"] = \"--palette-primary-500\";\n  MaterialCssVariables[\"Primary600\"] = \"--palette-primary-600\";\n  MaterialCssVariables[\"Primary700\"] = \"--palette-primary-700\";\n  MaterialCssVariables[\"Primary800\"] = \"--palette-primary-800\";\n  MaterialCssVariables[\"Primary900\"] = \"--palette-primary-900\";\n  MaterialCssVariables[\"PrimaryA100\"] = \"--palette-primary-A100\";\n  MaterialCssVariables[\"PrimaryA200\"] = \"--palette-primary-A200\";\n  MaterialCssVariables[\"PrimaryA400\"] = \"--palette-primary-A400\";\n  MaterialCssVariables[\"PrimaryA700\"] = \"--palette-primary-A700\";\n  MaterialCssVariables[\"PrimaryContrast50\"] = \"--palette-primary-contrast-50\";\n  MaterialCssVariables[\"PrimaryContrast100\"] = \"--palette-primary-contrast-100\";\n  MaterialCssVariables[\"PrimaryContrast200\"] = \"--palette-primary-contrast-200\";\n  MaterialCssVariables[\"PrimaryContrast300\"] = \"--palette-primary-contrast-300\";\n  MaterialCssVariables[\"PrimaryContrast400\"] = \"--palette-primary-contrast-400\";\n  MaterialCssVariables[\"PrimaryContrast500\"] = \"--palette-primary-contrast-500\";\n  MaterialCssVariables[\"PrimaryContrast600\"] = \"--palette-primary-contrast-600\";\n  MaterialCssVariables[\"PrimaryContrast700\"] = \"--palette-primary-contrast-700\";\n  MaterialCssVariables[\"PrimaryContrast800\"] = \"--palette-primary-contrast-800\";\n  MaterialCssVariables[\"PrimaryContrast900\"] = \"--palette-primary-contrast-900\";\n  MaterialCssVariables[\"PrimaryContrastA100\"] = \"--palette-primary-contrast-A100\";\n  MaterialCssVariables[\"PrimaryContrastA200\"] = \"--palette-primary-contrast-A200\";\n  MaterialCssVariables[\"PrimaryContrastA400\"] = \"--palette-primary-contrast-A400\";\n  MaterialCssVariables[\"PrimaryContrastA700\"] = \"--palette-primary-contrast-A700\";\n  // ACCENT\n  MaterialCssVariables[\"Accent50\"] = \"--palette-accent-50\";\n  MaterialCssVariables[\"Accent100\"] = \"--palette-accent-100\";\n  MaterialCssVariables[\"Accent200\"] = \"--palette-accent-200\";\n  MaterialCssVariables[\"Accent300\"] = \"--palette-accent-300\";\n  MaterialCssVariables[\"Accent400\"] = \"--palette-accent-400\";\n  MaterialCssVariables[\"Accent500\"] = \"--palette-accent-500\";\n  MaterialCssVariables[\"Accent600\"] = \"--palette-accent-600\";\n  MaterialCssVariables[\"Accent700\"] = \"--palette-accent-700\";\n  MaterialCssVariables[\"Accent800\"] = \"--palette-accent-800\";\n  MaterialCssVariables[\"Accent900\"] = \"--palette-accent-900\";\n  MaterialCssVariables[\"AccentA100\"] = \"--palette-accent-A100\";\n  MaterialCssVariables[\"AccentA200\"] = \"--palette-accent-A200\";\n  MaterialCssVariables[\"AccentA400\"] = \"--palette-accent-A400\";\n  MaterialCssVariables[\"AccentA700\"] = \"--palette-accent-A700\";\n  MaterialCssVariables[\"DarkAccentText\"] = \"--dark-accent-text\";\n  MaterialCssVariables[\"LightAccentText\"] = \"--light-accent-text\";\n  // WARN\n  MaterialCssVariables[\"Warn50\"] = \"--palette-warn-50\";\n  MaterialCssVariables[\"Warn100\"] = \"--palette-warn-100\";\n  MaterialCssVariables[\"Warn200\"] = \"--palette-warn-200\";\n  MaterialCssVariables[\"Warn300\"] = \"--palette-warn-300\";\n  MaterialCssVariables[\"Warn400\"] = \"--palette-warn-400\";\n  MaterialCssVariables[\"Warn500\"] = \"--palette-warn-500\";\n  MaterialCssVariables[\"Warn600\"] = \"--palette-warn-600\";\n  MaterialCssVariables[\"Warn700\"] = \"--palette-warn-700\";\n  MaterialCssVariables[\"Warn800\"] = \"--palette-warn-800\";\n  MaterialCssVariables[\"Warn900\"] = \"--palette-warn-900\";\n  MaterialCssVariables[\"WarnA100\"] = \"--palette-warn-A100\";\n  MaterialCssVariables[\"WarnA200\"] = \"--palette-warn-A200\";\n  MaterialCssVariables[\"WarnA400\"] = \"--palette-warn-A400\";\n  MaterialCssVariables[\"WarnA700\"] = \"--palette-warn-A700\";\n  MaterialCssVariables[\"DarkWarnText\"] = \"--dark-warn-text\";\n  MaterialCssVariables[\"LightWarnText\"] = \"--light-warn-text\";\n})(MaterialCssVariables || (MaterialCssVariables = {}));\nconst DEFAULT_MAT_CSS_CFG = {\n  isAutoContrast: true,\n  isAlternativeColorAlgorithm: false,\n  darkThemeClass: 'isDarkTheme',\n  lightThemeClass: 'isLightTheme',\n  colorMap: [{\n    name: '50',\n    map: [52, 0, 0]\n  }, {\n    name: '100',\n    map: [37, 0, 0]\n  }, {\n    name: '200',\n    map: [26, 0, 0]\n  }, {\n    name: '300',\n    map: [12, 0, 0]\n  }, {\n    name: '400',\n    map: [6, 0, 0]\n  }, {\n    name: '500',\n    map: [0, 0, 0]\n  }, {\n    name: '600',\n    map: [0, 6, 0]\n  }, {\n    name: '700',\n    map: [0, 12, 0]\n  }, {\n    name: '800',\n    map: [0, 18, 0]\n  }, {\n    name: '900',\n    map: [0, 24, 0]\n  }, {\n    name: 'A100',\n    map: [50, 0, 30]\n  }, {\n    name: 'A200',\n    map: [30, 0, 30]\n  }, {\n    name: 'A400',\n    map: [10, 0, 15]\n  }, {\n    name: 'A700',\n    map: [5, 0, 5]\n  }],\n  sortedHues: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900']\n};\nconst MATERIAL_CSS_VARS_CFG = new InjectionToken('Mat Css Config');\n\n// @see: https://github.com/angular/angular/issues/20351\n/** @dynamic */\nclass MaterialCssVarsService {\n  static #_ = this.CONTRAST_PREFIX = 'contrast-';\n  static #_2 = this.DARK_TEXT_VAR = '--dark-primary-text';\n  static #_3 = this.LIGHT_TEXT_VAR = '--light-primary-text';\n  constructor(rendererFactory, document, cfg) {\n    this.document = document;\n    this.contrastColorThresholdPrimary = '400';\n    this.contrastColorThresholdAccent = '400';\n    this.contrastColorThresholdWarn = '400';\n    this.isAutoContrast = false;\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this.ROOT = this.document.documentElement;\n    this.cfg = {\n      ...DEFAULT_MAT_CSS_CFG,\n      ...cfg\n    };\n    this.isAutoContrast = this.cfg.isAutoContrast;\n    if (typeof this.cfg.isDarkTheme === 'boolean') {\n      this.setDarkTheme(this.cfg.isDarkTheme);\n    }\n    if (this.cfg.primary) {\n      this.setPrimaryColor(this.cfg.primary);\n    }\n    if (this.cfg.accent) {\n      this.setAccentColor(this.cfg.accent);\n    }\n    if (this.cfg.warn) {\n      this.setWarnColor(this.cfg.warn);\n    }\n  }\n  setPrimaryColor(hex) {\n    this.primary = hex;\n    const varPrefix = MatCssPalettePrefix.Primary;\n    const stylePrimary = this._computePaletteColors(varPrefix, this.primary);\n    this._setStyle(stylePrimary);\n    if (this.isAutoContrast) {\n      this._recalculateAndSetContrastColor(varPrefix);\n    }\n  }\n  setAccentColor(hex) {\n    this.accent = hex;\n    const varPrefix = MatCssPalettePrefix.Accent;\n    const styleAccent = this._computePaletteColors(varPrefix, this.accent);\n    this._setStyle(styleAccent);\n    if (this.isAutoContrast) {\n      this._recalculateAndSetContrastColor(varPrefix);\n    }\n  }\n  setWarnColor(hex) {\n    this.warn = hex;\n    const varPrefix = MatCssPalettePrefix.Warn;\n    const styleWarn = this._computePaletteColors(varPrefix, this.warn);\n    this._setStyle(styleWarn);\n    if (this.isAutoContrast) {\n      this._recalculateAndSetContrastColor(varPrefix);\n    }\n  }\n  setVariable(cssVarName, value) {\n    this._setStyle([{\n      name: cssVarName,\n      val: value\n    }]);\n  }\n  setDarkTheme(isDark) {\n    if (isDark) {\n      this.document.body.classList.remove(this.cfg.lightThemeClass);\n      this.document.body.classList.add(this.cfg.darkThemeClass);\n    } else {\n      this.document.body.classList.remove(this.cfg.darkThemeClass);\n      this.document.body.classList.add(this.cfg.lightThemeClass);\n    }\n    this.isDarkTheme = isDark;\n  }\n  setAutoContrastEnabled(val) {\n    this.isAutoContrast = val;\n    if (val) {\n      this._recalculateAndSetContrastColor(MatCssPalettePrefix.Primary);\n      this._recalculateAndSetContrastColor(MatCssPalettePrefix.Accent);\n      this._recalculateAndSetContrastColor(MatCssPalettePrefix.Warn);\n    } else {\n      this.setContrastColorThresholdPrimary(this.contrastColorThresholdPrimary);\n      this.setContrastColorThresholdAccent(this.contrastColorThresholdAccent);\n      this.setContrastColorThresholdWarn(this.contrastColorThresholdWarn);\n    }\n  }\n  setContrastColorThresholdPrimary(threshold) {\n    this.contrastColorThresholdPrimary = threshold;\n    this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Primary);\n  }\n  setContrastColorThresholdAccent(threshold) {\n    this.contrastColorThresholdAccent = threshold;\n    this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Accent);\n  }\n  setContrastColorThresholdWarn(threshold) {\n    this.contrastColorThresholdWarn = threshold;\n    this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Warn);\n  }\n  setContrastColorThreshold(threshold, palettePrefix) {\n    if (!threshold || !palettePrefix || this.isAutoContrast) {\n      return;\n    }\n    let color = MaterialCssVarsService.DARK_TEXT_VAR;\n    const updates = this.cfg.sortedHues.map(hue => {\n      if (hue === threshold) {\n        color = MaterialCssVarsService.LIGHT_TEXT_VAR;\n      }\n      return {\n        val: `var(${color})`,\n        name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`\n      };\n    });\n    this._setStyle(updates);\n  }\n  /**\n   * Generate palette color based on traditional values\n   */\n  setAlternativeColorAlgorithm(traditional) {\n    this.cfg.isAlternativeColorAlgorithm = traditional;\n    this.setPrimaryColor(this.primary);\n    this.setAccentColor(this.accent);\n    this.setWarnColor(this.warn);\n  }\n  /** @deprecated use setContrastColorThresholdPrimary instead */\n  changeContrastColorThresholdPrimary(threshold) {\n    this.setContrastColorThresholdPrimary(threshold);\n  }\n  /** @deprecated use setContrastColorThresholdAccent instead */\n  changeContrastColorThresholdAccent(threshold) {\n    this.setContrastColorThresholdAccent(threshold);\n  }\n  /** @deprecated use setContrastColorThresholdWarn instead */\n  changeContrastColorThresholdWarn(threshold) {\n    this.setContrastColorThresholdWarn(threshold);\n  }\n  /** @deprecated use setContrastColorThreshold instead */\n  changeContrastColorThreshold(threshold, palettePrefix) {\n    this.setContrastColorThreshold(threshold, palettePrefix);\n  }\n  getPaletteForColor(hex) {\n    if (this.cfg.isAlternativeColorAlgorithm) {\n      return this.getTraditionalPaletteForColor(hex);\n    } else {\n      return this.getConstantinPaletteForColor(hex);\n    }\n  }\n  getTraditionalPaletteForColor(hex) {\n    return this.cfg.colorMap.map(item => {\n      const mappedColor = new TinyColor(hex).lighten(item.map[0]).darken(item.map[1]).saturate(item.map[2]);\n      const c = new TinyColor(mappedColor);\n      return {\n        hue: item.name,\n        isLight: c.isLight(),\n        color: {\n          ...c.toRgb(),\n          str: `rgb(${c.toRgb().r},${c.toRgb().g},${c.toRgb().b})`\n        }\n      };\n    });\n  }\n  getConstantinPaletteForColor(hex) {\n    return this.cfg.colorMap.map(item => {\n      const c = this.computePalletTriad(hex, item.name);\n      return {\n        hue: item.name,\n        isLight: c.isLight,\n        color: {\n          ...c.rgb,\n          str: `rgb(${c.rgb.r},${c.rgb.g},${c.rgb.b})`\n        }\n      };\n    });\n  }\n  getPaletteWithContrastForColor(hex) {\n    const lightText = this._getCssVarValue(MaterialCssVarsService.LIGHT_TEXT_VAR);\n    const darkText = this._getCssVarValue(MaterialCssVarsService.DARK_TEXT_VAR);\n    const palette = this.getPaletteForColor(hex);\n    // TODO handle non auto case\n    return palette.map(item => {\n      const contrastStr = item.isLight ? lightText : darkText;\n      const sLight = this._replaceNoRgbValue('', contrastStr).split(',').map(v => +v);\n      const cco = {\n        r: sLight[0],\n        g: sLight[1],\n        b: sLight[2],\n        a: 1\n      };\n      return {\n        ...item,\n        contrast: {\n          ...cco,\n          str: `${cco.r},${cco.g},${cco.b}`\n        }\n      };\n    });\n  }\n  _computePaletteColors(prefix, hex) {\n    return this.getPaletteForColor(hex).map(item => {\n      const c = item.color;\n      return {\n        name: `${prefix}${item.hue}`,\n        val: `rgb(${c.r}, ${c.g}, ${c.b})`\n      };\n    });\n  }\n  _recalculateAndSetContrastColor(palettePrefix) {\n    const updates = this._calculateContrastColorsForCurrentValues(palettePrefix).map(({\n      contrastColorVar,\n      hue\n    }) => {\n      return {\n        val: `var(${contrastColorVar})`,\n        name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`\n      };\n    });\n    this._setStyle(updates);\n  }\n  _calculateContrastColorsForCurrentValues(palettePrefix) {\n    return this.cfg.sortedHues.map(hue => {\n      const hueVarVal = this._getCssVarValue(`${palettePrefix}${hue}`);\n      const c = new TinyColor(`rgb(${hueVarVal})`);\n      const contrastColorVar = c.isDark() ? MaterialCssVarsService.LIGHT_TEXT_VAR : MaterialCssVarsService.DARK_TEXT_VAR;\n      return {\n        contrastColorVar,\n        hue\n      };\n    });\n  }\n  _setStyle(vars) {\n    vars.forEach(s => {\n      this.renderer.setStyle(this.ROOT, s.name, s.val, RendererStyleFlags2.DashCase);\n      this.renderer.setStyle(this.ROOT, s.name + '-no-rgb', this._replaceNoRgbValue(s.name, s.val), RendererStyleFlags2.DashCase);\n    });\n  }\n  /**\n   * Replace variables that are formatted as rgba(var(rgb(xxx))) to be var(xxx) to allow proper formatting\n   * in variable overrides.\n   * @param value\n   * @returns\n   */\n  _replaceNoRgbValue(name, value) {\n    const isContrast = name.includes(MaterialCssVarsService.CONTRAST_PREFIX);\n    let noRgb = '';\n    if (isContrast) {\n      noRgb = value.replace(')', '-no-rgb)');\n    } else {\n      noRgb = value.replace('rgba(', '').replace('rgb(', '').replace(')', '');\n      if (noRgb.startsWith('var(')) {\n        noRgb = noRgb.concat(')');\n      }\n    }\n    return noRgb;\n  }\n  _getCssVarValue(v) {\n    return getComputedStyle(this.ROOT).getPropertyValue(v);\n  }\n  /**\n   * Compute pallet colors based on a Triad (Constantin)\n   * see: https://github.com/mbitson/mcg\n   */\n  computePalletTriad(hex, hue) {\n    const baseLight = new TinyColor('#ffffff');\n    const baseDark = this.multiply(new TinyColor(hex).toRgb(), new TinyColor(hex).toRgb());\n    const baseTriad = new TinyColor(hex).tetrad();\n    let color;\n    switch (hue) {\n      case '50':\n        color = this.getColorObject(baseLight.mix(hex, 12));\n        break;\n      case '100':\n        color = this.getColorObject(baseLight.mix(hex, 30));\n        break;\n      case '200':\n        color = this.getColorObject(baseLight.mix(hex, 50));\n        break;\n      case '300':\n        color = this.getColorObject(baseLight.mix(hex, 70));\n        break;\n      case '400':\n        color = this.getColorObject(baseLight.mix(hex, 85));\n        break;\n      case '500':\n        color = this.getColorObject(baseLight.mix(hex, 100));\n        break;\n      case '600':\n        color = this.getColorObject(baseDark.mix(hex, 87));\n        break;\n      case '700':\n        color = this.getColorObject(baseDark.mix(hex, 70));\n        break;\n      case '800':\n        color = this.getColorObject(baseDark.mix(hex, 54));\n        break;\n      case '900':\n        color = this.getColorObject(baseDark.mix(hex, 25));\n        break;\n      case 'A100':\n        color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(65));\n        break;\n      case 'A200':\n        color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(55));\n        break;\n      case 'A400':\n        color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(45));\n        break;\n      case 'A700':\n        color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(40));\n        break;\n      default:\n        break;\n    }\n    return color;\n  }\n  multiply(rgb1, rgb2) {\n    rgb1.b = Math.floor(rgb1.b * rgb2.b / 255);\n    rgb1.g = Math.floor(rgb1.g * rgb2.g / 255);\n    rgb1.r = Math.floor(rgb1.r * rgb2.r / 255);\n    return new TinyColor('rgb ' + rgb1.r + ' ' + rgb1.g + ' ' + rgb1.b);\n  }\n  getColorObject(value) {\n    const c = new TinyColor(value);\n    return {\n      rgb: c.toRgb(),\n      isLight: c.isLight()\n    };\n  }\n  static #_4 = this.ɵfac = function MaterialCssVarsService_Factory(t) {\n    return new (t || MaterialCssVarsService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(MATERIAL_CSS_VARS_CFG));\n  };\n  static #_5 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MaterialCssVarsService,\n    factory: MaterialCssVarsService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialCssVarsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.RendererFactory2\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MATERIAL_CSS_VARS_CFG]\n      }]\n    }];\n  }, null);\n})();\nclass MaterialCssVarsModule {\n  static forRoot(config) {\n    return {\n      ngModule: MaterialCssVarsModule,\n      providers: [{\n        provide: MATERIAL_CSS_VARS_CFG,\n        useValue: config\n      }]\n    };\n  }\n  // This is necessary so the service is constructed, even if the service is never injected\n  constructor(materialCssVarsService) {\n    this.materialCssVarsService = materialCssVarsService;\n  }\n  static #_ = this.ɵfac = function MaterialCssVarsModule_Factory(t) {\n    return new (t || MaterialCssVarsModule)(i0.ɵɵinject(MaterialCssVarsService));\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MaterialCssVarsModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialCssVarsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [CommonModule]\n    }]\n  }], function () {\n    return [{\n      type: MaterialCssVarsService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of material-css-vars\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCssPalettePrefix, MaterialCssVariables, MaterialCssVarsModule, MaterialCssVarsService };","map":{"version":3,"names":["i0","InjectionToken","RendererStyleFlags2","Injectable","Inject","NgModule","TinyColor","DOCUMENT","CommonModule","MatCssPalettePrefix","MaterialCssVariables","DEFAULT_MAT_CSS_CFG","isAutoContrast","isAlternativeColorAlgorithm","darkThemeClass","lightThemeClass","colorMap","name","map","sortedHues","MATERIAL_CSS_VARS_CFG","MaterialCssVarsService","_","CONTRAST_PREFIX","_2","DARK_TEXT_VAR","_3","LIGHT_TEXT_VAR","constructor","rendererFactory","document","cfg","contrastColorThresholdPrimary","contrastColorThresholdAccent","contrastColorThresholdWarn","renderer","createRenderer","ROOT","documentElement","isDarkTheme","setDarkTheme","primary","setPrimaryColor","accent","setAccentColor","warn","setWarnColor","hex","varPrefix","Primary","stylePrimary","_computePaletteColors","_setStyle","_recalculateAndSetContrastColor","Accent","styleAccent","Warn","styleWarn","setVariable","cssVarName","value","val","isDark","body","classList","remove","add","setAutoContrastEnabled","setContrastColorThresholdPrimary","setContrastColorThresholdAccent","setContrastColorThresholdWarn","threshold","setContrastColorThreshold","palettePrefix","color","updates","hue","setAlternativeColorAlgorithm","traditional","changeContrastColorThresholdPrimary","changeContrastColorThresholdAccent","changeContrastColorThresholdWarn","changeContrastColorThreshold","getPaletteForColor","getTraditionalPaletteForColor","getConstantinPaletteForColor","item","mappedColor","lighten","darken","saturate","c","isLight","toRgb","str","r","g","b","computePalletTriad","rgb","getPaletteWithContrastForColor","lightText","_getCssVarValue","darkText","palette","contrastStr","sLight","_replaceNoRgbValue","split","v","cco","a","contrast","prefix","_calculateContrastColorsForCurrentValues","contrastColorVar","hueVarVal","vars","forEach","s","setStyle","DashCase","isContrast","includes","noRgb","replace","startsWith","concat","getComputedStyle","getPropertyValue","baseLight","baseDark","multiply","baseTriad","tetrad","getColorObject","mix","rgb1","rgb2","Math","floor","_4","ɵfac","MaterialCssVarsService_Factory","t","ɵɵinject","RendererFactory2","_5","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","Document","decorators","undefined","MaterialCssVarsModule","forRoot","config","ngModule","providers","provide","useValue","materialCssVarsService","MaterialCssVarsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations"],"sources":["C:/Users/Manav Gupta/Downloads/fms/fms/frontend/fms_frontend/node_modules/angular-material-css-vars/fesm2022/angular-material-css-vars.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, RendererStyleFlags2, Injectable, Inject, NgModule } from '@angular/core';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nvar MatCssPalettePrefix;\n(function (MatCssPalettePrefix) {\n    MatCssPalettePrefix[\"Primary\"] = \"--palette-primary-\";\n    MatCssPalettePrefix[\"Accent\"] = \"--palette-accent-\";\n    MatCssPalettePrefix[\"Warn\"] = \"--palette-warn-\";\n})(MatCssPalettePrefix || (MatCssPalettePrefix = {}));\nvar MaterialCssVariables;\n(function (MaterialCssVariables) {\n    MaterialCssVariables[\"Primary50\"] = \"--palette-primary-50\";\n    MaterialCssVariables[\"Primary100\"] = \"--palette-primary-100\";\n    MaterialCssVariables[\"Primary200\"] = \"--palette-primary-200\";\n    MaterialCssVariables[\"Primary300\"] = \"--palette-primary-300\";\n    MaterialCssVariables[\"Primary400\"] = \"--palette-primary-400\";\n    MaterialCssVariables[\"Primary500\"] = \"--palette-primary-500\";\n    MaterialCssVariables[\"Primary600\"] = \"--palette-primary-600\";\n    MaterialCssVariables[\"Primary700\"] = \"--palette-primary-700\";\n    MaterialCssVariables[\"Primary800\"] = \"--palette-primary-800\";\n    MaterialCssVariables[\"Primary900\"] = \"--palette-primary-900\";\n    MaterialCssVariables[\"PrimaryA100\"] = \"--palette-primary-A100\";\n    MaterialCssVariables[\"PrimaryA200\"] = \"--palette-primary-A200\";\n    MaterialCssVariables[\"PrimaryA400\"] = \"--palette-primary-A400\";\n    MaterialCssVariables[\"PrimaryA700\"] = \"--palette-primary-A700\";\n    MaterialCssVariables[\"PrimaryContrast50\"] = \"--palette-primary-contrast-50\";\n    MaterialCssVariables[\"PrimaryContrast100\"] = \"--palette-primary-contrast-100\";\n    MaterialCssVariables[\"PrimaryContrast200\"] = \"--palette-primary-contrast-200\";\n    MaterialCssVariables[\"PrimaryContrast300\"] = \"--palette-primary-contrast-300\";\n    MaterialCssVariables[\"PrimaryContrast400\"] = \"--palette-primary-contrast-400\";\n    MaterialCssVariables[\"PrimaryContrast500\"] = \"--palette-primary-contrast-500\";\n    MaterialCssVariables[\"PrimaryContrast600\"] = \"--palette-primary-contrast-600\";\n    MaterialCssVariables[\"PrimaryContrast700\"] = \"--palette-primary-contrast-700\";\n    MaterialCssVariables[\"PrimaryContrast800\"] = \"--palette-primary-contrast-800\";\n    MaterialCssVariables[\"PrimaryContrast900\"] = \"--palette-primary-contrast-900\";\n    MaterialCssVariables[\"PrimaryContrastA100\"] = \"--palette-primary-contrast-A100\";\n    MaterialCssVariables[\"PrimaryContrastA200\"] = \"--palette-primary-contrast-A200\";\n    MaterialCssVariables[\"PrimaryContrastA400\"] = \"--palette-primary-contrast-A400\";\n    MaterialCssVariables[\"PrimaryContrastA700\"] = \"--palette-primary-contrast-A700\";\n    // ACCENT\n    MaterialCssVariables[\"Accent50\"] = \"--palette-accent-50\";\n    MaterialCssVariables[\"Accent100\"] = \"--palette-accent-100\";\n    MaterialCssVariables[\"Accent200\"] = \"--palette-accent-200\";\n    MaterialCssVariables[\"Accent300\"] = \"--palette-accent-300\";\n    MaterialCssVariables[\"Accent400\"] = \"--palette-accent-400\";\n    MaterialCssVariables[\"Accent500\"] = \"--palette-accent-500\";\n    MaterialCssVariables[\"Accent600\"] = \"--palette-accent-600\";\n    MaterialCssVariables[\"Accent700\"] = \"--palette-accent-700\";\n    MaterialCssVariables[\"Accent800\"] = \"--palette-accent-800\";\n    MaterialCssVariables[\"Accent900\"] = \"--palette-accent-900\";\n    MaterialCssVariables[\"AccentA100\"] = \"--palette-accent-A100\";\n    MaterialCssVariables[\"AccentA200\"] = \"--palette-accent-A200\";\n    MaterialCssVariables[\"AccentA400\"] = \"--palette-accent-A400\";\n    MaterialCssVariables[\"AccentA700\"] = \"--palette-accent-A700\";\n    MaterialCssVariables[\"DarkAccentText\"] = \"--dark-accent-text\";\n    MaterialCssVariables[\"LightAccentText\"] = \"--light-accent-text\";\n    // WARN\n    MaterialCssVariables[\"Warn50\"] = \"--palette-warn-50\";\n    MaterialCssVariables[\"Warn100\"] = \"--palette-warn-100\";\n    MaterialCssVariables[\"Warn200\"] = \"--palette-warn-200\";\n    MaterialCssVariables[\"Warn300\"] = \"--palette-warn-300\";\n    MaterialCssVariables[\"Warn400\"] = \"--palette-warn-400\";\n    MaterialCssVariables[\"Warn500\"] = \"--palette-warn-500\";\n    MaterialCssVariables[\"Warn600\"] = \"--palette-warn-600\";\n    MaterialCssVariables[\"Warn700\"] = \"--palette-warn-700\";\n    MaterialCssVariables[\"Warn800\"] = \"--palette-warn-800\";\n    MaterialCssVariables[\"Warn900\"] = \"--palette-warn-900\";\n    MaterialCssVariables[\"WarnA100\"] = \"--palette-warn-A100\";\n    MaterialCssVariables[\"WarnA200\"] = \"--palette-warn-A200\";\n    MaterialCssVariables[\"WarnA400\"] = \"--palette-warn-A400\";\n    MaterialCssVariables[\"WarnA700\"] = \"--palette-warn-A700\";\n    MaterialCssVariables[\"DarkWarnText\"] = \"--dark-warn-text\";\n    MaterialCssVariables[\"LightWarnText\"] = \"--light-warn-text\";\n})(MaterialCssVariables || (MaterialCssVariables = {}));\n\nconst DEFAULT_MAT_CSS_CFG = {\n    isAutoContrast: true,\n    isAlternativeColorAlgorithm: false,\n    darkThemeClass: 'isDarkTheme',\n    lightThemeClass: 'isLightTheme',\n    colorMap: [\n        { name: '50', map: [52, 0, 0] },\n        { name: '100', map: [37, 0, 0] },\n        { name: '200', map: [26, 0, 0] },\n        { name: '300', map: [12, 0, 0] },\n        { name: '400', map: [6, 0, 0] },\n        { name: '500', map: [0, 0, 0] },\n        { name: '600', map: [0, 6, 0] },\n        { name: '700', map: [0, 12, 0] },\n        { name: '800', map: [0, 18, 0] },\n        { name: '900', map: [0, 24, 0] },\n        { name: 'A100', map: [50, 0, 30] },\n        { name: 'A200', map: [30, 0, 30] },\n        { name: 'A400', map: [10, 0, 15] },\n        { name: 'A700', map: [5, 0, 5] },\n    ],\n    sortedHues: [\n        '50',\n        '100',\n        '200',\n        '300',\n        '400',\n        '500',\n        '600',\n        '700',\n        '800',\n        '900',\n    ]\n};\n\nconst MATERIAL_CSS_VARS_CFG = new InjectionToken('Mat Css Config');\n\n// @see: https://github.com/angular/angular/issues/20351\n/** @dynamic */\nclass MaterialCssVarsService {\n    static { this.CONTRAST_PREFIX = 'contrast-'; }\n    static { this.DARK_TEXT_VAR = '--dark-primary-text'; }\n    static { this.LIGHT_TEXT_VAR = '--light-primary-text'; }\n    constructor(rendererFactory, document, cfg) {\n        this.document = document;\n        this.contrastColorThresholdPrimary = '400';\n        this.contrastColorThresholdAccent = '400';\n        this.contrastColorThresholdWarn = '400';\n        this.isAutoContrast = false;\n        this.renderer = rendererFactory.createRenderer(null, null);\n        this.ROOT = this.document.documentElement;\n        this.cfg = {\n            ...DEFAULT_MAT_CSS_CFG,\n            ...cfg,\n        };\n        this.isAutoContrast = this.cfg.isAutoContrast;\n        if (typeof this.cfg.isDarkTheme === 'boolean') {\n            this.setDarkTheme(this.cfg.isDarkTheme);\n        }\n        if (this.cfg.primary) {\n            this.setPrimaryColor(this.cfg.primary);\n        }\n        if (this.cfg.accent) {\n            this.setAccentColor(this.cfg.accent);\n        }\n        if (this.cfg.warn) {\n            this.setWarnColor(this.cfg.warn);\n        }\n    }\n    setPrimaryColor(hex) {\n        this.primary = hex;\n        const varPrefix = MatCssPalettePrefix.Primary;\n        const stylePrimary = this._computePaletteColors(varPrefix, this.primary);\n        this._setStyle(stylePrimary);\n        if (this.isAutoContrast) {\n            this._recalculateAndSetContrastColor(varPrefix);\n        }\n    }\n    setAccentColor(hex) {\n        this.accent = hex;\n        const varPrefix = MatCssPalettePrefix.Accent;\n        const styleAccent = this._computePaletteColors(varPrefix, this.accent);\n        this._setStyle(styleAccent);\n        if (this.isAutoContrast) {\n            this._recalculateAndSetContrastColor(varPrefix);\n        }\n    }\n    setWarnColor(hex) {\n        this.warn = hex;\n        const varPrefix = MatCssPalettePrefix.Warn;\n        const styleWarn = this._computePaletteColors(varPrefix, this.warn);\n        this._setStyle(styleWarn);\n        if (this.isAutoContrast) {\n            this._recalculateAndSetContrastColor(varPrefix);\n        }\n    }\n    setVariable(cssVarName, value) {\n        this._setStyle([{\n                name: cssVarName,\n                val: value,\n            }]);\n    }\n    setDarkTheme(isDark) {\n        if (isDark) {\n            this.document.body.classList.remove(this.cfg.lightThemeClass);\n            this.document.body.classList.add(this.cfg.darkThemeClass);\n        }\n        else {\n            this.document.body.classList.remove(this.cfg.darkThemeClass);\n            this.document.body.classList.add(this.cfg.lightThemeClass);\n        }\n        this.isDarkTheme = isDark;\n    }\n    setAutoContrastEnabled(val) {\n        this.isAutoContrast = val;\n        if (val) {\n            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Primary);\n            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Accent);\n            this._recalculateAndSetContrastColor(MatCssPalettePrefix.Warn);\n        }\n        else {\n            this.setContrastColorThresholdPrimary(this.contrastColorThresholdPrimary);\n            this.setContrastColorThresholdAccent(this.contrastColorThresholdAccent);\n            this.setContrastColorThresholdWarn(this.contrastColorThresholdWarn);\n        }\n    }\n    setContrastColorThresholdPrimary(threshold) {\n        this.contrastColorThresholdPrimary = threshold;\n        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Primary);\n    }\n    setContrastColorThresholdAccent(threshold) {\n        this.contrastColorThresholdAccent = threshold;\n        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Accent);\n    }\n    setContrastColorThresholdWarn(threshold) {\n        this.contrastColorThresholdWarn = threshold;\n        this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Warn);\n    }\n    setContrastColorThreshold(threshold, palettePrefix) {\n        if (!threshold || !palettePrefix || this.isAutoContrast) {\n            return;\n        }\n        let color = MaterialCssVarsService.DARK_TEXT_VAR;\n        const updates = this.cfg.sortedHues.map((hue) => {\n            if (hue === threshold) {\n                color = MaterialCssVarsService.LIGHT_TEXT_VAR;\n            }\n            return {\n                val: `var(${color})`,\n                name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`,\n            };\n        });\n        this._setStyle(updates);\n    }\n    /**\n     * Generate palette color based on traditional values\n     */\n    setAlternativeColorAlgorithm(traditional) {\n        this.cfg.isAlternativeColorAlgorithm = traditional;\n        this.setPrimaryColor(this.primary);\n        this.setAccentColor(this.accent);\n        this.setWarnColor(this.warn);\n    }\n    /** @deprecated use setContrastColorThresholdPrimary instead */\n    changeContrastColorThresholdPrimary(threshold) {\n        this.setContrastColorThresholdPrimary(threshold);\n    }\n    /** @deprecated use setContrastColorThresholdAccent instead */\n    changeContrastColorThresholdAccent(threshold) {\n        this.setContrastColorThresholdAccent(threshold);\n    }\n    /** @deprecated use setContrastColorThresholdWarn instead */\n    changeContrastColorThresholdWarn(threshold) {\n        this.setContrastColorThresholdWarn(threshold);\n    }\n    /** @deprecated use setContrastColorThreshold instead */\n    changeContrastColorThreshold(threshold, palettePrefix) {\n        this.setContrastColorThreshold(threshold, palettePrefix);\n    }\n    getPaletteForColor(hex) {\n        if (this.cfg.isAlternativeColorAlgorithm) {\n            return this.getTraditionalPaletteForColor(hex);\n        }\n        else {\n            return this.getConstantinPaletteForColor(hex);\n        }\n    }\n    getTraditionalPaletteForColor(hex) {\n        return this.cfg.colorMap.map(item => {\n            const mappedColor = new TinyColor(hex)\n                .lighten(item.map[0])\n                .darken(item.map[1])\n                .saturate(item.map[2]);\n            const c = new TinyColor(mappedColor);\n            return {\n                hue: item.name,\n                isLight: c.isLight(),\n                color: {\n                    ...c.toRgb(),\n                    str: `rgb(${c.toRgb().r},${c.toRgb().g},${c.toRgb().b})`\n                }\n            };\n        });\n    }\n    getConstantinPaletteForColor(hex) {\n        return this.cfg.colorMap.map((item) => {\n            const c = this.computePalletTriad(hex, item.name);\n            return {\n                hue: item.name,\n                isLight: c.isLight,\n                color: {\n                    ...c.rgb,\n                    str: `rgb(${c.rgb.r},${c.rgb.g},${c.rgb.b})`\n                }\n            };\n        });\n    }\n    getPaletteWithContrastForColor(hex) {\n        const lightText = this._getCssVarValue(MaterialCssVarsService.LIGHT_TEXT_VAR);\n        const darkText = this._getCssVarValue(MaterialCssVarsService.DARK_TEXT_VAR);\n        const palette = this.getPaletteForColor(hex);\n        // TODO handle non auto case\n        return palette.map((item) => {\n            const contrastStr = item.isLight\n                ? lightText\n                : darkText;\n            const sLight = this._replaceNoRgbValue('', contrastStr)\n                .split(',')\n                .map((v) => +v);\n            const cco = { r: sLight[0], g: sLight[1], b: sLight[2], a: 1 };\n            return {\n                ...item,\n                contrast: {\n                    ...cco,\n                    str: `${cco.r},${cco.g},${cco.b}`\n                },\n            };\n        });\n    }\n    _computePaletteColors(prefix, hex) {\n        return this.getPaletteForColor(hex).map(item => {\n            const c = item.color;\n            return {\n                name: `${prefix}${item.hue}`,\n                val: `rgb(${c.r}, ${c.g}, ${c.b})`\n            };\n        });\n    }\n    _recalculateAndSetContrastColor(palettePrefix) {\n        const updates = this._calculateContrastColorsForCurrentValues(palettePrefix)\n            .map(({ contrastColorVar, hue }) => {\n            return {\n                val: `var(${contrastColorVar})`,\n                name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`,\n            };\n        });\n        this._setStyle(updates);\n    }\n    _calculateContrastColorsForCurrentValues(palettePrefix) {\n        return this.cfg.sortedHues.map((hue) => {\n            const hueVarVal = this._getCssVarValue(`${palettePrefix}${hue}`);\n            const c = new TinyColor(`rgb(${hueVarVal})`);\n            const contrastColorVar = c.isDark()\n                ? MaterialCssVarsService.LIGHT_TEXT_VAR\n                : MaterialCssVarsService.DARK_TEXT_VAR;\n            return {\n                contrastColorVar,\n                hue,\n            };\n        });\n    }\n    _setStyle(vars) {\n        vars.forEach((s) => {\n            this.renderer.setStyle(this.ROOT, s.name, s.val, RendererStyleFlags2.DashCase);\n            this.renderer.setStyle(this.ROOT, s.name + '-no-rgb', this._replaceNoRgbValue(s.name, s.val), RendererStyleFlags2.DashCase);\n        });\n    }\n    /**\n     * Replace variables that are formatted as rgba(var(rgb(xxx))) to be var(xxx) to allow proper formatting\n     * in variable overrides.\n     * @param value\n     * @returns\n     */\n    _replaceNoRgbValue(name, value) {\n        const isContrast = name.includes(MaterialCssVarsService.CONTRAST_PREFIX);\n        let noRgb = '';\n        if (isContrast) {\n            noRgb = value.replace(')', '-no-rgb)');\n        }\n        else {\n            noRgb = value.replace('rgba(', '').replace('rgb(', '').replace(')', '');\n            if (noRgb.startsWith('var(')) {\n                noRgb = noRgb.concat(')');\n            }\n        }\n        return noRgb;\n    }\n    _getCssVarValue(v) {\n        return getComputedStyle(this.ROOT).getPropertyValue(v);\n    }\n    /**\n     * Compute pallet colors based on a Triad (Constantin)\n     * see: https://github.com/mbitson/mcg\n     */\n    computePalletTriad(hex, hue) {\n        const baseLight = new TinyColor('#ffffff');\n        const baseDark = this.multiply(new TinyColor(hex).toRgb(), new TinyColor(hex).toRgb());\n        const baseTriad = new TinyColor(hex).tetrad();\n        let color;\n        switch (hue) {\n            case '50':\n                color = this.getColorObject(baseLight.mix(hex, 12));\n                break;\n            case '100':\n                color = this.getColorObject(baseLight.mix(hex, 30));\n                break;\n            case '200':\n                color = this.getColorObject(baseLight.mix(hex, 50));\n                break;\n            case '300':\n                color = this.getColorObject(baseLight.mix(hex, 70));\n                break;\n            case '400':\n                color = this.getColorObject(baseLight.mix(hex, 85));\n                break;\n            case '500':\n                color = this.getColorObject(baseLight.mix(hex, 100));\n                break;\n            case '600':\n                color = this.getColorObject(baseDark.mix(hex, 87));\n                break;\n            case '700':\n                color = this.getColorObject(baseDark.mix(hex, 70));\n                break;\n            case '800':\n                color = this.getColorObject(baseDark.mix(hex, 54));\n                break;\n            case '900':\n                color = this.getColorObject(baseDark.mix(hex, 25));\n                break;\n            case 'A100':\n                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(65));\n                break;\n            case 'A200':\n                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(55));\n                break;\n            case 'A400':\n                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(45));\n                break;\n            case 'A700':\n                color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(40));\n                break;\n            default:\n                break;\n        }\n        return color;\n    }\n    multiply(rgb1, rgb2) {\n        rgb1.b = Math.floor(rgb1.b * rgb2.b / 255);\n        rgb1.g = Math.floor(rgb1.g * rgb2.g / 255);\n        rgb1.r = Math.floor(rgb1.r * rgb2.r / 255);\n        return new TinyColor('rgb ' + rgb1.r + ' ' + rgb1.g + ' ' + rgb1.b);\n    }\n    getColorObject(value) {\n        const c = new TinyColor(value);\n        return { rgb: c.toRgb(), isLight: c.isLight() };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsService, deps: [{ token: i0.RendererFactory2 }, { token: DOCUMENT }, { token: MATERIAL_CSS_VARS_CFG }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.RendererFactory2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MATERIAL_CSS_VARS_CFG]\n                }] }]; } });\n\nclass MaterialCssVarsModule {\n    static forRoot(config) {\n        return {\n            ngModule: MaterialCssVarsModule,\n            providers: [{ provide: MATERIAL_CSS_VARS_CFG, useValue: config }]\n        };\n    }\n    // This is necessary so the service is constructed, even if the service is never injected\n    constructor(materialCssVarsService) {\n        this.materialCssVarsService = materialCssVarsService;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsModule, deps: [{ token: MaterialCssVarsService }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsModule, imports: [CommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MaterialCssVarsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        CommonModule\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: MaterialCssVarsService }]; } });\n\n/*\n * Public API Surface of material-css-vars\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCssPalettePrefix, MaterialCssVariables, MaterialCssVarsModule, MaterialCssVarsService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}