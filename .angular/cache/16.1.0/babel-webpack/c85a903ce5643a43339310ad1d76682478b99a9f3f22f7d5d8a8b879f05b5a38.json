{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"../background-loc/services/bl.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@swimlane/ngx-charts\";\nimport * as i6 from \"primeng/selectbutton\";\nimport * as i7 from \"../space-allocation-statistics-by-bl-fl/space-allocation-statistics-by-bl-fl.component\";\nimport * as i8 from \"../space-allocation-statistics-by-div-dep/space-allocation-statistics-by-div-dep.component\";\nfunction SpaceDashboardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\");\n    i0.ɵɵelement(2, \"ngx-charts-pie-grid\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"results\", ctx_r0.single[i_r4])(\"designatedTotal\", ctx_r0.single[i_r4][0].total)(\"view\", ctx_r0.view)(\"scheme\", ctx_r0.colorSchemes[i_r4 % ctx_r0.colorSchemes.length])(\"label\", \"Allocated Area (sq.ft)\");\n  }\n}\nfunction SpaceDashboardComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"div\")(3, \"p\", 12);\n    i0.ɵɵtext(4, \"Allocation by Building\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(5, \"app-space-allocation-statistics-by-bl-fl\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 11)(7, \"div\")(8, \"p\", 12);\n    i0.ɵɵtext(9, \"Allocation by Division\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(10, \"app-space-allocation-statistics-by-div-dep\", 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"isDashboardUse\", ctx_r1.isDashboardUse)(\"dashboardDateRange\", ctx_r1.dashboardDateRange);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"isDashboardUse\", ctx_r1.isDashboardUse)(\"dashboardDateRange\", ctx_r1.dashboardDateRange);\n  }\n}\nfunction SpaceDashboardComponent_ngx_spinner_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 14)(1, \"p\", 15);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport let SpaceDashboardComponent = /*#__PURE__*/(() => {\n  class SpaceDashboardComponent {\n    constructor(datePipe, spinner, blServ, cdr) {\n      this.datePipe = datePipe;\n      this.spinner = spinner;\n      this.blServ = blServ;\n      this.cdr = cdr;\n      this.single = [];\n      this.dashboardDateRange = {\n        dateFrom: '',\n        dateTo: ''\n      };\n      this.view = [200, 200];\n      this.showLegend = true;\n      this.showLabels = false;\n      this.showDoughnut = true;\n      this.isDashboardUse = false;\n      this.hideSeriesLabel = true;\n      this.colorSchemes = [{\n        domain: ['#5AA454']\n      }, {\n        domain: ['#E44D25']\n      }, {\n        domain: ['#CFC0BB']\n      }, {\n        domain: ['#7aa3e5']\n      }, {\n        domain: ['#a8385d']\n      }];\n      this.viewByData = [{\n        \"id\": 0,\n        \"label\": 'Current Month',\n        \"value\": \"current_month\"\n      }, {\n        \"id\": 1,\n        \"label\": 'Current Year',\n        \"value\": \"current_year\"\n      }, {\n        \"id\": 2,\n        \"label\": 'Current Financial Year',\n        \"value\": \"current_financial_year\"\n      }];\n      this.viewByValue = 'current_month';\n      this.showSpinner = false;\n    }\n    ngOnInit() {\n      this.getDateRange();\n      this.onSearch();\n    }\n    onViewByChange(event) {\n      this.getDateRange();\n      this.onSearch();\n    }\n    getDateRange() {\n      this.isDashboardUse = false;\n      this.cdr.detectChanges();\n      let dateFrom = '';\n      let dateEnd = '';\n      if (this.viewByValue == \"current_month\") {\n        let result = this.getCurrentMonthFirstAndLastDate();\n        let datestartvalue = result.firstDate;\n        let dateendvalue = result.lastDate;\n        dateFrom = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      } else if (this.viewByValue == \"current_year\") {\n        let result = this.getCurrentYearFirstAndLastDate();\n        let datestartvalue = result.firstDate;\n        let dateendvalue = result.lastDate;\n        dateFrom = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      } else if (this.viewByValue == \"current_financial_year\") {\n        let result = this.getCurrentFinancialYearFirstAndLastDate();\n        let datestartvalue = result.firstDate;\n        let dateendvalue = result.lastDate;\n        dateFrom = this.datePipe.transform(datestartvalue, \"yyyy-MM-dd\");\n        dateEnd = this.datePipe.transform(dateendvalue, \"yyyy-MM-dd\");\n      }\n      this.dashboardDateRange.dateFrom = dateFrom;\n      this.dashboardDateRange.dateTo = dateEnd;\n      this.isDashboardUse = true;\n      this.cdr.detectChanges();\n    }\n    onSearch() {\n      this.showSpinner = true;\n      this.spinner.show();\n      this.single = [];\n      this.blServ.getbuildingwiseallocation(this.dashboardDateRange).subscribe(res => {\n        let result = res;\n        result.forEach(blData => {\n          if (blData.totalArea > 0) {\n            this.single.push([{\n              \"name\": blData.blCode,\n              \"value\": blData.allocatedArea,\n              \"total\": blData.totalArea\n            }]);\n          }\n        });\n        this.spinner.hide();\n        this.showSpinner = false;\n      });\n    }\n    getCurrentMonthFirstAndLastDate() {\n      const date = new Date();\n      const result = {\n        firstDate: new Date(),\n        lastDate: new Date()\n      };\n      result.firstDate.setDate(1);\n      result.firstDate.setHours(0, 0, 0, 0);\n      result.lastDate.setMonth(date.getMonth() + 1, 0);\n      result.lastDate.setHours(23, 59, 59, 999);\n      return result;\n    }\n    getCurrentYearFirstAndLastDate() {\n      const date = new Date();\n      const firstDate = new Date(date.getFullYear(), 0, 1);\n      const lastDate = new Date(date.getFullYear(), 11, 31);\n      return {\n        firstDate: firstDate,\n        lastDate: lastDate\n      };\n    }\n    getCurrentFinancialYearFirstAndLastDate() {\n      const currentDate = new Date();\n      const financialYearStart = new Date(currentDate.getFullYear(), 3, 1);\n      const nextYear = currentDate.getFullYear() + 1;\n      const financialYearEnd = new Date(nextYear, 2, 31);\n      return {\n        firstDate: financialYearStart,\n        lastDate: financialYearEnd\n      };\n    }\n    static #_ = this.ɵfac = function SpaceDashboardComponent_Factory(t) {\n      return new (t || SpaceDashboardComponent)(i0.ɵɵdirectiveInject(i1.DatePipe), i0.ɵɵdirectiveInject(i2.NgxSpinnerService), i0.ɵɵdirectiveInject(i3.BuildingService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SpaceDashboardComponent,\n      selectors: [[\"app-space-dashboard\"]],\n      decls: 8,\n      vars: 6,\n      consts: [[2, \"height\", \"32vh\"], [2, \"height\", \"4vh\"], [\"optionLabel\", \"label\", \"optionValue\", \"value\", 3, \"options\", \"ngModel\", \"multiple\", \"ngModelChange\", \"onChange\"], [1, \"card\", 2, \"width\", \"100%\", \"height\", \"27.3vh\", \"display\", \"flex\", \"flex-direction\", \"row\", \"align-items\", \"center\", \"overflow-x\", \"auto\"], [\"style\", \"margin-left:10px;\", 4, \"ngFor\", \"ngForOf\"], [2, \"height\", \"59vh\"], [\"style\", \"display: flex; flex-direction: row;height:100%;\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [2, \"margin-left\", \"10px\"], [3, \"results\", \"designatedTotal\", \"view\", \"scheme\", \"label\"], [2, \"display\", \"flex\", \"flex-direction\", \"row\", \"height\", \"100%\"], [1, \"card\", 2, \"width\", \"50%\"], [1, \"report-header\"], [3, \"isDashboardUse\", \"dashboardDateRange\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n      template: function SpaceDashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"p-selectButton\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function SpaceDashboardComponent_Template_p_selectButton_ngModelChange_2_listener($event) {\n            return ctx.viewByValue = $event;\n          })(\"onChange\", function SpaceDashboardComponent_Template_p_selectButton_onChange_2_listener($event) {\n            return ctx.onViewByChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(3, \"div\", 3);\n          i0.ɵɵtemplate(4, SpaceDashboardComponent_div_4_Template, 3, 5, \"div\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 5);\n          i0.ɵɵtemplate(6, SpaceDashboardComponent_div_6_Template, 11, 4, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(7, SpaceDashboardComponent_ngx_spinner_7_Template, 3, 1, \"ngx-spinner\", 7);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"options\", ctx.viewByData)(\"ngModel\", ctx.viewByValue)(\"multiple\", false);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.single);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isDashboardUse);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgIf, i4.NgControlStatus, i4.NgModel, i2.NgxSpinnerComponent, i5.PieGridComponent, i6.SelectButton, i7.SpaceAllocationStatisticsByBlFlComponent, i8.SpaceAllocationStatisticsByDivDepComponent],\n      styles: [\".report-header[_ngcontent-%COMP%]{margin:5px 0 0 5px;font-family:Segoe UI,Tahoma,Geneva,Verdana,sans-serif}\"]\n    });\n  }\n  return SpaceDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}