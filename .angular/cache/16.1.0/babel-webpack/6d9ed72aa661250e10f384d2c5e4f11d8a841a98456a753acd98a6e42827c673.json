{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/ui/ppm-plan/services/ppm-plan-services\";\nimport * as i3 from \"src/app/ui/Helpdesk/tools/services/tools.services\";\nimport * as i4 from \"../../services/plan-tool-services\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/dialog\";\nimport * as i8 from \"@angular/material/legacy-card\";\nimport * as i9 from \"ng-zorro-antd/table\";\nimport * as i10 from \"@ng-select/ng-select\";\nimport * as i11 from \"../../../../directive/numbers-only.directive\";\nimport * as i12 from \"../../../../directive/directive/two-digit-decimal-number\";\nimport * as i13 from \"../../../Helpdesk/tools/widgets/add-tools/add-tools.component\";\nfunction AddPlanToolComponent_label_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"Tool already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"35vw\"\n  };\n};\nfunction AddPlanToolComponent_p_dialog_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dialog\", 14);\n    i0.ɵɵlistener(\"visibleChange\", function AddPlanToolComponent_p_dialog_27_Template_p_dialog_visibleChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.showDetails = $event);\n    });\n    i0.ɵɵelementStart(1, \"form\", 15)(2, \"mat-card\")(3, \"mat-card-content\", 16);\n    i0.ɵɵelement(4, \"app-add-tools\", 17);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(6, _c0));\n    i0.ɵɵproperty(\"visible\", ctx_r1.showDetails)(\"modal\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.frmToolsDetail);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"isNew\", true);\n  }\n}\nexport let AddPlanToolComponent = /*#__PURE__*/(() => {\n  class AddPlanToolComponent {\n    constructor(formBuilder, ppmPlanService, toolsService, planToolsService) {\n      this.formBuilder = formBuilder;\n      this.ppmPlanService = ppmPlanService;\n      this.toolsService = toolsService;\n      this.planToolsService = planToolsService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.planStepList = [];\n      this.toolsList = [];\n      this.errorMsg = '';\n      this.toolsExist = false;\n      this.showDetails = false;\n      this.enableDetailsBtn = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.planToolFormPanel = this.formBuilder.group({\n        planToolId: [null],\n        planStepId: [null, [Validators.required]],\n        toolId: [null, [Validators.required]],\n        hoursRequired: [null, [Validators.required]]\n      });\n      this.frmToolsDetail = this.formBuilder.group({\n        toolsFormPanel: []\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.planToolFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadPlansTepsData();\n      this.loadTools();\n    }\n    loadPlansTepsData() {\n      this.ppmPlanService.getAllPlanSteps(0).subscribe(res => {\n        if (res.status != 202) {\n          this.planStepList = res;\n        } else {\n          this.planStepList = [];\n        }\n      });\n    }\n    loadTools() {\n      this.toolsService.getAllTools().subscribe(res => {\n        this.toolsList = res;\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const stateDetails = {\n        planToolId: this.planToolFormPanel.controls.planToolId.value,\n        planStepId: this.planToolFormPanel.controls.planStepId.value,\n        toolId: this.planToolFormPanel.controls.toolId.value,\n        hoursRequired: this.planToolFormPanel.controls.hoursRequired.value\n      };\n      return stateDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.planToolFormPanel.patchValue({\n          planToolId: value.planToolId,\n          planStepId: value.planStepId,\n          toolId: value.toolId,\n          hoursRequired: value.hoursRequired\n        });\n        if (value.toolId) {\n          this.enableDetailsBtn = true;\n          this.previousTools = value.toolId;\n          var tool = this.getSelectedTool(value.toolId);\n          this.setToolForm(tool);\n        }\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.planToolFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.planToolFormPanel.valid ? null : {\n        planToolFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    selectTool(event) {\n      this.enableDetailsBtn = true;\n      if (this.previousTools != event.toolsId) {\n        let planStepId = this.planToolFormPanel.controls.planStepId.value;\n        let toolId = event.toolsId;\n        this.planToolsService.checkIsPlanToolExists(planStepId, toolId).subscribe(res => {\n          this.toolsExist = false;\n          if (res) {\n            this.toolsExist = true;\n            this.planToolFormPanel.controls['toolId'].setErrors({\n              'incorrect': true\n            });\n            this.planToolFormPanel.updateValueAndValidity();\n          } else {\n            this.toolsExist = false;\n            this.planToolFormPanel.controls['toolId'].setErrors(null);\n            this.planToolFormPanel.updateValueAndValidity();\n          }\n        });\n      }\n    }\n    showPartDetails() {\n      let selectedTool = this.getSelectedTool(this.planToolFormPanel.controls.toolId.value);\n      this.setToolForm(selectedTool);\n      this.showDetails = true;\n    }\n    getSelectedTool(toolId) {\n      let selectedTool = this.toolsList.find(t => t.toolsId === toolId);\n      if (selectedTool) {\n        return selectedTool;\n      }\n    }\n    setToolForm(value) {\n      setTimeout(() => {\n        this.frmToolsDetail.patchValue({\n          toolsFormPanel: value\n        });\n      }, 0);\n    }\n    static #_ = this.ɵfac = function AddPlanToolComponent_Factory(t) {\n      return new (t || AddPlanToolComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PpmPlanService), i0.ɵɵdirectiveInject(i3.ToolsService), i0.ɵɵdirectiveInject(i4.PlanToolService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPlanToolComponent,\n      selectors: [[\"app-add-plan-tool\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddPlanToolComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddPlanToolComponent),\n        multi: true\n      }])],\n      decls: 28,\n      vars: 10,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"planStepId\", \"bindLabel\", \"stepCode\", \"bindValue\", \"planStepId\", \"placeholder\", \"Make a selection\", \"readonly\", \"true\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [2, \"display\", \"flex\"], [1, \"input-label-custom\", 2, \"width\", \"90%\"], [\"appendTo\", \"body\", \"formControlName\", \"toolId\", \"bindLabel\", \"tool\", \"bindValue\", \"toolsId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [2, \"display\", \"flex\", \"margin-top\", \"32px\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-info-circle\", \"matTooltip\", \"View Part Details\", 1, \"p-button-rounded\", \"pull-right\", 3, \"disabled\", \"click\"], [\"class\", \"form-field-lable\", \"style\", \"color:red;\", 4, \"ngIf\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"TwoDigitDecimalNumber\", \"\", \"name\", \"hoursRequired\", \"formControlName\", \"hoursRequired\", 1, \"form-control\"], [\"header\", \"Tool Details\", 3, \"visible\", \"style\", \"modal\", \"visibleChange\", 4, \"ngIf\"], [1, \"form-field-lable\", 2, \"color\", \"red\"], [\"header\", \"Tool Details\", 3, \"visible\", \"modal\", \"visibleChange\"], [1, \"disabled-form\", 3, \"formGroup\"], [\"id\", \"tool\"], [\"formControlName\", \"toolsFormPanel\", 3, \"isNew\"]],\n      template: function AddPlanToolComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Step\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"ng-select\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\")(10, \"div\", 5)(11, \"div\", 6)(12, \"label\", 3);\n          i0.ɵɵtext(13, \"Plan Tool\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"ng-select\", 7);\n          i0.ɵɵlistener(\"change\", function AddPlanToolComponent_Template_ng_select_change_14_listener($event) {\n            return ctx.selectTool($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 8)(16, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function AddPlanToolComponent_Template_button_click_16_listener() {\n            return ctx.showPartDetails();\n          });\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(17, \"tr\")(18, \"td\");\n          i0.ɵɵtemplate(19, AddPlanToolComponent_label_19_Template, 2, 0, \"label\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"td\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"tr\")(22, \"td\")(23, \"div\", 2)(24, \"label\", 3);\n          i0.ɵɵtext(25, \"Required Hours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(26, \"input\", 11);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵtemplate(27, AddPlanToolComponent_p_dialog_27_Template, 5, 7, \"p-dialog\", 12);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.planToolFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.planStepList)(\"searchable\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.toolsList)(\"searchable\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.enableDetailsBtn);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.toolsExist);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", ctx.showDetails);\n        }\n      },\n      dependencies: [i5.NgIf, i6.ButtonDirective, i7.Dialog, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i8.MatLegacyCard, i8.MatLegacyCardContent, i9.NzTableCellDirective, i9.NzTrDirective, i10.NgSelectComponent, i11.NumbersOnlyDirective, i12.TwoDigitDecimalNumberDirective, i13.AddToolsComponent],\n      styles: [\"[_nghost-%COMP%]     .p-button{height:20px!important;width:20px}.disabled-form[_ngcontent-%COMP%]{opacity:.8;pointer-events:none}\"]\n    });\n  }\n  return AddPlanToolComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}