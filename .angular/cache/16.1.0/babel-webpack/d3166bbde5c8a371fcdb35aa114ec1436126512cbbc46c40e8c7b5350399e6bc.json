{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/tokenStorage.service\";\nconst TOKEN_HEADER_KEY = 'Authorization'; // for Spring Boot back-end\n// const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\nexport class AuthInterceptor {\n  constructor(token) {\n    this.token = token;\n  }\n  intercept(req, next) {\n    let authReq = req;\n    let token = this.token.getToken();\n    if (token != null) {\n      // for Spring Boot back-end\n      // token = \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTSIsImlhdCI6MTY1NTQ2NDg3MywiZXhwIjoxNjU1NTUxMjczfQ.0sD3nRbBXw8cNDq4JhdwwieWpDtB1pfooaeDU5d0Ngm1uKy73XomBQILaxs_1Hqab3qOM9VBnVmIj5i2N7Gbkw\";\n      authReq = req.clone({\n        headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n      });\n      // for Node.js Express back-end\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n\n    return next.handle(authReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":{"version":3,"names":["HTTP_INTERCEPTORS","TOKEN_HEADER_KEY","AuthInterceptor","constructor","token","intercept","req","next","authReq","getToken","clone","headers","set","handle","_","i0","ɵɵinject","i1","TokenStorageService","_2","factory","ɵfac","authInterceptorProviders","provide","useClass","multi"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\helper\\auth.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from '../services/tokenStorage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\n// const TOKEN_HEADER_KEY = 'x-access-token';   // for Node.js Express back-end\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    let token = this.token.getToken();\n    if (token != null) {\n      // for Spring Boot back-end\n     // token = \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJGTSIsImlhdCI6MTY1NTQ2NDg3MywiZXhwIjoxNjU1NTUxMjczfQ.0sD3nRbBXw8cNDq4JhdwwieWpDtB1pfooaeDU5d0Ngm1uKy73XomBQILaxs_1Hqab3qOM9VBnVmIj5i2N7Gbkw\";\n\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n\n      // for Node.js Express back-end\n      // authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, token) });\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAmB,sBAAsB;;;AAMnE,MAAMC,gBAAgB,GAAG,eAAe,CAAC,CAAO;AAChD;AAGA,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,KAA0B;IAA1B,KAAAA,KAAK,GAALA,KAAK;EAAyB;EAElDC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,OAAO,GAAGF,GAAG;IACjB,IAAIF,KAAK,GAAG,IAAI,CAACA,KAAK,CAACK,QAAQ,EAAE;IACjC,IAAIL,KAAK,IAAI,IAAI,EAAE;MACjB;MACD;MAECI,OAAO,GAAGF,GAAG,CAACI,KAAK,CAAC;QAAEC,OAAO,EAAEL,GAAG,CAACK,OAAO,CAACC,GAAG,CAACX,gBAAgB,EAAE,SAAS,GAAGG,KAAK;MAAC,CAAE,CAAC;MAEtF;MACA;;;IAEF,OAAOG,IAAI,CAACM,MAAM,CAACL,OAAO,CAAC;EAC7B;EAAC,QAAAM,CAAA,G;qBAhBUZ,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfjB,eAAe;IAAAkB,OAAA,EAAflB,eAAe,CAAAmB;EAAA;;AAmB5B,OAAO,MAAMC,wBAAwB,GAAG,CACtC;EAAEC,OAAO,EAAEvB,iBAAiB;EAAEwB,QAAQ,EAAEtB,eAAe;EAAEuB,KAAK,EAAE;AAAI,CAAE,CACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}