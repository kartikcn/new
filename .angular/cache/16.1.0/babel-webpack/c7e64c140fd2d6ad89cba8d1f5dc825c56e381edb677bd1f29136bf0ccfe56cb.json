{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/data.service\";\nexport class RmConfigService {\n  constructor(rmConfigService, rmConfigDetailService) {\n    this.rmConfigService = rmConfigService;\n    this.rmConfigDetailService = rmConfigDetailService;\n  }\n  getRmConfig(data) {\n    return this.rmConfigService.search('rmConfig', 'getById', data);\n  }\n  saveRmConfig(data) {\n    return this.rmConfigDetailService.add('rmConfig', 'save', data);\n  }\n  deleteRmConfigById(id) {\n    return this.rmConfigService.deleteById('rmConfig', 'delete', id);\n  }\n  getAvailableRooms(filterData) {\n    return this.rmConfigService.search('rmConfig', 'getRmConfigList', filterData);\n  }\n  getAllFilterData() {\n    return this.rmConfigService.getAll('rmConfig', 'getAllFilterData');\n  }\n  checkRmArrangementExists(data) {\n    return this.rmConfigService.search('rmConfig', 'checkRmConfig', data);\n  }\n  getRoomsList(id) {\n    return this.rmConfigDetailService.getAllById(\"rmConfig\", \"getRoomsList\", id);\n  }\n  getReservableRoomsPaginated(data) {\n    return this.rmConfigDetailService.search(\"rmConfig\", \"getReservRmPaginated\", data);\n  }\n  getAvailableRoomsForRecurrence(data) {\n    return this.rmConfigService.search('rmConfig', 'recurrence', data);\n  }\n  getRmConfigsByIds(data) {\n    return this.rmConfigService.search('rmConfig', 'getallByIds', data);\n  }\n  getRmConfigByBlAndFlId(data) {\n    return this.rmConfigService.search('rmConfig', 'getallbyblandfl', data);\n  }\n  static #_ = this.ɵfac = function RmConfigService_Factory(t) {\n    return new (t || RmConfigService)(i0.ɵɵinject(i1.DataService), i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RmConfigService,\n    factory: RmConfigService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["RmConfigService","constructor","rmConfigService","rmConfigDetailService","getRmConfig","data","search","saveRmConfig","add","deleteRmConfigById","id","deleteById","getAvailableRooms","filterData","getAllFilterData","getAll","checkRmArrangementExists","getRoomsList","getAllById","getReservableRoomsPaginated","getAvailableRoomsForRecurrence","getRmConfigsByIds","getRmConfigByBlAndFlId","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/rm-config/rm-config/services/rm-config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataService } from 'src/app/services/data.service';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RmConfigService {\n  \n  \n\n  constructor(\n    private rmConfigService: DataService<any>,\n    private rmConfigDetailService: DataService<any>\n\n  ) { }\n\n\n  public getRmConfig(data:any) {\n    return this.rmConfigService.search('rmConfig', 'getById',data);\n  }\n  \n  public saveRmConfig(data: any): Observable<any> {\n    return this.rmConfigDetailService.add('rmConfig', 'save', data);\n  }\n  public deleteRmConfigById(id: any) {\n    \n    return this.rmConfigService.deleteById('rmConfig', 'delete', id);\n}\n\n  getAvailableRooms(filterData: any) {\n    return this.rmConfigService.search('rmConfig','getRmConfigList',filterData);\n  }\n  \n  getAllFilterData() {\n   return this.rmConfigService.getAll('rmConfig','getAllFilterData');\n  }\n   public checkRmArrangementExists(data:any){\n    return this.rmConfigService.search('rmConfig','checkRmConfig',data);\n   }\n\n   public getRoomsList(id:any){\n    return this.rmConfigDetailService.getAllById(\"rmConfig\",\"getRoomsList\",id);\n   }\n\n   public getReservableRoomsPaginated(data:any){\n    return this.rmConfigDetailService.search(\"rmConfig\",\"getReservRmPaginated\",data);\n   }\n\n   public getAvailableRoomsForRecurrence(data:any){\n    return this.rmConfigService.search('rmConfig','recurrence',data);\n   }\n\n   public getRmConfigsByIds(data:any) {\n    return this.rmConfigService.search('rmConfig', 'getallByIds',data);\n  }\n\n  public getRmConfigByBlAndFlId(data:any) {\n    return this.rmConfigService.search('rmConfig', 'getallbyblandfl',data);\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,eAAe;EAI1BC,YACUC,eAAiC,EACjCC,qBAAuC;IADvC,KAAAD,eAAe,GAAfA,eAAe;IACf,KAAAC,qBAAqB,GAArBA,qBAAqB;EAE3B;EAGGC,WAAWA,CAACC,IAAQ;IACzB,OAAO,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,UAAU,EAAE,SAAS,EAACD,IAAI,CAAC;EAChE;EAEOE,YAAYA,CAACF,IAAS;IAC3B,OAAO,IAAI,CAACF,qBAAqB,CAACK,GAAG,CAAC,UAAU,EAAE,MAAM,EAAEH,IAAI,CAAC;EACjE;EACOI,kBAAkBA,CAACC,EAAO;IAE/B,OAAO,IAAI,CAACR,eAAe,CAACS,UAAU,CAAC,UAAU,EAAE,QAAQ,EAAED,EAAE,CAAC;EACpE;EAEEE,iBAAiBA,CAACC,UAAe;IAC/B,OAAO,IAAI,CAACX,eAAe,CAACI,MAAM,CAAC,UAAU,EAAC,iBAAiB,EAACO,UAAU,CAAC;EAC7E;EAEAC,gBAAgBA,CAAA;IACf,OAAO,IAAI,CAACZ,eAAe,CAACa,MAAM,CAAC,UAAU,EAAC,kBAAkB,CAAC;EAClE;EACQC,wBAAwBA,CAACX,IAAQ;IACvC,OAAO,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,UAAU,EAAC,eAAe,EAACD,IAAI,CAAC;EACpE;EAEOY,YAAYA,CAACP,EAAM;IACzB,OAAO,IAAI,CAACP,qBAAqB,CAACe,UAAU,CAAC,UAAU,EAAC,cAAc,EAACR,EAAE,CAAC;EAC3E;EAEOS,2BAA2BA,CAACd,IAAQ;IAC1C,OAAO,IAAI,CAACF,qBAAqB,CAACG,MAAM,CAAC,UAAU,EAAC,sBAAsB,EAACD,IAAI,CAAC;EACjF;EAEOe,8BAA8BA,CAACf,IAAQ;IAC7C,OAAO,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,UAAU,EAAC,YAAY,EAACD,IAAI,CAAC;EACjE;EAEOgB,iBAAiBA,CAAChB,IAAQ;IAChC,OAAO,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,UAAU,EAAE,aAAa,EAACD,IAAI,CAAC;EACpE;EAEOiB,sBAAsBA,CAACjB,IAAQ;IACpC,OAAO,IAAI,CAACH,eAAe,CAACI,MAAM,CAAC,UAAU,EAAE,iBAAiB,EAACD,IAAI,CAAC;EACxE;EAAC,QAAAkB,CAAA,G;qBApDUvB,eAAe,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf5B,eAAe;IAAA6B,OAAA,EAAf7B,eAAe,CAAA8B,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}