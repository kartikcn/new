{"ast":null,"code":"import { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../providers/connector-flds.provider\";\nimport * as i2 from \"../../services/connector.services\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/toast\";\nimport * as i8 from \"primeng/panel\";\nimport * as i9 from \"primeng/confirmdialog\";\nimport * as i10 from \"@angular/material/tooltip\";\nfunction ConnectorFldsComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function ConnectorFldsComponent_ng_template_2_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ConnectorFldsComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 11);\n    i0.ɵɵelementStart(2, \"th\", 12)(3, \"div\", 13)(4, \"div\", 14)(5, \"p\", 15);\n    i0.ɵɵtext(6, \"Connector Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 16);\n    i0.ɵɵelement(8, \"p-sortIcon\", 17)(9, \"p-columnFilter\", 18);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 19)(11, \"div\", 13)(12, \"div\", 14)(13, \"p\", 15);\n    i0.ɵɵtext(14, \"Fielld Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 16);\n    i0.ɵɵelement(16, \"p-sortIcon\", 20)(17, \"p-columnFilter\", 21);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 22)(19, \"div\", 13)(20, \"div\", 14)(21, \"p\", 15);\n    i0.ɵɵtext(22, \"Fielld Title\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 16);\n    i0.ɵɵelement(24, \"p-sortIcon\", 23)(25, \"p-columnFilter\", 24);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(26, \"th\", 25)(27, \"div\", 13)(28, \"div\", 14)(29, \"p\", 15);\n    i0.ɵɵtext(30, \"Default value\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 16);\n    i0.ɵɵelement(32, \"p-sortIcon\", 26)(33, \"p-columnFilter\", 27);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(34, \"th\", 28)(35, \"div\", 13)(36, \"div\", 14)(37, \"p\", 15);\n    i0.ɵɵtext(38, \"Reference Table\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(39, \"div\", 16);\n    i0.ɵɵelement(40, \"p-sortIcon\", 29)(41, \"p-columnFilter\", 30);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction ConnectorFldsComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 31)(1, \"td\", 11)(2, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function ConnectorFldsComponent_ng_template_6_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const connectorFlds_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onEdit(connectorFlds_r6));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\", 33);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const connectorFlds_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", connectorFlds_r6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", connectorFlds_r6.connector.connectorName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", connectorFlds_r6.connector.connectorName, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(connectorFlds_r6.fieldName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(connectorFlds_r6.fieldTitle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(connectorFlds_r6.defaultValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(connectorFlds_r6.refTable);\n  }\n}\nfunction ConnectorFldsComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 6);\n  }\n}\nconst _c0 = function () {\n  return [5, 10, 25];\n};\nexport let ConnectorFldsComponent = /*#__PURE__*/(() => {\n  class ConnectorFldsComponent {\n    constructor(connectorFldsDialogueProvider, connectorSrv, messageService) {\n      this.connectorFldsDialogueProvider = connectorFldsDialogueProvider;\n      this.connectorSrv = connectorSrv;\n      this.messageService = messageService;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.connectorFldsData = [];\n      this.connectorId = 0;\n    }\n    loadRecords(connectorId) {\n      this.connectorId = connectorId;\n      this.connectorSrv.getAllByConnectorId(connectorId).subscribe(res => {\n        this.connectorFldsData = res;\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '800px';\n      dialogConfig.data = {\n        isEdit: false,\n        connectorId: this.connectorId,\n        connectorFldsId: null,\n        newRecord: true\n      };\n      this.connectorFldsDialogueProvider.openDialog(dialogConfig);\n      this.connectorFldsDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(result.connectorId);\n        }\n      });\n    }\n    onEdit(data) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '800px';\n      dialogConfig.data = {\n        connectorId: data.connectorId,\n        connectorFldsId: data.connectorFldsId,\n        isEdit: true,\n        newRecord: false\n      };\n      this.connectorFldsDialogueProvider.openDialog(dialogConfig);\n      this.connectorFldsDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'save',\n            severity: 'success',\n            summary: 'Record saved successfully',\n            detail: 'Record saved successfully'\n          });\n          this.loadRecords(result.connectorId);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ConnectorFldsComponent_Factory(t) {\n      return new (t || ConnectorFldsComponent)(i0.ɵɵdirectiveInject(i1.ConnectorFldsDialogueProvider), i0.ɵɵdirectiveInject(i2.ConnectorService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ConnectorFldsComponent,\n      selectors: [[\"app-connector-flds\"]],\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 10,\n      vars: 8,\n      consts: [[1, \"card\", 2, \"height\", \"82vh\"], [\"header\", \"Connectors\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", \"scrollDirection\", \"both\", \"scrollHeight\", \"550px\", \"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", 3, \"value\", \"paginator\", \"rows\", \"showCurrentPageReport\", \"scrollable\", \"rowsPerPageOptions\", \"rowHover\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"key\", \"mygrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"3rem\"], [\"pSortableColumn\", \"connectorName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"connectorName\"], [\"type\", \"text\", \"field\", \"connectorName\", \"display\", \"menu\"], [\"pSortableColumn\", \"fieldName\"], [\"field\", \"fieldName\"], [\"type\", \"text\", \"field\", \"fieldName\", \"display\", \"menu\"], [\"pSortableColumn\", \"fieldTitle\"], [\"field\", \"fieldTitle\"], [\"type\", \"text\", \"field\", \"fieldTitle\", \"display\", \"menu\"], [\"pSortableColumn\", \"defaultValue\"], [\"field\", \"defaultValue\"], [\"type\", \"text\", \"field\", \"defaultValue\", \"display\", \"menu\"], [\"pSortableColumn\", \"refTable\"], [\"field\", \"refTable\"], [\"type\", \"text\", \"field\", \"refTable\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n      template: function ConnectorFldsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1);\n          i0.ɵɵtemplate(2, ConnectorFldsComponent_ng_template_2_Template, 1, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"p-table\", 4);\n          i0.ɵɵtemplate(5, ConnectorFldsComponent_ng_template_5_Template, 42, 0, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, ConnectorFldsComponent_ng_template_6_Template, 13, 7, \"ng-template\", 6);\n          i0.ɵɵtemplate(7, ConnectorFldsComponent_ng_template_7_Template, 3, 1, \"ng-template\", 7);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelement(8, \"p-toast\", 8)(9, \"p-confirmDialog\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"value\", ctx.connectorFldsData)(\"paginator\", true)(\"rows\", ctx.rowCount)(\"showCurrentPageReport\", true)(\"scrollable\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(7, _c0))(\"rowHover\", false);\n        }\n      },\n      dependencies: [i4.NzTableCellDirective, i4.NzThMeasureDirective, i4.NzTrDirective, i3.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.ColumnFilter, i6.ButtonDirective, i7.Toast, i8.Panel, i9.ConfirmDialog, i10.MatTooltip],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return ConnectorFldsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}