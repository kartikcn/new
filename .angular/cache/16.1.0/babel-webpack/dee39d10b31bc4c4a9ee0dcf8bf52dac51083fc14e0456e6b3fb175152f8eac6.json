{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/enum.service\";\nimport * as i2 from \"src/app/ui/ppm-plan/services/ppm-plan-services\";\nimport * as i3 from \"src/app/services/breakpoint.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/dropdown\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/tooltip\";\nimport * as i9 from \"primeng/paginator\";\nfunction PpmPlansListComponent_ng_template_2_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 21);\n    i0.ɵɵlistener(\"onChange\", function PpmPlansListComponent_ng_template_2_ng_template_17_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const filter_r6 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r6($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r5)(\"options\", ctx_r4.enumPlanData)(\"showClear\", true);\n  }\n}\nfunction PpmPlansListComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 7)(2, \"div\", 8)(3, \"div\", 9)(4, \"p\", 10);\n    i0.ɵɵtext(5, \"Plan Name\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 11);\n    i0.ɵɵelement(7, \"p-sortIcon\", 12)(8, \"p-columnFilter\", 13);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"th\", 14)(10, \"div\", 8)(11, \"div\", 9)(12, \"p\", 10);\n    i0.ɵɵtext(13, \"Plan Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 11);\n    i0.ɵɵelement(15, \"p-sortIcon\", 15);\n    i0.ɵɵelementStart(16, \"p-columnFilter\", 16);\n    i0.ɵɵtemplate(17, PpmPlansListComponent_ng_template_2_ng_template_17_Template, 1, 3, \"ng-template\", 17);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(18, \"th\", 18)(19, \"div\", 8)(20, \"div\", 9)(21, \"p\", 10);\n    i0.ɵɵtext(22, \"Plan Description\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 11);\n    i0.ɵɵelement(24, \"p-sortIcon\", 19)(25, \"p-columnFilter\", 20);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction PpmPlansListComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 22)(1, \"td\", 23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 23);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const plan_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", plan_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r9.planName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r9.planName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumByById(plan_r9.planType));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", plan_r9.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(plan_r9.description);\n  }\n}\nfunction PpmPlansListComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 4);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport class PpmPlansListComponent {\n  constructor(enumsrv, ppmPlanService, bps) {\n    this.enumsrv = enumsrv;\n    this.ppmPlanService = ppmPlanService;\n    this.bps = bps;\n    this.enumList = [];\n    this.enumPlanData = [];\n    this.planData = [];\n    this.isHide = true;\n    this.loading = false;\n    this.rowCount = UtilConstant.ROW_COUNT;\n    this.locTypeId = 0;\n    this.parentFun = new EventEmitter();\n    this.useTabletProtrait = false;\n    this.totalElements = 0;\n    this.paginationObj = {\n      pageNo: 0,\n      pageSize: this.rowCount,\n      sortBy: [\"planId\"],\n      sortOrder: \"ASC\"\n    };\n    this.filterCriteria = {};\n    this.isFiltered = false;\n    this.filterCriteriaList = [];\n    this.planTypeData = '';\n  }\n  ngOnInit() {\n    this.bps.register(this);\n    this.loadEnums();\n    // this.loadRecords();\n  }\n\n  notify() {\n    this.useTabletProtrait = BreakpointService.useTabletProtrait;\n    if (this.useTabletProtrait) {\n      this.rowCount = UtilConstant.ROW_COUNT_FIVE_LIMIT;\n    } else {\n      this.rowCount = UtilConstant.ROW_COUNT;\n    }\n  }\n  loadEnums() {\n    this.enumList = [];\n    this.enumsrv.getEnums().subscribe(res => {\n      this.enumList = res;\n      this.enumPlanData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plans'.toLocaleUpperCase() && t.fieldName.toLowerCase() === 'plan_type'.toLowerCase());\n      this.enumPlanData.forEach(t => t.enumValue.toLocaleLowerCase() === \"Location\".toLocaleLowerCase() ? this.locTypeId = t.enumKey : '');\n    }, error => {});\n  }\n  getEnumByById(enumKey) {\n    return enumKey ? this.enumPlanData.find(t => t.enumKey == enumKey) != null ? this.enumPlanData.find(t => t.enumKey == enumKey)?.enumValue : '' : '';\n  }\n  loadRecords(planType) {\n    this.loading = true;\n    this.planTypeData = planType;\n    //this.planData = [];\n    let filterCriteria = {\n      fieldName: \"planType\",\n      value: planType,\n      matchMode: \"equals\"\n    };\n    this.updateFilterCriteriaList(filterCriteria);\n    let data = {\n      paginationDTO: this.paginationObj,\n      filterCriteria: this.filterCriteriaList\n    };\n    this.ppmPlanService.getAllPlansPaginated(data).subscribe(res => {\n      if (res) {\n        this.isFiltered = false;\n        this.planData = res.content ? res.content : [];\n        this.totalElements = res.totalElements ? res.totalElements : 0;\n        // if(planType == \"Location\"){\n        //   this.planData = content.filter((t:any) => t.planType === this.locTypeId)\n        // } else {\n        //   this.planData = content.filter((t:any) => t.planType !== this.locTypeId);\n        // }\n      } else {\n        this.planData = [];\n      }\n      this.loading = false;\n    }, error => {\n      this.loading = false;\n    });\n  }\n  setPlanData(planData) {\n    this.planData = planData;\n  }\n  onRowSelect(event) {\n    this.parentFun.emit(event.data);\n  }\n  ngOnDestroy() {\n    this.bps.unregister(this);\n  }\n  onPageChange(event) {\n    const pageNo = event.first ? event.first / event.rows : 0;\n    const pageSize = event.rows;\n    this.paginationObj.pageNo = pageNo;\n    this.paginationObj.pageSize = pageSize;\n    this.loadRecords(this.planTypeData);\n  }\n  onInnerFilter(event) {\n    if (this.isFiltered) {\n      Object.keys(event.filters).forEach(field => {\n        const filterValue = event.filters[field][0].value;\n        const matchMode = event.filters[field][0].matchMode;\n        if (filterValue !== undefined) {\n          let filterCriteria = {\n            fieldName: field,\n            value: filterValue,\n            matchMode: matchMode\n          };\n          this.updateFilterCriteriaList(filterCriteria);\n        }\n      });\n      this.paginationObj.pageNo = 0;\n      this.loadRecords(this.planTypeData);\n    }\n    this.isFiltered = true;\n  }\n  updateFilterCriteriaList(filterCriteria) {\n    let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n    if (filterCriteria['value'] == null) {\n      if (index !== -1) {\n        this.filterCriteriaList.splice(index, 1);\n      }\n    } else {\n      if (index !== -1) {\n        this.filterCriteriaList[index] = filterCriteria;\n      } else {\n        this.filterCriteriaList.push(filterCriteria);\n      }\n    }\n  }\n  static #_ = this.ɵfac = function PpmPlansListComponent_Factory(t) {\n    return new (t || PpmPlansListComponent)(i0.ɵɵdirectiveInject(i1.EnumService), i0.ɵɵdirectiveInject(i2.PpmPlanService), i0.ɵɵdirectiveInject(i3.BreakpointService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PpmPlansListComponent,\n    selectors: [[\"app-ppm-plans-list\"]],\n    inputs: {\n      planTypeData: \"planTypeData\"\n    },\n    outputs: {\n      parentFun: \"parentFun\"\n    },\n    features: [i0.ɵɵProvidersFeature([MessageService])],\n    decls: 7,\n    vars: 11,\n    consts: [[\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"500px\", \"selectionMode\", \"single\", 3, \"value\", \"paginator\", \"rowHover\", \"scrollable\", \"onFilter\", \"onRowSelect\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"pSortableColumn\", \"planName\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"planName\"], [\"type\", \"text\", \"field\", \"planName\", \"display\", \"menu\"], [\"pSortableColumn\", \"planType\"], [\"field\", \"planType\"], [\"field\", \"planType\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"description\"], [\"field\", \"description\"], [\"type\", \"text\", \"field\", \"description\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Status\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"matTooltipPosition\", \"below\", 1, \"ellipsis\", 3, \"matTooltip\"]],\n    template: function PpmPlansListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-table\", 0, 1);\n        i0.ɵɵlistener(\"onFilter\", function PpmPlansListComponent_Template_p_table_onFilter_0_listener($event) {\n          return ctx.onInnerFilter($event);\n        })(\"onRowSelect\", function PpmPlansListComponent_Template_p_table_onRowSelect_0_listener($event) {\n          return ctx.onRowSelect($event);\n        });\n        i0.ɵɵtemplate(2, PpmPlansListComponent_ng_template_2_Template, 26, 0, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, PpmPlansListComponent_ng_template_3_Template, 7, 6, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, PpmPlansListComponent_ng_template_4_Template, 3, 1, \"ng-template\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"p-paginator\", 6);\n        i0.ɵɵlistener(\"onPageChange\", function PpmPlansListComponent_Template_p_paginator_onPageChange_6_listener($event) {\n          return ctx.onPageChange($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"value\", ctx.planData)(\"paginator\", false)(\"rowHover\", false)(\"scrollable\", true)(\"rowHover\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"first\", ctx.paginationObj.pageNo * ctx.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(10, _c0));\n      }\n    },\n    dependencies: [i4.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.ColumnFilter, i6.Dropdown, i7.NgControlStatus, i7.NgModel, i8.MatTooltip, i9.Paginator],\n    styles: [\".ellipsis[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n[_nghost-%COMP%]     .p-datatable-table {\\n  table-layout: fixed;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvbGluay1wbGFuLXRvLWxvY2F0aW9uL3dpZGdldHMvcHBtLXBsYW5zLWxpc3QvcHBtLXBsYW5zLWxpc3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxtQkFBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7QUFDSjs7QUFFRTtFQUNFLG1CQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuZWxsaXBzaXN7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgXG4gIH1cblxuICA6aG9zdCA6Om5nLWRlZXAgLnAtZGF0YXRhYmxlLXRhYmxle1xuICAgIHRhYmxlLWxheW91dDogZml4ZWQ7XG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","MessageService","UtilConstant","BreakpointService","i0","ɵɵelementStart","ɵɵlistener","PpmPlansListComponent_ng_template_2_ng_template_17_Template_p_dropdown_onChange_0_listener","$event","restoredCtx","ɵɵrestoreView","_r8","filter_r6","filterCallback","ɵɵresetView","value","ɵɵelementEnd","ɵɵproperty","value_r5","ctx_r4","enumPlanData","ɵɵtext","ɵɵelement","ɵɵtemplate","PpmPlansListComponent_ng_template_2_ng_template_17_Template","plan_r9","ɵɵadvance","ɵɵpropertyInterpolate","planName","ɵɵtextInterpolate","ctx_r2","getEnumByById","planType","description","ɵɵattribute","PpmPlansListComponent","constructor","enumsrv","ppmPlanService","bps","enumList","planData","isHide","loading","rowCount","ROW_COUNT","locTypeId","parentFun","useTabletProtrait","totalElements","paginationObj","pageNo","pageSize","sortBy","sortOrder","filterCriteria","isFiltered","filterCriteriaList","planTypeData","ngOnInit","register","loadEnums","notify","ROW_COUNT_FIVE_LIMIT","getEnums","subscribe","res","map","x","Object","assign","filter","t","tableName","toLocaleUpperCase","fieldName","toLowerCase","forEach","enumValue","toLocaleLowerCase","enumKey","error","find","loadRecords","matchMode","updateFilterCriteriaList","data","paginationDTO","getAllPlansPaginated","content","setPlanData","onRowSelect","event","emit","ngOnDestroy","unregister","onPageChange","first","rows","onInnerFilter","keys","filters","field","filterValue","undefined","index","findIndex","item","splice","push","_","ɵɵdirectiveInject","i1","EnumService","i2","PpmPlanService","i3","_2","selectors","inputs","outputs","features","ɵɵProvidersFeature","decls","vars","consts","template","PpmPlansListComponent_Template","rf","ctx","PpmPlansListComponent_Template_p_table_onFilter_0_listener","PpmPlansListComponent_Template_p_table_onRowSelect_0_listener","PpmPlansListComponent_ng_template_2_Template","PpmPlansListComponent_ng_template_3_Template","PpmPlansListComponent_ng_template_4_Template","PpmPlansListComponent_Template_p_paginator_onPageChange_6_listener","ɵɵpureFunction0","_c0"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/link-plan-to-location/widgets/ppm-plans-list/ppm-plans-list.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/link-plan-to-location/widgets/ppm-plans-list/ppm-plans-list.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport { EnumService } from 'src/app/services/enum.service';\nimport { PpmPlanService } from 'src/app/ui/ppm-plan/services/ppm-plan-services';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport { PaginationObj } from 'src/app/model/pagination-model';\n\n@Component({\n  selector: 'app-ppm-plans-list',\n  templateUrl: './ppm-plans-list.component.html',\n  styleUrls: ['./ppm-plans-list.component.scss'],\n  providers: [MessageService]\n})\nexport class PpmPlansListComponent {\n  enumList: EnumList[] = [];\n  enumPlanData: EnumList[] = [];\n  planData: any[] = [];\n  isHide: Boolean = true;\n  loading: boolean = false;\n  value: any;\n  rowCount: number = UtilConstant.ROW_COUNT;\n  locTypeId:any = 0;\n  @Output() parentFun = new EventEmitter();\n  useTabletProtrait = false;\n  totalElements:number = 0;\n  paginationObj:PaginationObj = {\n    pageNo:0,\n    pageSize:this.rowCount,\n    sortBy:[\"planId\"],\n    sortOrder:\"ASC\"\n  }\n  filterCriteria:any = {};\n  isFiltered:boolean = false;\n  filterCriteriaList :any[]=[];\n  @Input() planTypeData:string='';\n  constructor(\n    private enumsrv: EnumService,\n    private ppmPlanService: PpmPlanService,\n    private bps : BreakpointService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.bps.register(this);\n    this.loadEnums();\n   // this.loadRecords();\n  }\n\n  notify(): void {\n    this.useTabletProtrait = BreakpointService.useTabletProtrait;\n    if(this.useTabletProtrait){\n      this.rowCount = UtilConstant.ROW_COUNT_FIVE_LIMIT\n    }else{\n      this.rowCount = UtilConstant.ROW_COUNT;\n    }\n  }\n\n  loadEnums() {\n    this.enumList = [];\n    this.enumsrv.getEnums().subscribe(\n      (res: EnumList[]) => {\n        this.enumList = res;\n        this.enumPlanData = this.enumList.map(x => Object.assign({}, x)).filter(t => t.tableName.toLocaleUpperCase() === 'plans'.toLocaleUpperCase() \n        && t.fieldName.toLowerCase() === 'plan_type'.toLowerCase());\n        this.enumPlanData.forEach(t => t.enumValue.toLocaleLowerCase() === \"Location\".toLocaleLowerCase() ? this.locTypeId = t.enumKey : '')\n      },\n      error => {\n      }\n    );\n  }\n\n  getEnumByById(enumKey: any) {\n    return enumKey ? this.enumPlanData.find(t => t.enumKey == enumKey) != null ? this.enumPlanData.find(t => t.enumKey == enumKey)?.enumValue : '' : '';\n  }\n\n  loadRecords(planType:any) {\n    this.loading = true;\n    this.planTypeData = planType;\n    //this.planData = [];\n    let filterCriteria = { fieldName: \"planType\", value: planType, matchMode: \"equals\" };\n          this.updateFilterCriteriaList(filterCriteria);\n    let data={paginationDTO:this.paginationObj,filterCriteria:this.filterCriteriaList};\n    this.ppmPlanService.getAllPlansPaginated(data).subscribe((res: any) => {\n      if (res) {\n        this.isFiltered= false;\n        this.planData = res.content ? res.content : [];\n        this.totalElements = res.totalElements ? res.totalElements : 0;\n        // if(planType == \"Location\"){\n        //   this.planData = content.filter((t:any) => t.planType === this.locTypeId)\n        // } else {\n        //   this.planData = content.filter((t:any) => t.planType !== this.locTypeId);\n        // }\n       \n      }\n      else {\n        this.planData = [];\n      }\n      this.loading = false;\n    },\n      error => {\n        this.loading = false;\n      }\n    );\n  }\n\n  setPlanData(planData:any) {\n    this.planData = planData;\n  }\n   \n  onRowSelect(event:any) {\n    this.parentFun.emit(event.data);\n  }\n\n  ngOnDestroy() {\n    this.bps.unregister(this);\n  }\n\n  onPageChange(event:any){\n    const pageNo = event.first ? event.first / event.rows : 0;\n    const pageSize = event.rows;\n    this.paginationObj.pageNo = pageNo;\n    this.paginationObj.pageSize = pageSize;\n    this.loadRecords(this.planTypeData);\n  }\n\n  onInnerFilter(event: any) {\n    if (this.isFiltered) {\n      Object.keys(event.filters).forEach((field) => {\n        const filterValue = event.filters[field][0].value;\n        const matchMode = event.filters[field][0].matchMode;\n        if(filterValue !== undefined){\n          let filterCriteria = { fieldName: field, value: filterValue, matchMode: matchMode };\n          this.updateFilterCriteriaList(filterCriteria);\n        }\n      });\n      this.paginationObj.pageNo = 0;\n      this.loadRecords(this.planTypeData);\n    }\n    this.isFiltered = true;\n  }\n\n  updateFilterCriteriaList(filterCriteria:any){\n    let index = this.filterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n    if(filterCriteria['value']==null){\n      if(index !==-1){\n        this.filterCriteriaList.splice(index, 1);\n      }\n    }else {\n      if (index !== -1) {\n        this.filterCriteriaList[index] = filterCriteria;\n      } else {\n        this.filterCriteriaList.push(filterCriteria);\n      }\n    }\n  }\n\n}\n","<!-- <p-panel header=\"Plan Details\"> -->\n<p-table #dt1 [value]=\"planData\" [paginator]=\"false\" (onFilter)=\"onInnerFilter($event)\"\n    styleClass=\"p-datatable-responsive-demo p-datatable-gridlines\" [rowHover]=\"false\" [scrollable]=\"true\"\n    scrollDirection=\"both\" scrollHeight=\"500px\" selectionMode=\"single\" [rowHover]=\"true\"\n    (onRowSelect)=\"onRowSelect($event)\">\n    <ng-template pTemplate=\"header\">\n        <tr>\n            <th pSortableColumn=\"planName\">\n                <div class=\"grid-header-column\">\n                    <div class=\"grid-header-label\">\n                        <p class=\"grid-label-paragraph\">Plan Name</p>\n                    </div>\n                    <div class=\"grid-sort-icon\">\n                        <p-sortIcon field=\"planName\"></p-sortIcon>\n                        <p-columnFilter type=\"text\" field=\"planName\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </div>\n            </th>\n            <th pSortableColumn=\"planType\">\n                <div class=\"grid-header-column\">\n                    <div class=\"grid-header-label\">\n                        <p class=\"grid-label-paragraph\">Plan Type</p>\n                    </div>\n                    <div class=\"grid-sort-icon\">\n                        <p-sortIcon field=\"planType\"></p-sortIcon>\n                        <p-columnFilter field=\"planType\" matchMode=\"equals\" display=\"menu\">\n                            <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\n                                <p-dropdown [ngModel]=\"value\" [options]=\"enumPlanData\" optionLabel=\"enumValue\"\n                                    optionValue=\"enumKey\" (onChange)=\"filter($event.value)\" placeholder=\"Select a Status\"\n                                    [showClear]=\"true\">\n                                </p-dropdown>\n                            </ng-template>\n                        </p-columnFilter>\n                    </div>\n                </div>\n            </th>\n            <th pSortableColumn=\"description\">\n                <div class=\"grid-header-column\">\n                    <div class=\"grid-header-label\">\n                        <p class=\"grid-label-paragraph\">Plan Description</p>\n                    </div>\n                    <div class=\"grid-sort-icon\">\n                        <p-sortIcon field=\"description\"></p-sortIcon>\n                        <p-columnFilter type=\"text\" field=\"description\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </div>\n            </th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-plan>\n        <tr [pSelectableRow]=\"plan\">\n            <td matTooltip=\"{{plan.planName}}\" matTooltipPosition=\"below\" class=\"ellipsis\">{{plan.planName}}</td>\n            <td>{{getEnumByById(plan.planType)}}</td>\n            <td matTooltip=\"{{plan.description}}\" matTooltipPosition=\"below\" class=\"ellipsis\">{{plan.description}}</td>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"emptymessage\" let-columns>\n        <tr>\n            <td [attr.colspan]=\"4\">\n                No records found\n            </td>\n        </tr>\n    </ng-template>\n</p-table>\n<div class=\"paginator\">\n    <p-paginator  [rows]=\"rowCount\" [totalRecords]=\"totalElements\" (onPageChange)=\"onPageChange($event)\"\n    [first]=\"paginationObj.pageNo * paginationObj.pageSize\"\n      currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\" [showCurrentPageReport]=\"true\"\n      [rowsPerPageOptions]=\"[25,50,100]\"></p-paginator>\n</div>\n<!-- </p-panel> -->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}