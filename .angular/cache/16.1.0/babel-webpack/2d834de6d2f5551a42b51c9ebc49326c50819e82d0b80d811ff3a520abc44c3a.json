{"ast":null,"code":"import { MessageService } from 'primeng/api';\nimport { AddProblemTypeComponent } from '../widgets/add-problem-type/add-problem-type.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/problem-type..service\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"primeng/button\";\nimport * as i5 from \"primeng/toast\";\nimport * as i6 from \"primeng/panel\";\nimport * as i7 from \"primeng/tree\";\nimport * as i8 from \"../widgets/add-problem-type/add-problem-type.component\";\nfunction ProblemTypeComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function ProblemTypeComponent_ng_template_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProblemTypeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"href\", node_r5.data, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r5.label);\n  }\n}\nfunction ProblemTypeComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r6.label);\n  }\n}\nexport let ProblemTypeComponent = /*#__PURE__*/(() => {\n  class ProblemTypeComponent {\n    constructor(problemTypeSrv, authSrv, messageService) {\n      this.problemTypeSrv = problemTypeSrv;\n      this.authSrv = authSrv;\n      this.messageService = messageService;\n      this.isNew = true;\n      this.hideForm = true;\n      this.loading = false;\n      this.parentProblemType = '';\n      this.expandedNodes = [];\n      this.treeState = {};\n    }\n    ngOnInit() {\n      this.loadRecords();\n    }\n    loadRecords() {\n      const expandedNodes = this.getExpandedNodes();\n      this.loading = true;\n      this.nodes = [];\n      this.problemTypeSrv.getAll().subscribe(res => {\n        this.nodes = res;\n        this.loading = false;\n        expandedNodes.length > 0 ? this.restoreExpandedNodes(expandedNodes) : '';\n      });\n    }\n    onAdd() {\n      const data = {\n        probTypeId: null,\n        probType: null,\n        description: null,\n        hierarchyId: this.selectedRecord ? this.selectedRecord.hierarchyId + 1 : null,\n        parentId: this.parentRecord ? this.parentRecord.key : null\n      };\n      let parentLabels = [];\n      if (this.selectedNode) {\n        let node = this.selectedNode;\n        while (node.parent) {\n          parentLabels.unshift(node.parent.label);\n          node = node.parent;\n        }\n        const selectedNodeLabels = parentLabels.length > 0 ? parentLabels.join(\" | \") + \" | \" + this.selectedNode.label : this.selectedNode.label;\n        if (selectedNodeLabels.length > 0) {\n          this.addProblemTypePanel.parentProbType = selectedNodeLabels;\n        } else {\n          this.addProblemTypePanel.parentProbType = '';\n        }\n      }\n      this.addProblemTypePanel.setFormData(data, \"Add\", this.parentProblemType);\n      this.hideForm = false;\n    }\n    nodeSelect(event) {\n      this.treeState.selectedNode = event.node;\n      this.hideForm = true;\n      let parentLabels = [];\n      let node = event.node;\n      while (node.parent) {\n        parentLabels.unshift(node.parent.label);\n        node = node.parent;\n      }\n      const selectedNodeLabels = parentLabels.join(\" | \");\n      if (selectedNodeLabels.length > 0) {\n        this.addProblemTypePanel.parentProbType = selectedNodeLabels;\n      } else {\n        this.addProblemTypePanel.parentProbType = '';\n      }\n      this.selectedRecord = event.node.data;\n      this.parentRecord = event.node.parent;\n      this.addProblemTypePanel.selectedRecord = event.node.data;\n      this.addProblemTypePanel.setFormData(event.node.data, \"Edit\", this.parentProblemType);\n      this.hideForm = false;\n      this.selectedNode = event.node;\n    }\n    onNodeExpand(event) {\n      if (!this.treeState.expandedNodes) {\n        this.treeState.expandedNodes = [];\n      }\n      this.treeState.expandedNodes.push(event.node);\n    }\n    refresh(action) {\n      if (action === 'Cancel') {\n        this.hideForm = true;\n        this.selectedFiles = [];\n        this.selectedRecord = null;\n        this.parentRecord = null;\n        this.addProblemTypePanel.selectedRecord = null;\n        this.addProblemTypePanel.parentProbType = '';\n        this.selectedNode = null;\n      } else if (action === \"Save\") {\n        this.hideForm = true;\n        this.messageService.clear();\n        this.messageService.add({\n          key: 'save',\n          severity: 'success',\n          summary: 'Record saved successfully',\n          detail: 'Record saved successfully'\n        });\n        this.selectedFiles = [];\n        this.selectedRecord = null;\n        this.parentRecord = null;\n        this.addProblemTypePanel.selectedRecord = null;\n        this.loadRecords();\n        this.addProblemTypePanel.parentProbType = '';\n        this.selectedNode = null;\n      }\n    }\n    getExpandedNodes() {\n      const expandedNodes = [];\n      if (this.nodes) {\n        this.nodes.forEach(node => {\n          if (node.expanded) {\n            expandedNodes.push(node);\n          }\n        });\n        return expandedNodes;\n      } else {\n        return expandedNodes;\n      }\n    }\n    restoreExpandedNodes(expandedNodes) {\n      const visitNode = node => {\n        if (node.expanded) {\n          node.expanded = false;\n          const foundNode = this.findNodeById(this.nodes, node.key);\n          if (foundNode) {\n            foundNode.expanded = true;\n            if (node.children) {\n              node.children.forEach(childNode => {\n                visitNode(childNode);\n              });\n            }\n          }\n        }\n      };\n      expandedNodes.forEach(node => {\n        visitNode(node);\n      });\n    }\n    findNodeById(nodes, id) {\n      let foundNode;\n      nodes.forEach(node => {\n        if (node.key === id) {\n          foundNode = node;\n        } else if (node.children) {\n          const childNode = this.findNodeById(node.children, id);\n          if (childNode) {\n            foundNode = childNode;\n          }\n        }\n      });\n      return foundNode;\n    }\n    static #_ = this.ɵfac = function ProblemTypeComponent_Factory(t) {\n      return new (t || ProblemTypeComponent)(i0.ɵɵdirectiveInject(i1.ProblemTypeService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProblemTypeComponent,\n      selectors: [[\"app-problem-type\"]],\n      viewQuery: function ProblemTypeComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(AddProblemTypeComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addProblemTypePanel = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 10,\n      vars: 6,\n      consts: [[1, \"row\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-4\", \"col-lg-6\", 2, \"height\", \"90vh\"], [\"header\", \"Problem Type Details\"], [\"pTemplate\", \"icons\"], [\"selectionMode\", \"single\", \"scrollHeight\", \"72vh\", 3, \"loading\", \"value\", \"selection\", \"filter\", \"selectionChange\", \"onNodeSelect\", \"onNodeExpand\"], [\"pTemplate\", \"url\"], [\"pTemplate\", \"default\"], [1, \"col-sm-6\", \"col-md-6\", \"col-xm-4\", \"col-lg-6\"], [3, \"hidden\", \"isNew\", \"parentFun\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [3, \"href\"]],\n      template: function ProblemTypeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"p-panel\", 2);\n          i0.ɵɵtemplate(3, ProblemTypeComponent_ng_template_3_Template, 1, 0, \"ng-template\", 3);\n          i0.ɵɵelementStart(4, \"p-tree\", 4);\n          i0.ɵɵlistener(\"selectionChange\", function ProblemTypeComponent_Template_p_tree_selectionChange_4_listener($event) {\n            return ctx.selectedFiles = $event;\n          })(\"onNodeSelect\", function ProblemTypeComponent_Template_p_tree_onNodeSelect_4_listener($event) {\n            return ctx.nodeSelect($event);\n          })(\"onNodeExpand\", function ProblemTypeComponent_Template_p_tree_onNodeExpand_4_listener($event) {\n            return ctx.onNodeExpand($event);\n          });\n          i0.ɵɵtemplate(5, ProblemTypeComponent_ng_template_5_Template, 2, 2, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, ProblemTypeComponent_ng_template_6_Template, 2, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 7)(8, \"app-add-problem-type\", 8);\n          i0.ɵɵlistener(\"parentFun\", function ProblemTypeComponent_Template_app_add_problem_type_parentFun_8_listener($event) {\n            return ctx.refresh($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(9, \"p-toast\", 9);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"loading\", ctx.loading)(\"value\", ctx.nodes)(\"selection\", ctx.selectedFiles)(\"filter\", true);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"hidden\", ctx.hideForm)(\"isNew\", ctx.isNew);\n        }\n      },\n      dependencies: [i3.PrimeTemplate, i4.ButtonDirective, i5.Toast, i6.Panel, i7.Tree, i8.AddProblemTypeComponent],\n      styles: [\"[_nghost-%COMP%]     b, strong[_ngcontent-%COMP%]{font-weight:400}[_nghost-%COMP%]     chevrondownicon{font-size:1.5rem;font-weight:700;color:#0d89ec}[_nghost-%COMP%]     chevronrighticon{font-size:1.5rem;font-weight:700;color:#0d89ec}[_nghost-%COMP%]     chevronrighticon svg{width:16px;height:16px}[_nghost-%COMP%]     chevrondownicon svg{width:16px;height:16px}[_nghost-%COMP%]     chevronrighticon svg path{d:path(\\\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\\\")}[_nghost-%COMP%]     chevrondownicon svg path{d:path(\\\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\\\")}[_nghost-%COMP%]     ::-webkit-scrollbar{width:6px!important}\"]\n    });\n  }\n  return ProblemTypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}