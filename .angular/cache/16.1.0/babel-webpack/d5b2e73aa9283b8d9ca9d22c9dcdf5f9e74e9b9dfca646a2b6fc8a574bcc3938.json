{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as FileSaver from 'file-saver';\nimport { MessageService } from 'primeng/api';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport html2canvas from 'html2canvas';\nimport { SpaceReportFilterModel } from 'src/app/model/space-report-filter.model';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport { BuildingFilterInputDTO } from '../background-loc/model/DTO/BuildingFilterInputDTO.model';\nimport { FloorFilterInputDTO } from '../background-loc/model/DTO/FloorFilterInputDTO.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../booking/services/booking.services\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"../background-loc/services/bl.service\";\nimport * as i5 from \"../division-department/services/division.services\";\nimport * as i6 from \"../division-department/services/department.services\";\nimport * as i7 from \"src/app/services/rmcat.service\";\nimport * as i8 from \"src/app/services/breakpoint.service\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@ng-select/ng-select\";\nimport * as i11 from \"primeng/table\";\nimport * as i12 from \"primeng/button\";\nimport * as i13 from \"primeng/dialog\";\nimport * as i14 from \"primeng/toast\";\nimport * as i15 from \"primeng/panel\";\nimport * as i16 from \"@swimlane/ngx-charts\";\nimport * as i17 from \"./widgets/add-room-report-table/add-room-report-table.component\";\nimport * as i18 from \"primeng/paginator\";\nconst _c0 = [\"chartContainer\"];\nfunction ViewRoomReportComponent_table_3_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_3_div_25_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.exportExcel());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ViewRoomReportComponent_table_3_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"p-button\", 25);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_3_div_26_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.exportChartToPDF());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ViewRoomReportComponent_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 10)(1, \"tr\")(2, \"td\", 11)(3, \"div\", 12)(4, \"label\", 13);\n    i0.ɵɵtext(5, \"Building \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ng-select\", 14);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_3_Template_ng_select_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onSelectBlCode($event));\n    })(\"open\", function ViewRoomReportComponent_table_3_Template_ng_select_open_6_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onOpenBl());\n    })(\"scrollToEnd\", function ViewRoomReportComponent_table_3_Template_ng_select_scrollToEnd_6_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.scrollToEndBl());\n    })(\"search\", function ViewRoomReportComponent_table_3_Template_ng_select_search_6_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.searchBl($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"td\", 11)(8, \"div\", 12)(9, \"label\", 13);\n    i0.ɵɵtext(10, \"Floor\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"ng-select\", 15);\n    i0.ɵɵlistener(\"open\", function ViewRoomReportComponent_table_3_Template_ng_select_open_11_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onOpenFl());\n    })(\"change\", function ViewRoomReportComponent_table_3_Template_ng_select_change_11_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onSelectFlCode($event));\n    })(\"scrollToEnd\", function ViewRoomReportComponent_table_3_Template_ng_select_scrollToEnd_11_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.scrollToEndFl());\n    })(\"search\", function ViewRoomReportComponent_table_3_Template_ng_select_search_11_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.searchFl($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"td\", 16)(13, \"div\", 12)(14, \"label\", 17);\n    i0.ɵɵtext(15, \"View By\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"ng-select\", 18);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_3_Template_ng_select_change_16_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.changeViewBy($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"td\", 16)(18, \"div\", 12)(19, \"label\", 17);\n    i0.ɵɵtext(20, \"Display Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"ng-select\", 19);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_3_Template_ng_select_change_21_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onSelectDisplayType($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(22, \"td\", 11)(23, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_3_Template_button_click_23_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.onClickFilter());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_3_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.onClear());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(25, ViewRoomReportComponent_table_3_div_25_Template, 2, 0, \"div\", 22);\n    i0.ɵɵtemplate(26, ViewRoomReportComponent_table_3_div_26_Template, 2, 0, \"div\", 22);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.enumBL)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r0.enumFL)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r0.viewByData);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", false)(\"items\", ctx_r0.displayTypeData);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.filterPanel.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isGridType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isGridType);\n  }\n}\nfunction ViewRoomReportComponent_table_4_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_4_div_26_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r27.exportExcel());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ViewRoomReportComponent_table_4_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"p-button\", 25);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_4_div_27_Template_p_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.exportChartToPDF());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ViewRoomReportComponent_table_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 10)(1, \"tr\")(2, \"td\", 26)(3, \"div\", 12)(4, \"label\", 13);\n    i0.ɵɵtext(5, \"Building \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ng-select\", 14);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_4_Template_ng_select_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r31.onSelectBlCode($event));\n    })(\"open\", function ViewRoomReportComponent_table_4_Template_ng_select_open_6_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.onOpenBl());\n    })(\"scrollToEnd\", function ViewRoomReportComponent_table_4_Template_ng_select_scrollToEnd_6_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r34.scrollToEndBl());\n    })(\"search\", function ViewRoomReportComponent_table_4_Template_ng_select_search_6_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r35.searchBl($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"td\", 26)(8, \"div\", 12)(9, \"label\", 13);\n    i0.ɵɵtext(10, \"Floor\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"ng-select\", 15);\n    i0.ɵɵlistener(\"open\", function ViewRoomReportComponent_table_4_Template_ng_select_open_11_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.onOpenFl());\n    })(\"change\", function ViewRoomReportComponent_table_4_Template_ng_select_change_11_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r37.onSelectFlCode($event));\n    })(\"scrollToEnd\", function ViewRoomReportComponent_table_4_Template_ng_select_scrollToEnd_11_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r38.scrollToEndFl());\n    })(\"search\", function ViewRoomReportComponent_table_4_Template_ng_select_search_11_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r39.searchFl($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"td\", 27)(13, \"div\", 12)(14, \"label\", 17);\n    i0.ɵɵtext(15, \"View By\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"ng-select\", 18);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_4_Template_ng_select_change_16_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r40 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r40.changeViewBy($event));\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(17, \"td\", 27)(18, \"div\", 12)(19, \"label\", 17);\n    i0.ɵɵtext(20, \"Display Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"ng-select\", 19);\n    i0.ɵɵlistener(\"change\", function ViewRoomReportComponent_table_4_Template_ng_select_change_21_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r41.onSelectDisplayType($event));\n    });\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 26)(24, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_4_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r42.onClickFilter());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_table_4_Template_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.onClear());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(26, ViewRoomReportComponent_table_4_div_26_Template, 2, 0, \"div\", 22);\n    i0.ɵɵtemplate(27, ViewRoomReportComponent_table_4_div_27_Template, 2, 0, \"div\", 22);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r1.enumBL)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx_r1.enumFL)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", true)(\"items\", ctx_r1.viewByData);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"clearable\", false)(\"searchable\", false)(\"items\", ctx_r1.displayTypeData);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r1.filterPanel.valid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isGridType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isGridType);\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_2_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 46)(1, \"div\", 38)(2, \"div\", 39)(3, \"p\", 40);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 41);\n    i0.ɵɵelement(6, \"p-sortIcon\", 47)(7, \"p-columnFilter\", 48);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r47.thirdParamName, \"\");\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_2_th_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 49)(1, \"div\", 38)(2, \"div\", 39)(3, \"p\", 40);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 41);\n    i0.ɵɵelement(6, \"p-sortIcon\", 50)(7, \"p-columnFilter\", 51);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r48 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r48.secondParamName, \"\");\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, ViewRoomReportComponent_div_5_ng_template_2_th_1_Template, 8, 1, \"th\", 35);\n    i0.ɵɵtemplate(2, ViewRoomReportComponent_div_5_ng_template_2_th_2_Template, 8, 1, \"th\", 36);\n    i0.ɵɵelementStart(3, \"th\", 37)(4, \"div\", 38)(5, \"div\", 39)(6, \"p\", 40);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 41);\n    i0.ɵɵelement(9, \"p-sortIcon\", 42)(10, \"p-columnFilter\", 43);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"th\", 44)(12, \"div\", 38)(13, \"div\", 39)(14, \"p\", 40);\n    i0.ɵɵtext(15, \"Number of Rooms\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"div\", 41);\n    i0.ɵɵelement(17, \"p-sortIcon\", 45);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r44 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r44.showThirdParam);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r44.showSecondParam);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r44.displayGridLabel, \"\");\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 54);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 54);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 54);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const room_r49 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.secondParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.firstParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.value);\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 55);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 55);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 55);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 55);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const room_r49 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.thirdParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.secondParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.firstParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.value);\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_3_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 56);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 56);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const room_r49 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.firstParamValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(room_r49.value);\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r57 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 52);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_div_5_ng_template_3_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r57);\n      const room_r49 = restoredCtx.$implicit;\n      const ctx_r56 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r56.onClickCount(room_r49));\n    });\n    i0.ɵɵtemplate(1, ViewRoomReportComponent_div_5_ng_template_3_ng_container_1_Template, 7, 3, \"ng-container\", 53);\n    i0.ɵɵtemplate(2, ViewRoomReportComponent_div_5_ng_template_3_ng_container_2_Template, 9, 4, \"ng-container\", 53);\n    i0.ɵɵtemplate(3, ViewRoomReportComponent_div_5_ng_template_3_ng_container_3_Template, 5, 2, \"ng-container\", 53);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r45 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r45.showSecondParam && !ctx_r45.showThirdParam);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r45.showThirdParam && ctx_r45.showSecondParam);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r45.showSecondParam && !ctx_r45.showThirdParam);\n  }\n}\nfunction ViewRoomReportComponent_div_5_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 3);\n  }\n}\nconst _c1 = function () {\n  return [25, 50, 100];\n};\nfunction ViewRoomReportComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r60 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"p-table\", 31);\n    i0.ɵɵlistener(\"onFilter\", function ViewRoomReportComponent_div_5_Template_p_table_onFilter_1_listener($event) {\n      i0.ɵɵrestoreView(_r60);\n      const ctx_r59 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r59.onInnerFilter($event));\n    });\n    i0.ɵɵtemplate(2, ViewRoomReportComponent_div_5_ng_template_2_Template, 18, 3, \"ng-template\", 7);\n    i0.ɵɵtemplate(3, ViewRoomReportComponent_div_5_ng_template_3_Template, 4, 3, \"ng-template\", 8);\n    i0.ɵɵtemplate(4, ViewRoomReportComponent_div_5_ng_template_4_Template, 3, 1, \"ng-template\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 33)(6, \"p-paginator\", 34);\n    i0.ɵɵlistener(\"onPageChange\", function ViewRoomReportComponent_div_5_Template_p_paginator_onPageChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r60);\n      const ctx_r61 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r61.onPageChange($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r2.gridRoomData)(\"paginator\", false)(\"rows\", ctx_r2.rowCount)(\"rowHover\", false);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"rows\", ctx_r2.rowCount)(\"totalRecords\", ctx_r2.totalElements)(\"first\", ctx_r2.paginationObj.pageNo * ctx_r2.paginationObj.pageSize)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(9, _c1));\n  }\n}\nfunction ViewRoomReportComponent_div_6_ul_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r67 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 65)(1, \"li\", 66);\n    i0.ɵɵlistener(\"click\", function ViewRoomReportComponent_div_6_ul_9_Template_li_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r67);\n      const item_r64 = restoredCtx.$implicit;\n      const ctx_r66 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r66.onLegendItemClick(item_r64));\n    });\n    i0.ɵɵelementStart(2, \"span\", 67);\n    i0.ɵɵelement(3, \"span\", 68);\n    i0.ɵɵelementStart(4, \"span\", 69);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r64 = ctx.$implicit;\n    const i_r65 = ctx.index;\n    const ctx_r63 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r64.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r63.customColor.domain[i_r65]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r64.name);\n  }\n}\nfunction ViewRoomReportComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r69 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 57, 58)(2, \"div\", 59)(3, \"ngx-charts-bar-vertical\", 60);\n    i0.ɵɵlistener(\"select\", function ViewRoomReportComponent_div_6_Template_ngx_charts_bar_vertical_select_3_listener($event) {\n      i0.ɵɵrestoreView(_r69);\n      const ctx_r68 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r68.onSelectBarChart($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 61)(5, \"div\", 62)(6, \"p\", 63);\n    i0.ɵɵtext(7, \"Legend\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\");\n    i0.ɵɵtemplate(9, ViewRoomReportComponent_div_6_ul_9_Template, 6, 4, \"ul\", 64);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"view\", ctx_r3.view)(\"scheme\", ctx_r3.customColor)(\"results\", ctx_r3.barchartData)(\"showXAxisLabel\", ctx_r3.showXAxisLabel)(\"xAxisLabel\", ctx_r3.xAxisLabel)(\"xAxis\", ctx_r3.showXAxis)(\"showGridLines\", ctx_r3.showGridLines)(\"yAxis\", ctx_r3.showYAxis)(\"legend\", ctx_r3.showLegend)(\"yAxisTickFormatting\", ctx_r3.formatYAxisTickLabel)(\"showYAxisLabel\", ctx_r3.showYAxisLabel)(\"yAxisLabel\", ctx_r3.yAxisLabel);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.legendItems);\n  }\n}\nfunction ViewRoomReportComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 70);\n    i0.ɵɵtext(1, \"Room List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ViewRoomReportComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-room-report-table\", 71);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r5.roomData);\n  }\n}\nconst _c2 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nexport let ViewRoomReportComponent = /*#__PURE__*/(() => {\n  class ViewRoomReportComponent {\n    constructor(formBuilder, bookingSrv, messageService, cdr, blServ, divisionservice, departmentservice, rmcatSrv, bps) {\n      this.formBuilder = formBuilder;\n      this.bookingSrv = bookingSrv;\n      this.messageService = messageService;\n      this.cdr = cdr;\n      this.blServ = blServ;\n      this.divisionservice = divisionservice;\n      this.departmentservice = departmentservice;\n      this.rmcatSrv = rmcatSrv;\n      this.bps = bps;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.isGridType = false;\n      this.showPopUpGrid = false;\n      this.chartTitle = 'Building';\n      this.reportData = [];\n      this.gridRoomData = [];\n      this.chartReportData = [];\n      this.roomData = [];\n      this.chartImg = [];\n      this.view = [1010, 530];\n      this.showXAxis = true;\n      this.showXAxisLabel = true;\n      this.xAxisLabel = '';\n      this.barchartData = [];\n      this.legendItems = [];\n      this.showYAxis = true;\n      this.gradient = false;\n      this.showLegend = false;\n      this.showYAxisLabel = true;\n      this.yAxisLabel = 'Number of Rooms';\n      this.showGridLines = false;\n      this.showSecondParam = false;\n      this.showThirdParam = false;\n      this.secondParamName = '';\n      this.thirdParamName = '';\n      this.enumBL = [];\n      this.enumFL = [];\n      this.enumAllFL = [];\n      this.grid_array = [];\n      this.viewByData = [{\n        \"id\": 0,\n        \"lable\": 'Building',\n        \"value\": \"bl_id\"\n      }, {\n        \"id\": 1,\n        \"lable\": 'Floor',\n        \"value\": \"fl_id\"\n      }, {\n        \"id\": 2,\n        \"lable\": 'Division',\n        \"value\": \"div_id\"\n      }, {\n        \"id\": 3,\n        \"lable\": 'Department',\n        \"value\": \"dep_id\"\n      }, {\n        \"id\": 4,\n        \"lable\": 'Sub Department',\n        \"value\": \"sub_dep_id\"\n      }, {\n        \"id\": 5,\n        \"lable\": 'Room Category',\n        \"value\": \"rm_cat\"\n      }, {\n        \"id\": 6,\n        \"lable\": 'Room Type',\n        \"value\": \"rm_type\"\n      }, {\n        \"id\": 7,\n        \"lable\": 'Space Standard',\n        \"value\": \"space_standard\"\n      }, {\n        \"id\": 8,\n        \"lable\": 'Room Use',\n        \"value\": \"rm_use\"\n      }\n      // {\n      //   \"id\": 4,\n      //   \"lable\": 'Team',\n      //   \"value\": \"team_id\"\n      // },\n      ];\n\n      this.displayTypeData = [{\n        \"id\": 0,\n        \"lable\": 'Bar Chart',\n        \"value\": \"bar_chart\"\n      }, {\n        \"id\": 1,\n        \"lable\": 'Grid',\n        \"value\": \"grid\"\n      }];\n      this.useTabletProtrait = false;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [],\n        sortOrder: \"ASC\"\n      };\n      this.totalElements = 0;\n      this.pagfilterCriteriaList = [];\n      this.isFiltered = false;\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.selectedBl = {};\n      this.selectedFl = {};\n      this.scrollLimit = UtilConstant.SCROLL_LIMIT;\n      this.filterPanel = this.formBuilder.group({\n        viewBy: [null, [Validators.required]],\n        displayType: [null],\n        blId: [null],\n        flId: [null]\n      });\n    }\n    ngOnInit() {\n      this.bps.register(this);\n      this.chartTitle = this.viewByData[0].lable;\n      this.xAxisLabel = this.viewByData[0].lable;\n      this.filterPanel.patchValue({\n        viewBy: this.viewByData[0].value,\n        displayType: this.displayTypeData[1].value\n      });\n      this.isGridType = true;\n      this.loadRecords();\n    }\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n    }\n    loadRecords() {\n      this.filterCriteria = {};\n      let viewBy = this.filterPanel.controls.viewBy.value;\n      let blId = this.filterPanel.controls.blId.value;\n      let flId = this.filterPanel.controls.flId.value;\n      let data = {\n        viewBy: viewBy,\n        blId: blId,\n        flId: flId\n      };\n      let displayType = this.filterPanel.controls.displayType.value;\n      this.xAxisLabel = this.chartTitle;\n      if (displayType == 'bar_chart') {\n        this.blServ.getRoomReportsByFilter(data).subscribe(res => {\n          if (res) {\n            this.chartReportData = res;\n            this.displayGridLabel = this.getViewByLable(viewBy);\n            this.setChartData();\n          }\n        });\n      } else {\n        this.getReportGridData();\n      }\n    }\n    getReportGridData() {\n      let data = {\n        viewBy: this.filterPanel.controls.viewBy.value,\n        blId: this.filterPanel.controls.blId.value,\n        flId: this.filterPanel.controls.flId.value,\n        filterDto: {\n          paginationDTO: this.paginationObj,\n          filterCriteria: this.pagfilterCriteriaList\n        }\n      };\n      this.isFiltered = false;\n      this.blServ.getRoomReportsByFilterPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          let content = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n          this.reportData = content.map(each => ({\n            ...each\n          }));\n          this.displayGridLabel = this.getViewByLable(this.filterPanel.controls.viewBy.value);\n          this.updateGridData(this.chartTitle);\n        }\n      });\n    }\n    onSelectBlCode($event) {\n      setTimeout(() => {\n        this.filterPanel.patchValue({\n          flId: null\n        });\n      }, 10);\n      if ($event.blId != null) {\n        this.selectedBl = $event;\n        this.selectedFl = {};\n      } else {\n        this.selectedBl = {};\n        this.selectedFl = {};\n      }\n    }\n    onSelectFlCode(event) {\n      if (event.flId != null) {\n        const blData = {\n          blId: event.blId,\n          blNameString: event.blNameString,\n          site: null\n        };\n        this.selectedBl = blData;\n        this.updateBlList(blData);\n        setTimeout(() => {\n          this.filterPanel.patchValue({\n            blId: event.blId\n          });\n        }, 10);\n      } else {}\n    }\n    setChartData() {\n      this.barchartData = [];\n      const barChartData = [];\n      this.generateColors();\n      Object.values(this.chartReportData).forEach((each, index) => {\n        if (each.value > 0) {\n          let dataobj = {\n            name: each.name,\n            value: each.value\n          };\n          barChartData.push(dataobj);\n        }\n      });\n      if (barChartData.length < 5) {\n        let empty = '  ';\n        for (let i = 0; i < 5 - barChartData.length; i++) {\n          barChartData.push({\n            name: empty.repeat(i + 1),\n            value: 0\n          });\n        }\n      }\n      this.barchartData = barChartData;\n      this.legendItems = this.barchartData.filter(item => item.value > 0);\n      this.cdr.detectChanges();\n    }\n    generateColors() {\n      const dynamicColors = [];\n      Object.values(this.chartReportData).forEach((each, index) => {\n        if (each.value > 0) {\n          let color = '';\n          do {\n            color = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          } while (color === 'rgb(255, 255, 255)' || this.isWhiteColorShade(color) || dynamicColors.includes(color));\n          {\n            color = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n          }\n          ;\n          dynamicColors.push(color);\n        }\n      });\n      this.customColor = {\n        domain: [...dynamicColors]\n      };\n    }\n    isWhiteColorShade(color) {\n      const rgbValues = color.match(/\\d+/g);\n      const r = parseInt(rgbValues[0]);\n      const g = parseInt(rgbValues[1]);\n      const b = parseInt(rgbValues[2]);\n      const threshold = 200;\n      const average = (r + g + b) / 3;\n      return average > threshold;\n    }\n    onSelectBarChart(event) {\n      this.onClickCount(event);\n    }\n    onClickFilter() {\n      this.loadRecords();\n    }\n    onClear() {\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.chartTitle = this.viewByData[0].lable;\n      this.filterPanel.patchValue({\n        viewBy: this.viewByData[0].value,\n        displayType: this.displayTypeData[1].value,\n        blId: null,\n        flId: null\n      });\n      this.isGridType = true;\n      this.showSecondParam = false;\n      this.showThirdParam = false;\n      this.gridRoomData = [];\n      this.chartReportData = [];\n      this.barchartData = [];\n      this.legendItems = [];\n      this.reportData = [];\n      this.roomData = [];\n      this.chartImg = [];\n      this.loadRecords();\n      this.selectedBl = {};\n      this.selectedFl = {};\n    }\n    exportChartToPDF() {\n      const divElement = this.chartContainer.nativeElement;\n      html2canvas(divElement).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        this.chartImg = [];\n        this.chartImg.push(imgData);\n        this.printPDF();\n      });\n    }\n    printPDF() {\n      this.messageService.clear();\n      var reportDetails = {\n        chartImg: this.chartImg,\n        title: 'Rooms By ' + this.chartTitle\n      };\n      this.bookingSrv.printPdf(reportDetails).subscribe(res => {\n        if (res != null) {\n          this.messageService.add({\n            key: 'reportRoom',\n            severity: 'success',\n            summary: 'PDF Created',\n            detail: 'PDF created successfully'\n          });\n          var file = new Blob([res], {\n            type: 'application/pdf'\n          });\n          var fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        }\n      });\n    }\n    changeViewBy(event) {\n      this.chartTitle = event.lable;\n    }\n    onSelectDisplayType(event) {\n      if (event.value === 'grid') {\n        this.isGridType = true;\n        this.loadRecords();\n      } else {\n        this.isGridType = false;\n        this.loadRecords();\n      }\n    }\n    updateGridData(grid) {\n      this.gridRoomData = [];\n      if (grid == 'Building' || grid == 'Division' || grid == 'Team' || grid == 'Room Category' || grid == 'Space Standard' || grid == 'Room Use') {\n        this.showSecondParam = false;\n        this.showThirdParam = false;\n        this.gridRoomData = this.reportData.map(each => ({\n          ...each,\n          firstParamValue: each.name\n        }));\n      } else if (grid == 'Floor') {\n        this.showSecondParam = true;\n        this.showThirdParam = false;\n        this.secondParamName = 'Building';\n        this.gridRoomData = this.reportData.map(each => ({\n          firstParamValue: each.flCode,\n          secondParamValue: each.blCode,\n          ...each\n        }));\n      } else if (grid == 'Department') {\n        this.showSecondParam = true;\n        this.showThirdParam = false;\n        this.secondParamName = 'Division';\n        this.gridRoomData = this.reportData.map(each => ({\n          firstParamValue: each.depCode,\n          secondParamValue: each.divCode,\n          ...each\n        }));\n      } else if (grid == 'Room Type') {\n        this.showSecondParam = true;\n        this.showThirdParam = false;\n        this.secondParamName = 'Room Category';\n        this.gridRoomData = this.reportData.map(each => ({\n          firstParamValue: each.rmType,\n          secondParamValue: each.rmCat,\n          ...each\n        }));\n      } else if (grid == 'Sub Department') {\n        this.showSecondParam = true;\n        this.showThirdParam = true;\n        this.secondParamName = 'Department';\n        this.thirdParamName = 'Division';\n        this.gridRoomData = this.reportData.map(each => ({\n          firstParamValue: each.subDepCode,\n          secondParamValue: each.depCode,\n          thirdParamValue: each.divCode,\n          ...each\n        }));\n      }\n    }\n    onClickCount(data) {\n      this.roomData = [];\n      let filterdata = new SpaceReportFilterModel(null, null, null, null, null, null, null, null, null, null);\n      if (this.chartTitle == \"Building\") {\n        if (typeof data === \"string\") {\n          filterdata.blId = this.getBlId(data);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            filterdata.blId = this.getBlId(data.name);\n          } else {\n            filterdata.blId = data.blId;\n          }\n        }\n      } else if (this.chartTitle == \"Floor\") {\n        if (typeof data === \"string\") {\n          let parts = data.split(/-(.+)/);\n          let searchResultObj = this.getFlAndBlId(parts[0], parts[1]);\n          filterdata.blId = searchResultObj.blId;\n          filterdata.flId = searchResultObj.flId;\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            let parts = data.name.split(/-(.+)/);\n            let searchResultObj = this.getFlAndBlId(parts[0], parts[1]);\n            filterdata.blId = searchResultObj.blId;\n            filterdata.flId = searchResultObj.flId;\n          } else {\n            filterdata.blId = data.blId;\n            filterdata.flId = data.flId;\n          }\n        }\n      } else if (this.chartTitle == \"Division\") {\n        if (typeof data === \"string\") {\n          filterdata.divId = this.getDivId(data);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            filterdata.divId = this.getDivId(data.name);\n          } else {\n            filterdata.divId = data.divId;\n          }\n        }\n      } else if (this.chartTitle == \"Department\") {\n        if (typeof data === \"string\") {\n          let parts = data.split(/-(.+)/);\n          let searchResultObj = this.getDivAndDepId(parts[0], parts[1]);\n          filterdata.divId = searchResultObj.divId;\n          filterdata.depId = searchResultObj.depId;\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            let parts = data.name.split(/-(.+)/);\n            let searchResultObj = this.getDivAndDepId(parts[0], parts[1]);\n            filterdata.divId = searchResultObj.divId;\n            filterdata.depId = searchResultObj.depId;\n          } else {\n            filterdata.divId = data.divId;\n            filterdata.depId = data.depId;\n          }\n        }\n      } else if (this.chartTitle == \"Room Category\") {\n        if (typeof data === \"string\") {\n          filterdata.rmcatId = this.getRmCatId(data);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            filterdata.rmcatId = this.getRmCatId(data.name);\n          } else {\n            filterdata.rmcatId = data.rmcatId;\n          }\n        }\n      } else if (this.chartTitle == \"Room Type\") {\n        if (typeof data === \"string\") {\n          let parts = data.split(/-(.+)/);\n          let searchResultObj = this.getRmCatAndRmTypeId(parts[0], parts[1]);\n          filterdata.rmcatId = searchResultObj.rmcatId;\n          filterdata.rmtypeId = searchResultObj.rmtypeId;\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            let parts = data.name.split(/-(.+)/);\n            let searchResultObj = this.getRmCatAndRmTypeId(parts[0], parts[1]);\n            filterdata.rmcatId = searchResultObj.rmcatId;\n            filterdata.rmtypeId = searchResultObj.rmtypeId;\n          } else {\n            filterdata.rmcatId = data.rmcatId;\n            filterdata.rmtypeId = data.rmtypeId;\n          }\n        }\n      } else if (this.chartTitle == \"Room Use\") {\n        if (typeof data === \"string\") {\n          filterdata.rmUse = this.getRoomUse(data);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            filterdata.rmUse = this.getRoomUse(data.name);\n          } else {\n            filterdata.rmUse = data.rmUse;\n          }\n        }\n      } else if (this.chartTitle == \"Space Standard\") {\n        if (typeof data === \"string\") {\n          filterdata.spaceStandard = this.getSpaceStandard(data);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            filterdata.spaceStandard = this.getSpaceStandard(data.name);\n          } else {\n            filterdata.spaceStandard = data.spaceStandard;\n          }\n        }\n      } else if (this.chartTitle == \"Sub Department\") {\n        if (typeof data === \"string\") {\n          let parts = data.split('-');\n          filterdata.subDepId = this.getSubDepartmentId(parts[0], parts[1], parts[2]);\n        } else if (typeof data === \"object\" && data !== null) {\n          if (!this.isGridType) {\n            let parts = data.name.split('-');\n            let result = this.getSubDepartmentId(parts[0], parts[1], parts[2]);\n            filterdata.subDepId = result;\n          } else {\n            filterdata.subDepId = data.subDepId;\n          }\n        }\n      }\n      if (!!this.filterPanel.controls.blId.value) {\n        filterdata.blId = this.filterPanel.controls.blId.value;\n      }\n      if (!!this.filterPanel.controls.flId.value) {\n        filterdata.flId = this.filterPanel.controls.flId.value;\n      }\n      this.blServ.getRoomByFilter(filterdata).subscribe(res => {\n        this.roomData = res;\n        this.showPopUpGrid = true;\n      });\n    }\n    formatYAxisTickLabel(value) {\n      if (value % 1 === 0) {\n        return value.toLocaleString();\n      } else {\n        return '';\n      }\n    }\n    exportExcel() {\n      this.getDestructuredData(this.gridRoomData);\n      var excelHeaders = [];\n      import(\"xlsx\").then(xlsx => {\n        const worksheet = xlsx.utils.json_to_sheet(this.grid_array);\n        if (this.showSecondParam) {\n          worksheet['!cols'] = [{\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }];\n          excelHeaders = [this.secondParamName, this.displayGridLabel, \"Number of Rooms\"];\n        } else if (this.showThirdParam) {\n          worksheet['!cols'] = [{\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }, {\n            wch: 20\n          }];\n          excelHeaders = [this.thirdParamName, this.secondParamName, this.displayGridLabel, \"Number of Rooms\"];\n        } else {\n          worksheet['!cols'] = [{\n            wch: 20\n          }, {\n            wch: 20\n          }];\n          excelHeaders = [this.displayGridLabel, \"Number of Rooms\"];\n        }\n        const headers = excelHeaders.map((header, index) => ({\n          v: header,\n          position: String.fromCharCode(65 + index) + 1\n        }));\n        headers.forEach(header => {\n          worksheet[header.position] = {\n            v: header.v\n          };\n        });\n        const workbook = {\n          Sheets: {\n            'data': worksheet\n          },\n          SheetNames: ['data']\n        };\n        const excelBuffer = xlsx.write(workbook, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        this.saveAsExcelFile(excelBuffer, \"room\");\n      });\n    }\n    getDestructuredData(data) {\n      this.grid_array = data.map(item => {\n        if (this.showSecondParam) {\n          return {\n            [this.secondParamName]: item['secondParamValue'],\n            [this.displayGridLabel]: item['firstParamValue'],\n            \"Number of Rooms\": item['value']\n          };\n        } else if (this.showThirdParam) {\n          return {\n            [this.thirdParamName]: item['thirdParamValue'],\n            [this.secondParamName]: item['secondParamValue'],\n            [this.displayGridLabel]: item['firstParamValue'],\n            \"Number of Rooms\": item['value']\n          };\n        } else {\n          return {\n            [this.displayGridLabel]: item['firstParamValue'],\n            \"Number of Rooms\": item['value']\n          };\n        }\n      });\n    }\n    saveAsExcelFile(buffer, fileName) {\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      let EXCEL_EXTENSION = '.xlsx';\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n    onLegendItemClick(item) {\n      this.roomData = [];\n      let filterdata = new SpaceReportFilterModel(null, null, null, null, null, null, null, null, null, null);\n      let parts = item.name.split(/-(.+)/);\n      if (this.chartTitle == \"Building\") {\n        filterdata.blId = this.getBlId(parts[0]);\n      } else if (this.chartTitle == \"Floor\") {\n        let searchResultObj = this.getFlAndBlId(parts[0], parts[1]);\n        filterdata.blId = searchResultObj.blId;\n        filterdata.flId = searchResultObj.flId;\n      } else if (this.chartTitle == \"Division\") {\n        filterdata.divId = this.getDivId(parts[0]);\n      } else if (this.chartTitle == \"Department\") {\n        let searchResultObj = this.getDivAndDepId(parts[0], parts[1]);\n        filterdata.divId = searchResultObj.divId;\n        filterdata.depId = searchResultObj.depId;\n      } else if (this.chartTitle == \"Room Category\") {\n        filterdata.rmcatId = this.getRmCatId(parts[0]);\n      } else if (this.chartTitle == \"Room Type\") {\n        let searchResultObj = this.getRmCatAndRmTypeId(parts[0], parts[1]);\n        filterdata.rmcatId = searchResultObj.rmcatId;\n        filterdata.rmtypeId = searchResultObj.rmtypeId;\n      }\n      // else if (this.chartTitle == \"Team\"){\n      //     filterdata.teamId = parts[0];\n      // }\n      else if (this.chartTitle == \"Space Standard\") {\n        let searchResultObj = this.getSpaceStandard(parts[0]);\n        filterdata.spaceStandard = searchResultObj;\n      } else if (this.chartTitle == \"Room Use\") {\n        let searchResultObj = this.getRoomUse(parts[0]);\n        filterdata.rmUse = searchResultObj;\n      } else if (this.chartTitle == \"Sub Department\") {\n        let resParts = item.name.split('-');\n        let searchResultObj = this.getSubDepartmentId(resParts[0], resParts[1], resParts[2]);\n        filterdata.subDepId = searchResultObj;\n      }\n      if (!!this.filterPanel.controls.blId.value) {\n        filterdata.blId = this.filterPanel.controls.blId.value;\n      }\n      if (!!this.filterPanel.controls.flId.value) {\n        filterdata.flId = this.filterPanel.controls.flId.value;\n      }\n      this.blServ.getRoomByFilter(filterdata).subscribe(res => {\n        this.roomData = res;\n        this.showPopUpGrid = true;\n      });\n    }\n    getBlId(blCode) {\n      return this.chartReportData.find(each => each.blCode == blCode)?.blId;\n    }\n    getFlAndBlId(blCode, flCode) {\n      let returnData = {\n        blId: null,\n        flId: null\n      };\n      returnData.blId = this.chartReportData.find(each => each.blCode == blCode)?.blId;\n      if (flCode != null) {\n        returnData.flId = this.chartReportData.find(each => each.blCode == blCode && each.flCode == flCode)?.flId;\n      }\n      return returnData;\n    }\n    getDivId(divCode) {\n      return this.chartReportData.find(each => each.divCode == divCode)?.divId;\n    }\n    getDivAndDepId(divCode, depCode) {\n      let returnData = {\n        divId: null,\n        depId: null\n      };\n      returnData.divId = this.chartReportData.find(each => each.divCode == divCode)?.divId;\n      if (depCode != null) {\n        returnData.depId = this.chartReportData.find(each => each.divCode == divCode && each.depCode == depCode)?.depId;\n      }\n      return returnData;\n    }\n    getRmCatId(rmCat) {\n      return this.chartReportData.find(each => each.rmCat == rmCat)?.rmcatId;\n    }\n    getRmCatAndRmTypeId(rmCat, rmType) {\n      let returnData = {\n        rmcatId: null,\n        rmtypeId: null\n      };\n      returnData.rmcatId = this.chartReportData.find(each => each.rmCat == rmCat)?.rmcatId;\n      if (rmType != null) {\n        returnData.rmtypeId = this.chartReportData.find(each => each.rmCat == rmCat && each.rmType == rmType)?.rmtypeId;\n      }\n      return returnData;\n    }\n    getSubDepartmentId(divCode, depCode, subDepCode) {\n      return this.chartReportData.find(each => each.divCode == divCode && each.depCode == depCode && each.subDepCode == subDepCode)?.subDepId;\n    }\n    getSpaceStandard(ss) {\n      return this.chartReportData.find(each => each.spaceStandardName == ss)?.spaceStandard;\n    }\n    getRoomUse(ru) {\n      return this.chartReportData.find(each => each.rmUseName == ru)?.rmUse;\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.getReportGridData();\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined) {\n            let pagfilterCriteria = {\n              fieldName: this.getPaginationFilterField(field),\n              value: filterValue,\n              matchMode: matchMode\n            };\n            this.updateFilterCriteriaList(pagfilterCriteria);\n          }\n        });\n        this.paginationObj.pageSize = 0;\n        setTimeout(() => {\n          this.getReportGridData();\n        }, 100);\n      }\n      this.isFiltered = true;\n    }\n    updateFilterCriteriaList(filterCriteria) {\n      let index = this.pagfilterCriteriaList.findIndex(item => item.fieldName === filterCriteria['fieldName']);\n      if (filterCriteria['value'] == null) {\n        if (index !== -1) {\n          this.pagfilterCriteriaList.splice(index, 1);\n        }\n      } else {\n        if (index !== -1) {\n          this.pagfilterCriteriaList[index] = filterCriteria;\n        } else {\n          this.pagfilterCriteriaList.push(filterCriteria);\n        }\n      }\n    }\n    getPaginationFilterField(field) {\n      let fieldValue = \"\";\n      if (this.chartTitle == \"Building\") {\n        fieldValue = \"bl_code\";\n      } else if (this.chartTitle == \"Division\") {\n        fieldValue = \"div_code\";\n      } else if (this.chartTitle == \"Room Category\") {\n        fieldValue = \"rm_cat\";\n      } else if (this.chartTitle == \"Space Standard\") {\n        fieldValue = \"space_standard\";\n      } else if (this.chartTitle == \"Room Use\") {\n        fieldValue = \"rm_use\";\n      } else if (this.chartTitle == \"Floor\") {\n        if (field == \"firstParamValue\") {\n          fieldValue = \"fl_code\";\n        } else if (field == \"secondParamValue\") {\n          fieldValue = \"bl_code\";\n        }\n      } else if (this.chartTitle == \"Department\") {\n        if (field == \"firstParamValue\") {\n          fieldValue = \"dep_code\";\n        } else if (field == \"secondParamValue\") {\n          fieldValue = \"div_code\";\n        }\n      } else if (this.chartTitle == \"Room Type\") {\n        if (field == \"firstParamValue\") {\n          fieldValue = \"rm_type\";\n        } else if (field == \"secondParamValue\") {\n          fieldValue = \"rm_cat\";\n        }\n      } else if (this.chartTitle == \"Sub Department\") {\n        if (field == \"firstParamValue\") {\n          fieldValue = \"sub_dep_code\";\n        } else if (field == \"secondParamValue\") {\n          fieldValue = \"dep_code\";\n        } else if (field == \"thirdParamValue\") {\n          fieldValue = \"div_code\";\n        }\n      }\n      return fieldValue;\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    scrollToEndBl() {\n      this.offsetBl = this.limitBl;\n      this.limitBl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitBl;\n      this.filterCriteria.offset = this.offsetBl;\n      this.blServ.getALLBuildingByScroll(this.filterCriteria).subscribe(res => {\n        this.enumBL = res;\n        this.updateBlList(this.selectedBl);\n      });\n    }\n    scrollToEndFl() {\n      this.offsetFl = this.limitFl;\n      this.limitFl += this.scrollLimit;\n      this.filterCriteria.limit = this.limitFl;\n      this.filterCriteria.offset = this.offsetFl;\n      this.blServ.getALLFloorByScroll(this.filterCriteria).subscribe(res => {\n        this.enumFL = res;\n        this.updateFlList(this.selectedFl);\n      });\n    }\n    searchBl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"blName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndBl();\n    }\n    searchFl(event) {\n      this.filterCriteria = {};\n      this.filterCriteria = {\n        fieldName: \"flName\",\n        value: event.term,\n        matchMode: \"contains\"\n      };\n      this.scrollToEndFl();\n    }\n    updateBlList(blData) {\n      if (blData.blId) {\n        this.enumBL = this.enumBL.filter(t => t.blId !== blData.blId);\n        this.enumBL = this.enumBL.filter(t => t.blId !== null);\n        this.enumBL.unshift(blData);\n      }\n      this.enumBL.unshift(new BuildingFilterInputDTO(null, 'Make a selection', null));\n    }\n    updateFlList(flData) {\n      if (flData.flId) {\n        this.enumFL = this.enumFL.filter(t => t.flId !== flData.flId);\n        this.enumFL = this.enumFL.filter(t => t.flId !== null);\n        this.enumFL.unshift(flData);\n      }\n      this.enumFL.unshift(new FloorFilterInputDTO(null, 'Make a selection', null));\n    }\n    onOpenBl() {\n      this.limitBl = 0;\n      this.offsetBl = 0;\n      this.filterCriteria = {\n        fieldName: null,\n        value: null,\n        matchMode: \"contains\",\n        limit: 0,\n        offset: 0\n      };\n      this.scrollToEndBl();\n    }\n    onOpenFl() {\n      this.limitFl = 0;\n      this.offsetFl = 0;\n      if (this.selectedBl.blId) {\n        this.filterCriteria = {\n          fieldName: \"bl.blId\",\n          value: this.selectedBl.blId,\n          matchMode: \"equals\",\n          limit: 0,\n          offset: 0\n        };\n      } else {\n        this.filterCriteria = {\n          fieldName: null,\n          value: null,\n          matchMode: \"contains\",\n          limit: 0,\n          offset: 0\n        };\n      }\n      this.scrollToEndFl();\n    }\n    getViewByLable(value) {\n      let data = this.viewByData.find(each => each.value == value);\n      return data.lable;\n    }\n    static #_ = this.ɵfac = function ViewRoomReportComponent_Factory(t) {\n      return new (t || ViewRoomReportComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.BookingService), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.BuildingService), i0.ɵɵdirectiveInject(i5.DivisionService), i0.ɵɵdirectiveInject(i6.DepartmentService), i0.ɵɵdirectiveInject(i7.RmcatService), i0.ɵɵdirectiveInject(i8.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ViewRoomReportComponent,\n      selectors: [[\"app-view-room-report\"]],\n      viewQuery: function ViewRoomReportComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartContainer = _t.first);\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 11,\n      vars: 14,\n      consts: [[1, \"card\", 2, \"height\", \"90vh\"], [\"header\", \"Room Summary\", 3, \"toggleable\"], [3, \"formGroup\"], [\"width\", \"100%\", 4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"style\", \"overflow-x: auto;\", 4, \"ngIf\"], [\"styleClass\", \"dark-panel\", \"id\", \"preview\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"key\", \"reportRoom\", \"position\", \"top-center\"], [\"width\", \"100%\"], [2, \"width\", \"20%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"appendTo\", \"body\", \"formControlName\", \"blId\", \"bindLabel\", \"blNameString\", \"bindValue\", \"blId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\", \"open\", \"scrollToEnd\", \"search\"], [\"appendTo\", \"body\", \"formControlName\", \"flId\", \"bindLabel\", \"flNameString\", \"bindValue\", \"flId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"open\", \"change\", \"scrollToEnd\", \"search\"], [\"width\", \"20%\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"viewBy\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [\"appendTo\", \"body\", \"placeholder\", \"Make a selection\", \"formControlName\", \"displayType\", \"bindLabel\", \"lable\", \"bindValue\", \"value\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"searchable\", \"items\", \"change\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", 2, \"margin-top\", \"15px\", \"width\", \"60px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", 2, \"margin-left\", \"5px\", \"margin-top\", \"15px\", \"width\", \"60px\", 3, \"click\"], [\"style\", \"width:30px; display:inline-flex;\", 4, \"ngIf\"], [2, \"width\", \"30px\", \"display\", \"inline-flex\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-file-excel\", \"matTooltip\", \"XLS\", \"matTooltipPosition\", \"below\", 1, \"p-button-success\", \"p-mr-2\", \"pull-right\", 2, \"margin-left\", \"5px\", 3, \"click\"], [\"icon\", \"pi pi-file-pdf\", \"matTooltip\", \"Generate PDF\", \"matTooltipPosition\", \"below\", \"styleClass\", \"p-button-raised p-button-danger\", 2, \"width\", \"30px\", \"margin-left\", \"5px\", 3, \"click\"], [2, \"width\", \"25%\"], [\"width\", \"25%\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Search\", 1, \"p-button-primary\", 2, \"margin-top\", \"15px\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Clear\", 1, \"p-button-primary\", 2, \"margin-left\", \"5px\", \"margin-top\", \"15px\", 3, \"click\"], [1, \"card\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", 3, \"value\", \"paginator\", \"rows\", \"rowHover\", \"onFilter\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"first\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"pSortableColumn\", \"thirdParamValue\", 4, \"ngIf\"], [\"pSortableColumn\", \"secondParamValue\", 4, \"ngIf\"], [\"pSortableColumn\", \"firstParamValue\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"firstParamValue\"], [\"type\", \"text\", \"field\", \"firstParamValue\", \"display\", \"menu\"], [\"pSortableColumn\", \"value\"], [\"field\", \"value\"], [\"pSortableColumn\", \"thirdParamValue\"], [\"field\", \"thirdParamValue\"], [\"type\", \"text\", \"field\", \"thirdParamValue\", \"display\", \"menu\"], [\"pSortableColumn\", \"secondParamValue\"], [\"field\", \"secondParamValue\"], [\"type\", \"text\", \"field\", \"secondParamValue\", \"display\", \"menu\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [4, \"ngIf\"], [2, \"width\", \"calc(100% / 3)\"], [2, \"width\", \"calc(100% / 4)\"], [2, \"width\", \"50%\"], [2, \"overflow-x\", \"auto\"], [\"chartContainer\", \"\"], [2, \"display\", \"flex\"], [3, \"view\", \"scheme\", \"results\", \"showXAxisLabel\", \"xAxisLabel\", \"xAxis\", \"showGridLines\", \"yAxis\", \"legend\", \"yAxisTickFormatting\", \"showYAxisLabel\", \"yAxisLabel\", \"select\"], [1, \"legend\"], [1, \"legend-title-container\"], [1, \"legend-title\"], [\"class\", \"legend-labels\", 4, \"ngFor\", \"ngForOf\"], [1, \"legend-labels\"], [1, \"legend-label\", 3, \"click\"], [3, \"title\"], [1, \"legend-label-color\"], [1, \"legend-label-text\"], [2, \"margin\", \"0px\"], [3, \"data\"]],\n      template: function ViewRoomReportComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p-panel\", 1)(2, \"form\", 2);\n          i0.ɵɵtemplate(3, ViewRoomReportComponent_table_3_Template, 27, 15, \"table\", 3);\n          i0.ɵɵtemplate(4, ViewRoomReportComponent_table_4_Template, 28, 15, \"table\", 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(5, ViewRoomReportComponent_div_5_Template, 7, 10, \"div\", 4);\n          i0.ɵɵtemplate(6, ViewRoomReportComponent_div_6_Template, 10, 13, \"div\", 5);\n          i0.ɵɵelementStart(7, \"p-dialog\", 6);\n          i0.ɵɵlistener(\"visibleChange\", function ViewRoomReportComponent_Template_p_dialog_visibleChange_7_listener($event) {\n            return ctx.showPopUpGrid = $event;\n          });\n          i0.ɵɵtemplate(8, ViewRoomReportComponent_ng_template_8_Template, 2, 0, \"ng-template\", 7);\n          i0.ɵɵtemplate(9, ViewRoomReportComponent_ng_template_9_Template, 1, 1, \"ng-template\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"p-toast\", 9);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"toggleable\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formGroup\", ctx.filterPanel);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.useTabletProtrait);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isGridType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isGridType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(13, _c2));\n          i0.ɵɵproperty(\"visible\", ctx.showPopUpGrid)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i9.NgForOf, i9.NgIf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i10.NgSelectComponent, i3.PrimeTemplate, i11.Table, i11.SortableColumn, i11.SortIcon, i11.ColumnFilter, i12.ButtonDirective, i12.Button, i13.Dialog, i14.Toast, i15.Panel, i16.BarVerticalComponent, i17.AddRoomReportTableComponent, i18.Paginator],\n      styles: [\"p-dialog[_ngcontent-%COMP%]{z-index:1000}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-header{padding:.7rem!important}[_nghost-%COMP%]     #preview .p-dialog .p-dialog-content{padding:.25rem!important}[_nghost-%COMP%]     .dark-panel.p-dialog .p-dialog-header{border:5px!important}.legend[_ngcontent-%COMP%]{display:inline-block;padding:0;width:100%;max-width:280px}.legend-title-container[_ngcontent-%COMP%]{width:166px}.legend-title[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.legend-labels[_ngcontent-%COMP%]{line-height:85%;list-style:none;text-align:left;float:left;width:100%;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05);margin-bottom:0}.legend-label[_ngcontent-%COMP%]{cursor:pointer;font-size:90%;margin:8px}.legend-label-color[_ngcontent-%COMP%]{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.legend-label-text[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}[_nghost-%COMP%]     .ngx-charts-outer{animation:chartFadeIn linear 0!important}[_nghost-%COMP%]     .ngx-charts .grid-panel.odd rect{fill:none!important}@media screen and (min-width: 600px) and (max-width: 959px){  .p-button{padding:.25rem .5rem!important}}\"]\n    });\n  }\n  return ViewRoomReportComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}