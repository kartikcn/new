{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { RmcatTreeFilterInput } from 'src/app/ui/rmcat/modal/rmcatTreeFilterInput.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/rmcat.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/panel\";\nimport * as i10 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddRmtypeFortreeComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function AddRmtypeFortreeComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveRecords());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AddRmtypeFortreeComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.cancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.rmTypeFormPanel.valid);\n  }\n}\nexport class AddRmtypeFortreeComponent {\n  constructor(formBuilder, rmcatSrv, messageService) {\n    this.formBuilder = formBuilder;\n    this.rmcatSrv = rmcatSrv;\n    this.messageService = messageService;\n    this.title = '';\n    this.subscriptions = [];\n    this.isNew = false;\n    this.action = '';\n    this.parentFun = new EventEmitter();\n    this.enumRmcats = [];\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.rmTypeFormPanel = this.formBuilder.group({\n      rmtypeId: [null, [Validators.required]],\n      rmcatId: [null, [Validators.required]],\n      rmType: ['', [Validators.required]],\n      rmTypeDesc: [''],\n      highlightColor: ['#a6a6a6']\n    });\n    this.subscriptions.push(this.rmTypeFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {\n    this.loadRmcats();\n  }\n  ngOnChanges() {\n    this.title = this.action;\n    if (this.formData) {\n      this.setFormData(this.formData);\n    }\n  }\n  loadRmcats() {\n    this.rmcatSrv.getALLRmcats().subscribe(res => {\n      this.enumRmcats = res;\n      // this.enumRmcats = res.map((i: any) => { i.rmCatDesc = i.rmCat + ' - ' + i.rmCatDesc; return i; });\n      this.enumRmcats.unshift(new RmcatTreeFilterInput(null, 'Make a selection'));\n    });\n  }\n  setFormData(data) {\n    this.rmTypeFormPanel.patchValue({\n      rmtypeId: data.rmtypeId,\n      rmcatId: data.rmcatId,\n      rmType: data.rmType,\n      rmTypeDesc: data.rmTypeDesc,\n      highlightColor: data.highlightColor ?? '#a6a6a6'\n    });\n  }\n  isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n  getValidationErrors() {\n    const validationErros = [];\n    Object.keys(this.rmTypeFormPanel.controls).forEach(key => {\n      let field = this.rmTypeFormPanel.get(key);\n      const controlErrors = field != null ? field.errors : null;\n      if (controlErrors != null) {\n        Object.keys(controlErrors).forEach(keyError => {\n          validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n        });\n      }\n    });\n    return validationErros;\n  }\n  get value() {\n    const records = {\n      rmtypeId: this.rmTypeFormPanel.controls.rmtypeId.value,\n      rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n      rmType: this.rmTypeFormPanel.controls.rmType.value,\n      rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n      highlightColor: this.rmTypeFormPanel.controls.highlightColor.value\n    };\n    return records;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.rmTypeFormPanel.patchValue({\n        rmtypeId: value.rmtypeId,\n        rmcatId: value.rmcatId,\n        rmType: value.rmType,\n        rmTypeDesc: value.rmTypeDesc,\n        highlightColor: value.highlightColor ?? '#a6a6a6'\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.rmTypeFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  validate(_) {\n    return this.rmTypeFormPanel.valid ? null : {\n      divisionFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  saveRecords() {\n    this.messageService.clear();\n    let data = {\n      rmtypeId: this.rmTypeFormPanel.controls.rmtypeId.value,\n      rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n      rmType: this.rmTypeFormPanel.controls.rmType.value,\n      rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n      highlightColor: this.rmTypeFormPanel.controls.highlightColor.value\n    };\n    this.rmcatSrv.saveRmType(data).subscribe(res => {\n      if (res.rmType) {\n        this.parentFun.emit('save');\n      } else if (res.code != 200) {\n        this.messageService.add({\n          key: 'save',\n          severity: 'error',\n          summary: 'error',\n          detail: res.text\n        });\n      }\n    });\n  }\n  cancel() {\n    this.parentFun.emit('cancel');\n  }\n  static #_ = this.ɵfac = function AddRmtypeFortreeComponent_Factory(t) {\n    return new (t || AddRmtypeFortreeComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.RmcatService), i0.ɵɵdirectiveInject(i3.MessageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddRmtypeFortreeComponent,\n    selectors: [[\"app-add-rmtype-fortree\"]],\n    inputs: {\n      isNew: \"isNew\",\n      action: \"action\",\n      formData: \"formData\"\n    },\n    outputs: {\n      parentFun: \"parentFun\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n      multi: true\n    }, MessageService]), i0.ɵɵNgOnChangesFeature],\n    decls: 29,\n    vars: 5,\n    consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"rmcatId\", \"bindLabel\", \"rmCatDesc\", \"bindValue\", \"rmcatId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"name\", \"rmType\", \"formControlName\", \"rmType\", \"maxlength\", \"32\", \"appTrimInput\", \"\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"name\", \"rmTypeDesc\", \"formControlName\", \"rmTypeDesc\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"64\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [\"type\", \"color\", \"name\", \"highlightColor\", \"formControlName\", \"highlightColor\", \"maxlength\", \"32\", 1, \"form-control\", 2, \"width\", \"100px\", \"padding\", \"0.375rem\"], [\"key\", \"save\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Save\", 3, \"disabled\", \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"ml10\", 3, \"click\"]],\n    template: function AddRmtypeFortreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-panel\", 0);\n        i0.ɵɵtemplate(1, AddRmtypeFortreeComponent_ng_template_1_Template, 2, 1, \"ng-template\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3)(4, \"tr\")(5, \"td\", 4)(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Room Category\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"ng-select\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"tr\")(11, \"td\", 4)(12, \"div\", 5)(13, \"label\", 6);\n        i0.ɵɵtext(14, \"Room Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"tr\")(17, \"td\", 4)(18, \"div\", 5)(19, \"label\", 9);\n        i0.ɵɵtext(20, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"textarea\", 10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 4)(24, \"div\", 5)(25, \"label\", 6);\n        i0.ɵɵtext(26, \"Highlight Color \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 11);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelement(28, \"p-toast\", 12);\n      }\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate1(\"header\", \"\", ctx.title, \" Room Type\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.rmTypeFormPanel);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumRmcats)(\"searchable\", true);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzInputDirective, i3.PrimeTemplate, i7.ButtonDirective, i8.Toast, i9.Panel, i10.TrimInputDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","forwardRef","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","MessageService","VaildationError","RmcatTreeFilterInput","i0","ɵɵelementStart","ɵɵlistener","AddRmtypeFortreeComponent_ng_template_1_Template_button_click_0_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","saveRecords","ɵɵelementEnd","AddRmtypeFortreeComponent_ng_template_1_Template_button_click_1_listener","ctx_r3","cancel","ɵɵproperty","ctx_r0","rmTypeFormPanel","valid","AddRmtypeFortreeComponent","constructor","formBuilder","rmcatSrv","messageService","title","subscriptions","isNew","action","parentFun","enumRmcats","onChange","onTouched","group","rmtypeId","required","rmcatId","rmType","rmTypeDesc","highlightColor","push","valueChanges","subscribe","value","ngOnInit","loadRmcats","ngOnChanges","formData","setFormData","getALLRmcats","res","unshift","data","patchValue","isValid","getValidationErrors","length","validationErros","Object","keys","controls","forEach","key","field","get","controlErrors","errors","keyError","records","setTimeout","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","divisionFormPanel","ngOnDestroy","s","unsubscribe","clear","saveRmType","emit","code","add","severity","summary","detail","text","ɵɵdirectiveInject","i1","UntypedFormBuilder","i2","RmcatService","i3","_2","selectors","inputs","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵNgOnChangesFeature","decls","vars","consts","template","AddRmtypeFortreeComponent_Template","rf","ctx","ɵɵtemplate","AddRmtypeFortreeComponent_ng_template_1_Template","ɵɵtext","ɵɵelement","ɵɵpropertyInterpolate1","ɵɵadvance"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/rmcat-rmtype/widgets/add-rmtype-fortree/add-rmtype-fortree.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/rmcat-rmtype/widgets/add-rmtype-fortree/add-rmtype-fortree.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnChanges, OnInit, Output, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, UntypedFormGroup, UntypedFormBuilder, Validators, ValidationErrors, UntypedFormControl, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { MessageService } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { RmcatService } from 'src/app/services/rmcat.service';\nimport { RmcatFilterInput } from 'src/app/ui/rmcat/modal/rmcatFilterInput.model';\nimport { RmcatTreeFilterInput } from 'src/app/ui/rmcat/modal/rmcatTreeFilterInput.model';\n\n@Component({\n  selector: 'app-add-rmtype-fortree',\n  templateUrl: './add-rmtype-fortree.component.html',\n  styleUrls: ['./add-rmtype-fortree.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddRmtypeFortreeComponent),\n      multi: true\n    },\n    MessageService\n  ]\n})\nexport class AddRmtypeFortreeComponent implements OnInit,OnChanges {\n  title: string = '';\n  rmTypeFormPanel!: UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  @Input() isNew: boolean = false;\n  @Input() action :string ='';\n  @Input() formData:any;\n  @Output() parentFun = new EventEmitter();\n  enumRmcats: RmcatTreeFilterInput[] = [];\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n    private rmcatSrv: RmcatService,\n    private messageService: MessageService,\n  ) {\n\n    this.rmTypeFormPanel = this.formBuilder.group({\n      rmtypeId:[null,[Validators.required]],\n      rmcatId: [null, [Validators.required]],\n      rmType: ['', [Validators.required]],\n      rmTypeDesc: [''],\n      highlightColor : ['#a6a6a6']\n    });\n    this.subscriptions.push(\n      this.rmTypeFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n    this.loadRmcats();\n  }\n\n  ngOnChanges() {\n    this.title = this.action;\n    if(this.formData){\n      this.setFormData(this.formData);\n    }\n  }\n\n  loadRmcats() {\n    this.rmcatSrv.getALLRmcats().subscribe((res: any[]) => {\n      this.enumRmcats = res;\n      // this.enumRmcats = res.map((i: any) => { i.rmCatDesc = i.rmCat + ' - ' + i.rmCatDesc; return i; });\n      this.enumRmcats.unshift(new RmcatTreeFilterInput(null, 'Make a selection'));\n    });\n  }\n\n  setFormData(data: any) {\n    this.rmTypeFormPanel.patchValue({\n      rmtypeId:data.rmtypeId,\n      rmcatId: data.rmcatId,\n      rmType: data.rmType,\n      rmTypeDesc: data.rmTypeDesc,\n      highlightColor:data.highlightColor??'#a6a6a6',\n    });\n  }\n\n\n  public isValid() {\n    return this.getValidationErrors().length === 0;\n  }\n\n  public getValidationErrors() {\n    const validationErros: VaildationError[] = [];\n    Object.keys(this.rmTypeFormPanel.controls).forEach(key => {\n      let field = this.rmTypeFormPanel.get(key);\n      const controlErrors: ValidationErrors | null = field != null ? field.errors : null;\n      if (controlErrors != null) {\n        Object.keys(controlErrors).forEach(keyError => {\n          validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n        });\n      }\n    });\n    return validationErros;\n  }\n\n  get value(): any {\n    const records: any = {\n      rmtypeId:this.rmTypeFormPanel.controls.rmtypeId.value,\n      rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n      rmType: this.rmTypeFormPanel.controls.rmType.value,\n      rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n      highlightColor : this.rmTypeFormPanel.controls.highlightColor.value,\n    }\n    return records;\n  }\n\n  set value(value: any) {\n    setTimeout(() => {\n      this.rmTypeFormPanel.patchValue({\n        rmtypeId:value.rmtypeId,\n        rmcatId: value.rmcatId,\n        rmType: value.rmType,\n        rmTypeDesc: value.rmTypeDesc,\n        highlightColor:value.highlightColor??'#a6a6a6',\n      });\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n\n  writeValue(value: any) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.rmTypeFormPanel.reset();\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  validate(_: UntypedFormControl) {\n    return this.rmTypeFormPanel.valid ? null : { divisionFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  saveRecords(){\n    this.messageService.clear();\n    let data ={\n      rmtypeId:this.rmTypeFormPanel.controls.rmtypeId.value,\n      rmcatId: this.rmTypeFormPanel.controls.rmcatId.value,\n      rmType: this.rmTypeFormPanel.controls.rmType.value,\n      rmTypeDesc: this.rmTypeFormPanel.controls.rmTypeDesc.value,\n      highlightColor : this.rmTypeFormPanel.controls.highlightColor.value,\n    }\n    this.rmcatSrv.saveRmType(data).subscribe((res:any)=>{\n      if(res.rmType){\n        this.parentFun.emit('save');\n      }else if(res.code!=200){\n        this.messageService.add({ key: 'save', severity: 'error', summary: 'error', detail: res.text });\n      }\n    })\n  }\n  cancel(){\n    this.parentFun.emit('cancel');\n  }\n\n  // checkRmTypeExist(control: any) {\n  //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n  //       this.rmTypeFormPanel.controls['rmType'].setErrors(null);\n  //       this.rmTypeFormPanel.clearAsyncValidators();\n  //       this.rmTypeFormPanel.updateValueAndValidity();\n  //       let rmStandard = this.rmTypeFormPanel.controls.rmCat.value;\n  //       let rmType = this.rmTypeFormPanel.controls.rmType.value\n  //       this.rmcatSrv.validateRmType(rmStandard,rmType).subscribe((res:any)=>{\n  //         if (res && res.text == \"true\"){\n  //           this.rmTypeFormPanel.controls['rmType'].setErrors({ 'incorrect': true });\n  //           this.rmTypeFormPanel.updateValueAndValidity();\n  //           return { 'incorrect': true };\n  //         }\n  //         else{\n  //           return null;\n  //         }\n  //       });\n  //     }\n  //   };\n  \n}\n","<p-panel header=\"{{title}} Room Type\">\n  <ng-template pTemplate=\"icons\">\n    <button pButton (click)=\"saveRecords()\" label=\"Save\" [disabled]=\"!rmTypeFormPanel.valid\"></button>\n    <button pButton class=\"ml10\" label=\"Cancel\" (click)=\"cancel()\"></button>\n  </ng-template>\n  <form [formGroup]=\"rmTypeFormPanel\">\n    <table width=\"100%\">\n      <tr>\n        <td style=\"width: 100%\">\n          <div class=\"input-label-custom \">\n            <label class='form-field-lable control-label'>Room Category</label>\n            <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"enumRmcats\" formControlName=\"rmcatId\"\n              [searchable]=\"true\" bindLabel=\"rmCatDesc\" bindValue=\"rmcatId\" placeholder=\"Make a selection\"\n              class=\"ng-select-dropdown\">\n            </ng-select>\n          </div>\n        </td>\n      <tr>\n        <td style=\"width: 100%\">\n          <div class=\"input-label-custom \">\n            <label class='form-field-lable control-label'>Room Type</label>\n            <input type=\"text\" class=\"form-control\" name=\"rmType\" formControlName=\"rmType\" maxlength=\"32\" appTrimInput>\n          </div>\n        </td>\n      </tr>\n      <!-- <tr *ngIf=\"(rmTypeFormPanel.controls['rmType']?.errors && rmTypeFormPanel.controls['rmType'].dirty)\">      \n            <td style=\"width:calc(100% / 2)\">\n              <label *ngIf=\"rmTypeFormPanel.controls['rmType']?.errors &&  !rmTypeFormPanel.controls['rmType']?.errors.required\" class='form-field-lable' style=\"color:red;\">Room Type already exists</label>\n            </td>\n            \n            <td style=\"width:calc(100% / 2)\">\n            </td>\n          </tr> -->\n      <tr>\n        <td style=\"width: 100%\">\n          <div class=\"input-label-custom \">\n            <label class='form-field-lable'>Description</label>\n            <textarea class=\"form-control note-border\" name=\"rmTypeDesc\" formControlName=\"rmTypeDesc\" rows=\"2\" nz-input\n              maxlength=\"64\" appTrimInput></textarea>\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width: 100%\">\n          <div class=\"input-label-custom\">\n            <label class='form-field-lable control-label'>Highlight Color </label>\n            <input type=\"color\" class=\"form-control\" name=\"highlightColor\" style=\"width: 100px;padding: 0.375rem;\"\n              formControlName=\"highlightColor\" maxlength=\"32\">\n          </div>\n        </td>\n      </tr>\n    </table>\n  </form>\n</p-panel>\n<p-toast key=\"save\" position=\"top-right\"></p-toast>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}