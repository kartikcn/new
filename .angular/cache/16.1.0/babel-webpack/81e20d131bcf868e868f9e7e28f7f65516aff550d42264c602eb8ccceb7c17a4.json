{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators } from '@angular/forms';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/enum.service\";\nimport * as i3 from \"../../services/connector.services\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"../../../../../directive/numbers-only.directive\";\nexport class AddConnectorComponent {\n  constructor(formBuilder, enumsrv, connectorService) {\n    this.formBuilder = formBuilder;\n    this.enumsrv = enumsrv;\n    this.connectorService = connectorService;\n    this.subscriptions = [];\n    this.enumList = [];\n    this.enumClonedList = [];\n    this.enumType = [];\n    this.enumFormat = [];\n    this.enumSeperator = [];\n    this.tablesList = [];\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    this.connectorFormPanel = this.formBuilder.group({\n      connectorId: [null],\n      connectorName: [null, [Validators.required]],\n      tableName: [null, [Validators.required]],\n      connectorType: [null, [Validators.required]],\n      fileFormat: [null, [Validators.required]],\n      seperator: [null, [Validators.required]],\n      rowsToSkip: [null, [Validators.required]],\n      connectionPath: [''],\n      preProcess: [null],\n      postProcess: []\n    });\n    this.subscriptions.push(this.connectorFormPanel.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {\n    this.loadEnums();\n    this.loadTables();\n  }\n  loadEnums() {\n    this.enumList = [];\n    this.enumsrv.getEnums().subscribe(res => {\n      this.enumList = res;\n      this.enumClonedList = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'conncetor'.toLocaleUpperCase());\n      this.enumType = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'connector_type'.toLocaleUpperCase());\n      this.enumType.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      this.enumFormat = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'file_format'.toLocaleUpperCase());\n      this.enumFormat.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      this.enumSeperator = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'seperator'.toLocaleUpperCase());\n      this.enumSeperator.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n    }, error => {});\n  }\n  loadTables() {\n    this.connectorService.getAllTabes().subscribe(res => {\n      this.tablesList = res;\n    });\n  }\n  getValidationErrors() {\n    const me = this;\n    const validationErros = [];\n    return validationErros;\n  }\n  get value() {\n    const eqDetails = {\n      connectorId: this.connectorFormPanel.controls.connectorId.value,\n      connectorName: this.connectorFormPanel.controls.connectorName.value,\n      tableName: this.connectorFormPanel.controls.tableName.value,\n      connectorType: this.connectorFormPanel.controls.connectorType.value,\n      fileFormat: this.connectorFormPanel.controls.fileFormat.value,\n      seperator: this.connectorFormPanel.controls.seperator.value,\n      rowsToSkip: this.connectorFormPanel.controls.rowsToSkip.value,\n      connectionPath: this.connectorFormPanel.controls.connectionPath.value,\n      preProcess: this.connectorFormPanel.controls.preProcess.value,\n      postProcess: this.connectorFormPanel.controls.postProcess.value\n    };\n    return eqDetails;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.connectorFormPanel.patchValue({\n        connectorId: value.connectorId,\n        connectorName: value.connectorName,\n        tableName: value.tableName,\n        connectorType: value.connectorType,\n        fileFormat: value.fileFormat,\n        seperator: value.seperator,\n        rowsToSkip: value.rowsToSkip,\n        connectionPath: value.connectionPath,\n        preProcess: value.preProcess,\n        postProcess: value.postProcess\n      });\n    });\n    this.onChangeFormat(value.fileFormat);\n    this.onChange(value);\n    this.onTouched();\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.connectorFormPanel.reset();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  validate(_) {\n    return this.connectorFormPanel.valid ? null : {\n      connectorFormPanel: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  onChangeFormat(enumValue) {\n    if (enumValue == \"Excel\") {\n      this.connectorFormPanel.controls.seperator.setValue(\"None\");\n      this.connectorFormPanel.controls.seperator.disable();\n    } else {\n      this.connectorFormPanel.controls.seperator.enable();\n    }\n  }\n  static #_ = this.ɵfac = function AddConnectorComponent_Factory(t) {\n    return new (t || AddConnectorComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EnumService), i0.ɵɵdirectiveInject(i3.ConnectorService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddConnectorComponent,\n    selectors: [[\"app-add-connector\"]],\n    inputs: {\n      isNew: \"isNew\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddConnectorComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddConnectorComponent),\n      multi: true\n    }])],\n    decls: 53,\n    vars: 13,\n    consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"25%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"type\", \"text\", \"name\", \"connectorName\", \"formControlName\", \"connectorName\", \"maxlength\", \"128\", 1, \"form-control\"], [2, \"width\", \"50%\"], [\"appendTo\", \"body\", \"formControlName\", \"tableName\", \"bindLabel\", \"tableName\", \"bindValue\", \"tableName\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"connectorType\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"appendTo\", \"body\", \"formControlName\", \"fileFormat\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\", \"change\"], [\"appendTo\", \"body\", \"formControlName\", \"seperator\", \"bindLabel\", \"enumValue\", \"bindValue\", \"enumKey\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"rowsToSkip\", \"formControlName\", \"rowsToSkip\", \"maxlength\", \"64\", 1, \"form-control\"], [\"colspan\", \"2\"], [\"type\", \"text\", \"name\", \"connectionPath\", \"formControlName\", \"connectionPath\", \"maxlength\", \"1024\", 1, \"form-control\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"name\", \"preProcess\", \"formControlName\", \"preProcess\", \"maxlength\", \"512\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"postProcess\", \"formControlName\", \"postProcess\", \"maxlength\", \"512\", 1, \"form-control\"]],\n    template: function AddConnectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Connector Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"td\", 6)(9, \"div\", 3)(10, \"label\", 4);\n        i0.ɵɵtext(11, \"Table Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"ng-select\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 6)(15, \"div\", 3)(16, \"label\", 4);\n        i0.ɵɵtext(17, \"Connector Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"ng-select\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"td\", 6)(20, \"div\", 3)(21, \"label\", 4);\n        i0.ɵɵtext(22, \"File Format\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"ng-select\", 9);\n        i0.ɵɵlistener(\"change\", function AddConnectorComponent_Template_ng_select_change_23_listener($event) {\n          return ctx.onChangeFormat($event.enumValue);\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(24, \"tr\")(25, \"td\", 6)(26, \"div\", 3)(27, \"label\", 4);\n        i0.ɵɵtext(28, \"Seperator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"ng-select\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"td\", 2)(31, \"div\", 3)(32, \"label\", 4);\n        i0.ɵɵtext(33, \"Rows to Skip\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"input\", 11);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"tr\")(36, \"td\", 12)(37, \"div\", 3)(38, \"label\", 4);\n        i0.ɵɵtext(39, \"Connection Path\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(40, \"input\", 13);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(41, \"tr\")(42, \"td\", 12)(43, \"div\", 3)(44, \"label\", 14);\n        i0.ɵɵtext(45, \"Pre process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(46, \"input\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(47, \"tr\")(48, \"td\", 12)(49, \"div\", 3)(50, \"label\", 14);\n        i0.ɵɵtext(51, \"Post process\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(52, \"input\", 16);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.connectorFormPanel);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.tablesList)(\"searchable\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumType)(\"searchable\", true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumFormat)(\"searchable\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.enumSeperator)(\"searchable\", true);\n      }\n    },\n    dependencies: [i4.NgSelectComponent, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i5.NumbersOnlyDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALUE_ACCESSOR","NG_VALIDATORS","Validators","EnumList","AddConnectorComponent","constructor","formBuilder","enumsrv","connectorService","subscriptions","enumList","enumClonedList","enumType","enumFormat","enumSeperator","tablesList","onChange","onTouched","connectorFormPanel","group","connectorId","connectorName","required","tableName","connectorType","fileFormat","seperator","rowsToSkip","connectionPath","preProcess","postProcess","push","valueChanges","subscribe","value","ngOnInit","loadEnums","loadTables","getEnums","res","filter","t","toLocaleUpperCase","fieldName","unshift","error","getAllTabes","getValidationErrors","me","validationErros","eqDetails","controls","setTimeout","patchValue","onChangeFormat","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","forEach","s","unsubscribe","enumValue","setValue","disable","enable","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","EnumService","i3","ConnectorService","_2","selectors","inputs","isNew","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","AddConnectorComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","AddConnectorComponent_Template_ng_select_change_23_listener","$event","ɵɵproperty","ɵɵadvance"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\connectors\\connector\\widgets\\add-connector\\add-connector.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\connectors\\connector\\widgets\\add-connector\\add-connector.component.html"],"sourcesContent":["import { Component, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport { EnumService } from 'src/app/services/enum.service';\nimport { ConnectorService } from '../../services/connector.services';\n\n@Component({\n  selector: 'app-add-connector',\n  templateUrl: './add-connector.component.html',\n  styleUrls: ['./add-connector.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AddConnectorComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AddConnectorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AddConnectorComponent {\n\n  connectorFormPanel: FormGroup;\n  subscriptions: Subscription[] = [];\n  enumList: EnumList[] = [];\n  enumClonedList: EnumList[] = [];\n  enumType: EnumList[] = [];\n  enumFormat: EnumList[] = [];\n  enumSeperator: EnumList[] = []\n  tablesList: any[] = [];\n\n  @Input() isNew!: boolean;\n  constructor(\n    private formBuilder: FormBuilder,\n    private enumsrv: EnumService,\n    private connectorService: ConnectorService\n  ) {\n    this.connectorFormPanel = this.formBuilder.group({\n      connectorId: [null],\n      connectorName: [null, [Validators.required]],\n      tableName: [null, [Validators.required]],\n      connectorType: [null, [Validators.required]],\n      fileFormat: [null, [Validators.required]],\n      seperator: [null, [Validators.required]],\n      rowsToSkip: [null, [Validators.required]],\n      connectionPath: [''],\n      preProcess: [null],\n      postProcess: []\n    });\n    this.subscriptions.push(\n      this.connectorFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n\n  ngOnInit(): void {\n    this.loadEnums();\n    this.loadTables();\n  }\n\n  loadEnums() {\n    this.enumList = [];\n    this.enumsrv.getEnums().subscribe(\n      (res: any[]) => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'conncetor'.toLocaleUpperCase());\n        this.enumType = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'connector_type'.toLocaleUpperCase());\n        this.enumType.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumFormat = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'file_format'.toLocaleUpperCase());\n        this.enumFormat.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumSeperator = this.enumClonedList.filter(t => t.fieldName.toLocaleUpperCase() === 'seperator'.toLocaleUpperCase());\n        this.enumSeperator.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n      },\n      error => {\n      });\n  }\n\n  loadTables() {\n    this.connectorService.getAllTabes().subscribe((res: any) => {\n      this.tablesList = res;\n    })\n  }\n\n  public getValidationErrors() {\n    const me = this;\n    const validationErros: VaildationError[] = [];\n    return validationErros;\n  }\n\n  get value(): any {\n    const eqDetails: any = {\n      connectorId: this.connectorFormPanel.controls.connectorId.value,\n      connectorName: this.connectorFormPanel.controls.connectorName.value,\n      tableName: this.connectorFormPanel.controls.tableName.value,\n      connectorType: this.connectorFormPanel.controls.connectorType.value,\n      fileFormat: this.connectorFormPanel.controls.fileFormat.value,\n      seperator: this.connectorFormPanel.controls.seperator.value,\n      rowsToSkip: this.connectorFormPanel.controls.rowsToSkip.value,\n      connectionPath: this.connectorFormPanel.controls.connectionPath.value,\n      preProcess: this.connectorFormPanel.controls.preProcess.value,\n      postProcess: this.connectorFormPanel.controls.postProcess.value,\n    };\n    return eqDetails;\n  }\n\n  set value(value: any) {\n    setTimeout(() => {\n      this.connectorFormPanel.patchValue({\n        connectorId: value.connectorId,\n        connectorName: value.connectorName,\n        tableName: value.tableName,\n        connectorType: value.connectorType,\n        fileFormat: value.fileFormat,\n        seperator: value.seperator,\n        rowsToSkip: value.rowsToSkip,\n        connectionPath: value.connectionPath,\n        preProcess: value.preProcess,\n        postProcess: value.postProcess\n      });\n    });\n    this.onChangeFormat(value.fileFormat);\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  writeValue(value: any) {\n\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.connectorFormPanel.reset();\n    }\n  }\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  validate(_: FormControl) {\n    return this.connectorFormPanel.valid ? null : { connectorFormPanel: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  onChangeFormat(enumValue: any) {\n    if (enumValue == \"Excel\") {\n      this.connectorFormPanel.controls.seperator.setValue(\"None\");\n      this.connectorFormPanel.controls.seperator.disable();\n    } else {\n      this.connectorFormPanel.controls.seperator.enable()\n    }\n  }\n\n}\n","<form [formGroup]=\"connectorFormPanel\">\n  <table width=\"100%\">\n    <tr>\n      <td style=\"width: 25%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Connector Name</label>\n          <input type=\"text\" class=\"form-control\" name=\"connectorName\" formControlName=\"connectorName\" maxlength=\"128\">\n        </div>\n      </td>\n      <td style=\"width: 50%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Table Name</label>\n          <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"tablesList\" formControlName=\"tableName\"\n            [searchable]=\"true\" bindLabel=\"tableName\" bindValue=\"tableName\" placeholder=\"Make a selection\"\n            class=\"ng-select-dropdown\">\n          </ng-select>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"width: 50%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Connector Type</label>\n          <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"enumType\" formControlName=\"connectorType\"\n            [searchable]=\"true\" bindLabel=\"enumValue\" bindValue=\"enumKey\" placeholder=\"Make a selection\"\n            class=\"ng-select-dropdown\">\n          </ng-select>\n        </div>\n      </td>\n\n      <td style=\"width: 50%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>File Format</label>\n          <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"enumFormat\" formControlName=\"fileFormat\"\n            [searchable]=\"true\" bindLabel=\"enumValue\" bindValue=\"enumKey\" placeholder=\"Make a selection\"\n            class=\"ng-select-dropdown\" (change)=\"onChangeFormat($event.enumValue)\">\n          </ng-select>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"width: 50%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Seperator</label>\n          <ng-select appendTo=\"body\" [clearable]=\"false\" [items]=\"enumSeperator\" formControlName=\"seperator\"\n            [searchable]=\"true\" bindLabel=\"enumValue\" bindValue=\"enumKey\" placeholder=\"Make a selection\"\n            class=\"ng-select-dropdown\">\n          </ng-select>\n        </div>\n      </td>\n      <td style=\"width: 25%\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Rows to Skip</label>\n          <input type=\"text\" class=\"form-control\" NumbersOnly name=\"rowsToSkip\" formControlName=\"rowsToSkip\"\n            maxlength=\"64\">\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable control-label'>Connection Path</label>\n          <input type=\"text\" class=\"form-control\" name=\"connectionPath\" formControlName=\"connectionPath\"\n            maxlength=\"1024\">\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable'>Pre process</label>\n          <input type=\"text\" class=\"form-control\" name=\"preProcess\" formControlName=\"preProcess\" maxlength=\"512\">\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <div class=\"input-label-custom \">\n          <label class='form-field-lable'>Post process</label>\n          <input type=\"text\" class=\"form-control\" name=\"postProcess\" formControlName=\"postProcess\" maxlength=\"512\">\n        </div>\n      </td>\n    </tr>\n  </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}