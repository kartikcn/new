{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Manav Gupta/Downloads/fms/fms/frontend/fms_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as d3 from 'd3';\nimport { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { concatMap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-spinner\";\nimport * as i2 from \"../background-loc/services/bl.service\";\nimport * as i3 from \"./services/svg-view.service\";\nimport * as i4 from \"@angular/common\";\nfunction SvgViewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n}\nfunction SvgViewComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h1\");\n    i0.ɵɵtext(2, \"No Floorplan available\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction SvgViewComponent_ngx_spinner_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-spinner\", 5)(1, \"p\", 6);\n    i0.ɵɵtext(2, \" Loading... \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"fullScreen\", true);\n  }\n}\nexport class SvgViewComponent {\n  constructor(spinner, blServ, svgViewSrv, cdr) {\n    this.spinner = spinner;\n    this.blServ = blServ;\n    this.svgViewSrv = svgViewSrv;\n    this.cdr = cdr;\n    this.reader = new FileReader();\n    this.focusOnElement = false;\n    this.onRoomClick = new EventEmitter();\n    this.allSVGRoomsData = [];\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.noSVGFound = false;\n    this.elementToBeZoomed = null;\n    this.focusedTransform = null;\n    this.showSpinner = true;\n  }\n  ngOnChanges(changes) {\n    if (!changes.svgInputData.firstChange) {\n      this.getSVGRoomData();\n    }\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.object = document.getElementById(\"svg-container\");\n      this.getSVGRoomData();\n    }, 0);\n  }\n  setSvgContainerObject() {\n    this.object = document.getElementById(\"svg-container\");\n  }\n  getSVGRoomData() {\n    var _this = this;\n    this.showSpinner = true;\n    this.spinner.show();\n    this.focusOnElement = this.svgInputData.focusOnElement;\n    let observableToUpdateSVGRoomData;\n    if (this.svgInputData.highlightSingleRoom) {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoom(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId);\n    } else if (this.svgInputData.highlightSingleRoomWithEmployee) {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithEmployee(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId, this.svgInputData.labelString);\n    } else if (this.svgInputData.highlightSingleRoomWithAsset) {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithAsset(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId, this.svgInputData.assetDetails);\n    } else if (this.svgInputData.highlightMultipleRooms && (this.svgInputData.highlightMultipleRoomsType == \"division\" || this.svgInputData.highlightMultipleRoomsType == \"department\" || this.svgInputData.highlightMultipleRoomsType == \"subDepartment\" || this.svgInputData.highlightMultipleRoomsType == \"rmcat\" || this.svgInputData.highlightMultipleRoomsType == \"rmtype\" || this.svgInputData.highlightMultipleRoomsType == \"commonArea\")) {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsWithParameter(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.highlightMultipleRoomsTypeId, this.svgInputData.highlightColorForMultiple, this.svgInputData.highlightMultipleRoomsType);\n    } else if (this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"rmcat-rmtype\") {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsRmCatRmType(this.svgInputData.blId, this.svgInputData.flId);\n    } else if (this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"booking\") {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForMultipleRoomsBooking(this.svgInputData.bookingSvgElementsData);\n    } else {\n      observableToUpdateSVGRoomData = of(null);\n    }\n    observableToUpdateSVGRoomData.pipe(concatMap( /*#__PURE__*/_asyncToGenerator(function* () {\n      return _this.getSvgFile();\n    }))).subscribe(() => {}, error => {\n      console.error('Error:', error);\n    });\n  }\n  updateSVGRoomDataForSingleRoom(blId, flId, rmId) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n      let idObj = {\n        roomElementId: res.rm.svgElementId,\n        assetElementId: null\n      };\n      let colorObj = {\n        roomColor: \"#ff0000\",\n        assetColor: null\n      };\n      let contentData = {\n        blId: blId,\n        flId: flId,\n        rmId: res.rm.rmId,\n        label: [res.rm.rmCode],\n        showLabel: true,\n        highlightRoom: true,\n        svgElementId: idObj,\n        color: colorObj,\n        rmCode: res.rm.rmCode,\n        zoomAtRoom: true\n      };\n      this.svgRoomData.content.push(contentData);\n      return of(null);\n    }));\n  }\n  updateSVGRoomDataForSingleRoomWithEmployee(blId, flId, rmId, empLabel) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n      let idObj = {\n        roomElementId: res.rm.svgElementId,\n        assetElementId: null\n      };\n      let colorObj = {\n        roomColor: \"#ff0000\",\n        assetColor: null\n      };\n      let contentData = {\n        blId: blId,\n        flId: flId,\n        rmId: res.rm.rmId,\n        label: [`${res.rm.bl.blCode}-${res.rm.fl.flCode}-${res.rm.rmCode}`, empLabel],\n        showLabel: true,\n        highlightRoom: true,\n        svgElementId: idObj,\n        color: colorObj,\n        rmCode: res.rm.rmCode,\n        zoomAtRoom: true\n      };\n      this.svgRoomData.content.push(contentData);\n      return of(null);\n    }));\n  }\n  updateSVGRoomDataForSingleRoomWithAsset(blId, flId, rmId, eq) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"asset\";\n    return this.blServ.getRmById(rmId).pipe(concatMap(res => {\n      let idObj = {\n        roomElementId: res.rm.svgElementId,\n        assetElementId: eq.svgElementId\n      };\n      let colorObj = {\n        roomColor: \"#9999ff\",\n        assetColor: \"#ff0000\"\n      };\n      let contentData = {\n        blId: eq.blId,\n        flId: eq.flId,\n        rmId: eq.rmId,\n        label: [eq.eqCode, eq.rmCode],\n        showLabel: true,\n        highlightRoom: true,\n        svgElementId: idObj,\n        color: colorObj,\n        rmCode: '',\n        zoomAtRoom: true\n      };\n      this.svgRoomData.content.push(contentData);\n      return of(null);\n    }));\n  }\n  updateSVGRoomDataForMultipleRoomsWithParameter(blId, flId, parameterId, color, param) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    let idname = this.getParameterNameForMutipleRoomHighlight(param);\n    let data = {\n      blId: blId,\n      flId: flId,\n      [idname]: parameterId\n    };\n    return this.blServ.getRmList(data).pipe(concatMap(res => {\n      let resultData = res.filter(each => each.svgElementId != null);\n      resultData.forEach(element => {\n        let idObj = {\n          roomElementId: element.svgElementId,\n          assetElementId: null\n        };\n        let colorObj = {\n          roomColor: color,\n          assetColor: null\n        };\n        let contentData = {\n          blId: blId,\n          flId: flId,\n          rmId: element.rmId,\n          label: [element.rmCode],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: element.rmCode,\n          zoomAtRoom: false\n        };\n        this.svgRoomData.content.push(contentData);\n      });\n      return of(null);\n    }));\n  }\n  updateSVGRoomDataForMultipleRoomsRmCatRmType(blId, flId) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    let data = {\n      blId: blId,\n      flId: flId\n    };\n    return this.blServ.getrmwithcatortypecolor(data).pipe(concatMap(res => {\n      let resultData = res.filter(each => each.svgElementId != null);\n      this.allSVGRoomsData = [...resultData];\n      resultData.forEach(rm => {\n        let labeldata = [];\n        if (rm.rmType != null && rm.rmType != '') {\n          labeldata.push(rm.rmType);\n        }\n        if (rm.rmCat != null && rm.rmCat != '') {\n          labeldata.push(rm.rmCat);\n        }\n        labeldata.push(rm.rmCode);\n        let idObj = {\n          roomElementId: rm.svgElementId,\n          assetElementId: null\n        };\n        let colorObj = {\n          roomColor: rm.highlightColor,\n          assetColor: null\n        };\n        let contentData = {\n          blId: parseInt(blId),\n          flId: parseInt(flId),\n          rmId: rm.rmId,\n          label: [...labeldata],\n          showLabel: true,\n          highlightRoom: rm.highlightColor != null ? true : false,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: rm.rmCode,\n          zoomAtRoom: false\n        };\n        this.svgRoomData.content.push(contentData);\n      });\n      return of(null);\n    }));\n  }\n  updateSVGRoomDataForMultipleRoomsBooking(SvgElementsData) {\n    if (SvgElementsData != null) {\n      this.svgRoomData = {\n        ...SvgElementsData\n      };\n    }\n    return of(null);\n  }\n  getParameterNameForMutipleRoomHighlight(param) {\n    let result = \"\";\n    if (param == \"division\") {\n      result = \"divId\";\n    } else if (param == \"department\") {\n      result = \"depId\";\n    } else if (param == \"subDepartment\") {\n      result = \"subDepId\";\n    } else if (param == \"rmcat\") {\n      result = \"rmcatId\";\n    } else if (param == \"rmtype\") {\n      result = \"rmtypeId\";\n    } else if (param == \"commonArea\") {\n      result = \"commonAreaType\";\n    }\n    return result;\n  }\n  getSvgFile() {\n    if (this.svgRoomData.content[0] == undefined) {\n      this.spinner.hide();\n      this.showSpinner = false;\n      this.noSVGFound = true;\n      this.cdr.detectChanges();\n    } else {\n      let data = {\n        blId: this.svgInputData.blId,\n        flId: this.svgInputData.flId\n      };\n      if (this.svgRoomData.content[0].svgElementId !== null) {\n        this.svgViewSrv.getSVGFile(data).subscribe(res => {\n          if (res.code != 409) {\n            this.fileString = res.fileContent;\n            this.noSVGFound = false;\n            this.cdr.detectChanges();\n            this.setSvgContainerObject();\n            this.loadSvgFile();\n          } else {\n            this.spinner.hide();\n            this.showSpinner = false;\n            this.noSVGFound = true;\n            this.cdr.detectChanges();\n          }\n        });\n      } else {\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.noSVGFound = true;\n        this.cdr.detectChanges();\n      }\n    }\n  }\n  loadSvgFile() {\n    this.object.innerHTML = \"\";\n    let abc = d3.select('#svg-container');\n    if (this.fileString != '') {\n      this.object.innerHTML = this.fileString;\n    }\n    this.cdr.detectChanges();\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    mySvg.select(\"title\").remove();\n    mySvg.select(\"desc\").remove();\n    this.loadByDetails();\n    let zoomed = event => {\n      let transform = event.transform;\n      if (this.focusedTransform != null) {\n        //viewer.attr('transform', `translate(${-1*(this.focusedTransform.x-transform.x)},${-1*(this.focusedTransform.y-transform.y)}) scale(${transform.k},-${transform.k})`);\n        viewer.attr('transform', `translate(${this.focusedTransform.x + transform.x},${this.focusedTransform.y + transform.y}) scale(${transform.k},-${transform.k})`);\n      } else {\n        viewer.attr('transform', `translate(${transform.x},${transform.y}) scale(${transform.k},-${transform.k})`);\n      }\n    };\n    let zoom = d3.zoom().on(\"zoom\", zoomed).scaleExtent([0.5, 20]);\n    // @ts-ignore\n    mySvg.call(zoom);\n    mySvg.attr(\"width\", \"100%\").attr(\"height\", \"auto\");\n    this.roomOnClickListener();\n    this.focusToSelection();\n    this.spinner.hide();\n    this.showSpinner = false;\n  }\n  roomOnClickListener() {\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let room_layer = mySvg.select('#ROOM');\n    let elementIdName = \"\";\n    let data = {\n      elementIdName: \"\",\n      svgRoomData: {\n        ...this.svgRoomData\n      },\n      allSVGRoomsData: [...this.allSVGRoomsData]\n    };\n    room_layer.selectAll('path').on('click', event => {\n      elementIdName = event.target.id;\n      data.elementIdName = elementIdName;\n      this.onRoomClick.emit(data);\n    });\n    room_layer.select('#text_g').selectAll('foreignObject').selectAll('.label-container').on('click', event => {\n      elementIdName = event.currentTarget.id;\n      data.elementIdName = elementIdName;\n      this.onRoomClick.emit(data);\n    });\n  }\n  loadByDetails() {\n    let blId = this.svgRoomData.blId;\n    let flId = this.svgRoomData.flId;\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    let externalFunctions = this;\n    if (!viewer.select(\"#text_g\").node()) {\n      viewer.append(\"g\").attr(\"id\", \"text_g\");\n    }\n    let textElement = d3.select(\"#text_g\");\n    textElement.html(\"\");\n    if (this.svgRoomData.locate == 'room') {\n      viewer.select('#ROOM').selectAll('path').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n      this.svgRoomData.content.forEach(room => {\n        if (room.svgElementId.roomElementId != null) {\n          let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n          externalFunctions.highlightandlabelobject(room, rm, textElement, room.color.roomColor);\n          if (room.zoomAtRoom) {\n            this.elementToBeZoomed = rm;\n          }\n        }\n      });\n    } else if (this.svgRoomData.locate == 'asset') {\n      viewer.select('#ASSET').raise();\n      viewer.select('#ASSET').selectAll('path,use').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n      this.svgRoomData.content.forEach(asset => {\n        if (asset.svgElementId.roomElementId != null) {\n          let rm = viewer.select(\"#ROOM\").select(\"#\" + asset.svgElementId.roomElementId);\n          externalFunctions.highlightandlabelobject(asset, rm, textElement, asset.color.roomColor);\n          if (asset.zoomAtRoom) {\n            this.elementToBeZoomed = rm;\n          }\n        }\n        if (asset.svgElementId.assetElementId != null) {\n          let eq = viewer.select(\"#ASSET\").select(\"#\" + asset.svgElementId.assetElementId);\n          externalFunctions.highlightandlabelobject(asset, eq, textElement, asset.color.assetColor);\n        }\n      });\n    }\n  }\n  getMediumFontSize() {\n    let abc = d3.select('#svg-container');\n    let viewer = abc.select(\"#viewer\");\n    let count = 0;\n    let width = 0;\n    let height = 0;\n    this.svgRoomData.content.forEach(room => {\n      let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n      if (rm.node() != null) {\n        //@ts-ignore\n        let dDetails = rm.node().getBBox();\n        width += dDetails.width;\n        height += dDetails.height;\n        count++;\n      }\n    });\n    width = width / count;\n    height = height / count;\n    return (width + height) / 2;\n  }\n  highlightandlabelobject(loopobj, svgobj, textElement, color) {\n    let externalFunctions = this;\n    let id = svgobj.attr(\"id\");\n    if (loopobj.highlightRoom) {\n      svgobj.style('fill-opacity', '1');\n      svgobj.style('opacity', '1');\n      if (color) {\n        svgobj.style('fill', color);\n        svgobj.style('stroke', color);\n      }\n    }\n    if (loopobj.showLabel && id.startsWith(\"room\")) {\n      if (svgobj.node() != null) {\n        //@ts-ignore\n        let dDetails = svgobj.node().getBBox();\n        const labelcount = loopobj.label.length;\n        let sizeel = externalFunctions.getMediumFontSize();\n        let textForeignObject = textElement.append(\"foreignObject\");\n        textForeignObject.style(\"height\", dDetails.height / 2).style(\"width\", dDetails.width / 2).style(\"overflow\", \"visible\");\n        textForeignObject.attr(\"x\", dDetails.x + 0.3 * dDetails.width).attr(\"y\", dDetails.y + 0.4 * dDetails.height);\n        for (let i = 0; i < labelcount; i++) {\n          //@ts-ignore\n          let labelContainerDiv = textForeignObject.append('xhtml:div').attr(\"class\", \"label-container\").attr(\"id\", \"label_\" + svgobj.node().id);\n          let childTextElement1 = labelContainerDiv.append('xhtml:div');\n          childTextElement1.attr(\"style\", `height:${sizeel / 10}px;white-space: nowrap;\n          overflow: hidden;text-overflow: ellipsis;width:${dDetails.width / 2}px;\n          font-size:${sizeel / 12}px;transform:scale(1,-1);display:grid;align-items:center;`);\n          childTextElement1.text(loopobj.label[i]);\n          let childTextElement2 = labelContainerDiv.append('xhtml:div');\n          childTextElement2.attr(\"class\", \"tooltip-status\").attr(\"style\", `height:${sizeel / 10}px;font-size:${sizeel / 12}px;`);\n          childTextElement2.text(loopobj.label[i]);\n        }\n      }\n    }\n  }\n  focusToSelection() {\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    if (this.focusOnElement && this.elementToBeZoomed != null) {\n      let bbox = this.elementToBeZoomed.node().getBBox();\n      //@ts-ignore\n      let mySvgBbox = mySvg.node().getBBox();\n      let centerX = bbox.x + bbox.width / 2;\n      let centerY = bbox.y + bbox.height / 2;\n      let centroidX = mySvgBbox.x + mySvgBbox.width / 2;\n      let centroidY = -mySvgBbox.y + mySvgBbox.height / 2;\n      let centroidXDifference = centroidX - mySvgBbox.x;\n      let centroidYDifference = centroidY + mySvgBbox.y;\n      let centreXDifference = centerX - mySvgBbox.x;\n      let centreYDifference = centerY + mySvgBbox.y;\n      viewer.attr('transform', `translate(${centroidXDifference - centreXDifference},${-1 * (centroidYDifference - centreYDifference)}) scale(1,-1)`);\n      this.focusedTransform = {\n        x: centroidXDifference - centreXDifference,\n        y: -1 * (centroidYDifference - centreYDifference),\n        k: 1\n      };\n    }\n  }\n  static #_ = this.ɵfac = function SvgViewComponent_Factory(t) {\n    return new (t || SvgViewComponent)(i0.ɵɵdirectiveInject(i1.NgxSpinnerService), i0.ɵɵdirectiveInject(i2.BuildingService), i0.ɵɵdirectiveInject(i3.SvgViewService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SvgViewComponent,\n    selectors: [[\"app-svg-view\"]],\n    inputs: {\n      svgInputData: \"svgInputData\"\n    },\n    outputs: {\n      onRoomClick: \"onRoomClick\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[\"id\", \"svg-container\", 4, \"ngIf\"], [\"class\", \"card no-file-found\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"class\", \"spinner-color\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\", 4, \"ngIf\"], [\"id\", \"svg-container\"], [1, \"card\", \"no-file-found\"], [\"bdColor\", \"rgba(0, 0, 0, 0.8)\", \"size\", \"medium\", \"color\", \"#879cc9\", \"type\", \"ball-spin-clockwise\", 1, \"spinner-color\", 3, \"fullScreen\"], [2, \"color\", \"white\"]],\n    template: function SvgViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SvgViewComponent_div_0_Template, 1, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, SvgViewComponent_div_1_Template, 3, 0, \"div\", 1);\n        i0.ɵɵtemplate(2, SvgViewComponent_ngx_spinner_2_Template, 3, 1, \"ngx-spinner\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.noSVGFound);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.noSVGFound);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      }\n    },\n    dependencies: [i4.NgIf, i1.NgxSpinnerComponent],\n    styles: [\"#svg-container[_ngcontent-%COMP%] {\\n  border: 2px solid #879cc9;\\n  margin-top: 5px;\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden;\\n}\\n\\n.ellipsis[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n}\\n\\n.hover-container[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n\\n.tooltip-status[_ngcontent-%COMP%] {\\n  width: max-content;\\n  display: none;\\n  position: absolute;\\n  top: 100%;\\n  left: 50%;\\n  transform: translateX(-50%);\\n  background-color: #333;\\n  color: #fff;\\n  font-size: x-small;\\n  text-align: center;\\n  padding: 5px;\\n  border-radius: 3px;\\n  opacity: 0;\\n  transition: opacity 0.2s ease-in-out;\\n}\\n\\n.hover-container[_ngcontent-%COMP%]:hover   .tooltip-status[_ngcontent-%COMP%] {\\n  opacity: 1;\\n  display: block;\\n}\\n\\n.no-file-found[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 600px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdWkvc3ZnLXZpZXcvc3ZnLXZpZXcuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8uLi8uLi8uLi9NYW5hdiUyMEd1cHRhL0Rvd25sb2Fkcy9mbXMvZm1zL2Zyb250ZW5kL2Ztc19mcm9udGVuZC9zcmMvYXBwL3VpL3N2Zy12aWV3L3N2Zy12aWV3LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0kseUJBQUE7RUFDQSxlQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtBQ0NKOztBREVBO0VBQ0ksbUJBQUE7RUFDQSxnQkFBQTtFQUNBLHVCQUFBO0FDQ0o7O0FERUU7RUFDRSxrQkFBQTtBQ0NKOztBREVFO0VBQ0Usa0JBQUE7RUFDRCxhQUFBO0VBQ0Msa0JBQUE7RUFDQSxTQUFBO0VBQ0EsU0FBQTtFQUNBLDJCQUFBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxvQ0FBQTtBQ0NKOztBREVFO0VBQ0UsVUFBQTtFQUNELGNBQUE7QUNDSDs7QURFRTtFQUNFLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtBQ0NKIiwic291cmNlc0NvbnRlbnQiOlsiI3N2Zy1jb250YWluZXJ7XG4gICAgYm9yZGVyOiAycHggc29saWQgIzg3OWNjOTtcbiAgICBtYXJnaW4tdG9wOjVweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6MTAwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uZWxsaXBzaXN7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgXG4gIH1cblxuICAuaG92ZXItY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgXG4gIC50b29sdGlwLXN0YXR1cyB7XG4gICAgd2lkdGg6bWF4LWNvbnRlbnQ7XG4gICBkaXNwbGF5OiBub25lO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDEwMCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGZvbnQtc2l6ZTp4LXNtYWxsO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0O1xuICB9XG4gIFxuICAuaG92ZXItY29udGFpbmVyOmhvdmVyIC50b29sdGlwLXN0YXR1cyB7XG4gICAgb3BhY2l0eTogMTtcbiAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbiAgLm5vLWZpbGUtZm91bmR7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogNjAwcHg7XG59IiwiI3N2Zy1jb250YWluZXIge1xuICBib3JkZXI6IDJweCBzb2xpZCAjODc5Y2M5O1xuICBtYXJnaW4tdG9wOiA1cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5lbGxpcHNpcyB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4uaG92ZXItY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udG9vbHRpcC1zdGF0dXMge1xuICB3aWR0aDogbWF4LWNvbnRlbnQ7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMDAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtc2l6ZTogeC1zbWFsbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwYWRkaW5nOiA1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0O1xufVxuXG4uaG92ZXItY29udGFpbmVyOmhvdmVyIC50b29sdGlwLXN0YXR1cyB7XG4gIG9wYWNpdHk6IDE7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4ubm8tZmlsZS1mb3VuZCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBoZWlnaHQ6IDYwMHB4O1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","d3","SvgRoomData","concatMap","of","i0","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","SvgViewComponent","constructor","spinner","blServ","svgViewSrv","cdr","reader","FileReader","focusOnElement","onRoomClick","allSVGRoomsData","svgRoomData","noSVGFound","elementToBeZoomed","focusedTransform","showSpinner","ngOnChanges","changes","svgInputData","firstChange","getSVGRoomData","ngOnInit","ngAfterViewInit","setTimeout","object","document","getElementById","setSvgContainerObject","_this","show","observableToUpdateSVGRoomData","highlightSingleRoom","updateSVGRoomDataForSingleRoom","blId","flId","rmId","highlightSingleRoomWithEmployee","updateSVGRoomDataForSingleRoomWithEmployee","labelString","highlightSingleRoomWithAsset","updateSVGRoomDataForSingleRoomWithAsset","assetDetails","highlightMultipleRooms","highlightMultipleRoomsType","updateSVGRoomDataForMultipleRoomsWithParameter","highlightMultipleRoomsTypeId","highlightColorForMultiple","updateSVGRoomDataForMultipleRoomsRmCatRmType","updateSVGRoomDataForMultipleRoomsBooking","bookingSvgElementsData","pipe","_asyncToGenerator","getSvgFile","subscribe","error","console","locate","getRmById","res","idObj","roomElementId","rm","svgElementId","assetElementId","colorObj","roomColor","assetColor","contentData","label","rmCode","showLabel","highlightRoom","color","zoomAtRoom","content","push","empLabel","bl","blCode","fl","flCode","eq","eqCode","parameterId","param","idname","getParameterNameForMutipleRoomHighlight","data","getRmList","resultData","filter","each","forEach","element","getrmwithcatortypecolor","labeldata","rmType","rmCat","highlightColor","parseInt","SvgElementsData","result","undefined","hide","detectChanges","getSVGFile","code","fileString","fileContent","loadSvgFile","innerHTML","abc","select","mySvg","viewer","remove","loadByDetails","zoomed","event","transform","attr","x","y","k","zoom","on","scaleExtent","call","roomOnClickListener","focusToSelection","room_layer","elementIdName","selectAll","target","id","emit","currentTarget","externalFunctions","node","append","textElement","html","style","room","highlightandlabelobject","raise","asset","getMediumFontSize","count","width","height","dDetails","getBBox","loopobj","svgobj","startsWith","labelcount","length","sizeel","textForeignObject","i","labelContainerDiv","childTextElement1","text","childTextElement2","bbox","mySvgBbox","centerX","centerY","centroidX","centroidY","centroidXDifference","centroidYDifference","centreXDifference","centreYDifference","_","ɵɵdirectiveInject","i1","NgxSpinnerService","i2","BuildingService","i3","SvgViewService","ChangeDetectorRef","_2","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","SvgViewComponent_Template","rf","ctx","ɵɵtemplate","SvgViewComponent_div_0_Template","SvgViewComponent_div_1_Template","SvgViewComponent_ngx_spinner_2_Template","ɵɵadvance"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\svg-view\\svg-view.component.ts","C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\svg-view\\svg-view.component.html"],"sourcesContent":["import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport * as d3 from 'd3';\nimport { SvgRoomDataInput } from 'src/app/model/svgroomdatainput.model';\nimport { BuildingService } from '../background-loc/services/bl.service';\nimport { SvgElementColorType } from 'src/app/model/svgelementcolortype.model';\nimport { SvgElementIdType } from 'src/app/model/svgelementidtype.model';\nimport { SvgRoomContentData } from 'src/app/model/svgroomcontentdata.model';\nimport { SvgRoomData } from 'src/app/model/svgroomdata.model';\nimport { SvgViewService } from './services/svg-view.service';\nimport { Observable, concatMap, of } from 'rxjs';\nimport { SvgElementOnClickData } from 'src/app/model/svgelementonclickdata.interface';\n\n@Component({\n  selector: 'app-svg-view',\n  templateUrl: './svg-view.component.html',\n  styleUrls: ['./svg-view.component.scss']\n})\nexport class SvgViewComponent implements OnInit ,OnChanges {\n  reader = new FileReader();\n  fileString!: string;\n  @Input() svgInputData!: SvgRoomDataInput;\n  focusOnElement: boolean = false;\n  @Output() onRoomClick = new EventEmitter();\n  allSVGRoomsData:any[]=[];\n  svgRoomData: SvgRoomData = new SvgRoomData(null, null, \"\", []);\n  noSVGFound: boolean = false;\n  object: any;\n  elementToBeZoomed: any | null = null;\n  focusedTransform: any | null = null;\n  showSpinner: boolean = true;\n  constructor(\n    private spinner: NgxSpinnerService,\n    private blServ: BuildingService,\n    private svgViewSrv: SvgViewService,\n    private cdr: ChangeDetectorRef,\n  ) { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(!changes.svgInputData.firstChange)\n    {\n      this.getSVGRoomData();\n    }    \n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.object = document.getElementById(\"svg-container\");\n      this.getSVGRoomData();\n    }, 0);\n  }\n\n  setSvgContainerObject(){\n    this.object = document.getElementById(\"svg-container\");\n  }\n\n  getSVGRoomData() {\n    this.showSpinner = true;\n    this.spinner.show();\n    this.focusOnElement = this.svgInputData.focusOnElement;\n    let observableToUpdateSVGRoomData: Observable<any>;\n    if (this.svgInputData.highlightSingleRoom) {\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoom(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId);\n    }else if(this.svgInputData.highlightSingleRoomWithEmployee){\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithEmployee(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId,this.svgInputData.labelString);\n    }else if (this.svgInputData.highlightSingleRoomWithAsset){\n      observableToUpdateSVGRoomData = this.updateSVGRoomDataForSingleRoomWithAsset(this.svgInputData.blId, this.svgInputData.flId, this.svgInputData.rmId,this.svgInputData.assetDetails);\n    }else if(this.svgInputData.highlightMultipleRooms && (this.svgInputData.highlightMultipleRoomsType == \"division\" || this.svgInputData.highlightMultipleRoomsType == \"department\" || this.svgInputData.highlightMultipleRoomsType == \"subDepartment\" || this.svgInputData.highlightMultipleRoomsType == \"rmcat\" || this.svgInputData.highlightMultipleRoomsType == \"rmtype\" ||this.svgInputData.highlightMultipleRoomsType==\"commonArea\")){\n      observableToUpdateSVGRoomData =this.updateSVGRoomDataForMultipleRoomsWithParameter(this.svgInputData.blId, this.svgInputData.flId,this.svgInputData.highlightMultipleRoomsTypeId,this.svgInputData.highlightColorForMultiple,this.svgInputData.highlightMultipleRoomsType);\n    }else if(this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"rmcat-rmtype\"){\n      observableToUpdateSVGRoomData =this.updateSVGRoomDataForMultipleRoomsRmCatRmType(this.svgInputData.blId, this.svgInputData.flId);\n    }else if(this.svgInputData.highlightMultipleRooms && this.svgInputData.highlightMultipleRoomsType == \"booking\"){\n      observableToUpdateSVGRoomData =this.updateSVGRoomDataForMultipleRoomsBooking(this.svgInputData.bookingSvgElementsData);\n    }\n    else{\n      observableToUpdateSVGRoomData = of(null);\n    }\n    observableToUpdateSVGRoomData.pipe(\n      concatMap(async () => this.getSvgFile())\n    ).subscribe(\n      () => {\n      },\n      (error) => {\n        console.error('Error:', error);\n      }\n    );\n    \n  }\n\n  updateSVGRoomDataForSingleRoom(blId: any, flId: any, rmId: any) {\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    return this.blServ.getRmById(rmId).pipe(\n      concatMap((res: any) => {\n        let idObj: SvgElementIdType = {\n          roomElementId: res.rm.svgElementId,\n          assetElementId: null\n        };\n        let colorObj: SvgElementColorType = {\n          roomColor: \"#ff0000\",\n          assetColor: null\n        };\n        let contentData: SvgRoomContentData = {\n          blId: blId,\n          flId: flId,\n          rmId: res.rm.rmId,\n          label: [res.rm.rmCode],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: res.rm.rmCode,\n          zoomAtRoom: true\n        };\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      })\n    );\n  }\n\n  updateSVGRoomDataForSingleRoomWithEmployee(blId: any, flId: any, rmId: any,empLabel:string){\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    return this.blServ.getRmById(rmId).pipe(\n      concatMap((res: any) => {\n        let idObj: SvgElementIdType = {\n          roomElementId: res.rm.svgElementId,\n          assetElementId: null\n        };\n        let colorObj: SvgElementColorType = {\n          roomColor: \"#ff0000\",\n          assetColor: null\n        };\n        let contentData: SvgRoomContentData = {\n          blId: blId,\n          flId: flId,\n          rmId: res.rm.rmId,\n          label: [`${res.rm.bl.blCode}-${res.rm.fl.flCode}-${res.rm.rmCode}`,empLabel],\n          showLabel: true,\n          highlightRoom: true,\n          svgElementId: idObj,\n          color: colorObj,\n          rmCode: res.rm.rmCode,\n          zoomAtRoom: true\n        };\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      })\n    );\n  }\n\n  updateSVGRoomDataForSingleRoomWithAsset(blId: any, flId: any, rmId: any, eq:any){\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"asset\";\n    return this.blServ.getRmById(rmId).pipe(\n      concatMap((res: any) => {\n        let idObj:SvgElementIdType ={\n          roomElementId:res.rm.svgElementId,\n          assetElementId : eq.svgElementId\n        }\n        let colorObj: SvgElementColorType ={\n          roomColor:\"#9999ff\",\n          assetColor: \"#ff0000\"\n        }\n        let contentData:SvgRoomContentData ={\n          blId:eq.blId,\n          flId:eq.flId,\n          rmId:eq.rmId,\n          label:[eq.eqCode,eq.rmCode],\n          showLabel:true,\n          highlightRoom:true,\n          svgElementId : idObj,\n          color:colorObj,\n          rmCode:'',\n          zoomAtRoom:true\n        }\n        this.svgRoomData.content.push(contentData);\n        return of(null);\n      })\n    );\n  }\n\n  updateSVGRoomDataForMultipleRoomsWithParameter(blId: any, flId: any, parameterId: any,color:string,param:string){\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    let idname = this.getParameterNameForMutipleRoomHighlight(param);\n    let data ={\n      blId:blId,\n      flId:flId,\n      [idname] : parameterId\n    }\n    return this.blServ.getRmList(data).pipe(\n      concatMap((res: any) => {\n        let resultData = res.filter((each:any)=> each.svgElementId !=null);\n        resultData.forEach((element:any) => {\n          let idObj:SvgElementIdType ={\n            roomElementId:element.svgElementId,\n            assetElementId : null\n          }\n          let colorObj: SvgElementColorType ={\n            roomColor:color,\n            assetColor: null\n          }\n          let contentData:SvgRoomContentData ={\n            blId:blId,\n            flId:flId,\n            rmId:element.rmId,\n            label:[element.rmCode],\n            showLabel:true,\n            highlightRoom:true,\n            svgElementId : idObj,\n            color:colorObj,\n            rmCode:element.rmCode,\n            zoomAtRoom:false\n          }\n          this.svgRoomData.content.push(contentData);\n        });\n        return of(null);\n      })\n    );\n  }\n\n  updateSVGRoomDataForMultipleRoomsRmCatRmType(blId: any, flId: any){\n    this.svgRoomData = new SvgRoomData(null, null, \"\", []);\n    this.svgRoomData.blId = blId;\n    this.svgRoomData.flId = flId;\n    this.svgRoomData.locate = \"room\";\n    let data ={\n      blId:blId,\n      flId:flId,\n    }\n    return this.blServ.getrmwithcatortypecolor(data).pipe(\n      concatMap((res: any) => {\n        let resultData = res.filter((each:any)=> each.svgElementId !=null);\n        this.allSVGRoomsData = [...resultData];\n        resultData.forEach((rm:any)=>{\n          let labeldata =[];\n          if(rm.rmType!=null && rm.rmType!=''){\n            labeldata.push(rm.rmType);\n          }\n          if(rm.rmCat!=null && rm.rmCat!=''){\n            labeldata.push(rm.rmCat);\n          }\n          labeldata.push(rm.rmCode);\n          let idObj:SvgElementIdType ={\n            roomElementId:rm.svgElementId,\n            assetElementId : null\n          }\n          let colorObj: SvgElementColorType ={\n            roomColor:rm.highlightColor,\n            assetColor: null\n          }\n          let contentData:SvgRoomContentData ={\n            blId:parseInt(blId),\n            flId:parseInt(flId),\n            rmId:rm.rmId,\n            label:[...labeldata],\n            showLabel:true,\n            highlightRoom:rm.highlightColor!=null?true:false,\n            svgElementId :idObj,\n            color:colorObj,\n            rmCode:rm.rmCode,\n            zoomAtRoom:false\n          }\n          this.svgRoomData.content.push(contentData);\n        })\n        return of(null);\n      })\n    );\n  }\n\n  updateSVGRoomDataForMultipleRoomsBooking( SvgElementsData:SvgRoomData|null){\n    if(SvgElementsData != null){\n      this.svgRoomData = {...SvgElementsData};\n    }\n    return of(null);\n    \n  }\n\n  getParameterNameForMutipleRoomHighlight(param:string){\n    let result = \"\";\n    if(param==\"division\"){\n      result= \"divId\";\n    }else if (param==\"department\"){\n      result= \"depId\";\n    }else if (param==\"subDepartment\"){\n      result= \"subDepId\";\n    }else if (param==\"rmcat\"){\n      result= \"rmcatId\";\n    }else if (param==\"rmtype\"){\n      result= \"rmtypeId\";\n    }else if(param==\"commonArea\"){\n      result =\"commonAreaType\";\n    }\n    return result;\n  }\n\n  getSvgFile() {\n    if (this.svgRoomData.content[0] == undefined) {\n      this.spinner.hide();\n      this.showSpinner = false;\n      this.noSVGFound = true;\n      this.cdr.detectChanges();\n    } else {\n      let data ={\n        blId:this.svgInputData.blId,\n        flId:this.svgInputData.flId\n      }\n      if (this.svgRoomData.content[0].svgElementId !== null) {\n        this.svgViewSrv.getSVGFile(data).subscribe((res: any) => {\n          if (res.code != 409) {\n            this.fileString = res.fileContent;\n            this.noSVGFound = false;\n            this.cdr.detectChanges();\n            this.setSvgContainerObject();\n            this.loadSvgFile();\n          }\n          else {\n            this.spinner.hide();\n            this.showSpinner = false;\n            this.noSVGFound = true;\n            this.cdr.detectChanges();\n          }\n        })\n      } else {\n        this.spinner.hide();\n        this.showSpinner = false;\n        this.noSVGFound = true;\n        this.cdr.detectChanges();\n      }\n    }\n  }\n\n  loadSvgFile() {\n    this.object!.innerHTML = \"\";\n    let abc = d3.select('#svg-container');\n    if (this.fileString != '') {\n      this.object!.innerHTML = this.fileString;\n    }\n    this.cdr.detectChanges();\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    mySvg.select(\"title\").remove();\n    mySvg.select(\"desc\").remove();\n    this.loadByDetails();\n    let zoomed = (event: any) => {\n      let transform = event.transform;\n      if (this.focusedTransform != null) {\n        //viewer.attr('transform', `translate(${-1*(this.focusedTransform.x-transform.x)},${-1*(this.focusedTransform.y-transform.y)}) scale(${transform.k},-${transform.k})`);\n        viewer.attr('transform', `translate(${this.focusedTransform.x + transform.x},${this.focusedTransform.y + transform.y}) scale(${transform.k},-${transform.k})`);\n      } else {\n        viewer.attr('transform', `translate(${transform.x},${transform.y}) scale(${transform.k},-${transform.k})`)\n      }\n    }\n    let zoom = d3.zoom().on(\"zoom\", zoomed).scaleExtent([0.5, 20]);\n    // @ts-ignore\n    mySvg.call(zoom);\n    mySvg.attr(\"width\", \"100%\")\n      .attr(\"height\", \"auto\");\n    this.roomOnClickListener();\n    this.focusToSelection();\n    this.spinner.hide();\n    this.showSpinner = false;\n  }\n\n  roomOnClickListener() {\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let room_layer = mySvg.select('#ROOM');\n    let elementIdName =\"\";\n    let data : SvgElementOnClickData={\n      elementIdName: \"\",\n      svgRoomData : {...this.svgRoomData},\n      allSVGRoomsData : [...this.allSVGRoomsData]\n    }\n    room_layer.selectAll('path').on('click', (event: any) => {\n      elementIdName = (event.target as HTMLInputElement).id;\n      data.elementIdName = elementIdName;\n      this.onRoomClick.emit(data);\n    })\n    room_layer.select('#text_g').selectAll('foreignObject').selectAll('.label-container').on('click', (event: any) => {\n      elementIdName = (event.currentTarget as HTMLInputElement).id;\n      data.elementIdName = elementIdName;\n      this.onRoomClick.emit(data);\n    })\n  }\n\n  loadByDetails() {\n    let blId = this.svgRoomData.blId;\n    let flId = this.svgRoomData.flId;\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    let externalFunctions = this;\n    if (!viewer.select(\"#text_g\").node()) {\n      viewer.append(\"g\").attr(\"id\", \"text_g\");\n    }\n    let textElement = d3.select(\"#text_g\");\n    textElement.html(\"\");\n    if (this.svgRoomData.locate == 'room') {\n      viewer.select('#ROOM').selectAll('path').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n      this.svgRoomData.content.forEach((room: any) => {\n        if (room.svgElementId.roomElementId != null) {\n          let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n          externalFunctions.highlightandlabelobject(room, rm, textElement, room.color.roomColor);\n          if (room.zoomAtRoom) {\n            this.elementToBeZoomed = rm;\n          }\n        }\n      })\n    } else if (this.svgRoomData.locate == 'asset') {\n      viewer.select('#ASSET').raise();\n      viewer.select('#ASSET').selectAll('path,use').style(\"fill\", \"transparent\").style(\"stroke\", \"transparent\");\n      this.svgRoomData.content.forEach((asset: any) => {\n        if (asset.svgElementId.roomElementId != null) {\n          let rm = viewer.select(\"#ROOM\").select(\"#\" + asset.svgElementId.roomElementId);\n          externalFunctions.highlightandlabelobject(asset, rm, textElement, asset.color.roomColor);\n          if (asset.zoomAtRoom) {\n            this.elementToBeZoomed = rm;\n          }\n        }\n        if (asset.svgElementId.assetElementId != null) {\n          let eq = viewer.select(\"#ASSET\").select(\"#\" + asset.svgElementId.assetElementId);\n          externalFunctions.highlightandlabelobject(asset, eq, textElement, asset.color.assetColor);\n        }\n      })\n    }\n  }\n\n  getMediumFontSize() {\n    let abc = d3.select('#svg-container');\n    let viewer = abc.select(\"#viewer\");\n    let count = 0;\n    let width = 0;\n    let height = 0;\n    this.svgRoomData.content.forEach((room: any) => {\n      let rm = viewer.select(\"#ROOM\").select(\"#\" + room.svgElementId.roomElementId);\n      if (rm.node() != null) {\n        //@ts-ignore\n        let dDetails = rm.node().getBBox();\n        width += dDetails.width;\n        height += dDetails.height;\n        count++;\n      }\n    });\n    width = width / count;\n    height = height / count;\n    return (width + height) / 2;\n  }\n\n  highlightandlabelobject(loopobj: any, svgobj: any, textElement: any, color: any) {\n    let externalFunctions = this;\n    let id = svgobj.attr(\"id\");\n    if (loopobj.highlightRoom) {\n      svgobj.style('fill-opacity', '1');\n      svgobj.style('opacity', '1');\n      if (color) {\n        svgobj.style('fill', color);\n        svgobj.style('stroke', color);\n      }\n    }\n    if (loopobj.showLabel && id.startsWith(\"room\")) {\n      if (svgobj.node() != null) {\n        //@ts-ignore\n        let dDetails = svgobj.node().getBBox();\n        const labelcount = loopobj.label.length;\n        let sizeel = externalFunctions.getMediumFontSize();\n        let textForeignObject = textElement.append(\"foreignObject\");\n        textForeignObject.style(\"height\", dDetails.height / 2).style(\"width\", dDetails.width / 2).style(\"overflow\", \"visible\");\n        textForeignObject.attr(\"x\", dDetails.x + 0.3 * dDetails.width).attr(\"y\", dDetails.y + 0.4 * dDetails.height);\n        for (let i = 0; i < labelcount; i++) {\n          //@ts-ignore\n          let labelContainerDiv = textForeignObject.append('xhtml:div').attr(\"class\", \"label-container\").attr(\"id\", \"label_\" + svgobj.node().id);\n          let childTextElement1 = labelContainerDiv.append('xhtml:div');\n          childTextElement1.attr(\"style\", `height:${sizeel / 10}px;white-space: nowrap;\n          overflow: hidden;text-overflow: ellipsis;width:${dDetails.width / 2}px;\n          font-size:${sizeel / 12}px;transform:scale(1,-1);display:grid;align-items:center;`);\n          childTextElement1.text(loopobj.label[i]);\n          let childTextElement2 = labelContainerDiv.append('xhtml:div');\n          childTextElement2.attr(\"class\", \"tooltip-status\").attr(\"style\", `height:${sizeel / 10}px;font-size:${sizeel / 12}px;`);\n          childTextElement2.text(loopobj.label[i]);\n        }\n      }\n    }\n  }\n\n  focusToSelection() {\n    let abc = d3.select('#svg-container');\n    let mySvg = abc.select(\"svg\");\n    let viewer = abc.select(\"#viewer\");\n    if (this.focusOnElement && this.elementToBeZoomed != null) {\n      let bbox = this.elementToBeZoomed.node().getBBox();\n      //@ts-ignore\n      let mySvgBbox = mySvg.node().getBBox();\n      let centerX = bbox.x + bbox.width / 2;\n      let centerY = bbox.y + bbox.height / 2;\n      let centroidX = mySvgBbox.x + mySvgBbox.width / 2;\n      let centroidY = -mySvgBbox.y + mySvgBbox.height / 2;\n      let centroidXDifference = centroidX - mySvgBbox.x;\n      let centroidYDifference = centroidY + mySvgBbox.y;\n      let centreXDifference = centerX - mySvgBbox.x;\n      let centreYDifference = centerY + mySvgBbox.y;\n      viewer.attr('transform', `translate(${centroidXDifference - centreXDifference},${-1 * (centroidYDifference - centreYDifference)}) scale(1,-1)`);\n      this.focusedTransform = { x: centroidXDifference - centreXDifference, y: -1 * (centroidYDifference - centreYDifference), k: 1 };\n    }\n  }\n\n}\n","<div id=\"svg-container\" *ngIf=\"!noSVGFound\">\n</div>\n<div class=\"card no-file-found\" *ngIf=\"noSVGFound\">\n    <h1>No Floorplan available</h1>\n</div>\n<ngx-spinner bdColor=\"rgba(0, 0, 0, 0.8)\" size=\"medium\" color=\"#879cc9\" class=\"spinner-color\" type=\"ball-spin-clockwise\"\n    *ngIf=\"showSpinner\" [fullScreen]=\"true\">\n    <p style=\"color: white\"> Loading... </p>\n</ngx-spinner>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}