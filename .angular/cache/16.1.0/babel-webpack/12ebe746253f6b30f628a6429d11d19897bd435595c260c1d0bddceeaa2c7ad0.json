{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { RmConfigFormComponent } from '../rm-config-form/rm-config-form.component';\nimport { EnumList } from 'src/app/model/enum-list.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../provider/rm-config.provider\";\nimport * as i2 from \"../../services/rm-config.service\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"src/app/services/enum.service\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/dropdown\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/panel\";\nimport * as i10 from \"primeng/confirmdialog\";\nimport * as i11 from \"ng-zorro-antd/table\";\nimport * as i12 from \"@angular/forms\";\nfunction RmConfigListComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function RmConfigListComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.addRecord());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function RmConfigListComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onCancel());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RmConfigListComponent_ng_template_4_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-dropdown\", 26);\n    i0.ɵɵlistener(\"onChange\", function RmConfigListComponent_ng_template_4_ng_template_18_Template_p_dropdown_onChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const filter_r9 = restoredCtx.filterCallback;\n      return i0.ɵɵresetView(filter_r9($event.value));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const value_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", value_r8)(\"options\", ctx_r7.enumIsReservable)(\"showClear\", true);\n  }\n}\nfunction RmConfigListComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 11);\n    i0.ɵɵelementStart(2, \"th\", 12)(3, \"div\", 13)(4, \"div\", 14)(5, \"p\", 15);\n    i0.ɵɵtext(6, \"Arrangement Type\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 16);\n    i0.ɵɵelement(8, \"p-sortIcon\", 17)(9, \"p-columnFilter\", 18);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 19)(11, \"div\", 13)(12, \"div\", 14)(13, \"p\", 15);\n    i0.ɵɵtext(14, \"Is Reservable?\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 16);\n    i0.ɵɵelement(16, \"p-sortIcon\", 20);\n    i0.ɵɵelementStart(17, \"p-columnFilter\", 21);\n    i0.ɵɵtemplate(18, RmConfigListComponent_ng_template_4_ng_template_18_Template, 1, 3, \"ng-template\", 22);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(19, \"th\", 23)(20, \"div\", 13)(21, \"div\", 14)(22, \"p\", 15);\n    i0.ɵɵtext(23, \"Maximum Capacity\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"div\", 16);\n    i0.ɵɵelement(25, \"p-sortIcon\", 24)(26, \"p-columnFilter\", 25);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction RmConfigListComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 27)(1, \"td\", 11)(2, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function RmConfigListComponent_ng_template_5_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const rmc_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.openEditItem(rmc_r12));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function RmConfigListComponent_ng_template_5_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const rmc_r12 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.deleteRecordConfirm(rmc_r12.configId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rmc_r12 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", rmc_r12);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(rmc_r12.arrangementArrangementType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.getEnumById(rmc_r12.isReservable));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(rmc_r12.maxCapacity);\n  }\n}\nfunction RmConfigListComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 5);\n  }\n}\nexport let RmConfigListComponent = /*#__PURE__*/(() => {\n  class RmConfigListComponent {\n    constructor(rmModalDialogue, rmService, confirmationService, messageService, enumsrv) {\n      this.rmModalDialogue = rmModalDialogue;\n      this.rmService = rmService;\n      this.confirmationService = confirmationService;\n      this.messageService = messageService;\n      this.enumsrv = enumsrv;\n      this.eventData = {\n        blId: null,\n        flId: null,\n        rmId: null\n      };\n      this.roomConfigsRecords = [];\n      this.refreshPanels = new EventEmitter();\n      this.enumList = [];\n      this.enumRmConfig = [];\n      this.enumExtAllowedData = [];\n      this.enumIsReservable = [];\n      this.enumIdExtAllowed = 0;\n      this.enumIdIsReservable = 0;\n      this.enumIsApprovalRequiredValue = 0;\n      this.enumIsApprovalRequiredList = [];\n    }\n    ngOnInit() {\n      this.loadEnums();\n    }\n    getRoomConfigData(e) {\n      this.addFormEvent = e.data;\n      this.eventData = {\n        blId: e.data.blId,\n        flId: e.data.flId,\n        rmId: e.data.rmId\n      };\n    }\n    setRoomConfigData() {\n      this.rmService.getRmConfig(this.eventData).subscribe(res => {\n        if (res !== null) {\n          this.loaddata(res);\n        } else {\n          this.roomConfigsRecords = [];\n        }\n      });\n    }\n    loaddata(cdata) {\n      this.roomConfigsRecords = [];\n      this.roomConfigsRecords = cdata;\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res.map(x => Object.assign({}, x));\n        this.enumRmConfig = this.enumList.filter(t => t.tableName.toLocaleUpperCase() === 'rm_config'.toLocaleUpperCase());\n        this.enumExtAllowedData = this.enumRmConfig.filter(t => t.fieldName.toLocaleUpperCase() === 'external_allowed'.toLocaleUpperCase());\n        this.enumExtAllowedData.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumIsReservable = this.enumRmConfig.filter(t => t.fieldName.toLocaleUpperCase() === 'is_reservable'.toLocaleUpperCase());\n        // this.enumIsReservable.unshift(new Enums(0, \"\", \"\", 'Make a selection'));\n        this.enumIsApprovalRequiredList = this.enumRmConfig.filter(t => t.fieldName.toLocaleUpperCase() === 'is_approval_req'.toLocaleUpperCase());\n        this.enumIsApprovalRequiredList.unshift(new EnumList(null, \"\", \"\", 'Make a selection', null));\n        this.enumExtAllowedData.map(item => {\n          if (item.enumValue == 'Yes') {\n            this.enumIdExtAllowed = item.enumKey;\n          }\n        });\n        this.enumIsReservable.map(item => {\n          if (item.enumValue == 'Yes') {\n            this.enumIdIsReservable = item.enumKey;\n          }\n        });\n        this.enumIsApprovalRequiredList.map(item => {\n          if (item.enumValue == 'Yes') {\n            this.enumIsApprovalRequiredValue = item.enumKey;\n          }\n        });\n      });\n    }\n    addRecord() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        blId: this.addFormEvent.blId,\n        flId: this.addFormEvent.flId,\n        rmId: this.addFormEvent.rmId,\n        blCode: this.addFormEvent.blBlCode,\n        flCode: this.addFormEvent.flFlCode,\n        rmCode: this.addFormEvent.rmCode,\n        rmName: this.addFormEvent.rmName,\n        configId: 0,\n        preBlock: \"0\",\n        postBlock: \"0\",\n        maxCapacity: \"1\",\n        minCapacity: \"1\",\n        externalAllowed: this.enumIdExtAllowed,\n        dayStart: \"06:00\",\n        dayEnd: \"18:00\",\n        dateCreated: null,\n        timeCreated: null,\n        dateLastUpdated: null,\n        isReservable: this.enumIdIsReservable,\n        isEdit: false,\n        newRecord: true,\n        isApprovalRequired: this.enumIsApprovalRequiredValue,\n        arrangementId: null\n      };\n      this.rmModalDialogue.openDialog(dialogConfig);\n      this.rmModalDialogue.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result == true) {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Record saved',\n            detail: 'Record saved successfully'\n          });\n          this.setRoomConfigData();\n        }\n      });\n    }\n    openEditItem(data) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '750px';\n      dialogConfig.data = {\n        blId: data.blId,\n        flId: data.flId,\n        rmId: data.rmId,\n        blCode: this.addFormEvent.blBlCode,\n        flCode: this.addFormEvent.flFlCode,\n        rmCode: this.addFormEvent.rmCode,\n        rmName: this.addFormEvent.rmName,\n        configId: data.configId,\n        preBlock: data.preBlock,\n        postBlock: data.postBlock,\n        maxCapacity: data.maxCapacity,\n        minCapacity: data.minCapacity,\n        externalAllowed: data.externalAllowed,\n        dayStart: data.dayStart,\n        dayEnd: data.dayEnd,\n        isReservable: data.isReservable,\n        isEdit: true,\n        newRecord: false,\n        isApprovalRequired: data.isApprovalRequired,\n        arrangementId: data.arrangementId\n      };\n      this.rmModalDialogue.openDialog(dialogConfig);\n      this.rmModalDialogue.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result == true) {\n          this.messageService.add({\n            severity: 'success',\n            summary: 'Record saved',\n            detail: 'Record saved successfully'\n          });\n          this.setRoomConfigData();\n        }\n      });\n    }\n    deleteRecordConfirm(configId) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete Config Id-  ' + configId + '  ?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.deletermc(configId);\n        },\n        key: \"rmcGrid\"\n      });\n    }\n    deletermc(configId) {\n      this.messageService.clear();\n      this.rmService.deleteRmConfigById(configId).subscribe(res => {\n        if (res.code == 200) {\n          this.messageService.add({\n            key: 'rmcMessage',\n            severity: 'success',\n            summary: 'Record deleted',\n            detail: 'Record deleted'\n          });\n          setTimeout(() => {\n            this.setRoomConfigData();\n          }, 3);\n        } else {\n          this.messageService.add({\n            key: 'rmcMessage',\n            severity: 'warn',\n            summary: 'Delete failed',\n            detail: res.text\n          });\n        }\n      });\n    }\n    onCancel() {\n      this.refreshPanels.emit(true);\n    }\n    getEnumById(id) {\n      return id ? this.enumIsReservable.find(t => t.enumKey == id) != null ? this.enumIsReservable.find(t => t.enumKey == id)?.enumValue : '' : '';\n    }\n    static #_ = this.ɵfac = function RmConfigListComponent_Factory(t) {\n      return new (t || RmConfigListComponent)(i0.ɵɵdirectiveInject(i1.RmConfigDialogueProvider), i0.ɵɵdirectiveInject(i2.RmConfigService), i0.ɵɵdirectiveInject(i3.ConfirmationService), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.EnumService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RmConfigListComponent,\n      selectors: [[\"app-rm-config-list\"]],\n      viewQuery: function RmConfigListComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(RmConfigFormComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rmconfigF = _t.first);\n        }\n      },\n      outputs: {\n        refreshPanels: \"refreshPanels\"\n      },\n      decls: 9,\n      vars: 1,\n      consts: [[\"header\", \"Room Configurations List\"], [\"pTemplate\", \"icons\"], [1, \"card\"], [3, \"value\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [\"key\", \"rmcGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"key\", \"rmcMessage\", \"position\", \"top-right\"], [\"pButton\", \"\", \"label\", \"Add\", \"icon\", \"pi pi-plus\", 3, \"click\"], [\"pButton\", \"\", \"label\", \"Cancel\", 1, \"cancel-button\", 3, \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"arrangementArrangementType\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"arrangementArrangementType\"], [\"type\", \"text\", \"field\", \"arrangementArrangementType\", \"display\", \"menu\"], [\"pSortableColumn\", \"isReservable\"], [\"field\", \"isReservable\"], [\"field\", \"isReservable\", \"matchMode\", \"equals\", \"display\", \"menu\"], [\"pTemplate\", \"filter\"], [\"pSortableColumn\", \"maxCapacity\"], [\"field\", \"maxCapacity\"], [\"type\", \"text\", \"field\", \"maxCapacity\", \"display\", \"menu\"], [\"optionLabel\", \"enumValue\", \"optionValue\", \"enumKey\", \"placeholder\", \"Select a Type\", 3, \"ngModel\", \"options\", \"showClear\", \"onChange\"], [3, \"pSelectableRow\"], [\"icon\", \"pi pi-pencil\", \"pButton\", \"\", \"pRipple\", \"\", \"type\", \"button\", 1, \"p-button-text\", \"p-button-rounded\", 3, \"click\"], [\"pButton\", \"\", \"type\", \"button\", \"icon\", \"pi pi-times\", \"iconPos\", \"left\", 1, \"p-button-text\", \"p-button-rounded\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"]],\n      template: function RmConfigListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, RmConfigListComponent_ng_template_1_Template, 2, 0, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"p-table\", 3);\n          i0.ɵɵtemplate(4, RmConfigListComponent_ng_template_4_Template, 27, 0, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, RmConfigListComponent_ng_template_5_Template, 10, 4, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, RmConfigListComponent_ng_template_6_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(7, \"p-confirmDialog\", 7)(8, \"p-toast\", 8);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"value\", ctx.roomConfigsRecords);\n        }\n      },\n      dependencies: [i3.PrimeTemplate, i5.Table, i5.SortableColumn, i5.SelectableRow, i5.SortIcon, i5.ColumnFilter, i6.ButtonDirective, i7.Dropdown, i8.Toast, i9.Panel, i10.ConfirmDialog, i11.NzTableCellDirective, i11.NzThMeasureDirective, i11.NzTrDirective, i12.NgControlStatus, i12.NgModel],\n      styles: [\".cancel-button[_ngcontent-%COMP%]{margin-left:10px}@media screen and (min-width: 600px) and (max-width: 959px){  .p-button{padding:.25rem .5rem}.cancel-button[_ngcontent-%COMP%]{margin-left:5px}  p-panel .p-panel-icons-end{display:flex}}\"]\n    });\n  }\n  return RmConfigListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}