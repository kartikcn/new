{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/data.service\";\nexport class AddWorkRequestService {\n  constructor(addWorkRequestService) {\n    this.addWorkRequestService = addWorkRequestService;\n  }\n  saveWorkRequest(data) {\n    return this.addWorkRequestService.add('wr', 'saveWr', data);\n  }\n  getAllWr() {\n    return this.addWorkRequestService.getAll('wr', 'getAll');\n  }\n  getAllWrByFilter(filteData) {\n    return this.addWorkRequestService.search('wr', 'getAllByFilter', filteData);\n  }\n  getAllWrByFilterPaginated(filteData) {\n    return this.addWorkRequestService.search('wr', 'getAllByFilterPaginated', filteData);\n  }\n  getWrById(id) {\n    return this.addWorkRequestService.getSingleById('wr', 'getWrById', id);\n  }\n  getRequestLogByRequestId(requestId) {\n    return this.addWorkRequestService.getAllById('requestLog', 'getByRequestId', requestId);\n  }\n  getEscaltionDateAndTime(dateAndTime) {\n    return this.addWorkRequestService.add('wr', 'getEscaltionDateAndTime', dateAndTime);\n  }\n  getAllStatusWithCount(filteData) {\n    return this.addWorkRequestService.search('wr', 'getAllStatusWithCount', filteData);\n  }\n  static #_ = this.ɵfac = function AddWorkRequestService_Factory(t) {\n    return new (t || AddWorkRequestService)(i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddWorkRequestService,\n    factory: AddWorkRequestService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AddWorkRequestService","constructor","addWorkRequestService","saveWorkRequest","data","add","getAllWr","getAll","getAllWrByFilter","filteData","search","getAllWrByFilterPaginated","getWrById","id","getSingleById","getRequestLogByRequestId","requestId","getAllById","getEscaltionDateAndTime","dateAndTime","getAllStatusWithCount","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\Helpdesk\\work-request\\service\\add-work-request.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataService } from 'src/app/services/data.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AddWorkRequestService {\n\n    constructor(\n        private addWorkRequestService: DataService<any>\n    ) { }\n\n    public saveWorkRequest(data: any): Observable<any> {\n        return this.addWorkRequestService.add('wr', 'saveWr', data);\n    }\n\n    public getAllWr(): Observable<any> {\n        return this.addWorkRequestService.getAll('wr', 'getAll');\n    }\n\n    public getAllWrByFilter(filteData:any): Observable<any> {\n        return this.addWorkRequestService.search('wr', 'getAllByFilter',filteData);\n    }\n\n    public getAllWrByFilterPaginated(filteData:any) {\n        return this.addWorkRequestService.search('wr', 'getAllByFilterPaginated',filteData);\n    }\n\n    public getWrById(id:any): Observable<any> {\n        return this.addWorkRequestService.getSingleById('wr','getWrById',id);\n    }\n\n    public getRequestLogByRequestId(requestId:any): Observable<any> {\n        return this.addWorkRequestService.getAllById('requestLog','getByRequestId',requestId);\n    }\n\n    public getEscaltionDateAndTime(dateAndTime: any) : Observable<any>{\n        return this.addWorkRequestService.add('wr', 'getEscaltionDateAndTime', dateAndTime);\n    }\n\n    public getAllStatusWithCount(filteData:any){\n        return this.addWorkRequestService.search('wr', 'getAllStatusWithCount',filteData);\n    }\n\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,qBAAqB;EAE9BC,YACYC,qBAAuC;IAAvC,KAAAA,qBAAqB,GAArBA,qBAAqB;EAC7B;EAEGC,eAAeA,CAACC,IAAS;IAC5B,OAAO,IAAI,CAACF,qBAAqB,CAACG,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAED,IAAI,CAAC;EAC/D;EAEOE,QAAQA,CAAA;IACX,OAAO,IAAI,CAACJ,qBAAqB,CAACK,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC5D;EAEOC,gBAAgBA,CAACC,SAAa;IACjC,OAAO,IAAI,CAACP,qBAAqB,CAACQ,MAAM,CAAC,IAAI,EAAE,gBAAgB,EAACD,SAAS,CAAC;EAC9E;EAEOE,yBAAyBA,CAACF,SAAa;IAC1C,OAAO,IAAI,CAACP,qBAAqB,CAACQ,MAAM,CAAC,IAAI,EAAE,yBAAyB,EAACD,SAAS,CAAC;EACvF;EAEOG,SAASA,CAACC,EAAM;IACnB,OAAO,IAAI,CAACX,qBAAqB,CAACY,aAAa,CAAC,IAAI,EAAC,WAAW,EAACD,EAAE,CAAC;EACxE;EAEOE,wBAAwBA,CAACC,SAAa;IACzC,OAAO,IAAI,CAACd,qBAAqB,CAACe,UAAU,CAAC,YAAY,EAAC,gBAAgB,EAACD,SAAS,CAAC;EACzF;EAEOE,uBAAuBA,CAACC,WAAgB;IAC3C,OAAO,IAAI,CAACjB,qBAAqB,CAACG,GAAG,CAAC,IAAI,EAAE,yBAAyB,EAAEc,WAAW,CAAC;EACvF;EAEOC,qBAAqBA,CAACX,SAAa;IACtC,OAAO,IAAI,CAACP,qBAAqB,CAACQ,MAAM,CAAC,IAAI,EAAE,uBAAuB,EAACD,SAAS,CAAC;EACrF;EAAC,QAAAY,CAAA,G;qBApCQrB,qBAAqB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArB1B,qBAAqB;IAAA2B,OAAA,EAArB3B,qBAAqB,CAAA4B,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}