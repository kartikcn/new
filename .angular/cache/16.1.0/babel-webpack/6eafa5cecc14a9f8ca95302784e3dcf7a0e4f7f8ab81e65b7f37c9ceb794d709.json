{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/ppm-plan-services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/input\";\nimport * as i6 from \"@ng-select/ng-select\";\nimport * as i7 from \"../../../../directive/directive/trim-input.directive\";\nfunction AddPlanStepsFormComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMsg);\n  }\n}\nexport let AddPlanStepsFormComponent = /*#__PURE__*/(() => {\n  class AddPlanStepsFormComponent {\n    constructor(formBuilder, ppmPlanService) {\n      this.formBuilder = formBuilder;\n      this.ppmPlanService = ppmPlanService;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.planList = [];\n      this.errorMsg = '';\n      this.prevPlanId = null;\n      this.prevStepCode = '';\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.planStepFormPanel = this.formBuilder.group({\n        planStepId: [null],\n        planId: [null, [Validators.required]],\n        stepCode: [null, [Validators.required]],\n        instructions: [null]\n      });\n      // End Of Building Form\n      this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.planStepFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.loadPlansData();\n    }\n    loadPlansData() {\n      this.ppmPlanService.getAllPlans().subscribe(res => {\n        if (res.status != 202) {\n          this.planList = res;\n        } else {\n          this.planList = [];\n        }\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const me = this;\n      const validationErros = [];\n      return validationErros;\n    }\n    /// End Of Form Validation Related Code\n    get value() {\n      const stateDetails = {\n        planStepId: this.planStepFormPanel.controls.planStepId.value,\n        planId: this.planStepFormPanel.controls.planId.value,\n        stepCode: this.planStepFormPanel.controls.stepCode.value,\n        instructions: this.planStepFormPanel.controls.instructions.value\n      };\n      return stateDetails;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.planStepFormPanel.patchValue({\n          planStepId: value.planStepId,\n          planId: parseInt(value.planId),\n          stepCode: value.stepCode,\n          instructions: value.instructions\n        });\n      });\n      this.onChange(value);\n      this.onTouched();\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.planStepFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    // communicate the inner form validation to the parent form\n    validate(_) {\n      return this.planStepFormPanel.valid ? null : {\n        planStepFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddPlanStepsFormComponent_Factory(t) {\n      return new (t || AddPlanStepsFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PpmPlanService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPlanStepsFormComponent,\n      selectors: [[\"app-add-plan-steps-form\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddPlanStepsFormComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddPlanStepsFormComponent),\n        multi: true\n      }])],\n      decls: 21,\n      vars: 5,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"planId\", \"bindLabel\", \"planName\", \"bindValue\", \"planId\", \"placeholder\", \"Make a selection\", \"readonly\", \"true\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"name\", \"stepCode\", \"formControlName\", \"stepCode\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [4, \"ngIf\"], [1, \"form-field-lable\"], [\"name\", \"instructions\", \"rows\", \"6\", \"nz-input\", \"\", \"maxlength\", \"4000\", \"formControlName\", \"instructions\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"], [1, \"form-field-lable\", 2, \"color\", \"red\"]],\n      template: function AddPlanStepsFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\")(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Plan Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"ng-select\", 4);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\")(10, \"div\", 2)(11, \"label\", 3);\n          i0.ɵɵtext(12, \"Step Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(14, AddPlanStepsFormComponent_tr_14_Template, 4, 1, \"tr\", 6);\n          i0.ɵɵelementStart(15, \"tr\")(16, \"td\")(17, \"div\", 2)(18, \"label\", 7);\n          i0.ɵɵtext(19, \"Instructions\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.planStepFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.planList)(\"searchable\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMsg.length > 0);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzInputDirective, i6.NgSelectComponent, i7.TrimInputDirective]\n    });\n  }\n  return AddPlanStepsFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}