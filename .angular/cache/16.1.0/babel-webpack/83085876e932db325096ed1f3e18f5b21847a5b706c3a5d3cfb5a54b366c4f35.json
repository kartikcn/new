{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, RendererStyleFlags2, Injectable, Inject, NgModule } from '@angular/core';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nvar MatCssPalettePrefix = /*#__PURE__*/(() => {\n  MatCssPalettePrefix = MatCssPalettePrefix || {};\n  MatCssPalettePrefix[\"Primary\"] = \"--palette-primary-\";\n  MatCssPalettePrefix[\"Accent\"] = \"--palette-accent-\";\n  MatCssPalettePrefix[\"Warn\"] = \"--palette-warn-\";\n  return MatCssPalettePrefix;\n})();\nvar MaterialCssVariables = /*#__PURE__*/(() => {\n  MaterialCssVariables = MaterialCssVariables || {};\n  MaterialCssVariables[\"Primary50\"] = \"--palette-primary-50\";\n  MaterialCssVariables[\"Primary100\"] = \"--palette-primary-100\";\n  MaterialCssVariables[\"Primary200\"] = \"--palette-primary-200\";\n  MaterialCssVariables[\"Primary300\"] = \"--palette-primary-300\";\n  MaterialCssVariables[\"Primary400\"] = \"--palette-primary-400\";\n  MaterialCssVariables[\"Primary500\"] = \"--palette-primary-500\";\n  MaterialCssVariables[\"Primary600\"] = \"--palette-primary-600\";\n  MaterialCssVariables[\"Primary700\"] = \"--palette-primary-700\";\n  MaterialCssVariables[\"Primary800\"] = \"--palette-primary-800\";\n  MaterialCssVariables[\"Primary900\"] = \"--palette-primary-900\";\n  MaterialCssVariables[\"PrimaryA100\"] = \"--palette-primary-A100\";\n  MaterialCssVariables[\"PrimaryA200\"] = \"--palette-primary-A200\";\n  MaterialCssVariables[\"PrimaryA400\"] = \"--palette-primary-A400\";\n  MaterialCssVariables[\"PrimaryA700\"] = \"--palette-primary-A700\";\n  MaterialCssVariables[\"PrimaryContrast50\"] = \"--palette-primary-contrast-50\";\n  MaterialCssVariables[\"PrimaryContrast100\"] = \"--palette-primary-contrast-100\";\n  MaterialCssVariables[\"PrimaryContrast200\"] = \"--palette-primary-contrast-200\";\n  MaterialCssVariables[\"PrimaryContrast300\"] = \"--palette-primary-contrast-300\";\n  MaterialCssVariables[\"PrimaryContrast400\"] = \"--palette-primary-contrast-400\";\n  MaterialCssVariables[\"PrimaryContrast500\"] = \"--palette-primary-contrast-500\";\n  MaterialCssVariables[\"PrimaryContrast600\"] = \"--palette-primary-contrast-600\";\n  MaterialCssVariables[\"PrimaryContrast700\"] = \"--palette-primary-contrast-700\";\n  MaterialCssVariables[\"PrimaryContrast800\"] = \"--palette-primary-contrast-800\";\n  MaterialCssVariables[\"PrimaryContrast900\"] = \"--palette-primary-contrast-900\";\n  MaterialCssVariables[\"PrimaryContrastA100\"] = \"--palette-primary-contrast-A100\";\n  MaterialCssVariables[\"PrimaryContrastA200\"] = \"--palette-primary-contrast-A200\";\n  MaterialCssVariables[\"PrimaryContrastA400\"] = \"--palette-primary-contrast-A400\";\n  MaterialCssVariables[\"PrimaryContrastA700\"] = \"--palette-primary-contrast-A700\";\n  // ACCENT\n  MaterialCssVariables[\"Accent50\"] = \"--palette-accent-50\";\n  MaterialCssVariables[\"Accent100\"] = \"--palette-accent-100\";\n  MaterialCssVariables[\"Accent200\"] = \"--palette-accent-200\";\n  MaterialCssVariables[\"Accent300\"] = \"--palette-accent-300\";\n  MaterialCssVariables[\"Accent400\"] = \"--palette-accent-400\";\n  MaterialCssVariables[\"Accent500\"] = \"--palette-accent-500\";\n  MaterialCssVariables[\"Accent600\"] = \"--palette-accent-600\";\n  MaterialCssVariables[\"Accent700\"] = \"--palette-accent-700\";\n  MaterialCssVariables[\"Accent800\"] = \"--palette-accent-800\";\n  MaterialCssVariables[\"Accent900\"] = \"--palette-accent-900\";\n  MaterialCssVariables[\"AccentA100\"] = \"--palette-accent-A100\";\n  MaterialCssVariables[\"AccentA200\"] = \"--palette-accent-A200\";\n  MaterialCssVariables[\"AccentA400\"] = \"--palette-accent-A400\";\n  MaterialCssVariables[\"AccentA700\"] = \"--palette-accent-A700\";\n  MaterialCssVariables[\"DarkAccentText\"] = \"--dark-accent-text\";\n  MaterialCssVariables[\"LightAccentText\"] = \"--light-accent-text\";\n  // WARN\n  MaterialCssVariables[\"Warn50\"] = \"--palette-warn-50\";\n  MaterialCssVariables[\"Warn100\"] = \"--palette-warn-100\";\n  MaterialCssVariables[\"Warn200\"] = \"--palette-warn-200\";\n  MaterialCssVariables[\"Warn300\"] = \"--palette-warn-300\";\n  MaterialCssVariables[\"Warn400\"] = \"--palette-warn-400\";\n  MaterialCssVariables[\"Warn500\"] = \"--palette-warn-500\";\n  MaterialCssVariables[\"Warn600\"] = \"--palette-warn-600\";\n  MaterialCssVariables[\"Warn700\"] = \"--palette-warn-700\";\n  MaterialCssVariables[\"Warn800\"] = \"--palette-warn-800\";\n  MaterialCssVariables[\"Warn900\"] = \"--palette-warn-900\";\n  MaterialCssVariables[\"WarnA100\"] = \"--palette-warn-A100\";\n  MaterialCssVariables[\"WarnA200\"] = \"--palette-warn-A200\";\n  MaterialCssVariables[\"WarnA400\"] = \"--palette-warn-A400\";\n  MaterialCssVariables[\"WarnA700\"] = \"--palette-warn-A700\";\n  MaterialCssVariables[\"DarkWarnText\"] = \"--dark-warn-text\";\n  MaterialCssVariables[\"LightWarnText\"] = \"--light-warn-text\";\n  return MaterialCssVariables;\n})();\nconst DEFAULT_MAT_CSS_CFG = {\n  isAutoContrast: true,\n  isAlternativeColorAlgorithm: false,\n  darkThemeClass: 'isDarkTheme',\n  lightThemeClass: 'isLightTheme',\n  colorMap: [{\n    name: '50',\n    map: [52, 0, 0]\n  }, {\n    name: '100',\n    map: [37, 0, 0]\n  }, {\n    name: '200',\n    map: [26, 0, 0]\n  }, {\n    name: '300',\n    map: [12, 0, 0]\n  }, {\n    name: '400',\n    map: [6, 0, 0]\n  }, {\n    name: '500',\n    map: [0, 0, 0]\n  }, {\n    name: '600',\n    map: [0, 6, 0]\n  }, {\n    name: '700',\n    map: [0, 12, 0]\n  }, {\n    name: '800',\n    map: [0, 18, 0]\n  }, {\n    name: '900',\n    map: [0, 24, 0]\n  }, {\n    name: 'A100',\n    map: [50, 0, 30]\n  }, {\n    name: 'A200',\n    map: [30, 0, 30]\n  }, {\n    name: 'A400',\n    map: [10, 0, 15]\n  }, {\n    name: 'A700',\n    map: [5, 0, 5]\n  }],\n  sortedHues: ['50', '100', '200', '300', '400', '500', '600', '700', '800', '900']\n};\nconst MATERIAL_CSS_VARS_CFG = new InjectionToken('Mat Css Config');\n\n// @see: https://github.com/angular/angular/issues/20351\n/** @dynamic */\nlet MaterialCssVarsService = /*#__PURE__*/(() => {\n  class MaterialCssVarsService {\n    static #_ = this.CONTRAST_PREFIX = 'contrast-';\n    static #_2 = this.DARK_TEXT_VAR = '--dark-primary-text';\n    static #_3 = this.LIGHT_TEXT_VAR = '--light-primary-text';\n    constructor(rendererFactory, document, cfg) {\n      this.document = document;\n      this.contrastColorThresholdPrimary = '400';\n      this.contrastColorThresholdAccent = '400';\n      this.contrastColorThresholdWarn = '400';\n      this.isAutoContrast = false;\n      this.renderer = rendererFactory.createRenderer(null, null);\n      this.ROOT = this.document.documentElement;\n      this.cfg = {\n        ...DEFAULT_MAT_CSS_CFG,\n        ...cfg\n      };\n      this.isAutoContrast = this.cfg.isAutoContrast;\n      if (typeof this.cfg.isDarkTheme === 'boolean') {\n        this.setDarkTheme(this.cfg.isDarkTheme);\n      }\n      if (this.cfg.primary) {\n        this.setPrimaryColor(this.cfg.primary);\n      }\n      if (this.cfg.accent) {\n        this.setAccentColor(this.cfg.accent);\n      }\n      if (this.cfg.warn) {\n        this.setWarnColor(this.cfg.warn);\n      }\n    }\n    setPrimaryColor(hex) {\n      this.primary = hex;\n      const varPrefix = MatCssPalettePrefix.Primary;\n      const stylePrimary = this._computePaletteColors(varPrefix, this.primary);\n      this._setStyle(stylePrimary);\n      if (this.isAutoContrast) {\n        this._recalculateAndSetContrastColor(varPrefix);\n      }\n    }\n    setAccentColor(hex) {\n      this.accent = hex;\n      const varPrefix = MatCssPalettePrefix.Accent;\n      const styleAccent = this._computePaletteColors(varPrefix, this.accent);\n      this._setStyle(styleAccent);\n      if (this.isAutoContrast) {\n        this._recalculateAndSetContrastColor(varPrefix);\n      }\n    }\n    setWarnColor(hex) {\n      this.warn = hex;\n      const varPrefix = MatCssPalettePrefix.Warn;\n      const styleWarn = this._computePaletteColors(varPrefix, this.warn);\n      this._setStyle(styleWarn);\n      if (this.isAutoContrast) {\n        this._recalculateAndSetContrastColor(varPrefix);\n      }\n    }\n    setVariable(cssVarName, value) {\n      this._setStyle([{\n        name: cssVarName,\n        val: value\n      }]);\n    }\n    setDarkTheme(isDark) {\n      if (isDark) {\n        this.document.body.classList.remove(this.cfg.lightThemeClass);\n        this.document.body.classList.add(this.cfg.darkThemeClass);\n      } else {\n        this.document.body.classList.remove(this.cfg.darkThemeClass);\n        this.document.body.classList.add(this.cfg.lightThemeClass);\n      }\n      this.isDarkTheme = isDark;\n    }\n    setAutoContrastEnabled(val) {\n      this.isAutoContrast = val;\n      if (val) {\n        this._recalculateAndSetContrastColor(MatCssPalettePrefix.Primary);\n        this._recalculateAndSetContrastColor(MatCssPalettePrefix.Accent);\n        this._recalculateAndSetContrastColor(MatCssPalettePrefix.Warn);\n      } else {\n        this.setContrastColorThresholdPrimary(this.contrastColorThresholdPrimary);\n        this.setContrastColorThresholdAccent(this.contrastColorThresholdAccent);\n        this.setContrastColorThresholdWarn(this.contrastColorThresholdWarn);\n      }\n    }\n    setContrastColorThresholdPrimary(threshold) {\n      this.contrastColorThresholdPrimary = threshold;\n      this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Primary);\n    }\n    setContrastColorThresholdAccent(threshold) {\n      this.contrastColorThresholdAccent = threshold;\n      this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Accent);\n    }\n    setContrastColorThresholdWarn(threshold) {\n      this.contrastColorThresholdWarn = threshold;\n      this.setContrastColorThreshold(threshold, MatCssPalettePrefix.Warn);\n    }\n    setContrastColorThreshold(threshold, palettePrefix) {\n      if (!threshold || !palettePrefix || this.isAutoContrast) {\n        return;\n      }\n      let color = MaterialCssVarsService.DARK_TEXT_VAR;\n      const updates = this.cfg.sortedHues.map(hue => {\n        if (hue === threshold) {\n          color = MaterialCssVarsService.LIGHT_TEXT_VAR;\n        }\n        return {\n          val: `var(${color})`,\n          name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`\n        };\n      });\n      this._setStyle(updates);\n    }\n    /**\n     * Generate palette color based on traditional values\n     */\n    setAlternativeColorAlgorithm(traditional) {\n      this.cfg.isAlternativeColorAlgorithm = traditional;\n      this.setPrimaryColor(this.primary);\n      this.setAccentColor(this.accent);\n      this.setWarnColor(this.warn);\n    }\n    /** @deprecated use setContrastColorThresholdPrimary instead */\n    changeContrastColorThresholdPrimary(threshold) {\n      this.setContrastColorThresholdPrimary(threshold);\n    }\n    /** @deprecated use setContrastColorThresholdAccent instead */\n    changeContrastColorThresholdAccent(threshold) {\n      this.setContrastColorThresholdAccent(threshold);\n    }\n    /** @deprecated use setContrastColorThresholdWarn instead */\n    changeContrastColorThresholdWarn(threshold) {\n      this.setContrastColorThresholdWarn(threshold);\n    }\n    /** @deprecated use setContrastColorThreshold instead */\n    changeContrastColorThreshold(threshold, palettePrefix) {\n      this.setContrastColorThreshold(threshold, palettePrefix);\n    }\n    getPaletteForColor(hex) {\n      if (this.cfg.isAlternativeColorAlgorithm) {\n        return this.getTraditionalPaletteForColor(hex);\n      } else {\n        return this.getConstantinPaletteForColor(hex);\n      }\n    }\n    getTraditionalPaletteForColor(hex) {\n      return this.cfg.colorMap.map(item => {\n        const mappedColor = new TinyColor(hex).lighten(item.map[0]).darken(item.map[1]).saturate(item.map[2]);\n        const c = new TinyColor(mappedColor);\n        return {\n          hue: item.name,\n          isLight: c.isLight(),\n          color: {\n            ...c.toRgb(),\n            str: `rgb(${c.toRgb().r},${c.toRgb().g},${c.toRgb().b})`\n          }\n        };\n      });\n    }\n    getConstantinPaletteForColor(hex) {\n      return this.cfg.colorMap.map(item => {\n        const c = this.computePalletTriad(hex, item.name);\n        return {\n          hue: item.name,\n          isLight: c.isLight,\n          color: {\n            ...c.rgb,\n            str: `rgb(${c.rgb.r},${c.rgb.g},${c.rgb.b})`\n          }\n        };\n      });\n    }\n    getPaletteWithContrastForColor(hex) {\n      const lightText = this._getCssVarValue(MaterialCssVarsService.LIGHT_TEXT_VAR);\n      const darkText = this._getCssVarValue(MaterialCssVarsService.DARK_TEXT_VAR);\n      const palette = this.getPaletteForColor(hex);\n      // TODO handle non auto case\n      return palette.map(item => {\n        const contrastStr = item.isLight ? lightText : darkText;\n        const sLight = this._replaceNoRgbValue('', contrastStr).split(',').map(v => +v);\n        const cco = {\n          r: sLight[0],\n          g: sLight[1],\n          b: sLight[2],\n          a: 1\n        };\n        return {\n          ...item,\n          contrast: {\n            ...cco,\n            str: `${cco.r},${cco.g},${cco.b}`\n          }\n        };\n      });\n    }\n    _computePaletteColors(prefix, hex) {\n      return this.getPaletteForColor(hex).map(item => {\n        const c = item.color;\n        return {\n          name: `${prefix}${item.hue}`,\n          val: `rgb(${c.r}, ${c.g}, ${c.b})`\n        };\n      });\n    }\n    _recalculateAndSetContrastColor(palettePrefix) {\n      const updates = this._calculateContrastColorsForCurrentValues(palettePrefix).map(({\n        contrastColorVar,\n        hue\n      }) => {\n        return {\n          val: `var(${contrastColorVar})`,\n          name: `${palettePrefix + MaterialCssVarsService.CONTRAST_PREFIX}${hue}`\n        };\n      });\n      this._setStyle(updates);\n    }\n    _calculateContrastColorsForCurrentValues(palettePrefix) {\n      return this.cfg.sortedHues.map(hue => {\n        const hueVarVal = this._getCssVarValue(`${palettePrefix}${hue}`);\n        const c = new TinyColor(`rgb(${hueVarVal})`);\n        const contrastColorVar = c.isDark() ? MaterialCssVarsService.LIGHT_TEXT_VAR : MaterialCssVarsService.DARK_TEXT_VAR;\n        return {\n          contrastColorVar,\n          hue\n        };\n      });\n    }\n    _setStyle(vars) {\n      vars.forEach(s => {\n        this.renderer.setStyle(this.ROOT, s.name, s.val, RendererStyleFlags2.DashCase);\n        this.renderer.setStyle(this.ROOT, s.name + '-no-rgb', this._replaceNoRgbValue(s.name, s.val), RendererStyleFlags2.DashCase);\n      });\n    }\n    /**\n     * Replace variables that are formatted as rgba(var(rgb(xxx))) to be var(xxx) to allow proper formatting\n     * in variable overrides.\n     * @param value\n     * @returns\n     */\n    _replaceNoRgbValue(name, value) {\n      const isContrast = name.includes(MaterialCssVarsService.CONTRAST_PREFIX);\n      let noRgb = '';\n      if (isContrast) {\n        noRgb = value.replace(')', '-no-rgb)');\n      } else {\n        noRgb = value.replace('rgba(', '').replace('rgb(', '').replace(')', '');\n        if (noRgb.startsWith('var(')) {\n          noRgb = noRgb.concat(')');\n        }\n      }\n      return noRgb;\n    }\n    _getCssVarValue(v) {\n      return getComputedStyle(this.ROOT).getPropertyValue(v);\n    }\n    /**\n     * Compute pallet colors based on a Triad (Constantin)\n     * see: https://github.com/mbitson/mcg\n     */\n    computePalletTriad(hex, hue) {\n      const baseLight = new TinyColor('#ffffff');\n      const baseDark = this.multiply(new TinyColor(hex).toRgb(), new TinyColor(hex).toRgb());\n      const baseTriad = new TinyColor(hex).tetrad();\n      let color;\n      switch (hue) {\n        case '50':\n          color = this.getColorObject(baseLight.mix(hex, 12));\n          break;\n        case '100':\n          color = this.getColorObject(baseLight.mix(hex, 30));\n          break;\n        case '200':\n          color = this.getColorObject(baseLight.mix(hex, 50));\n          break;\n        case '300':\n          color = this.getColorObject(baseLight.mix(hex, 70));\n          break;\n        case '400':\n          color = this.getColorObject(baseLight.mix(hex, 85));\n          break;\n        case '500':\n          color = this.getColorObject(baseLight.mix(hex, 100));\n          break;\n        case '600':\n          color = this.getColorObject(baseDark.mix(hex, 87));\n          break;\n        case '700':\n          color = this.getColorObject(baseDark.mix(hex, 70));\n          break;\n        case '800':\n          color = this.getColorObject(baseDark.mix(hex, 54));\n          break;\n        case '900':\n          color = this.getColorObject(baseDark.mix(hex, 25));\n          break;\n        case 'A100':\n          color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(65));\n          break;\n        case 'A200':\n          color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(80).lighten(55));\n          break;\n        case 'A400':\n          color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(45));\n          break;\n        case 'A700':\n          color = this.getColorObject(baseDark.mix(baseTriad[4], 15).saturate(100).lighten(40));\n          break;\n        default:\n          break;\n      }\n      return color;\n    }\n    multiply(rgb1, rgb2) {\n      rgb1.b = Math.floor(rgb1.b * rgb2.b / 255);\n      rgb1.g = Math.floor(rgb1.g * rgb2.g / 255);\n      rgb1.r = Math.floor(rgb1.r * rgb2.r / 255);\n      return new TinyColor('rgb ' + rgb1.r + ' ' + rgb1.g + ' ' + rgb1.b);\n    }\n    getColorObject(value) {\n      const c = new TinyColor(value);\n      return {\n        rgb: c.toRgb(),\n        isLight: c.isLight()\n      };\n    }\n    static #_4 = this.ɵfac = function MaterialCssVarsService_Factory(t) {\n      return new (t || MaterialCssVarsService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(MATERIAL_CSS_VARS_CFG));\n    };\n    static #_5 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MaterialCssVarsService,\n      factory: MaterialCssVarsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MaterialCssVarsService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MaterialCssVarsModule = /*#__PURE__*/(() => {\n  class MaterialCssVarsModule {\n    static forRoot(config) {\n      return {\n        ngModule: MaterialCssVarsModule,\n        providers: [{\n          provide: MATERIAL_CSS_VARS_CFG,\n          useValue: config\n        }]\n      };\n    }\n    // This is necessary so the service is constructed, even if the service is never injected\n    constructor(materialCssVarsService) {\n      this.materialCssVarsService = materialCssVarsService;\n    }\n    static #_ = this.ɵfac = function MaterialCssVarsModule_Factory(t) {\n      return new (t || MaterialCssVarsModule)(i0.ɵɵinject(MaterialCssVarsService));\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MaterialCssVarsModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return MaterialCssVarsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of material-css-vars\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCssPalettePrefix, MaterialCssVariables, MaterialCssVarsModule, MaterialCssVarsService };\n//# sourceMappingURL=angular-material-css-vars.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}