{"ast":null,"code":"import { DashboardStatusPieChartComponent } from '../../widgets/dashboard-status-pie-chart/modal/dashboard-status-pie-chart.component';\nimport { EscalationAlertsGridComponent } from '../../widgets/escalation-alerts-grid/modal/escalation-alerts-grid.component';\nimport { CompleteByAlertComponent } from '../../widgets/complete-by-alert/modal/complete-by-alert.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/ui/Helpdesk/work-request/service/add-work-request.services\";\nimport * as i2 from \"src/app/ui/app-params/services/app-params.service\";\nimport * as i3 from \"src/app/services/enum.service\";\nimport * as i4 from \"src/app/services/auth.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"primeng/api\";\nimport * as i7 from \"primeng/dialog\";\nimport * as i8 from \"primeng/card\";\nimport * as i9 from \"primeng/chart\";\nimport * as i10 from \"../../widgets/complete-by-alert/modal/complete-by-alert.component\";\nimport * as i11 from \"../../widgets/dashboard-my-requests-grid/modal/dashboard-my-requests-grid.component\";\nimport * as i12 from \"../../widgets/dashboard-status-pie-chart/modal/dashboard-status-pie-chart.component\";\nimport * as i13 from \"../../widgets/escalation-alerts-grid/modal/escalation-alerts-grid.component\";\nimport * as i14 from \"../../../Helpdesk/requests-by-asset-reports/widgets/add-table/add-table.component\";\nfunction SupervisorDashboardComponent_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\", 16);\n    i0.ɵɵtext(1, \"Request List\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SupervisorDashboardComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-add-table\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r1.detailsPopUpData)(\"isEscalatedData\", ctx_r1.viewForEscalation);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"66vw\"\n  };\n};\nexport let SupervisorDashboardComponent = /*#__PURE__*/(() => {\n  class SupervisorDashboardComponent {\n    constructor(addWorkRequestService, appParamsServ, enumsrv, authServ, datePipe) {\n      this.addWorkRequestService = addWorkRequestService;\n      this.appParamsServ = appParamsServ;\n      this.enumsrv = enumsrv;\n      this.authServ = authServ;\n      this.datePipe = datePipe;\n      this.allRequestData = [];\n      this.enumList = [];\n      this.enumClonedList = [];\n      this.enumWr = [];\n      this.enumStatus = [];\n      this.noEsctdData = [];\n      this.myRequestsData = [];\n      this.noEscalatedPercent = 0;\n      this.statusChartData = [];\n      this.autoRefreshTime = 60;\n      this.escalatedData = [];\n      this.allEscalatedData = [];\n      this.detailsPopUpData = [];\n      this.showPopupFlag = false;\n      this.viewForEscalation = true;\n      this.initialStatusChartData = {\n        requested: {\n          id: 'requested',\n          label: 'Requested',\n          data: []\n        },\n        approved: {\n          id: 'approved',\n          label: 'Approved',\n          data: []\n        },\n        rejected: {\n          id: 'rejected',\n          label: 'Rejected',\n          data: []\n        },\n        inProcess: {\n          id: 'inProcess',\n          label: 'In Process',\n          data: []\n        },\n        onHoldForAccess: {\n          id: 'onHoldForAccess',\n          label: 'On Hold For Access',\n          data: []\n        },\n        onHoldForParts: {\n          id: 'onHoldForParts',\n          label: 'On Hold For Parts',\n          data: []\n        },\n        onHoldForLabour: {\n          id: 'onHoldForLabour',\n          label: 'On Hold For Labour',\n          data: []\n        },\n        completed: {\n          id: 'completed',\n          label: 'Completed',\n          data: []\n        },\n        close: {\n          id: 'close',\n          label: 'Close',\n          data: []\n        },\n        cancelled: {\n          id: 'cancelled',\n          label: 'Cancelled',\n          data: []\n        }\n      };\n      this.months = [{\n        id: 0,\n        label: 'Make a selection'\n      }, {\n        id: 1,\n        label: \"January\"\n      }, {\n        id: 2,\n        label: \"February\"\n      }, {\n        id: 3,\n        label: \"March\"\n      }, {\n        id: 4,\n        label: \"April\"\n      }, {\n        id: 5,\n        label: \"May\"\n      }, {\n        id: 6,\n        label: \"June\"\n      }, {\n        id: 7,\n        label: \"July\"\n      }, {\n        id: 8,\n        label: \"August\"\n      }, {\n        id: 9,\n        label: \"September\"\n      }, {\n        id: 10,\n        label: \"October\"\n      }, {\n        id: 11,\n        label: \"November\"\n      }, {\n        id: 12,\n        label: \"December\"\n      }];\n      this.hrOptions = {\n        indexAxis: 'y',\n        tooltips: {\n          enabled: true,\n          mode: 'index',\n          intersect: false,\n          callbacks: {\n            label(tooltipItem, data) {\n              const tooltipValue = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n              return parseInt(tooltipValue, 10).toLocaleString();\n            },\n            title(tooltipItem, data) {\n              return data.labels[tooltipItem[0].index];\n            }\n          },\n          position: 'average',\n          zIndex: 1000\n        },\n        responsive: true,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutBounce'\n        },\n        layout: {\n          padding: {\n            left: 0,\n            right: 10\n          }\n        },\n        legend: {\n          display: false\n        },\n        plugins: {\n          datalabels: {\n            display: true,\n            anchor: 'start',\n            align: 'start',\n            formatter(value) {\n              return parseInt(value, 10).toLocaleString();\n            },\n            color: '#777777',\n            font: {\n              weight: 500,\n              family: 'Roboto',\n              size: 10\n            },\n            clamp: true\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            display: true,\n            stacked: false,\n            grid: {\n              display: false\n            },\n            ticks: {\n              beginAtZero: true\n            },\n            title: {\n              display: true,\n              text: 'Request Count',\n              fontStyle: 'bold'\n            }\n          },\n          y: {\n            display: true,\n            barThickness: 30,\n            stacked: true,\n            title: {\n              display: false\n            },\n            grid: {\n              display: false\n            }\n          }\n        }\n      };\n    }\n    ngOnInit() {\n      this.loadEnums();\n      this.loadAppParamsById();\n    }\n    ngOnDestroy() {\n      // Clear the interval when the component is destroyed\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    }\n    loadEnums() {\n      this.enumList = [];\n      this.enumsrv.getEnums().subscribe(res => {\n        this.enumList = res;\n        this.enumClonedList = this.enumList.map(x => Object.assign({}, x));\n        // this.enumWr = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase());\n        this.enumStatus = this.enumClonedList.filter(t => t.tableName.toLocaleUpperCase() === 'wr'.toLocaleUpperCase() && t.fieldName.toLocaleUpperCase() === 'status'.toLocaleUpperCase());\n      });\n    }\n    loadAppParamsById() {\n      this.appParamsServ.getAppParamByCode('financial_year').subscribe(res => {\n        if (res) {\n          const selectedMonth = res.paramValue;\n          const selectedMonthData = this.months.find(month => month.label.toUpperCase() === selectedMonth.toUpperCase());\n          const selectedMonthId = selectedMonthData.id;\n          if (selectedMonthId > 0) {\n            const endYearData = this.calculateFinancialYear(selectedMonthId);\n            this.dateRequestedFrom = endYearData.startDate;\n            this.dateRequestedTo = endYearData.endDate;\n            this.loadWrRecords();\n          }\n        }\n      });\n    }\n    loadWrRecords() {\n      const filterData = {\n        dateRequestedFrom: this.dateRequestedFrom,\n        dateRequestedTo: this.dateRequestedTo\n      };\n      this.addWorkRequestService.getAllWrByFilter(filterData).subscribe(res => {\n        if (res) {\n          this.allRequestData = res.map(each => {\n            return {\n              ...each,\n              formatedDateRequested: this.datePipe.transform(each.dateRequested, 'dd MMM yyyy'),\n              fromatedDateToRespond: each.escDateResponded ? this.datePipe.transform(each.escDateResponded, 'dd MMM yyyy') + \" \" + this.convertToDisplayTime(each.escTimeResponded) : '',\n              formatedDateResponded: each.dateResponded ? this.datePipe.transform(each.dateResponded, 'dd MMM yyyy') + ' ' + this.convertToDisplayTime(each.timeResponded) : '',\n              formatedDateToComplete: each.escDateCompleted ? this.datePipe.transform(each.escDateCompleted, 'dd MMM yyyy') + ' ' + this.convertToDisplayTime(each.escTimeCompleted) : '',\n              formatedDateCompleted: each.dateCompleted ? this.datePipe.transform(each.dateCompleted, 'dd MMM yyyy') + ' ' + this.convertToDisplayTime(each.timeCompleted) : ''\n            };\n          });\n          this.completeByAlertComponent.createAlerts(this.allRequestData);\n          this.filterByStatus();\n          this.filterByEscaltion();\n          this.filterByMyRequest();\n        }\n      });\n    }\n    filterByStatus() {\n      this.statusChartData = {\n        ...this.initialStatusChartData\n      };\n      setTimeout(() => {\n        this.statusChartData.requested.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Requested'));\n        this.statusChartData.approved.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Approved'));\n        this.statusChartData.rejected.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Rejected'));\n        this.statusChartData.onHoldForAccess.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('On Hold For Access'));\n        this.statusChartData.onHoldForParts.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('On Hold For Parts'));\n        this.statusChartData.onHoldForLabour.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('On Hold For Labour'));\n        this.statusChartData.inProcess.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('In Process'));\n        this.statusChartData.completed.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Completed'));\n        this.statusChartData.close.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Close'));\n        this.statusChartData.cancelled.data = this.allRequestData.filter(wr => wr.status === this.getIdByStatus('Cancelled'));\n      }, 0);\n      setTimeout(() => {\n        this.dashboardStatusPieChartComponent.loadPieData(this.statusChartData);\n      }, 10);\n    }\n    filterByEscaltion() {\n      this.noEscalatedPercent = 0;\n      this.noEsctdData = [];\n      this.escalatedData = [];\n      this.allEscalatedData = [];\n      setTimeout(() => {\n        let currentDate = new Date();\n        this.allRequestData.forEach(item => {\n          const {\n            dateResponded,\n            escDateResponded,\n            dateCompleted,\n            escDateCompleted,\n            timeResponded,\n            timeCompleted,\n            escTimeResponded,\n            escTimeCompleted,\n            status\n          } = item;\n          const isEscalatedForResponse = dateResponded && new Date(dateResponded + 'T' + timeResponded).getTime() > new Date(escDateResponded + 'T' + escTimeResponded).getTime() || !dateResponded && currentDate.getTime() > new Date(escDateResponded + 'T' + escTimeResponded).getTime();\n          const isEscalatedForComplete = dateCompleted && new Date(dateCompleted + 'T' + timeCompleted).getTime() > new Date(escDateCompleted + 'T' + escTimeCompleted).getTime() || !dateCompleted && currentDate.getTime() > new Date(escDateCompleted + 'T' + escTimeCompleted).getTime();\n          if (!isEscalatedForResponse && !isEscalatedForComplete && this.getValueById(status)?.toUpperCase() !== 'Cancelled'.toUpperCase()) {\n            this.noEsctdData.push(item);\n          }\n          if ((isEscalatedForResponse || isEscalatedForComplete) && this.getValueById(status)?.toUpperCase() !== 'Cancelled'.toUpperCase()) {\n            this.escalatedData.push(item);\n          }\n        });\n        this.allEscalatedData = this.noEsctdData.concat(this.escalatedData);\n        this.noEscalatedPercent = (this.noEsctdData.length / this.allEscalatedData.length * 100).toFixed(2); // upto two decimal \n      }, 0);\n      setTimeout(() => {\n        this.escalationAlertsGridComponent.setEscalatedPercantage(this.noEscalatedPercent);\n        this.setChartData(this.allEscalatedData.length, this.noEsctdData.length, this.escalatedData.length);\n      }, 10);\n    }\n    filterByMyRequest() {\n      this.myRequestsData = [];\n      setTimeout(() => {\n        const loggedInUserId = this.authServ.getLoggedInUserEMId();\n        this.allRequestData.sort((a, b) => b.wrId - a.wrId).filter(eachRecord => {\n          if (eachRecord.requestedFor === loggedInUserId || eachRecord.requestedBy === loggedInUserId || eachRecord.isTechnician === '1') {\n            this.myRequestsData.push(eachRecord);\n          }\n        });\n      }, 0);\n    }\n    getIdByStatus(status) {\n      return this.enumStatus.find(t => t.enumValue.toUpperCase() === status.toUpperCase())?.enumKey;\n    }\n    getValueById(enumKey) {\n      return this.enumStatus.find(t => t.enumKey === enumKey)?.enumValue;\n    }\n    calculateFinancialYear(startingMonth) {\n      const today = new Date(); // Get the current date\n      const currentYear = today.getFullYear(); // Get the current year\n      // Create a new date object for the start of the financial year\n      const financialYearStart = new Date(currentYear, startingMonth - 1, 1);\n      // Get the start day of the financial year\n      const startDay = financialYearStart.getDate();\n      // Create a new date object for the end of the financial year\n      const financialYearEnd = new Date(currentYear + 1, startingMonth - 1, 0);\n      // Get the end day of the financial year\n      const endDay = financialYearEnd.getDate();\n      const endMonth = financialYearEnd.getMonth() + 1;\n      const SelectedEndMonthLable = this.months.find(month => month.id === endMonth);\n      const endMonthLable = SelectedEndMonthLable.label;\n      // Format the start and end dates as full dates\n      const startDate = this.datePipe.transform(financialYearStart, \"yyyy-MM-dd\");\n      const endDate = this.datePipe.transform(financialYearEnd, \"yyyy-MM-dd\");\n      // Return the start and end dates\n      return {\n        startDay,\n        startDate,\n        endDay,\n        endDate,\n        endMonthLable\n      };\n    }\n    onClickBarChart(event) {\n      this.detailsPopUpData = [];\n      const selectedLabel = this.basicData.labels[event.element.index];\n      switch (selectedLabel) {\n        case 'Total':\n          this.detailsPopUpData.push(...this.allEscalatedData);\n          break;\n        case 'Non Escalated':\n          this.detailsPopUpData.push(...this.noEsctdData);\n          break;\n        case 'Escalated':\n          this.detailsPopUpData.push(...this.escalatedData);\n          break;\n        default:\n          break;\n      }\n      this.showPopupFlag = true;\n    }\n    setChartData(total, nonEscalated, escalated) {\n      this.basicData = {\n        labels: ['Total', 'Non Escalated', 'Escalated'],\n        datasets: [{\n          label: '',\n          backgroundColor: ['blue', 'green', 'red'],\n          data: [total, nonEscalated, escalated]\n        }]\n      };\n    }\n    convertToDisplayTime(value) {\n      if (value != null) {\n        var data = value.split(':');\n        var time = data[0] + ':' + data[1];\n        return time;\n      } else {\n        return '';\n      }\n    }\n    static #_ = this.ɵfac = function SupervisorDashboardComponent_Factory(t) {\n      return new (t || SupervisorDashboardComponent)(i0.ɵɵdirectiveInject(i1.AddWorkRequestService), i0.ɵɵdirectiveInject(i2.AppParamsService), i0.ɵɵdirectiveInject(i3.EnumService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.DatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SupervisorDashboardComponent,\n      selectors: [[\"app-supervisor-dashboard\"]],\n      viewQuery: function SupervisorDashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(DashboardStatusPieChartComponent, 5);\n          i0.ɵɵviewQuery(EscalationAlertsGridComponent, 5);\n          i0.ɵɵviewQuery(CompleteByAlertComponent, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dashboardStatusPieChartComponent = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.escalationAlertsGridComponent = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.completeByAlertComponent = _t.first);\n        }\n      },\n      decls: 24,\n      vars: 20,\n      consts: [[\"width\", \"100%\", 2, \"height\", \"92vh\"], [\"width\", \"40%\", \"height\", \"40%\"], [\"id\", \"SLACompliance\", 3, \"header\"], [3, \"allEscalatedData\", \"noEsctdData\", \"escalatedData\"], [\"width\", \"60%\", \"height\", \"40%\"], [3, \"header\"], [3, \"statusChartData\"], [\"width\", \"40%\", \"height\", \"60%\"], [\"width\", \"100%\", \"height\", \"100%\"], [\"width\", \"50%\", \"height\", \"50%\"], [\"type\", \"bar\", \"height\", \"200\", \"width\", \"240\", 3, \"data\", \"options\", \"onDataSelect\"], [\"width\", \"60%\", \"height\", \"60%\"], [3, \"myRequestsData\"], [\"styleClass\", \"dark-panel\", 3, \"visible\", \"modal\", \"maximizable\", \"draggable\", \"resizable\", \"visibleChange\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [2, \"margin\", \"0px\"], [3, \"data\", \"isEscalatedData\"]],\n      template: function SupervisorDashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"tr\")(2, \"td\", 1)(3, \"p-card\", 2);\n          i0.ɵɵelement(4, \"app-escalation-alerts-grid\", 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"td\", 4)(6, \"p-card\", 5);\n          i0.ɵɵelement(7, \"app-dashboard-status-pie-chart\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 7)(10, \"table\", 8)(11, \"tr\")(12, \"td\", 9)(13, \"p-card\", 5);\n          i0.ɵɵelement(14, \"app-complete-by-alert\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"td\", 9)(16, \"p-card\", 5)(17, \"p-chart\", 10);\n          i0.ɵɵlistener(\"onDataSelect\", function SupervisorDashboardComponent_Template_p_chart_onDataSelect_17_listener($event) {\n            return ctx.onClickBarChart($event);\n          });\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(18, \"td\", 11)(19, \"p-card\", 5);\n          i0.ɵɵelement(20, \"app-dashboard-my-requests-grid\", 12);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(21, \"p-dialog\", 13);\n          i0.ɵɵlistener(\"visibleChange\", function SupervisorDashboardComponent_Template_p_dialog_visibleChange_21_listener($event) {\n            return ctx.showPopupFlag = $event;\n          });\n          i0.ɵɵtemplate(22, SupervisorDashboardComponent_ng_template_22_Template, 2, 0, \"ng-template\", 14);\n          i0.ɵɵtemplate(23, SupervisorDashboardComponent_ng_template_23_Template, 1, 2, \"ng-template\", 15);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"header\", \"SLA Compliance\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"allEscalatedData\", ctx.allEscalatedData)(\"noEsctdData\", ctx.noEsctdData)(\"escalatedData\", ctx.escalatedData);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"header\", \"Requests By Status\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"statusChartData\", ctx.statusChartData);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"header\", \"Alerts\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"header\", \"Escalations\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"data\", ctx.basicData)(\"options\", ctx.hrOptions);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"header\", \"My Requests\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"myRequestsData\", ctx.myRequestsData);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(19, _c0));\n          i0.ɵɵproperty(\"visible\", ctx.showPopupFlag)(\"modal\", true)(\"maximizable\", true)(\"draggable\", false)(\"resizable\", false);\n        }\n      },\n      dependencies: [i6.PrimeTemplate, i7.Dialog, i8.Card, i9.UIChart, i10.CompleteByAlertComponent, i11.DashboardMyRequestsGridComponent, i12.DashboardStatusPieChartComponent, i13.EscalationAlertsGridComponent, i14.AddTableComponent],\n      styles: [\".p-card{height:100%}[_nghost-%COMP%]     .p-card .p-card-content{height:35vh}\"]\n    });\n  }\n  return SupervisorDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}