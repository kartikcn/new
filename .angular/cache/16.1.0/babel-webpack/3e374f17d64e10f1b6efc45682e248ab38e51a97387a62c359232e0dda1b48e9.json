{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/shared.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router, ss) {\n      this.authService = authService;\n      this.router = router;\n      this.ss = ss;\n    }\n    canActivate(next, state) {\n      const url = state.url;\n      return this.checkLogin(url);\n    }\n    canActivateChild(next, state) {\n      const url = state.url;\n      return this.checkLogin(url);\n    }\n    canLoad(route, segments) {\n      return true;\n    }\n    canDeactivate(component, route, state) {\n      let url = state.url;\n      return component.canDeactivate ? component.canDeactivate() : true;\n    }\n    checkLogin(url) {\n      // Return true if logged in otherwise return false\n      if (this.authService.isLoggedIn()) {\n        // setTimeout(() => {\n        //   this.ss.change(this.authService.isLoggedIn());\n        // });\n        return true;\n      }\n      this.authService.redirectUrl = url;\n      // Return login url with where it from \n      return this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: url\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SharedService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}