{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../../directive/numbers-only.directive\";\nimport * as i3 from \"../../../../directive/directive/trim-input.directive\";\nimport * as i4 from \"ng-zorro-antd/table\";\nimport * as i5 from \"ng-zorro-antd/form\";\nexport class EmployeeContactComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.subscriptions = [];\n    this.isNew = false;\n    this.isEdit = false;\n    this.onChange = () => {};\n    this.onTouched = () => {};\n    // this.currentDate = this.datePipe.transform(new Date(), \"yyyy/MM/dd hh:mm:ss\");\n    /// Start Of Building Form \n    this.frmEmployeeContact = this.formBuilder.group({\n      // phoneHome: [''],\n      phoneWork: [''],\n      phonePersonal: [''],\n      faxNum: [''],\n      altContactName: [''],\n      altContactPhone: ['']\n    });\n    // End Of Building Form\n    this.subscriptions.push(\n    // any time the inner form changes update the parent of any change\n    this.frmEmployeeContact.valueChanges.subscribe(value => {\n      this.onChange(value);\n      this.onTouched();\n    }));\n  }\n  ngOnInit() {}\n  /// Start Preparing Entered Data Model\n  get value() {\n    const details = {\n      // phoneHome: this.frmEmployeeContact.controls.phoneHome.value,\n      phoneWork: this.frmEmployeeContact.controls.phoneWork.value,\n      phonePersonal: this.frmEmployeeContact.controls.phonePersonal.value,\n      faxNum: this.frmEmployeeContact.controls.faxNum.value,\n      altContactName: this.frmEmployeeContact.controls.altContactName.value,\n      altContactPhone: this.frmEmployeeContact.controls.altContactPhone.value\n    };\n    return details;\n  }\n  set value(value) {\n    setTimeout(() => {\n      this.frmEmployeeContact.patchValue({\n        // phoneHome: value.phoneHome,\n        phoneWork: value.phoneWork,\n        phonePersonal: value.phonePersonal,\n        faxNum: value.faxNum,\n        altContactName: value.altContactName,\n        altContactPhone: value.altContactPhone\n      });\n      this.checkFormMode();\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  checkFormMode() {\n    if (this.isEdit == false) {\n      this.frmEmployeeContact.disable();\n    } else {\n      this.frmEmployeeContact.enable();\n    }\n  }\n  writeValue(value) {\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.frmEmployeeContact.reset();\n      this.checkFormMode();\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  // communicate the inner form validation to the parent form\n  validate(_) {\n    return this.frmEmployeeContact.valid ? null : {\n      frmEmployeeContact: {\n        valid: false\n      }\n    };\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n  static #_ = this.ɵfac = function EmployeeContactComponent_Factory(t) {\n    return new (t || EmployeeContactComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmployeeContactComponent,\n    selectors: [[\"app-employee-contact\"]],\n    inputs: {\n      isNew: \"isNew\",\n      isEdit: \"isEdit\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => EmployeeContactComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => EmployeeContactComponent),\n      multi: true\n    }])],\n    decls: 31,\n    vars: 1,\n    consts: [[\"nz-form\", \"\", 3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"50%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"phonePersonal\", \"formControlName\", \"phonePersonal\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"phoneWork\", \"formControlName\", \"phoneWork\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"faxNum\", \"formControlName\", \"faxNum\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"altContactName\", \"formControlName\", \"altContactName\", \"maxlength\", \"255\", \"appTrimInput\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"NumbersOnly\", \"\", \"name\", \"altContactPhone\", \"formControlName\", \"altContactPhone\", \"maxlength\", \"16\", \"appTrimInput\", \"\", 1, \"form-control\"]],\n    template: function EmployeeContactComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Personal Phone Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"td\", 2)(9, \"div\", 3)(10, \"label\", 4);\n        i0.ɵɵtext(11, \"Work Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 2)(15, \"div\", 3)(16, \"label\", 4);\n        i0.ɵɵtext(17, \"Fax Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"td\", 2)(20, \"div\", 3)(21, \"label\", 4);\n        i0.ɵɵtext(22, \"Preferred Contact Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"input\", 8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"tr\")(25, \"td\", 2)(26, \"div\", 3)(27, \"label\", 4);\n        i0.ɵɵtext(28, \"Alternate Contact Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(30, \"td\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.frmEmployeeContact);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i2.NumbersOnlyDirective, i3.TrimInputDirective, i4.NzTableCellDirective, i4.NzTrDirective, i5.NzFormDirective],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["forwardRef","NG_VALIDATORS","NG_VALUE_ACCESSOR","EmployeeContactComponent","constructor","formBuilder","subscriptions","isNew","isEdit","onChange","onTouched","frmEmployeeContact","group","phoneWork","phonePersonal","faxNum","altContactName","altContactPhone","push","valueChanges","subscribe","value","ngOnInit","details","controls","setTimeout","patchValue","checkFormMode","disable","enable","writeValue","reset","registerOnChange","fn","registerOnTouched","validate","_","valid","ngOnDestroy","forEach","s","unsubscribe","i0","ɵɵdirectiveInject","i1","UntypedFormBuilder","_2","selectors","inputs","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","EmployeeContactComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵproperty"],"sources":["/home/admin7/Documents/fms_frontend/src/app/ui/employee/widgets/employee-contact/employee-contact.component.ts","/home/admin7/Documents/fms_frontend/src/app/ui/employee/widgets/employee-contact/employee-contact.component.html"],"sourcesContent":["import { Component, forwardRef, Input, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { EmployeeContact } from '../../model/employee-contact.model';\n\n@Component({\n  selector: 'app-employee-contact',\n  templateUrl: './employee-contact.component.html',\n  styleUrls: ['./employee-contact.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => EmployeeContactComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => EmployeeContactComponent),\n      multi: true\n    }\n  ]\n})\nexport class EmployeeContactComponent implements ControlValueAccessor, OnDestroy {\n\n  frmEmployeeContact: UntypedFormGroup;\n  subscriptions: Subscription[] = [];\n  @Input() isNew: boolean = false;\n  @Input() isEdit:boolean = false;\n\n  constructor(\n    private formBuilder: UntypedFormBuilder,\n  ) { \n    // this.currentDate = this.datePipe.transform(new Date(), \"yyyy/MM/dd hh:mm:ss\");\n    /// Start Of Building Form \n    this.frmEmployeeContact = this.formBuilder.group({\n\n      // phoneHome: [''],\n      phoneWork: [''],\n      phonePersonal: [''],\n      faxNum: [''],\n      altContactName: [''],\n      altContactPhone: [''],\n\n    });\n\n    // End Of Building Form\n    this.subscriptions.push(\n      // any time the inner form changes update the parent of any change\n      this.frmEmployeeContact.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      })\n    );\n  }\n  \n\n  ngOnInit(): void {\n  }\n\n  /// Start Preparing Entered Data Model\n  get value(): EmployeeContact {\n    const details: EmployeeContact = {\n      // phoneHome: this.frmEmployeeContact.controls.phoneHome.value,\n      phoneWork: this.frmEmployeeContact.controls.phoneWork.value,\n      phonePersonal: this.frmEmployeeContact.controls.phonePersonal.value,\n      faxNum: this.frmEmployeeContact.controls.faxNum.value,\n      altContactName: this.frmEmployeeContact.controls.altContactName.value,\n      altContactPhone: this.frmEmployeeContact.controls.altContactPhone.value,\n    }\n    return details;\n  }\n\n  set value(value: EmployeeContact) {\n    setTimeout(() => {\n      this.frmEmployeeContact.patchValue({\n        // phoneHome: value.phoneHome,\n        phoneWork: value.phoneWork,\n        phonePersonal: value.phonePersonal,\n        faxNum: value.faxNum,\n        altContactName: value.altContactName,\n        altContactPhone: value.altContactPhone,\n        \n      });\n      this.checkFormMode()\n      this.onChange(value);\n      this.onTouched();\n    }, 0);\n  }\n  checkFormMode(){\n    if (this.isEdit == false){\n      this.frmEmployeeContact.disable()\n    }else{\n      this.frmEmployeeContact.enable()\n    }\n  }\n  writeValue(value: any) {\n\n    if (value) {\n      this.value = value;\n    }\n    if (value === null) {\n      this.frmEmployeeContact.reset();\n      this.checkFormMode();\n    }\n  }\n\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  // communicate the inner form validation to the parent form\n  validate(_: UntypedFormControl) {\n    return this.frmEmployeeContact.valid ? null : { frmEmployeeContact: { valid: false } };\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n}\n","<form nz-form [formGroup]=\"frmEmployeeContact\">\n        <table width=\"100%\">\n                <tr>\n                        <td style=\"width: 50%;\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable'>Personal Phone Number</label>\n                                        <input type=\"text\" class=\"form-control\" NumbersOnly name=\"phonePersonal\" formControlName=\"phonePersonal\" maxlength=\"16\"\n                                                appTrimInput>\n                                </div>\n                        </td>\n                        <td style=\"width: 50%;\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable'>Work Number</label>\n                                        <input type=\"text\" class=\"form-control\" NumbersOnly name=\"phoneWork\" formControlName=\"phoneWork\" maxlength=\"16\"\n                                                appTrimInput>\n                                </div>\n                        </td>\n\n                </tr>\n                <tr>\n                        <td style=\"width: 50%;\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable'>Fax Number</label>\n                                        <input type=\"text\" class=\"form-control\" name=\"faxNum\" formControlName=\"faxNum\" maxlength=\"16\" appTrimInput>\n                                </div>\n                        </td>\n\n                        <td style=\"width: 50%;\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable'>Preferred Contact Name</label>\n                                        <input type=\"text\" class=\"form-control\" name=\"altContactName\" formControlName=\"altContactName\" maxlength=\"255\"\n                                                appTrimInput>\n                                </div>\n                        </td>\n                        \n                </tr>\n                <tr>\n                        <td style=\"width: 50%;\">\n                                <div class=\"input-label-custom \">\n                                        <label class='form-field-lable'>Alternate Contact Number</label>\n                                        <input type=\"text\" class=\"form-control\" NumbersOnly name=\"altContactPhone\" formControlName=\"altContactPhone\"\n                                                maxlength=\"16\" appTrimInput>\n                                </div>\n                        </td>\n                        <td style=\"width: 50%;\"></td>\n                </tr>\n        </table>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}