{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UtilConstant } from 'src/common/UtilConstant';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { MessageService } from 'primeng/api';\nimport { BreakpointService } from 'src/app/services/breakpoint.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/link-plan-to-location.services\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"../providers/location-plan-providers\";\nimport * as i4 from \"../providers/link-multiple-location-providers\";\nimport * as i5 from \"src/app/services/breakpoint.service\";\nimport * as i6 from \"primeng/table\";\nimport * as i7 from \"primeng/button\";\nimport * as i8 from \"primeng/toast\";\nimport * as i9 from \"primeng/panel\";\nimport * as i10 from \"primeng/confirmdialog\";\nimport * as i11 from \"primeng/paginator\";\nfunction LocationPlanListComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function LocationPlanListComponent_ng_template_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onAdd());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LocationPlanListComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"th\", 13);\n    i0.ɵɵelementStart(2, \"th\", 14)(3, \"div\", 15)(4, \"div\", 16)(5, \"p\", 17);\n    i0.ɵɵtext(6, \"Building \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 18);\n    i0.ɵɵelement(8, \"p-sortIcon\", 19)(9, \"p-columnFilter\", 20);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"th\", 21)(11, \"div\", 15)(12, \"div\", 16)(13, \"p\", 17);\n    i0.ɵɵtext(14, \"Floor \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 18);\n    i0.ɵɵelement(16, \"p-sortIcon\", 22)(17, \"p-columnFilter\", 23);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"th\", 24)(19, \"div\", 15)(20, \"div\", 16)(21, \"p\", 17);\n    i0.ɵɵtext(22, \"Room \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\", 18);\n    i0.ɵɵelement(24, \"p-sortIcon\", 25)(25, \"p-columnFilter\", 26);\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction LocationPlanListComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 27)(1, \"td\", 13)(2, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function LocationPlanListComponent_ng_template_5_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const plan_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.openEditItem(plan_r7));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function LocationPlanListComponent_ng_template_5_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const plan_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onDelete(plan_r7.planLocEqId));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const plan_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"pSelectableRow\", plan_r7);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(plan_r7.bl.blCode + \" - \" + plan_r7.bl.blName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(plan_r7.flId != null ? plan_r7.fl.flCode + \" - \" + plan_r7.fl.flName : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(plan_r7.rmId != null ? plan_r7.rm.rmCode + \" - \" + plan_r7.rm.rmName : \"\");\n  }\n}\nfunction LocationPlanListComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \" No records found \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"colspan\", 4);\n  }\n}\nconst _c0 = function () {\n  return [25, 50, 100];\n};\nexport let LocationPlanListComponent = /*#__PURE__*/(() => {\n  class LocationPlanListComponent {\n    constructor(linkPlanToLocationOrAssetSrv, messageService, confirmationService, locationPlanDialogueProvider, linkMultipleLocationDialogueProvider, bps) {\n      this.linkPlanToLocationOrAssetSrv = linkPlanToLocationOrAssetSrv;\n      this.messageService = messageService;\n      this.confirmationService = confirmationService;\n      this.locationPlanDialogueProvider = locationPlanDialogueProvider;\n      this.linkMultipleLocationDialogueProvider = linkMultipleLocationDialogueProvider;\n      this.bps = bps;\n      this.rowCount = UtilConstant.ROW_COUNT;\n      this.planLocData = [];\n      this.planId = 0;\n      this.header = \"\";\n      this.parentFun = new EventEmitter();\n      this.useTabletProtrait = false;\n      this.totalElements = 0;\n      this.paginationObj = {\n        pageNo: 0,\n        pageSize: this.rowCount,\n        sortBy: [\"planLocEqId\"],\n        sortOrder: \"ASC\"\n      };\n      this.filterCriteria = {};\n      this.isFiltered = false;\n    }\n    ngOnInit() {\n      this.bps.register(this);\n    }\n    notify() {\n      this.useTabletProtrait = BreakpointService.useTabletProtrait;\n      if (this.useTabletProtrait) {\n        this.rowCount = UtilConstant.ROW_COUNT_FIVE_LIMIT;\n      } else {\n        this.rowCount = UtilConstant.ROW_COUNT;\n      }\n    }\n    loadLocationPlans(planId) {\n      this.planId = planId;\n      this.planLocData = [];\n      let data = {\n        planId: planId,\n        filterDto: {\n          paginationDTO: this.paginationObj,\n          filterCriteria: this.filterCriteria\n        }\n      };\n      this.linkPlanToLocationOrAssetSrv.getLocPlansByPlanIdPaginated(data).subscribe(res => {\n        if (res) {\n          this.isFiltered = false;\n          this.planLocData = res.content ? res.content : [];\n          this.totalElements = res.totalElements ? res.totalElements : 0;\n        }\n      });\n    }\n    onAdd() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = false;\n      dialogConfig.width = '1000px';\n      dialogConfig.data = {\n        planId: this.planId,\n        isEdit: false,\n        newRecord: true,\n        planLocEqData: null\n      };\n      this.linkMultipleLocationDialogueProvider.openDialog(dialogConfig);\n      this.linkMultipleLocationDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'planSave',\n            severity: 'success',\n            summary: 'Locations linked successfully.',\n            detail: 'Locations linked successfully.'\n          });\n          this.loadLocationPlans(this.planId);\n        }\n      });\n    }\n    openEditItem(planLocEqData) {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '350px';\n      dialogConfig.data = {\n        planLocEqId: planLocEqData.planLocEqId,\n        planId: this.planId,\n        isEdit: true,\n        newRecord: false,\n        planLocEqData: planLocEqData\n      };\n      this.locationPlanDialogueProvider.openDialog(dialogConfig);\n      this.locationPlanDialogueProvider.onDialogueClosed.subscribe(result => {\n        this.messageService.clear();\n        if (result) {\n          this.messageService.add({\n            key: 'planSave',\n            severity: 'success',\n            summary: 'Location linked successfully',\n            detail: 'Record linked successfully'\n          });\n          this.loadLocationPlans(this.planId);\n        }\n      });\n    }\n    onDelete(id) {\n      this.confirmationService.confirm({\n        message: 'Are you sure that you want to delete ?',\n        header: 'Confirmation',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          this.delete(id);\n        },\n        key: \"planListGrid\"\n      });\n    }\n    delete(id) {\n      this.linkPlanToLocationOrAssetSrv.deleteById(id).subscribe(res => {\n        this.messageService.clear();\n        if (res.code == 200) {\n          this.messageService.add({\n            key: 'planSave',\n            severity: 'success',\n            summary: 'Record deleted successfully',\n            detail: 'Record deleted successfully'\n          });\n          this.loadLocationPlans(this.planId);\n        } else {\n          this.messageService.add({\n            key: 'planDelete',\n            severity: 'warn',\n            summary: 'Warning',\n            detail: 'The Plan-Location  is associated with Plan Schedules.',\n            sticky: true\n          });\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.bps.unregister(this);\n    }\n    onPageChange(event) {\n      const pageNo = event.first ? event.first / event.rows : 0;\n      const pageSize = event.rows;\n      this.paginationObj.pageNo = pageNo;\n      this.paginationObj.pageSize = pageSize;\n      this.loadLocationPlans(this.planId);\n    }\n    onInnerFilter(event) {\n      if (this.isFiltered) {\n        this.filterCriteria = {};\n        Object.keys(event.filters).forEach(field => {\n          const filterValue = event.filters[field][0].value;\n          const matchMode = event.filters[field][0].matchMode;\n          if (filterValue !== undefined && filterValue !== null && filterValue !== '') {\n            this.filterCriteria = {\n              fieldName: field,\n              value: filterValue,\n              matchMode: matchMode\n            };\n          }\n        });\n        this.loadLocationPlans(this.planId);\n      }\n      this.isFiltered = true;\n    }\n    static #_ = this.ɵfac = function LocationPlanListComponent_Factory(t) {\n      return new (t || LocationPlanListComponent)(i0.ɵɵdirectiveInject(i1.LinkPlanToLocationOrAssetService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i2.ConfirmationService), i0.ɵɵdirectiveInject(i3.LocationPlanDialogueProvider), i0.ɵɵdirectiveInject(i4.LinkMultipleLocationDialogueProvider), i0.ɵɵdirectiveInject(i5.BreakpointService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LocationPlanListComponent,\n      selectors: [[\"app-location-plan-list\"]],\n      outputs: {\n        parentFun: \"parentFun\"\n      },\n      features: [i0.ɵɵProvidersFeature([MessageService])],\n      decls: 12,\n      vars: 10,\n      consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [\"styleClass\", \"p-datatable-responsive-demo p-datatable-gridlines\", \"scrollDirection\", \"both\", \"scrollHeight\", \"600\", 3, \"value\", \"paginator\", \"rowHover\", \"scrollable\", \"onFilter\"], [\"dt1\", \"\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"pTemplate\", \"emptymessage\"], [1, \"paginator\"], [\"currentPageReportTemplate\", \"Showing {first} to {last} of {totalRecords} entries\", 3, \"rows\", \"totalRecords\", \"showCurrentPageReport\", \"rowsPerPageOptions\", \"onPageChange\"], [\"key\", \"planSave\", \"position\", \"top-right\"], [\"key\", \"planDelete\", \"position\", \"top-center\"], [\"key\", \"planListGrid\", \"header\", \"Confirmation\", \"icon\", \"pi pi-exclamation-triangle\"], [\"pButton\", \"\", \"label\", \"Link\", \"icon\", \"pi pi-plus\", 3, \"click\"], [2, \"width\", \"8rem\"], [\"pSortableColumn\", \"bl.blCode\"], [1, \"grid-header-column\"], [1, \"grid-header-label\"], [1, \"grid-label-paragraph\"], [1, \"grid-sort-icon\"], [\"field\", \"bl.blCode\"], [\"type\", \"text\", \"field\", \"bl.blCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"fl.flCode\"], [\"field\", \"fl.flCode\"], [\"type\", \"text\", \"field\", \"fl.flCode\", \"display\", \"menu\"], [\"pSortableColumn\", \"rm.rmCode\"], [\"field\", \"rm.rmCode\"], [\"type\", \"text\", \"field\", \"rm.rmCode\", \"display\", \"menu\"], [3, \"pSelectableRow\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-pencil\", \"type\", \"button\", 1, \"p-button-text\", 3, \"click\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-times\", \"type\", \"button\", 1, \"p-button-text\", \"pull-right\", 2, \"font-size\", \"5rem\", \"color\", \"red\", 3, \"click\"]],\n      template: function LocationPlanListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-panel\", 0);\n          i0.ɵɵtemplate(1, LocationPlanListComponent_ng_template_1_Template, 1, 0, \"ng-template\", 1);\n          i0.ɵɵelementStart(2, \"p-table\", 2, 3);\n          i0.ɵɵlistener(\"onFilter\", function LocationPlanListComponent_Template_p_table_onFilter_2_listener($event) {\n            return ctx.onInnerFilter($event);\n          });\n          i0.ɵɵtemplate(4, LocationPlanListComponent_ng_template_4_Template, 26, 0, \"ng-template\", 4);\n          i0.ɵɵtemplate(5, LocationPlanListComponent_ng_template_5_Template, 10, 4, \"ng-template\", 5);\n          i0.ɵɵtemplate(6, LocationPlanListComponent_ng_template_6_Template, 3, 1, \"ng-template\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 7)(8, \"p-paginator\", 8);\n          i0.ɵɵlistener(\"onPageChange\", function LocationPlanListComponent_Template_p_paginator_onPageChange_8_listener($event) {\n            return ctx.onPageChange($event);\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(9, \"p-toast\", 9)(10, \"p-toast\", 10)(11, \"p-confirmDialog\", 11);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"header\", ctx.header);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.planLocData)(\"paginator\", false)(\"rowHover\", false)(\"scrollable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"rows\", ctx.rowCount)(\"totalRecords\", ctx.totalElements)(\"showCurrentPageReport\", true)(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(9, _c0));\n        }\n      },\n      dependencies: [i2.PrimeTemplate, i6.Table, i6.SortableColumn, i6.SelectableRow, i6.SortIcon, i6.ColumnFilter, i7.ButtonDirective, i8.Toast, i9.Panel, i10.ConfirmDialog, i11.Paginator],\n      styles: [\".ellipsis[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[_nghost-%COMP%]     .p-datatable-table{table-layout:fixed}\"]\n    });\n  }\n  return LocationPlanListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}