{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/data.service\";\nexport class LinkPlanToLocationOrAssetService {\n  constructor(linkPlanToLocationorAssetService) {\n    this.linkPlanToLocationorAssetService = linkPlanToLocationorAssetService;\n  }\n  getLinkedPlansForLocation(data) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getLinked', data);\n  }\n  getUnLinkedPlansForLocation(data) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getUnLinked', data);\n  }\n  save(data) {\n    return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'save', data);\n  }\n  delete(data) {\n    return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'delete', data);\n  }\n  getAll() {\n    return this.linkPlanToLocationorAssetService.getAll('linkPlanToLocation', 'getAll');\n  }\n  getAllPaginated(data) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getAllPaginated', data);\n  }\n  getLocPlansByPlanId(planId) {\n    return this.linkPlanToLocationorAssetService.getAllById('linkPlanToLocation', 'getAllByPlanId', planId);\n  }\n  getLocPlansByPlanIdPaginated(data) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getAllByPlanIdPaginated', data);\n  }\n  checkExists(data) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'checkExists', data);\n  }\n  deleteById(id) {\n    return this.linkPlanToLocationorAssetService.getSingleById('linkPlanToLocation', 'daleteById', id);\n  }\n  static #_ = this.ɵfac = function LinkPlanToLocationOrAssetService_Factory(t) {\n    return new (t || LinkPlanToLocationOrAssetService)(i0.ɵɵinject(i1.DataService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LinkPlanToLocationOrAssetService,\n    factory: LinkPlanToLocationOrAssetService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LinkPlanToLocationOrAssetService","constructor","linkPlanToLocationorAssetService","getLinkedPlansForLocation","data","search","getUnLinkedPlansForLocation","save","add","delete","getAll","getAllPaginated","getLocPlansByPlanId","planId","getAllById","getLocPlansByPlanIdPaginated","checkExists","deleteById","id","getSingleById","_","i0","ɵɵinject","i1","DataService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Manav Gupta\\Downloads\\fms\\fms\\frontend\\fms_frontend\\src\\app\\ui\\link-plan-to-location\\services\\link-plan-to-location.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataService } from '../../../services/data.service';\nimport { Resources } from '../../resources/model/resourcesDTO';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LinkPlanToLocationOrAssetService {\n\n  constructor(\n    private linkPlanToLocationorAssetService: DataService<any>,\n\n  ) { }\n\n  public getLinkedPlansForLocation(data:any) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getLinked',data);\n  }\n\n  public getUnLinkedPlansForLocation(data:any) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'getUnLinked',data);\n  }\n  \n  public save(data: any): Observable<any> {\n    return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'save', data);\n  }\n\n  public delete(data: any) {\n    \n    return this.linkPlanToLocationorAssetService.add('linkPlanToLocationOrAsset', 'delete', data);\n  }\n\n  public getAll() {\n    return this.linkPlanToLocationorAssetService.getAll('linkPlanToLocation','getAll')\n  }\n\n  public getAllPaginated(data:any) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation','getAllPaginated',data)\n  }\n\n  public getLocPlansByPlanId(planId:any) {\n    return this.linkPlanToLocationorAssetService.getAllById('linkPlanToLocation','getAllByPlanId',planId)\n  }\n\n  public getLocPlansByPlanIdPaginated(data:any) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation','getAllByPlanIdPaginated',data)\n  }\n\n  public checkExists(data:any) {\n    return this.linkPlanToLocationorAssetService.search('linkPlanToLocation', 'checkExists',data);\n  }\n\n  public deleteById(id:any) {\n    return this.linkPlanToLocationorAssetService.getSingleById('linkPlanToLocation', 'daleteById',id)\n  }\n \n}\n"],"mappings":";;AAUA,OAAM,MAAOA,gCAAgC;EAE3CC,YACUC,gCAAkD;IAAlD,KAAAA,gCAAgC,GAAhCA,gCAAgC;EAEtC;EAEGC,yBAAyBA,CAACC,IAAQ;IACvC,OAAO,IAAI,CAACF,gCAAgC,CAACG,MAAM,CAAC,oBAAoB,EAAE,WAAW,EAACD,IAAI,CAAC;EAC7F;EAEOE,2BAA2BA,CAACF,IAAQ;IACzC,OAAO,IAAI,CAACF,gCAAgC,CAACG,MAAM,CAAC,oBAAoB,EAAE,aAAa,EAACD,IAAI,CAAC;EAC/F;EAEOG,IAAIA,CAACH,IAAS;IACnB,OAAO,IAAI,CAACF,gCAAgC,CAACM,GAAG,CAAC,2BAA2B,EAAE,MAAM,EAAEJ,IAAI,CAAC;EAC7F;EAEOK,MAAMA,CAACL,IAAS;IAErB,OAAO,IAAI,CAACF,gCAAgC,CAACM,GAAG,CAAC,2BAA2B,EAAE,QAAQ,EAAEJ,IAAI,CAAC;EAC/F;EAEOM,MAAMA,CAAA;IACX,OAAO,IAAI,CAACR,gCAAgC,CAACQ,MAAM,CAAC,oBAAoB,EAAC,QAAQ,CAAC;EACpF;EAEOC,eAAeA,CAACP,IAAQ;IAC7B,OAAO,IAAI,CAACF,gCAAgC,CAACG,MAAM,CAAC,oBAAoB,EAAC,iBAAiB,EAACD,IAAI,CAAC;EAClG;EAEOQ,mBAAmBA,CAACC,MAAU;IACnC,OAAO,IAAI,CAACX,gCAAgC,CAACY,UAAU,CAAC,oBAAoB,EAAC,gBAAgB,EAACD,MAAM,CAAC;EACvG;EAEOE,4BAA4BA,CAACX,IAAQ;IAC1C,OAAO,IAAI,CAACF,gCAAgC,CAACG,MAAM,CAAC,oBAAoB,EAAC,yBAAyB,EAACD,IAAI,CAAC;EAC1G;EAEOY,WAAWA,CAACZ,IAAQ;IACzB,OAAO,IAAI,CAACF,gCAAgC,CAACG,MAAM,CAAC,oBAAoB,EAAE,aAAa,EAACD,IAAI,CAAC;EAC/F;EAEOa,UAAUA,CAACC,EAAM;IACtB,OAAO,IAAI,CAAChB,gCAAgC,CAACiB,aAAa,CAAC,oBAAoB,EAAE,YAAY,EAACD,EAAE,CAAC;EACnG;EAAC,QAAAE,CAAA,G;qBA9CUpB,gCAAgC,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhCzB,gCAAgC;IAAA0B,OAAA,EAAhC1B,gCAAgC,CAAA2B,IAAA;IAAAC,UAAA,EAF/B;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}