{"ast":null,"code":"import { forwardRef } from '@angular/core';\nimport { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { VaildationError } from 'src/app/model/vaildationerror.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"../../services/messages.service\";\nimport * as i4 from \"@ng-select/ng-select\";\nimport * as i5 from \"ng-zorro-antd/table\";\nimport * as i6 from \"ng-zorro-antd/input\";\nimport * as i7 from \"../../../../directive/directive/trim-input.directive\";\nexport let AddMessagesComponent = /*#__PURE__*/(() => {\n  class AddMessagesComponent {\n    constructor(formBuilder, authSrv, msgSrv) {\n      this.formBuilder = formBuilder;\n      this.authSrv = authSrv;\n      this.msgSrv = msgSrv;\n      this.subscriptions = [];\n      this.newRecord = true;\n      this.isNew = false;\n      this.processList = [];\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.messagesFormPanel = this.formBuilder.group({\n        msgId: [null, [Validators.required]],\n        msgCode: ['', [Validators.required]],\n        processId: [null, [Validators.required]],\n        msgText: ['', [Validators.required]]\n      });\n      this.subscriptions.push(this.messagesFormPanel.valueChanges.subscribe(value => {\n        this.onChange(value);\n        this.onTouched();\n      }));\n    }\n    ngOnInit() {\n      this.getAllProcesses();\n    }\n    // checkMsgIdValidator(): ValidatorFn {\n    //   return (control: AbstractControl): { [key: string]: boolean } | null => {\n    //     if (control.value !== undefined && control.value != null && control.value.length > 1 && this.isNew) {\n    //       this.messagesFormPanel.controls['msgId'].setErrors(null);\n    //       this.messagesFormPanel.clearAsyncValidators();\n    //       this.messagesFormPanel.updateValueAndValidity();\n    //       this.msgSrv.checkMsgIdExists(control.value).subscribe((res: any) => {\n    //         if (res && res.text == \"true\") {\n    //           this.messagesFormPanel.controls['msgId'].setErrors({ 'incorrect': true });\n    //           this.messagesFormPanel.updateValueAndValidity();\n    //           return { 'incorrect': true };\n    //         }\n    //         else {\n    //           return null;\n    //         }\n    //       });\n    //       return null;\n    //     }\n    //     return null;\n    //   };\n    // }\n    getAllProcesses() {\n      this.msgSrv.getAllProcesses().subscribe(res => {\n        this.processList = res;\n        this.processList.unshift({\n          processId: null,\n          processCode: \"Make a selection\"\n        });\n      });\n    }\n    isValid() {\n      return this.getValidationErrors().length === 0;\n    }\n    getValidationErrors() {\n      const validationErros = [];\n      Object.keys(this.messagesFormPanel.controls).forEach(key => {\n        let field = this.messagesFormPanel.get(key);\n        const controlErrors = field != null ? field.errors : null;\n        if (controlErrors != null) {\n          Object.keys(controlErrors).forEach(keyError => {\n            validationErros.push(new VaildationError(key, keyError, controlErrors[keyError]));\n          });\n        }\n      });\n      return validationErros;\n    }\n    get value() {\n      const records = {\n        processId: this.messagesFormPanel.controls.processId.value,\n        msgId: this.messagesFormPanel.controls.msgId.value,\n        msgText: this.messagesFormPanel.controls.msgText.value,\n        msgCode: this.messagesFormPanel.controls.msgCode.value\n      };\n      return records;\n    }\n    set value(value) {\n      setTimeout(() => {\n        this.messagesFormPanel.patchValue({\n          processId: value.processId,\n          msgId: value.msgId,\n          msgText: value.msgText,\n          msgCode: value.msgCode\n        });\n        this.onChange(value);\n        this.onTouched();\n      }, 0);\n    }\n    writeValue(value) {\n      if (value) {\n        this.value = value;\n      }\n      if (value === null) {\n        this.messagesFormPanel.reset();\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    validate(_) {\n      return this.messagesFormPanel.valid ? null : {\n        messagesFormPanel: {\n          valid: false\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    static #_ = this.ɵfac = function AddMessagesComponent_Factory(t) {\n      return new (t || AddMessagesComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.MessagesService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddMessagesComponent,\n      selectors: [[\"app-add-messages\"]],\n      inputs: {\n        isNew: \"isNew\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => AddMessagesComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => AddMessagesComponent),\n        multi: true\n      }])],\n      decls: 20,\n      vars: 5,\n      consts: [[3, \"formGroup\"], [\"width\", \"100%\"], [2, \"width\", \"100%\"], [1, \"input-label-custom\"], [1, \"form-field-lable\", \"control-label\"], [\"appendTo\", \"body\", \"formControlName\", \"processId\", \"bindLabel\", \"processCode\", \"bindValue\", \"processId\", \"placeholder\", \"Make a selection\", 1, \"ng-select-dropdown\", 3, \"clearable\", \"items\", \"searchable\"], [\"type\", \"text\", \"name\", \"msgCode\", \"formControlName\", \"msgCode\", \"maxlength\", \"128\", \"appTrimInput\", \"\", 1, \"form-control\", 3, \"readonly\"], [\"colspan\", \"2\", 2, \"width\", \"100%\"], [\"name\", \"msgText\", \"formControlName\", \"msgText\", \"rows\", \"2\", \"nz-input\", \"\", \"maxlength\", \"4000\", \"appTrimInput\", \"\", 1, \"form-control\", \"note-border\"]],\n      template: function AddMessagesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1)(2, \"tr\")(3, \"td\", 2)(4, \"div\", 3)(5, \"label\", 4);\n          i0.ɵɵtext(6, \"Process Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"ng-select\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"tr\")(9, \"td\", 2)(10, \"div\", 3)(11, \"label\", 4);\n          i0.ɵɵtext(12, \"Message Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 6);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"tr\")(15, \"td\", 7)(16, \"div\", 3)(17, \"label\", 4);\n          i0.ɵɵtext(18, \"Message Text\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"textarea\", 8);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.messagesFormPanel);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"clearable\", false)(\"items\", ctx.processList)(\"searchable\", true);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"readonly\", !ctx.isNew);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i4.NgSelectComponent, i5.NzTableCellDirective, i5.NzTrDirective, i6.NzInputDirective, i7.TrimInputDirective]\n    });\n  }\n  return AddMessagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}